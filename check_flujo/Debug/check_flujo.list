
check_flujo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000300c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800310c  0800310c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800310c  0800310c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800310c  0800310c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000004  08003118  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000060  200000a8  08003118  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007610  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001628  00000000  00000000  0002763c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  00028c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000658  00000000  00000000  00029388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000110ce  00000000  00000000  000299e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f6d  00000000  00000000  0003aaae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000696ce  00000000  00000000  00041a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ab0e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000189c  00000000  00000000  000ab164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030b4 	.word	0x080030b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080030b4 	.word	0x080030b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CASES_CHOICE>:
//		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//	} /* USER CODE END EXTI4_15_IRQn 0 */
//	HAL_GPIO_EXTI_IRQHandler(FREQ_LED_Pin);
//}
void CASES_CHOICE(char* buff)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	unsigned int instruction = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
	if ((SUM_COUNTER == 0) || (time_flag == TRUE)) instruction = 1;
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <CASES_CHOICE+0x64>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d003      	beq.n	800023e <CASES_CHOICE+0x1e>
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <CASES_CHOICE+0x68>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d101      	bne.n	8000242 <CASES_CHOICE+0x22>
 800023e:	2301      	movs	r3, #1
 8000240:	60fb      	str	r3, [r7, #12]
    switch (instruction)
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d018      	beq.n	800027a <CASES_CHOICE+0x5a>
 8000248:	2b01      	cmp	r3, #1
 800024a:	d000      	beq.n	800024e <CASES_CHOICE+0x2e>
			BUILD_DATA_TO_SEND(buff);
			TRANSMIT_WSSFM10R2AT();
			SUM_DEC=0;
			break;
	}
}
 800024c:	e016      	b.n	800027c <CASES_CHOICE+0x5c>
			if (SUM_COUNTER==0){
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <CASES_CHOICE+0x64>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	2b00      	cmp	r3, #0
 8000256:	d103      	bne.n	8000260 <CASES_CHOICE+0x40>
			   SUM_COUNTER = SUM_THRD;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <CASES_CHOICE+0x64>)
 800025a:	2264      	movs	r2, #100	; 0x64
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	e002      	b.n	8000266 <CASES_CHOICE+0x46>
			   time_flag = FALSE;
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <CASES_CHOICE+0x68>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
			BUILD_DATA_TO_SEND(buff);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	0018      	movs	r0, r3
 800026a:	f000 f8fd 	bl	8000468 <BUILD_DATA_TO_SEND>
			TRANSMIT_WSSFM10R2AT();
 800026e:	f000 f827 	bl	80002c0 <TRANSMIT_WSSFM10R2AT>
			SUM_DEC=0;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <CASES_CHOICE+0x6c>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
			break;
 8000278:	e000      	b.n	800027c <CASES_CHOICE+0x5c>
			break;
 800027a:	46c0      	nop			; (mov r8, r8)
}
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	46bd      	mov	sp, r7
 8000280:	b004      	add	sp, #16
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000021 	.word	0x20000021
 8000288:	20000022 	.word	0x20000022
 800028c:	20000020 	.word	0x20000020

08000290 <COUNTER_CONSUMER>:
void COUNTER_CONSUMER(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	SUM_DEC++;
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <COUNTER_CONSUMER+0x28>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	3301      	adds	r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <COUNTER_CONSUMER+0x28>)
 80002a0:	701a      	strb	r2, [r3, #0]
	SUM_COUNTER--;
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <COUNTER_CONSUMER+0x2c>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <COUNTER_CONSUMER+0x2c>)
 80002ae:	701a      	strb	r2, [r3, #0]
}
 80002b0:	46c0      	nop			; (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000020 	.word	0x20000020
 80002bc:	20000021 	.word	0x20000021

080002c0 <TRANSMIT_WSSFM10R2AT>:
void TRANSMIT_WSSFM10R2AT(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
	for(int i=0;i<4;i++){
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e00b      	b.n	80002e4 <TRANSMIT_WSSFM10R2AT+0x24>
		HAL_GPIO_TogglePin(RST_WISOL_GPIO_Port, RST_WISOL_Pin);
 80002cc:	23a0      	movs	r3, #160	; 0xa0
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 fbad 	bl	8001a32 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80002d8:	20c8      	movs	r0, #200	; 0xc8
 80002da:	f000 fcdb 	bl	8000c94 <HAL_Delay>
	for(int i=0;i<4;i++){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	ddf0      	ble.n	80002cc <TRANSMIT_WSSFM10R2AT+0xc>
	}
}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b002      	add	sp, #8
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <CONFIG_CHANNEL_ADC>:
uint32_t CONFIG_CHANNEL_ADC(uint32_t channel){
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b087      	sub	sp, #28
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = channel;
 80002fc:	240c      	movs	r4, #12
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000304:	193b      	adds	r3, r7, r4
 8000306:	2280      	movs	r2, #128	; 0x80
 8000308:	0152      	lsls	r2, r2, #5
 800030a:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800030c:	193a      	adds	r2, r7, r4
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <CONFIG_CHANNEL_ADC+0x6c>)
 8000310:	0011      	movs	r1, r2
 8000312:	0018      	movs	r0, r3
 8000314:	f000 ff86 	bl	8001224 <HAL_ADC_ConfigChannel>
	uint32_t raw = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
	HAL_ADC_Start(&hadc);
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <CONFIG_CHANNEL_ADC+0x6c>)
 800031e:	0018      	movs	r0, r3
 8000320:	f000 fe4a 	bl	8000fb8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <CONFIG_CHANNEL_ADC+0x6c>)
 8000326:	2164      	movs	r1, #100	; 0x64
 8000328:	0018      	movs	r0, r3
 800032a:	f000 fed9 	bl	80010e0 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc);
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <CONFIG_CHANNEL_ADC+0x6c>)
 8000330:	0018      	movs	r0, r3
 8000332:	f000 ff6b 	bl	800120c <HAL_ADC_GetValue>
 8000336:	0003      	movs	r3, r0
 8000338:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(&hadc);
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <CONFIG_CHANNEL_ADC+0x6c>)
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fe8f 	bl	8001060 <HAL_ADC_Stop>
	sConfig.Rank = ADC_RANK_NONE;
 8000342:	193b      	adds	r3, r7, r4
 8000344:	4a07      	ldr	r2, [pc, #28]	; (8000364 <CONFIG_CHANNEL_ADC+0x70>)
 8000346:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000348:	193a      	adds	r2, r7, r4
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <CONFIG_CHANNEL_ADC+0x6c>)
 800034c:	0011      	movs	r1, r2
 800034e:	0018      	movs	r0, r3
 8000350:	f000 ff68 	bl	8001224 <HAL_ADC_ConfigChannel>
	return raw;
 8000354:	697b      	ldr	r3, [r7, #20]
}
 8000356:	0018      	movs	r0, r3
 8000358:	46bd      	mov	sp, r7
 800035a:	b007      	add	sp, #28
 800035c:	bd90      	pop	{r4, r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	20000048 	.word	0x20000048
 8000364:	00001001 	.word	0x00001001

08000368 <GET_MEAS_BAT>:
uint32_t GET_MEAS_BAT(void){
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
	uint32_t bat;
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6600/4095;
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <GET_MEAS_BAT+0x2c>)
 8000370:	0018      	movs	r0, r3
 8000372:	f7ff ffbf 	bl	80002f4 <CONFIG_CHANNEL_ADC>
 8000376:	0002      	movs	r2, r0
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <GET_MEAS_BAT+0x30>)
 800037a:	4353      	muls	r3, r2
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <GET_MEAS_BAT+0x34>)
 800037e:	0018      	movs	r0, r3
 8000380:	f7ff fec2 	bl	8000108 <__udivsi3>
 8000384:	0003      	movs	r3, r0
 8000386:	607b      	str	r3, [r7, #4]
	return bat;
 8000388:	687b      	ldr	r3, [r7, #4]
}
 800038a:	0018      	movs	r0, r3
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	04000002 	.word	0x04000002
 8000398:	000019c8 	.word	0x000019c8
 800039c:	00000fff 	.word	0x00000fff

080003a0 <DATA_ASSIGMENT>:
	HAL_GPIO_WritePin(RST_WISOL_GPIO_Port, RST_WISOL_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(RST_WISOL_GPIO_Port, RST_WISOL_Pin, GPIO_PIN_SET);
}
void DATA_ASSIGMENT(char* buff,uint16_t s,uint8_t loc,uint8_t t)
{
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	000c      	movs	r4, r1
 80003aa:	0010      	movs	r0, r2
 80003ac:	0019      	movs	r1, r3
 80003ae:	1cbb      	adds	r3, r7, #2
 80003b0:	1c22      	adds	r2, r4, #0
 80003b2:	801a      	strh	r2, [r3, #0]
 80003b4:	1c7b      	adds	r3, r7, #1
 80003b6:	1c02      	adds	r2, r0, #0
 80003b8:	701a      	strb	r2, [r3, #0]
 80003ba:	003b      	movs	r3, r7
 80003bc:	1c0a      	adds	r2, r1, #0
 80003be:	701a      	strb	r2, [r3, #0]
	uint8_t i;//Data position counter
	uint8_t j=0;//Conversion data position counter
 80003c0:	230e      	movs	r3, #14
 80003c2:	18fb      	adds	r3, r7, r3
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
	uint8_t dig_count=0;//Digit Counter
 80003c8:	230d      	movs	r3, #13
 80003ca:	18fb      	adds	r3, r7, r3
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
	char conversion_buff[5];
	memset(conversion_buff,'\0',5);
 80003d0:	2408      	movs	r4, #8
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	2205      	movs	r2, #5
 80003d6:	2100      	movs	r1, #0
 80003d8:	0018      	movs	r0, r3
 80003da:	f002 fe27 	bl	800302c <memset>
	itoa(s,conversion_buff,t);//Convert int S to String in HEX
 80003de:	1cbb      	adds	r3, r7, #2
 80003e0:	8818      	ldrh	r0, [r3, #0]
 80003e2:	003b      	movs	r3, r7
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	0019      	movs	r1, r3
 80003ea:	f002 fe1b 	bl	8003024 <itoa>
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 80003ee:	e005      	b.n	80003fc <DATA_ASSIGMENT+0x5c>
 80003f0:	220d      	movs	r2, #13
 80003f2:	18bb      	adds	r3, r7, r2
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	7812      	ldrb	r2, [r2, #0]
 80003f8:	3201      	adds	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
 80003fc:	230d      	movs	r3, #13
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2208      	movs	r2, #8
 8000404:	18ba      	adds	r2, r7, r2
 8000406:	5cd3      	ldrb	r3, [r2, r3]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1f1      	bne.n	80003f0 <DATA_ASSIGMENT+0x50>

	for (i = (loc-dig_count)+1; j < dig_count; ++i)//Data arrangement in output buffer
 800040c:	1c7a      	adds	r2, r7, #1
 800040e:	230d      	movs	r3, #13
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	b2da      	uxtb	r2, r3
 800041a:	230f      	movs	r3, #15
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	3201      	adds	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	e015      	b.n	8000450 <DATA_ASSIGMENT+0xb0>
	{
		 buff[i] = conversion_buff[j];
 8000424:	200e      	movs	r0, #14
 8000426:	183b      	adds	r3, r7, r0
 8000428:	781a      	ldrb	r2, [r3, #0]
 800042a:	240f      	movs	r4, #15
 800042c:	193b      	adds	r3, r7, r4
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	18cb      	adds	r3, r1, r3
 8000434:	2108      	movs	r1, #8
 8000436:	1879      	adds	r1, r7, r1
 8000438:	5c8a      	ldrb	r2, [r1, r2]
 800043a:	701a      	strb	r2, [r3, #0]
		 ++j;
 800043c:	183b      	adds	r3, r7, r0
 800043e:	183a      	adds	r2, r7, r0
 8000440:	7812      	ldrb	r2, [r2, #0]
 8000442:	3201      	adds	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
	for (i = (loc-dig_count)+1; j < dig_count; ++i)//Data arrangement in output buffer
 8000446:	193b      	adds	r3, r7, r4
 8000448:	193a      	adds	r2, r7, r4
 800044a:	7812      	ldrb	r2, [r2, #0]
 800044c:	3201      	adds	r2, #1
 800044e:	701a      	strb	r2, [r3, #0]
 8000450:	230e      	movs	r3, #14
 8000452:	18fa      	adds	r2, r7, r3
 8000454:	230d      	movs	r3, #13
 8000456:	18fb      	adds	r3, r7, r3
 8000458:	7812      	ldrb	r2, [r2, #0]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	d3e1      	bcc.n	8000424 <DATA_ASSIGMENT+0x84>
	}
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b005      	add	sp, #20
 8000466:	bd90      	pop	{r4, r7, pc}

08000468 <BUILD_DATA_TO_SEND>:
void BUILD_DATA_TO_SEND(char* buff)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	memset(buff,'\0',10); //Clear memory variable
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	220a      	movs	r2, #10
 8000474:	2100      	movs	r1, #0
 8000476:	0018      	movs	r0, r3
 8000478:	f002 fdd8 	bl	800302c <memset>
	DATA_ASSIGMENT(buff,GET_MEAS_BAT(),VOLT_LOCA,16);
 800047c:	f7ff ff74 	bl	8000368 <GET_MEAS_BAT>
 8000480:	0003      	movs	r3, r0
 8000482:	b299      	uxth	r1, r3
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	2310      	movs	r3, #16
 8000488:	2209      	movs	r2, #9
 800048a:	f7ff ff89 	bl	80003a0 <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,SUM_DEC,DATA_LOCA,16);
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <BUILD_DATA_TO_SEND+0x4c>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	b299      	uxth	r1, r3
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	2310      	movs	r3, #16
 800049a:	2205      	movs	r2, #5
 800049c:	f7ff ff80 	bl	80003a0 <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,version,VERSION_LOCA,16);
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2310      	movs	r3, #16
 80004a4:	2201      	movs	r2, #1
 80004a6:	2101      	movs	r1, #1
 80004a8:	f7ff ff7a 	bl	80003a0 <DATA_ASSIGMENT>
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000020 	.word	0x20000020

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t raw_bat;
  char data_buff[10];
  SUM_DEC=0;
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <main+0x50>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb86 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f824 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9a0 	bl	8000810 <MX_GPIO_Init>
  MX_ADC_Init();
 80004d0:	f000 f88c 	bl	80005ec <MX_ADC_Init>
  MX_RTC_Init();
 80004d4:	f000 f8fe 	bl	80006d4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  SUM_COUNTER=SUM_THRD;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <main+0x54>)
 80004da:	2264      	movs	r2, #100	; 0x64
 80004dc:	701a      	strb	r2, [r3, #0]
  HAL_Delay(2000);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fbd6 	bl	8000c94 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      /* USER CODE END WHILE */
  	  CASES_CHOICE(data_buff);
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	0018      	movs	r0, r3
 80004ec:	f7ff fe98 	bl	8000220 <CASES_CHOICE>
  	  HAL_Delay(5000);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <main+0x58>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fbce 	bl	8000c94 <HAL_Delay>
  	  memset(data_buff,'\0',10);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	220a      	movs	r2, #10
 80004fc:	2100      	movs	r1, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f002 fd94 	bl	800302c <memset>
  	  CASES_CHOICE(data_buff);
 8000504:	e7f0      	b.n	80004e8 <main+0x30>
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	20000020 	.word	0x20000020
 800050c:	20000021 	.word	0x20000021
 8000510:	00001388 	.word	0x00001388

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b099      	sub	sp, #100	; 0x64
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	242c      	movs	r4, #44	; 0x2c
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2334      	movs	r3, #52	; 0x34
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f002 fd81 	bl	800302c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052a:	2318      	movs	r3, #24
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	2314      	movs	r3, #20
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f002 fd79 	bl	800302c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2318      	movs	r3, #24
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f002 fd72 	bl	800302c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <SystemClock_Config+0xd4>)
 800054e:	401a      	ands	r2, r3
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <SystemClock_Config+0xd0>)
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	0109      	lsls	r1, r1, #4
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800055a:	0021      	movs	r1, r4
 800055c:	187b      	adds	r3, r7, r1
 800055e:	220a      	movs	r2, #10
 8000560:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2201      	movs	r2, #1
 8000566:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2210      	movs	r2, #16
 800056c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	187b      	adds	r3, r7, r1
 800057c:	0018      	movs	r0, r3
 800057e:	f001 fa91 	bl	8001aa4 <HAL_RCC_OscConfig>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000586:	f000 f9ef 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	2118      	movs	r1, #24
 800058c:	187b      	adds	r3, r7, r1
 800058e:	220f      	movs	r2, #15
 8000590:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2201      	movs	r2, #1
 8000596:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	22e0      	movs	r2, #224	; 0xe0
 80005a8:	00d2      	lsls	r2, r2, #3
 80005aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2100      	movs	r1, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fdf1 	bl	8002198 <HAL_RCC_ClockConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ba:	f000 f9d5 	bl	8000968 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005be:	003b      	movs	r3, r7
 80005c0:	2220      	movs	r2, #32
 80005c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	0292      	lsls	r2, r2, #10
 80005ca:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005cc:	003b      	movs	r3, r7
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 ff90 	bl	80024f4 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005d8:	f000 f9c6 	bl	8000968 <Error_Handler>
  }
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b019      	add	sp, #100	; 0x64
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40007000 	.word	0x40007000
 80005e8:	ffffe7ff 	.word	0xffffe7ff

080005ec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	003b      	movs	r3, r7
 80005f4:	0018      	movs	r0, r3
 80005f6:	2308      	movs	r3, #8
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f002 fd16 	bl	800302c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000600:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000602:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <MX_ADC_Init+0xdc>)
 8000604:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000608:	2200      	movs	r2, #0
 800060a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_ADC_Init+0xd8>)
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	05d2      	lsls	r2, r2, #23
 8000612:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000614:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800061a:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <MX_ADC_Init+0xd8>)
 800061c:	2200      	movs	r2, #0
 800061e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000622:	2201      	movs	r2, #1
 8000624:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <MX_ADC_Init+0xd8>)
 800062e:	2220      	movs	r2, #32
 8000630:	2100      	movs	r1, #0
 8000632:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000636:	2221      	movs	r2, #33	; 0x21
 8000638:	2100      	movs	r1, #0
 800063a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_ADC_Init+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000644:	22c2      	movs	r2, #194	; 0xc2
 8000646:	32ff      	adds	r2, #255	; 0xff
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_ADC_Init+0xd8>)
 800064c:	222c      	movs	r2, #44	; 0x2c
 800064e:	2100      	movs	r1, #0
 8000650:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000654:	2204      	movs	r2, #4
 8000656:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_ADC_Init+0xd8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000666:	2200      	movs	r2, #0
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_ADC_Init+0xd8>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fb2c 	bl	8000cd0 <HAL_ADC_Init>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800067c:	f000 f974 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000680:	003b      	movs	r3, r7
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_ADC_Init+0xe0>)
 8000684:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000686:	003b      	movs	r3, r7
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0152      	lsls	r2, r2, #5
 800068c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800068e:	003a      	movs	r2, r7
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_ADC_Init+0xd8>)
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fdc5 	bl	8001224 <HAL_ADC_ConfigChannel>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800069e:	f000 f963 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a2:	003b      	movs	r3, r7
 80006a4:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <MX_ADC_Init+0xe4>)
 80006a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a8:	003a      	movs	r2, r7
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_ADC_Init+0xd8>)
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fdb8 	bl	8001224 <HAL_ADC_ConfigChannel>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80006b8:	f000 f956 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b002      	add	sp, #8
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000048 	.word	0x20000048
 80006c8:	40012400 	.word	0x40012400
 80006cc:	04000002 	.word	0x04000002
 80006d0:	0c000008 	.word	0x0c000008

080006d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b090      	sub	sp, #64	; 0x40
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006da:	232c      	movs	r3, #44	; 0x2c
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	0018      	movs	r0, r3
 80006e0:	2314      	movs	r3, #20
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f002 fca1 	bl	800302c <memset>
  RTC_DateTypeDef sDate = {0};
 80006ea:	2328      	movs	r3, #40	; 0x28
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2328      	movs	r3, #40	; 0x28
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 fc96 	bl	800302c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000700:	4b41      	ldr	r3, [pc, #260]	; (8000808 <MX_RTC_Init+0x134>)
 8000702:	4a42      	ldr	r2, [pc, #264]	; (800080c <MX_RTC_Init+0x138>)
 8000704:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000706:	4b40      	ldr	r3, [pc, #256]	; (8000808 <MX_RTC_Init+0x134>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 800070c:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <MX_RTC_Init+0x134>)
 800070e:	227c      	movs	r2, #124	; 0x7c
 8000710:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 295;
 8000712:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <MX_RTC_Init+0x134>)
 8000714:	2228      	movs	r2, #40	; 0x28
 8000716:	32ff      	adds	r2, #255	; 0xff
 8000718:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800071a:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <MX_RTC_Init+0x134>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_RTC_Init+0x134>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000726:	4b38      	ldr	r3, [pc, #224]	; (8000808 <MX_RTC_Init+0x134>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800072c:	4b36      	ldr	r3, [pc, #216]	; (8000808 <MX_RTC_Init+0x134>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000732:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_RTC_Init+0x134>)
 8000734:	0018      	movs	r0, r3
 8000736:	f002 f805 	bl	8002744 <HAL_RTC_Init>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f913 	bl	8000968 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000742:	212c      	movs	r1, #44	; 0x2c
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000762:	1879      	adds	r1, r7, r1
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_RTC_Init+0x134>)
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f002 f889 	bl	8002880 <HAL_RTC_SetTime>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000772:	f000 f8f9 	bl	8000968 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000776:	2128      	movs	r1, #40	; 0x28
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2201      	movs	r2, #1
 8000782:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2201      	movs	r2, #1
 8000788:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000790:	1879      	adds	r1, r7, r1
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_RTC_Init+0x134>)
 8000794:	2201      	movs	r2, #1
 8000796:	0018      	movs	r0, r3
 8000798:	f002 f936 	bl	8002a08 <HAL_RTC_SetDate>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 80007a0:	f000 f8e2 	bl	8000968 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80007a4:	003b      	movs	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007da:	003b      	movs	r3, r7
 80007dc:	2220      	movs	r2, #32
 80007de:	2101      	movs	r1, #1
 80007e0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007ea:	0039      	movs	r1, r7
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_RTC_Init+0x134>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 f9b7 	bl	8002b64 <HAL_RTC_SetAlarm_IT>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80007fa:	f000 f8b5 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b010      	add	sp, #64	; 0x40
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	20000024 	.word	0x20000024
 800080c:	40002800 	.word	0x40002800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	240c      	movs	r4, #12
 8000818:	193b      	adds	r3, r7, r4
 800081a:	0018      	movs	r0, r3
 800081c:	2314      	movs	r3, #20
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f002 fc03 	bl	800302c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b4d      	ldr	r3, [pc, #308]	; (800095c <MX_GPIO_Init+0x14c>)
 8000828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082a:	4b4c      	ldr	r3, [pc, #304]	; (800095c <MX_GPIO_Init+0x14c>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
 8000832:	4b4a      	ldr	r3, [pc, #296]	; (800095c <MX_GPIO_Init+0x14c>)
 8000834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b47      	ldr	r3, [pc, #284]	; (800095c <MX_GPIO_Init+0x14c>)
 8000840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000842:	4b46      	ldr	r3, [pc, #280]	; (800095c <MX_GPIO_Init+0x14c>)
 8000844:	2102      	movs	r1, #2
 8000846:	430a      	orrs	r2, r1
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
 800084a:	4b44      	ldr	r3, [pc, #272]	; (800095c <MX_GPIO_Init+0x14c>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	2202      	movs	r2, #2
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2200      	movs	r2, #0
 800085c:	2190      	movs	r1, #144	; 0x90
 800085e:	0018      	movs	r0, r3
 8000860:	f001 f8ca 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WAKE_DS_WISOL_Pin|RST_WISOL_Pin, GPIO_PIN_SET);
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2201      	movs	r2, #1
 800086a:	2160      	movs	r1, #96	; 0x60
 800086c:	0018      	movs	r0, r3
 800086e:	f001 f8c3 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <MX_GPIO_Init+0x150>)
 8000874:	2200      	movs	r2, #0
 8000876:	2108      	movs	r1, #8
 8000878:	0018      	movs	r0, r3
 800087a:	f001 f8bd 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HALL_SENS_IRQ_Pin */
  GPIO_InitStruct.Pin = HALL_SENS_IRQ_Pin;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	4a37      	ldr	r2, [pc, #220]	; (8000964 <MX_GPIO_Init+0x154>)
 8000888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2201      	movs	r2, #1
 800088e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000890:	193a      	adds	r2, r7, r4
 8000892:	23a0      	movs	r3, #160	; 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 ff47 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2204      	movs	r2, #4
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2202      	movs	r2, #2
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2203      	movs	r2, #3
 80008b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2206      	movs	r2, #6
 80008ba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	193a      	adds	r2, r7, r4
 80008be:	23a0      	movs	r3, #160	; 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 ff31 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_BAT_MEAS_Pin WAKE_DS_WISOL_Pin RST_WISOL_Pin EN_VCC3V3s_Pin */
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|WAKE_DS_WISOL_Pin|RST_WISOL_Pin|EN_VCC3V3s_Pin;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	22f0      	movs	r2, #240	; 0xf0
 80008ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2201      	movs	r2, #1
 80008d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2201      	movs	r2, #1
 80008da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	193a      	adds	r2, r7, r4
 80008e4:	23a0      	movs	r3, #160	; 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 ff1e 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008f0:	0021      	movs	r1, r4
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2208      	movs	r2, #8
 80008f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2201      	movs	r2, #1
 80008fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2201      	movs	r2, #1
 8000902:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800090a:	000c      	movs	r4, r1
 800090c:	187b      	adds	r3, r7, r1
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <MX_GPIO_Init+0x150>)
 8000910:	0019      	movs	r1, r3
 8000912:	0010      	movs	r0, r2
 8000914:	f000 ff0a 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000918:	0021      	movs	r1, r4
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2202      	movs	r2, #2
 8000924:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2203      	movs	r2, #3
 8000930:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2206      	movs	r2, #6
 8000936:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	187b      	adds	r3, r7, r1
 800093a:	4a09      	ldr	r2, [pc, #36]	; (8000960 <MX_GPIO_Init+0x150>)
 800093c:	0019      	movs	r1, r3
 800093e:	0010      	movs	r0, r2
 8000940:	f000 fef4 	bl	800172c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2005      	movs	r0, #5
 800094a:	f000 febd 	bl	80016c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800094e:	2005      	movs	r0, #5
 8000950:	f000 fecf 	bl	80016f2 <HAL_NVIC_EnableIRQ>

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b009      	add	sp, #36	; 0x24
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	50000400 	.word	0x50000400
 8000964:	10210000 	.word	0x10210000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_MspInit+0x24>)
 800097a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x24>)
 800097e:	2101      	movs	r1, #1
 8000980:	430a      	orrs	r2, r1
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <HAL_MspInit+0x24>)
 8000986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_MspInit+0x24>)
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	0549      	lsls	r1, r1, #21
 800098e:	430a      	orrs	r2, r1
 8000990:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	230c      	movs	r3, #12
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	0018      	movs	r0, r3
 80009aa:	2314      	movs	r3, #20
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f002 fb3c 	bl	800302c <memset>
  if(hadc->Instance==ADC1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <HAL_ADC_MspInit+0x74>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d123      	bne.n	8000a06 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_ADC_MspInit+0x78>)
 80009c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_ADC_MspInit+0x78>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	0089      	lsls	r1, r1, #2
 80009c8:	430a      	orrs	r2, r1
 80009ca:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_ADC_MspInit+0x78>)
 80009ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_ADC_MspInit+0x78>)
 80009d2:	2101      	movs	r1, #1
 80009d4:	430a      	orrs	r2, r1
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_ADC_MspInit+0x78>)
 80009da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009dc:	2201      	movs	r2, #1
 80009de:	4013      	ands	r3, r2
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA1     ------> ADC_IN1
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 80009e4:	210c      	movs	r1, #12
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	220a      	movs	r2, #10
 80009ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2203      	movs	r2, #3
 80009f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	23a0      	movs	r3, #160	; 0xa0
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fe93 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b008      	add	sp, #32
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	40012400 	.word	0x40012400
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_RTC_MspInit+0x38>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10e      	bne.n	8000a48 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_RTC_MspInit+0x3c>)
 8000a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_RTC_MspInit+0x3c>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	02c9      	lsls	r1, r1, #11
 8000a34:	430a      	orrs	r2, r1
 8000a36:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 fe43 	bl	80016c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a42:	2002      	movs	r0, #2
 8000a44:	f000 fe55 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40002800 	.word	0x40002800
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8f2 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <RTC_IRQHandler+0x14>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 f9b2 	bl	8002dfc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	20000024 	.word	0x20000024

08000aa4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <EXTI0_1_IRQHandler+0x2c>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	2201      	movs	r2, #1
 8000aae:	4013      	ands	r3, r2
 8000ab0:	d007      	beq.n	8000ac2 <EXTI0_1_IRQHandler+0x1e>
	  HAL_GPIO_TogglePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin);
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 ffba 	bl	8001a32 <HAL_GPIO_TogglePin>
	  COUNTER_CONSUMER();
 8000abe:	f7ff fbe7 	bl	8000290 <COUNTER_CONSUMER>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 ffc8 	bl	8001a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <SystemInit+0x64>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <SystemInit+0x64>)
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	0049      	lsls	r1, r1, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <SystemInit+0x64>)
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <SystemInit+0x64>)
 8000aec:	4913      	ldr	r1, [pc, #76]	; (8000b3c <SystemInit+0x68>)
 8000aee:	400a      	ands	r2, r1
 8000af0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <SystemInit+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <SystemInit+0x64>)
 8000af8:	4911      	ldr	r1, [pc, #68]	; (8000b40 <SystemInit+0x6c>)
 8000afa:	400a      	ands	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <SystemInit+0x64>)
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <SystemInit+0x64>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	438a      	bics	r2, r1
 8000b08:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <SystemInit+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <SystemInit+0x64>)
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <SystemInit+0x70>)
 8000b12:	400a      	ands	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <SystemInit+0x64>)
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <SystemInit+0x64>)
 8000b1c:	490a      	ldr	r1, [pc, #40]	; (8000b48 <SystemInit+0x74>)
 8000b1e:	400a      	ands	r2, r1
 8000b20:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SystemInit+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <SystemInit+0x78>)
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	0512      	lsls	r2, r2, #20
 8000b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	88ff400c 	.word	0x88ff400c
 8000b40:	fef6fff6 	.word	0xfef6fff6
 8000b44:	fffbffff 	.word	0xfffbffff
 8000b48:	ff02ffff 	.word	0xff02ffff
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b54:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b56:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b58:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <LoopForever+0xa>)
    CMP R1, R2
 8000b5c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b5e:	d105      	bne.n	8000b6c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b62:	4913      	ldr	r1, [pc, #76]	; (8000bb0 <LoopForever+0x12>)
    STR R1, [R0]
 8000b64:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b66:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b68:	4913      	ldr	r1, [pc, #76]	; (8000bb8 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b6a:	6001      	str	r1, [r0, #0]

08000b6c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000b6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b6e:	e003      	b.n	8000b78 <LoopCopyDataInit>

08000b70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000b72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b76:	3104      	adds	r1, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <LoopForever+0x22>)
  ldr  r3, =_edata
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000b7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b80:	d3f6      	bcc.n	8000b70 <CopyDataInit>
  ldr  r2, =_sbss
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000b84:	e002      	b.n	8000b8c <LoopFillZerobss>

08000b86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000b86:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b88:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8a:	3204      	adds	r2, #4

08000b8c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <LoopForever+0x2e>)
  cmp  r2, r3
 8000b8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b90:	d3f9      	bcc.n	8000b86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b92:	f7ff ff9f 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 fa09 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fc8d 	bl	80004b8 <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
   ldr   r0, =_estack
 8000ba0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000ba4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ba8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000bac:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000bb0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000bb4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000bb8:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000bbc:	08003114 	.word	0x08003114
  ldr  r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bc4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000bc8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000bcc:	200000a8 	.word	0x200000a8

08000bd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_COMP_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_Init+0x3c>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Init+0x3c>)
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 f811 	bl	8000c14 <HAL_InitTick>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	e001      	b.n	8000c02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfe:	f7ff feb9 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_InitTick+0x50>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	23fa      	movs	r3, #250	; 0xfa
 8000c2a:	0099      	lsls	r1, r3, #2
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	f7ff fa6b 	bl	8000108 <__udivsi3>
 8000c32:	0003      	movs	r3, r0
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fd6c 	bl	8001712 <HAL_SYSTICK_Config>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d004      	beq.n	8000c48 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000c3e:	230f      	movs	r3, #15
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e006      	b.n	8000c56 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	425b      	negs	r3, r3
 8000c4e:	2200      	movs	r2, #0
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 fd39 	bl	80016c8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000c56:	230f      	movs	r3, #15
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	781b      	ldrb	r3, [r3, #0]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b004      	add	sp, #16
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick++;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_IncTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_IncTick+0x14>)
 8000c74:	601a      	str	r2, [r3, #0]
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000a4 	.word	0x200000a4

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	200000a4 	.word	0x200000a4

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff fff0 	bl	8000c80 <HAL_GetTick>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3301      	adds	r3, #1
 8000cac:	d002      	beq.n	8000cb4 <HAL_Delay+0x20>
  {
    wait++;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	f7ff ffe3 	bl	8000c80 <HAL_GetTick>
 8000cba:	0002      	movs	r2, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d8f7      	bhi.n	8000cb6 <HAL_Delay+0x22>
  {
  }
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e159      	b.n	8000f96 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10a      	bne.n	8000d00 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2250      	movs	r2, #80	; 0x50
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fe4e 	bl	800099c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d04:	2210      	movs	r2, #16
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b10      	cmp	r3, #16
 8000d0a:	d005      	beq.n	8000d18 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2204      	movs	r2, #4
 8000d14:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d16:	d00b      	beq.n	8000d30 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2250      	movs	r2, #80	; 0x50
 8000d28:	2100      	movs	r1, #0
 8000d2a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e132      	b.n	8000f96 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d34:	4a9a      	ldr	r2, [pc, #616]	; (8000fa0 <HAL_ADC_Init+0x2d0>)
 8000d36:	4013      	ands	r3, r2
 8000d38:	2202      	movs	r2, #2
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2203      	movs	r2, #3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d108      	bne.n	8000d60 <HAL_ADC_Init+0x90>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_ADC_Init+0x90>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <HAL_ADC_Init+0x92>
 8000d60:	2300      	movs	r3, #0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d149      	bne.n	8000dfa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	23c0      	movs	r3, #192	; 0xc0
 8000d6c:	061b      	lsls	r3, r3, #24
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d00b      	beq.n	8000d8a <HAL_ADC_Init+0xba>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d005      	beq.n	8000d8a <HAL_ADC_Init+0xba>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	061b      	lsls	r3, r3, #24
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d111      	bne.n	8000dae <HAL_ADC_Init+0xde>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	0892      	lsrs	r2, r2, #2
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6919      	ldr	r1, [r3, #16]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	e014      	b.n	8000dd8 <HAL_ADC_Init+0x108>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	0892      	lsrs	r2, r2, #2
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	4b79      	ldr	r3, [pc, #484]	; (8000fa4 <HAL_ADC_Init+0x2d4>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b78      	ldr	r3, [pc, #480]	; (8000fa4 <HAL_ADC_Init+0x2d4>)
 8000dc4:	4978      	ldr	r1, [pc, #480]	; (8000fa8 <HAL_ADC_Init+0x2d8>)
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	4b76      	ldr	r3, [pc, #472]	; (8000fa4 <HAL_ADC_Init+0x2d4>)
 8000dcc:	6819      	ldr	r1, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4b74      	ldr	r3, [pc, #464]	; (8000fa4 <HAL_ADC_Init+0x2d4>)
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2118      	movs	r1, #24
 8000de4:	438a      	bics	r2, r1
 8000de6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68d9      	ldr	r1, [r3, #12]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000dfa:	4b6a      	ldr	r3, [pc, #424]	; (8000fa4 <HAL_ADC_Init+0x2d4>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b69      	ldr	r3, [pc, #420]	; (8000fa4 <HAL_ADC_Init+0x2d4>)
 8000e00:	496a      	ldr	r1, [pc, #424]	; (8000fac <HAL_ADC_Init+0x2dc>)
 8000e02:	400a      	ands	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000e06:	4b67      	ldr	r3, [pc, #412]	; (8000fa4 <HAL_ADC_Init+0x2d4>)
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	065a      	lsls	r2, r3, #25
 8000e10:	4b64      	ldr	r3, [pc, #400]	; (8000fa4 <HAL_ADC_Init+0x2d4>)
 8000e12:	430a      	orrs	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	4013      	ands	r3, r2
 8000e22:	d108      	bne.n	8000e36 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	0549      	lsls	r1, r1, #21
 8000e32:	430a      	orrs	r2, r1
 8000e34:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	495b      	ldr	r1, [pc, #364]	; (8000fb0 <HAL_ADC_Init+0x2e0>)
 8000e42:	400a      	ands	r2, r1
 8000e44:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68d9      	ldr	r1, [r3, #12]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d101      	bne.n	8000e5c <HAL_ADC_Init+0x18c>
 8000e58:	2304      	movs	r3, #4
 8000e5a:	e000      	b.n	8000e5e <HAL_ADC_Init+0x18e>
 8000e5c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e5e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2020      	movs	r0, #32
 8000e64:	5c1b      	ldrb	r3, [r3, r0]
 8000e66:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e68:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	202c      	movs	r0, #44	; 0x2c
 8000e6e:	5c1b      	ldrb	r3, [r3, r0]
 8000e70:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e72:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e78:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000e80:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e88:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e96:	23c2      	movs	r3, #194	; 0xc2
 8000e98:	33ff      	adds	r3, #255	; 0xff
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68d9      	ldr	r1, [r3, #12]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2221      	movs	r2, #33	; 0x21
 8000eba:	5c9b      	ldrb	r3, [r3, r2]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11a      	bne.n	8000ef6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0249      	lsls	r1, r1, #9
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	e00b      	b.n	8000ef6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	2201      	movs	r2, #1
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d11f      	bne.n	8000f3e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	492a      	ldr	r1, [pc, #168]	; (8000fb4 <HAL_ADC_Init+0x2e4>)
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6919      	ldr	r1, [r3, #16]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f1c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000f22:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2101      	movs	r1, #1
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	e00e      	b.n	8000f5c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	2201      	movs	r2, #1
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d107      	bne.n	8000f5c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	691a      	ldr	r2, [r3, #16]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2101      	movs	r1, #1
 8000f58:	438a      	bics	r2, r1
 8000f5a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2107      	movs	r1, #7
 8000f68:	438a      	bics	r2, r1
 8000f6a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6959      	ldr	r1, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4393      	bics	r3, r2
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	fffffefd 	.word	0xfffffefd
 8000fa4:	40012708 	.word	0x40012708
 8000fa8:	ffc3ffff 	.word	0xffc3ffff
 8000fac:	fdffffff 	.word	0xfdffffff
 8000fb0:	fffe0219 	.word	0xfffe0219
 8000fb4:	fffffc03 	.word	0xfffffc03

08000fb8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d138      	bne.n	8001046 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2250      	movs	r2, #80	; 0x50
 8000fd8:	5c9b      	ldrb	r3, [r3, r2]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_Start+0x2a>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e038      	b.n	8001054 <HAL_ADC_Start+0x9c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2250      	movs	r2, #80	; 0x50
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d007      	beq.n	8001002 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	18fc      	adds	r4, r7, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 f999 	bl	8001330 <ADC_Enable>
 8000ffe:	0003      	movs	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001002:	230f      	movs	r3, #15
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d120      	bne.n	800104e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001010:	4a12      	ldr	r2, [pc, #72]	; (800105c <HAL_ADC_Start+0xa4>)
 8001012:	4013      	ands	r3, r2
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	0052      	lsls	r2, r2, #1
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2250      	movs	r2, #80	; 0x50
 8001028:	2100      	movs	r1, #0
 800102a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	221c      	movs	r2, #28
 8001032:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2104      	movs	r1, #4
 8001040:	430a      	orrs	r2, r1
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	e003      	b.n	800104e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001046:	230f      	movs	r3, #15
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2202      	movs	r2, #2
 800104c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104e:	230f      	movs	r3, #15
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	781b      	ldrb	r3, [r3, #0]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b005      	add	sp, #20
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	fffff0fe 	.word	0xfffff0fe

08001060 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2250      	movs	r2, #80	; 0x50
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_ADC_Stop+0x1e>
 800107a:	2302      	movs	r3, #2
 800107c:	e02a      	b.n	80010d4 <HAL_ADC_Stop+0x74>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2250      	movs	r2, #80	; 0x50
 8001082:	2101      	movs	r1, #1
 8001084:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001086:	250f      	movs	r5, #15
 8001088:	197c      	adds	r4, r7, r5
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0018      	movs	r0, r3
 800108e:	f000 fa0f 	bl	80014b0 <ADC_ConversionStop>
 8001092:	0003      	movs	r3, r0
 8001094:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001096:	197b      	adds	r3, r7, r5
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d113      	bne.n	80010c6 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800109e:	250f      	movs	r5, #15
 80010a0:	197c      	adds	r4, r7, r5
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 f9a3 	bl	80013f0 <ADC_Disable>
 80010aa:	0003      	movs	r3, r0
 80010ac:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80010ae:	197b      	adds	r3, r7, r5
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d107      	bne.n	80010c6 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_ADC_Stop+0x7c>)
 80010bc:	4013      	ands	r3, r2
 80010be:	2201      	movs	r2, #1
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2250      	movs	r2, #80	; 0x50
 80010ca:	2100      	movs	r1, #0
 80010cc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80010ce:	230f      	movs	r3, #15
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	781b      	ldrb	r3, [r3, #0]
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b004      	add	sp, #16
 80010da:	bdb0      	pop	{r4, r5, r7, pc}
 80010dc:	fffffefe 	.word	0xfffffefe

080010e0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d102      	bne.n	8001100 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80010fa:	2308      	movs	r3, #8
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e014      	b.n	800112a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2201      	movs	r2, #1
 8001108:	4013      	ands	r3, r2
 800110a:	2b01      	cmp	r3, #1
 800110c:	d10b      	bne.n	8001126 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	2220      	movs	r2, #32
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2250      	movs	r2, #80	; 0x50
 800111e:	2100      	movs	r1, #0
 8001120:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e06c      	b.n	8001200 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001126:	230c      	movs	r3, #12
 8001128:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800112a:	f7ff fda9 	bl	8000c80 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001132:	e019      	b.n	8001168 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	d016      	beq.n	8001168 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_ADC_PollForConversion+0x70>
 8001140:	f7ff fd9e 	bl	8000c80 <HAL_GetTick>
 8001144:	0002      	movs	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d20b      	bcs.n	8001168 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001154:	2204      	movs	r2, #4
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2250      	movs	r2, #80	; 0x50
 8001160:	2100      	movs	r1, #0
 8001162:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e04b      	b.n	8001200 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	d0df      	beq.n	8001134 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	23c0      	movs	r3, #192	; 0xc0
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4013      	ands	r3, r2
 800118e:	d12e      	bne.n	80011ee <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2220      	movs	r2, #32
 8001194:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001196:	2b00      	cmp	r3, #0
 8001198:	d129      	bne.n	80011ee <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2208      	movs	r2, #8
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d122      	bne.n	80011ee <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2204      	movs	r2, #4
 80011b0:	4013      	ands	r3, r2
 80011b2:	d110      	bne.n	80011d6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	210c      	movs	r1, #12
 80011c0:	438a      	bics	r2, r1
 80011c2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_ADC_PollForConversion+0x128>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	2201      	movs	r2, #1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	655a      	str	r2, [r3, #84]	; 0x54
 80011d4:	e00b      	b.n	80011ee <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011da:	2220      	movs	r2, #32
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	2201      	movs	r2, #1
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b004      	add	sp, #16
 8001206:	bd80      	pop	{r7, pc}
 8001208:	fffffefe 	.word	0xfffffefe

0800120c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2250      	movs	r2, #80	; 0x50
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_ADC_ConfigChannel+0x18>
 8001238:	2302      	movs	r3, #2
 800123a:	e06c      	b.n	8001316 <HAL_ADC_ConfigChannel+0xf2>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2250      	movs	r2, #80	; 0x50
 8001240:	2101      	movs	r1, #1
 8001242:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2204      	movs	r2, #4
 800124c:	4013      	ands	r3, r2
 800124e:	d00b      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	2220      	movs	r2, #32
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2250      	movs	r2, #80	; 0x50
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e056      	b.n	8001316 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <HAL_ADC_ConfigChannel+0xfc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d028      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	035b      	lsls	r3, r3, #13
 800127e:	0b5a      	lsrs	r2, r3, #13
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	02db      	lsls	r3, r3, #11
 8001290:	4013      	ands	r3, r2
 8001292:	d009      	beq.n	80012a8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0409      	lsls	r1, r1, #16
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f000 f94a 	bl	800153c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	029b      	lsls	r3, r3, #10
 80012b0:	4013      	ands	r3, r2
 80012b2:	d02b      	beq.n	800130c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	03c9      	lsls	r1, r1, #15
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e023      	b.n	800130c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	035b      	lsls	r3, r3, #13
 80012d0:	0b5b      	lsrs	r3, r3, #13
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	400a      	ands	r2, r1
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	02db      	lsls	r3, r3, #11
 80012e4:	4013      	ands	r3, r2
 80012e6:	d005      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 80012ee:	490e      	ldr	r1, [pc, #56]	; (8001328 <HAL_ADC_ConfigChannel+0x104>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	4013      	ands	r3, r2
 80012fe:	d005      	beq.n	800130c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 8001306:	4909      	ldr	r1, [pc, #36]	; (800132c <HAL_ADC_ConfigChannel+0x108>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2250      	movs	r2, #80	; 0x50
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	00001001 	.word	0x00001001
 8001324:	40012708 	.word	0x40012708
 8001328:	ff7fffff 	.word	0xff7fffff
 800132c:	ffbfffff 	.word	0xffbfffff

08001330 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2203      	movs	r2, #3
 8001344:	4013      	ands	r3, r2
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <ADC_Enable+0x2c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2201      	movs	r2, #1
 8001352:	4013      	ands	r3, r2
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <ADC_Enable+0x2c>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <ADC_Enable+0x2e>
 800135c:	2300      	movs	r3, #0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d13f      	bne.n	80013e2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4a20      	ldr	r2, [pc, #128]	; (80013ec <ADC_Enable+0xbc>)
 800136a:	4013      	ands	r3, r2
 800136c:	d00d      	beq.n	800138a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	2210      	movs	r2, #16
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	2201      	movs	r2, #1
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e02c      	b.n	80013e4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 f8ce 	bl	800153c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80013a0:	f7ff fc6e 	bl	8000c80 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013a8:	e014      	b.n	80013d4 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013aa:	f7ff fc69 	bl	8000c80 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b0a      	cmp	r3, #10
 80013b6:	d90d      	bls.n	80013d4 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013bc:	2210      	movs	r2, #16
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	2201      	movs	r2, #1
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e007      	b.n	80013e4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2201      	movs	r2, #1
 80013dc:	4013      	ands	r3, r2
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d1e3      	bne.n	80013aa <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	80000017 	.word	0x80000017

080013f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2203      	movs	r2, #3
 8001404:	4013      	ands	r3, r2
 8001406:	2b01      	cmp	r3, #1
 8001408:	d108      	bne.n	800141c <ADC_Disable+0x2c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <ADC_Disable+0x2c>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <ADC_Disable+0x2e>
 800141c:	2300      	movs	r3, #0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d041      	beq.n	80014a6 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2205      	movs	r2, #5
 800142a:	4013      	ands	r3, r2
 800142c:	2b01      	cmp	r3, #1
 800142e:	d110      	bne.n	8001452 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2102      	movs	r1, #2
 800143c:	430a      	orrs	r2, r1
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2203      	movs	r2, #3
 8001446:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001448:	f7ff fc1a 	bl	8000c80 <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001450:	e022      	b.n	8001498 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001456:	2210      	movs	r2, #16
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	2201      	movs	r2, #1
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e01c      	b.n	80014a8 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800146e:	f7ff fc07 	bl	8000c80 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b0a      	cmp	r3, #10
 800147a:	d90d      	bls.n	8001498 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	2210      	movs	r2, #16
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148c:	2201      	movs	r2, #1
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e007      	b.n	80014a8 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2201      	movs	r2, #1
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d0e3      	beq.n	800146e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b004      	add	sp, #16
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2204      	movs	r2, #4
 80014c4:	4013      	ands	r3, r2
 80014c6:	d034      	beq.n	8001532 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2204      	movs	r2, #4
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d10d      	bne.n	80014f2 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014e0:	d107      	bne.n	80014f2 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2110      	movs	r1, #16
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014f2:	f7ff fbc5 	bl	8000c80 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014fa:	e014      	b.n	8001526 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014fc:	f7ff fbc0 	bl	8000c80 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b0a      	cmp	r3, #10
 8001508:	d90d      	bls.n	8001526 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150e:	2210      	movs	r2, #16
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	2201      	movs	r2, #1
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e006      	b.n	8001534 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2204      	movs	r2, #4
 800152e:	4013      	ands	r3, r2
 8001530:	d1e4      	bne.n	80014fc <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bd80      	pop	{r7, pc}

0800153c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <ADC_DelayMicroSecond+0x34>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	490a      	ldr	r1, [pc, #40]	; (8001574 <ADC_DelayMicroSecond+0x38>)
 800154a:	0018      	movs	r0, r3
 800154c:	f7fe fddc 	bl	8000108 <__udivsi3>
 8001550:	0003      	movs	r3, r0
 8001552:	001a      	movs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4353      	muls	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800155a:	e002      	b.n	8001562 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3b01      	subs	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f9      	bne.n	800155c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b004      	add	sp, #16
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	000f4240 	.word	0x000f4240

08001578 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	0002      	movs	r2, r0
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	231f      	movs	r3, #31
 800158c:	401a      	ands	r2, r3
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <NVIC_EnableIRQ+0x28>)
 8001590:	2101      	movs	r1, #1
 8001592:	4091      	lsls	r1, r2
 8001594:	000a      	movs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	0002      	movs	r2, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d932      	bls.n	8001620 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ba:	4a2f      	ldr	r2, [pc, #188]	; (8001678 <NVIC_SetPriority+0xd4>)
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	0019      	movs	r1, r3
 80015c2:	230f      	movs	r3, #15
 80015c4:	400b      	ands	r3, r1
 80015c6:	3b08      	subs	r3, #8
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3306      	adds	r3, #6
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	18d3      	adds	r3, r2, r3
 80015d0:	3304      	adds	r3, #4
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1dfa      	adds	r2, r7, #7
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	0011      	movs	r1, r2
 80015da:	2203      	movs	r2, #3
 80015dc:	400a      	ands	r2, r1
 80015de:	00d2      	lsls	r2, r2, #3
 80015e0:	21ff      	movs	r1, #255	; 0xff
 80015e2:	4091      	lsls	r1, r2
 80015e4:	000a      	movs	r2, r1
 80015e6:	43d2      	mvns	r2, r2
 80015e8:	401a      	ands	r2, r3
 80015ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	019b      	lsls	r3, r3, #6
 80015f0:	22ff      	movs	r2, #255	; 0xff
 80015f2:	401a      	ands	r2, r3
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	0018      	movs	r0, r3
 80015fa:	2303      	movs	r3, #3
 80015fc:	4003      	ands	r3, r0
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001602:	481d      	ldr	r0, [pc, #116]	; (8001678 <NVIC_SetPriority+0xd4>)
 8001604:	1dfb      	adds	r3, r7, #7
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	001c      	movs	r4, r3
 800160a:	230f      	movs	r3, #15
 800160c:	4023      	ands	r3, r4
 800160e:	3b08      	subs	r3, #8
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	430a      	orrs	r2, r1
 8001614:	3306      	adds	r3, #6
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	18c3      	adds	r3, r0, r3
 800161a:	3304      	adds	r3, #4
 800161c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800161e:	e027      	b.n	8001670 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001620:	4a16      	ldr	r2, [pc, #88]	; (800167c <NVIC_SetPriority+0xd8>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b25b      	sxtb	r3, r3
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	33c0      	adds	r3, #192	; 0xc0
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	589b      	ldr	r3, [r3, r2]
 8001630:	1dfa      	adds	r2, r7, #7
 8001632:	7812      	ldrb	r2, [r2, #0]
 8001634:	0011      	movs	r1, r2
 8001636:	2203      	movs	r2, #3
 8001638:	400a      	ands	r2, r1
 800163a:	00d2      	lsls	r2, r2, #3
 800163c:	21ff      	movs	r1, #255	; 0xff
 800163e:	4091      	lsls	r1, r2
 8001640:	000a      	movs	r2, r1
 8001642:	43d2      	mvns	r2, r2
 8001644:	401a      	ands	r2, r3
 8001646:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	019b      	lsls	r3, r3, #6
 800164c:	22ff      	movs	r2, #255	; 0xff
 800164e:	401a      	ands	r2, r3
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	0018      	movs	r0, r3
 8001656:	2303      	movs	r3, #3
 8001658:	4003      	ands	r3, r0
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <NVIC_SetPriority+0xd8>)
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b25b      	sxtb	r3, r3
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	430a      	orrs	r2, r1
 800166a:	33c0      	adds	r3, #192	; 0xc0
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	501a      	str	r2, [r3, r0]
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b003      	add	sp, #12
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	e000ed00 	.word	0xe000ed00
 800167c:	e000e100 	.word	0xe000e100

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <SysTick_Config+0x40>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e010      	b.n	80016b8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <SysTick_Config+0x44>)
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	3a01      	subs	r2, #1
 800169c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	2301      	movs	r3, #1
 80016a0:	425b      	negs	r3, r3
 80016a2:	2103      	movs	r1, #3
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff ff7d 	bl	80015a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SysTick_Config+0x44>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x44>)
 80016b2:	2207      	movs	r2, #7
 80016b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	00ffffff 	.word	0x00ffffff
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	210f      	movs	r1, #15
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	1c02      	adds	r2, r0, #0
 80016d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <NVIC_SetPriority>
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b004      	add	sp, #16
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	0002      	movs	r2, r0
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b25b      	sxtb	r3, r3
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff ff37 	bl	8001578 <NVIC_EnableIRQ>
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff ffaf 	bl	8001680 <SysTick_Config>
 8001722:	0003      	movs	r3, r0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001742:	e143      	b.n	80019cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4091      	lsls	r1, r2
 800174e:	000a      	movs	r2, r1
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d100      	bne.n	800175c <HAL_GPIO_Init+0x30>
 800175a:	e134      	b.n	80019c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x40>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d123      	bne.n	80017b4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	58d3      	ldr	r3, [r2, r3]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2207      	movs	r2, #7
 800177e:	4013      	ands	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	409a      	lsls	r2, r3
 8001786:	0013      	movs	r3, r2
 8001788:	43da      	mvns	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2107      	movs	r1, #7
 8001798:	400b      	ands	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	409a      	lsls	r2, r3
 800179e:	0013      	movs	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	6939      	ldr	r1, [r7, #16]
 80017b2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d00b      	beq.n	80017d4 <HAL_GPIO_Init+0xa8>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d130      	bne.n	8001836 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	43da      	mvns	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180a:	2201      	movs	r2, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	43da      	mvns	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	2201      	movs	r2, #1
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	401a      	ands	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	43da      	mvns	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	055b      	lsls	r3, r3, #21
 80018a2:	4013      	ands	r3, r2
 80018a4:	d100      	bne.n	80018a8 <HAL_GPIO_Init+0x17c>
 80018a6:	e08e      	b.n	80019c6 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80018b4:	4a4c      	ldr	r2, [pc, #304]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	589b      	ldr	r3, [r3, r2]
 80018c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2203      	movs	r2, #3
 80018c6:	4013      	ands	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	409a      	lsls	r2, r3
 80018ce:	0013      	movs	r3, r2
 80018d0:	43da      	mvns	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	23a0      	movs	r3, #160	; 0xa0
 80018dc:	05db      	lsls	r3, r3, #23
 80018de:	429a      	cmp	r2, r3
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1d2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a41      	ldr	r2, [pc, #260]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1ce>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <HAL_GPIO_Init+0x2c4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1ca>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x1d4>
 80018f6:	2306      	movs	r3, #6
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x1d4>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x1d4>
 80018fe:	2300      	movs	r3, #0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	2103      	movs	r1, #3
 8001904:	400a      	ands	r2, r1
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001910:	4935      	ldr	r1, [pc, #212]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43da      	mvns	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	025b      	lsls	r3, r3, #9
 8001936:	4013      	ands	r3, r2
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43da      	mvns	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	029b      	lsls	r3, r3, #10
 8001960:	4013      	ands	r3, r2
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	035b      	lsls	r3, r3, #13
 800198a:	4013      	ands	r3, r2
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43da      	mvns	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	039b      	lsls	r3, r3, #14
 80019b4:	4013      	ands	r3, r2
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	40da      	lsrs	r2, r3
 80019d4:	1e13      	subs	r3, r2, #0
 80019d6:	d000      	beq.n	80019da <HAL_GPIO_Init+0x2ae>
 80019d8:	e6b4      	b.n	8001744 <HAL_GPIO_Init+0x18>
  }
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b006      	add	sp, #24
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	50000400 	.word	0x50000400
 80019f0:	50000800 	.word	0x50000800
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	0008      	movs	r0, r1
 8001a02:	0011      	movs	r1, r2
 8001a04:	1cbb      	adds	r3, r7, #2
 8001a06:	1c02      	adds	r2, r0, #0
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	1c7b      	adds	r3, r7, #1
 8001a0c:	1c0a      	adds	r2, r1, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001a10:	1c7b      	adds	r3, r7, #1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a22:	1cbb      	adds	r3, r7, #2
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	000a      	movs	r2, r1
 8001a3c:	1cbb      	adds	r3, r7, #2
 8001a3e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	1cbb      	adds	r3, r7, #2
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	405a      	eors	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	615a      	str	r2, [r3, #20]
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	0002      	movs	r2, r0
 8001a60:	1dbb      	adds	r3, r7, #6
 8001a62:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	1dba      	adds	r2, r7, #6
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d008      	beq.n	8001a82 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a72:	1dba      	adds	r2, r7, #6
 8001a74:	8812      	ldrh	r2, [r2, #0]
 8001a76:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a78:	1dbb      	adds	r3, r7, #6
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 f807 	bl	8001a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	0002      	movs	r2, r0
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f000 fb6a 	bl	800218c <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab8:	4bc7      	ldr	r3, [pc, #796]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	220c      	movs	r2, #12
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac2:	4bc5      	ldr	r3, [pc, #788]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	025b      	lsls	r3, r3, #9
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d100      	bne.n	8001ada <HAL_RCC_OscConfig+0x36>
 8001ad8:	e07d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d007      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d112      	bne.n	8001b0c <HAL_RCC_OscConfig+0x68>
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10d      	bne.n	8001b0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	4bb9      	ldr	r3, [pc, #740]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	029b      	lsls	r3, r3, #10
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x5a>
 8001afc:	e06a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x130>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d166      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f000 fb40 	bl	800218c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	025b      	lsls	r3, r3, #9
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_OscConfig+0x84>
 8001b18:	4baf      	ldr	r3, [pc, #700]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4bae      	ldr	r3, [pc, #696]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	0249      	lsls	r1, r1, #9
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e027      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	23a0      	movs	r3, #160	; 0xa0
 8001b2e:	02db      	lsls	r3, r3, #11
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d10e      	bne.n	8001b52 <HAL_RCC_OscConfig+0xae>
 8001b34:	4ba8      	ldr	r3, [pc, #672]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4ba7      	ldr	r3, [pc, #668]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	02c9      	lsls	r1, r1, #11
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	4ba5      	ldr	r3, [pc, #660]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4ba4      	ldr	r3, [pc, #656]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0249      	lsls	r1, r1, #9
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e012      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b52:	4ba1      	ldr	r3, [pc, #644]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4ba0      	ldr	r3, [pc, #640]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b58:	49a0      	ldr	r1, [pc, #640]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	4b9e      	ldr	r3, [pc, #632]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	025b      	lsls	r3, r3, #9
 8001b66:	4013      	ands	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4b9a      	ldr	r3, [pc, #616]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b99      	ldr	r3, [pc, #612]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b72:	499b      	ldr	r1, [pc, #620]	; (8001de0 <HAL_RCC_OscConfig+0x33c>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d014      	beq.n	8001baa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f87e 	bl	8000c80 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8a:	f7ff f879 	bl	8000c80 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b64      	cmp	r3, #100	; 0x64
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e2f7      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b9c:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0xe6>
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff f869 	bl	8000c80 <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff f864 	bl	8000c80 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e2e2      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bc6:	4b84      	ldr	r3, [pc, #528]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x110>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_OscConfig+0x13e>
 8001be0:	e098      	b.n	8001d14 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	2220      	movs	r2, #32
 8001bec:	4013      	ands	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001bf0:	4b79      	ldr	r3, [pc, #484]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b78      	ldr	r3, [pc, #480]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	2220      	movs	r2, #32
 8001c00:	4393      	bics	r3, r2
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d005      	beq.n	8001c16 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	d13d      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1e8>
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d13a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c16:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d004      	beq.n	8001c2a <HAL_RCC_OscConfig+0x186>
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e2b0      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b6b      	ldr	r3, [pc, #428]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a6d      	ldr	r2, [pc, #436]	; (8001de4 <HAL_RCC_OscConfig+0x340>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	021a      	lsls	r2, r3, #8
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c40:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2209      	movs	r2, #9
 8001c46:	4393      	bics	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c52:	f000 fbcb 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8001c56:	0001      	movs	r1, r0
 8001c58:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	220f      	movs	r2, #15
 8001c60:	4013      	ands	r3, r2
 8001c62:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	000a      	movs	r2, r1
 8001c68:	40da      	lsrs	r2, r3
 8001c6a:	4b60      	ldr	r3, [pc, #384]	; (8001dec <HAL_RCC_OscConfig+0x348>)
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001c6e:	2513      	movs	r5, #19
 8001c70:	197c      	adds	r4, r7, r5
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7fe ffce 	bl	8000c14 <HAL_InitTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c7c:	197b      	adds	r3, r7, r5
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d047      	beq.n	8001d14 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8001c84:	2313      	movs	r3, #19
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	e27f      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d027      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c92:	4b51      	ldr	r3, [pc, #324]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2209      	movs	r2, #9
 8001c98:	4393      	bics	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ffec 	bl	8000c80 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cae:	f7fe ffe7 	bl	8000c80 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e265      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc0:	4b45      	ldr	r3, [pc, #276]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d0f1      	beq.n	8001cae <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a45      	ldr	r2, [pc, #276]	; (8001de4 <HAL_RCC_OscConfig+0x340>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	021a      	lsls	r2, r3, #8
 8001cda:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	e018      	b.n	8001d14 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	438a      	bics	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7fe ffc7 	bl	8000c80 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7fe ffc2 	bl	8000c80 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e240      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d0a:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	4013      	ands	r3, r2
 8001d12:	d1f1      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2210      	movs	r2, #16
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <HAL_RCC_OscConfig+0x27c>
 8001d1e:	e09e      	b.n	8001e5e <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d13f      	bne.n	8001da6 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d005      	beq.n	8001d3e <HAL_RCC_OscConfig+0x29a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e226      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <HAL_RCC_OscConfig+0x34c>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d52:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	0a19      	lsrs	r1, r3, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	061a      	lsls	r2, r3, #24
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	0b5b      	lsrs	r3, r3, #13
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	0212      	lsls	r2, r2, #8
 8001d72:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	491a      	ldr	r1, [pc, #104]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCC_OscConfig+0x348>)
 8001d86:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d88:	2513      	movs	r5, #19
 8001d8a:	197c      	adds	r4, r7, r5
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7fe ff41 	bl	8000c14 <HAL_InitTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d96:	197b      	adds	r3, r7, r5
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d05f      	beq.n	8001e5e <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8001d9e:	2313      	movs	r3, #19
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	e1f2      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03d      	beq.n	8001e2a <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_OscConfig+0x334>)
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	0049      	lsls	r1, r1, #1
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff60 	bl	8000c80 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dc4:	e016      	b.n	8001df4 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc6:	f7fe ff5b 	bl	8000c80 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d90f      	bls.n	8001df4 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1d9      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	fffeffff 	.word	0xfffeffff
 8001de0:	fffbffff 	.word	0xfffbffff
 8001de4:	ffffe0ff 	.word	0xffffe0ff
 8001de8:	080030cc 	.word	0x080030cc
 8001dec:	20000000 	.word	0x20000000
 8001df0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001df4:	4bca      	ldr	r3, [pc, #808]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0e2      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e00:	4bc7      	ldr	r3, [pc, #796]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4ac7      	ldr	r2, [pc, #796]	; (8002124 <HAL_RCC_OscConfig+0x680>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	4bc4      	ldr	r3, [pc, #784]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e14:	4bc2      	ldr	r3, [pc, #776]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	0a19      	lsrs	r1, r3, #8
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	061a      	lsls	r2, r3, #24
 8001e22:	4bbf      	ldr	r3, [pc, #764]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	e019      	b.n	8001e5e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e2a:	4bbd      	ldr	r3, [pc, #756]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4bbc      	ldr	r3, [pc, #752]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e30:	49bd      	ldr	r1, [pc, #756]	; (8002128 <HAL_RCC_OscConfig+0x684>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe ff23 	bl	8000c80 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e40:	f7fe ff1e 	bl	8000c80 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e19c      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e52:	4bb3      	ldr	r3, [pc, #716]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2208      	movs	r2, #8
 8001e64:	4013      	ands	r3, r2
 8001e66:	d036      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e70:	4bab      	ldr	r3, [pc, #684]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e74:	4baa      	ldr	r3, [pc, #680]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7fe ff00 	bl	8000c80 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7fe fefb 	bl	8000c80 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e179      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e98:	4ba1      	ldr	r3, [pc, #644]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d0f1      	beq.n	8001e86 <HAL_RCC_OscConfig+0x3e2>
 8001ea2:	e018      	b.n	8001ed6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b9e      	ldr	r3, [pc, #632]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea8:	4b9d      	ldr	r3, [pc, #628]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7fe fee6 	bl	8000c80 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eba:	f7fe fee1 	bl	8000c80 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e15f      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ecc:	4b94      	ldr	r3, [pc, #592]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d1f1      	bne.n	8001eba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4013      	ands	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x43e>
 8001ee0:	e0af      	b.n	8002042 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2323      	movs	r3, #35	; 0x23
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b8d      	ldr	r3, [pc, #564]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	055b      	lsls	r3, r3, #21
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d10a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b8a      	ldr	r3, [pc, #552]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001efa:	4b89      	ldr	r3, [pc, #548]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0549      	lsls	r1, r1, #21
 8001f00:	430a      	orrs	r2, r1
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f04:	2323      	movs	r3, #35	; 0x23
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b87      	ldr	r3, [pc, #540]	; (800212c <HAL_RCC_OscConfig+0x688>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d11a      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f18:	4b84      	ldr	r3, [pc, #528]	; (800212c <HAL_RCC_OscConfig+0x688>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b83      	ldr	r3, [pc, #524]	; (800212c <HAL_RCC_OscConfig+0x688>)
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0049      	lsls	r1, r1, #1
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7fe feab 	bl	8000c80 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7fe fea6 	bl	8000c80 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e124      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b7a      	ldr	r3, [pc, #488]	; (800212c <HAL_RCC_OscConfig+0x688>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4c6>
 8001f5a:	4b71      	ldr	r3, [pc, #452]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f5e:	4b70      	ldr	r3, [pc, #448]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	0049      	lsls	r1, r1, #1
 8001f64:	430a      	orrs	r2, r1
 8001f66:	651a      	str	r2, [r3, #80]	; 0x50
 8001f68:	e031      	b.n	8001fce <HAL_RCC_OscConfig+0x52a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4e8>
 8001f72:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f76:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f78:	496b      	ldr	r1, [pc, #428]	; (8002128 <HAL_RCC_OscConfig+0x684>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f7e:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f82:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f84:	496a      	ldr	r1, [pc, #424]	; (8002130 <HAL_RCC_OscConfig+0x68c>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	651a      	str	r2, [r3, #80]	; 0x50
 8001f8a:	e020      	b.n	8001fce <HAL_RCC_OscConfig+0x52a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	23a0      	movs	r3, #160	; 0xa0
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10e      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x512>
 8001f98:	4b61      	ldr	r3, [pc, #388]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9c:	4b60      	ldr	r3, [pc, #384]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	00c9      	lsls	r1, r1, #3
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	651a      	str	r2, [r3, #80]	; 0x50
 8001fa6:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	0049      	lsls	r1, r1, #1
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	651a      	str	r2, [r3, #80]	; 0x50
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0x52a>
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fba:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fbc:	495a      	ldr	r1, [pc, #360]	; (8002128 <HAL_RCC_OscConfig+0x684>)
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	651a      	str	r2, [r3, #80]	; 0x50
 8001fc2:	4b57      	ldr	r3, [pc, #348]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc6:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fc8:	4959      	ldr	r1, [pc, #356]	; (8002130 <HAL_RCC_OscConfig+0x68c>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d015      	beq.n	8002002 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fe53 	bl	8000c80 <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fde:	e009      	b.n	8001ff4 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7fe fe4e 	bl	8000c80 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_OscConfig+0x690>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0cb      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0ef      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x53c>
 8002000:	e014      	b.n	800202c <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7fe fe3d 	bl	8000c80 <HAL_GetTick>
 8002006:	0003      	movs	r3, r0
 8002008:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800200a:	e009      	b.n	8002020 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7fe fe38 	bl	8000c80 <HAL_GetTick>
 8002010:	0002      	movs	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x690>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0b5      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002020:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4013      	ands	r3, r2
 800202a:	d1ef      	bne.n	800200c <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800202c:	2323      	movs	r3, #35	; 0x23
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203a:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800203c:	493e      	ldr	r1, [pc, #248]	; (8002138 <HAL_RCC_OscConfig+0x694>)
 800203e:	400a      	ands	r2, r1
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	d100      	bne.n	800204c <HAL_RCC_OscConfig+0x5a8>
 800204a:	e09e      	b.n	800218a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d100      	bne.n	8002054 <HAL_RCC_OscConfig+0x5b0>
 8002052:	e077      	b.n	8002144 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2b02      	cmp	r3, #2
 800205a:	d145      	bne.n	80020e8 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205c:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002062:	4936      	ldr	r1, [pc, #216]	; (800213c <HAL_RCC_OscConfig+0x698>)
 8002064:	400a      	ands	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fe0a 	bl	8000c80 <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe fe05 	bl	8000c80 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e083      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	049b      	lsls	r3, r3, #18
 800208c:	4013      	ands	r3, r2
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x69c>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	431a      	orrs	r2, r3
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	0449      	lsls	r1, r1, #17
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7fe fddf 	bl	8000c80 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe fdda 	bl	8000c80 <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e058      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	049b      	lsls	r3, r3, #18
 80020e2:	4013      	ands	r3, r2
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x624>
 80020e6:	e050      	b.n	800218a <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020ee:	4913      	ldr	r1, [pc, #76]	; (800213c <HAL_RCC_OscConfig+0x698>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe fdc4 	bl	8000c80 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe fdbf 	bl	8000c80 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e03d      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	049b      	lsls	r3, r3, #18
 8002118:	4013      	ands	r3, r2
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x65a>
 800211c:	e035      	b.n	800218a <HAL_RCC_OscConfig+0x6e6>
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	ffff1fff 	.word	0xffff1fff
 8002128:	fffffeff 	.word	0xfffffeff
 800212c:	40007000 	.word	0x40007000
 8002130:	fffffbff 	.word	0xfffffbff
 8002134:	00001388 	.word	0x00001388
 8002138:	efffffff 	.word	0xefffffff
 800213c:	feffffff 	.word	0xfeffffff
 8002140:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x6f0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	025b      	lsls	r3, r3, #9
 800215c:	401a      	ands	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	429a      	cmp	r2, r3
 8002164:	d10f      	bne.n	8002186 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	23f0      	movs	r3, #240	; 0xf0
 800216a:	039b      	lsls	r3, r3, #14
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d107      	bne.n	8002186 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	041b      	lsls	r3, r3, #16
 800217c:	401a      	ands	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b00a      	add	sp, #40	; 0x28
 8002192:	bdb0      	pop	{r4, r5, r7, pc}
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e10d      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <HAL_RCC_ClockConfig+0x238>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d911      	bls.n	80021de <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b85      	ldr	r3, [pc, #532]	; (80023d0 <HAL_RCC_ClockConfig+0x238>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	4393      	bics	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <HAL_RCC_ClockConfig+0x238>)
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021cc:	4b80      	ldr	r3, [pc, #512]	; (80023d0 <HAL_RCC_ClockConfig+0x238>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0f4      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d009      	beq.n	80021fc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	4b7a      	ldr	r3, [pc, #488]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	22f0      	movs	r2, #240	; 0xf0
 80021ee:	4393      	bics	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	4b77      	ldr	r3, [pc, #476]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_RCC_ClockConfig+0x70>
 8002206:	e089      	b.n	800231c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d107      	bne.n	8002220 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002210:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	029b      	lsls	r3, r3, #10
 8002218:	4013      	ands	r3, r2
 800221a:	d120      	bne.n	800225e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0d3      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d107      	bne.n	8002238 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002228:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	049b      	lsls	r3, r3, #18
 8002230:	4013      	ands	r3, r2
 8002232:	d114      	bne.n	800225e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0c7      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002240:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2204      	movs	r2, #4
 8002246:	4013      	ands	r3, r2
 8002248:	d109      	bne.n	800225e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0bc      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800224e:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0b4      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2203      	movs	r2, #3
 8002264:	4393      	bics	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 800226e:	430a      	orrs	r2, r1
 8002270:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002272:	f7fe fd05 	bl	8000c80 <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d111      	bne.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002282:	e009      	b.n	8002298 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7fe fcfc 	bl	8000c80 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_RCC_ClockConfig+0x240>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e097      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002298:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	220c      	movs	r2, #12
 800229e:	4013      	ands	r3, r2
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d1ef      	bne.n	8002284 <HAL_RCC_ClockConfig+0xec>
 80022a4:	e03a      	b.n	800231c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d111      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ae:	e009      	b.n	80022c4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7fe fce6 	bl	8000c80 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_RCC_ClockConfig+0x240>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e081      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	220c      	movs	r2, #12
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d1ef      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x118>
 80022d0:	e024      	b.n	800231c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d11b      	bne.n	8002312 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022da:	e009      	b.n	80022f0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fcd0 	bl	8000c80 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <HAL_RCC_ClockConfig+0x240>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e06b      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	220c      	movs	r2, #12
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d1ef      	bne.n	80022dc <HAL_RCC_ClockConfig+0x144>
 80022fc:	e00e      	b.n	800231c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fe:	f7fe fcbf 	bl	8000c80 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	4a33      	ldr	r2, [pc, #204]	; (80023d8 <HAL_RCC_ClockConfig+0x240>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e05a      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	220c      	movs	r2, #12
 8002318:	4013      	ands	r3, r2
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <HAL_RCC_ClockConfig+0x238>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d211      	bcs.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <HAL_RCC_ClockConfig+0x238>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	4393      	bics	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_RCC_ClockConfig+0x238>)
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_ClockConfig+0x238>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e03c      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	d009      	beq.n	800236c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_RCC_ClockConfig+0x244>)
 800235e:	4013      	ands	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2208      	movs	r2, #8
 8002372:	4013      	ands	r3, r2
 8002374:	d00a      	beq.n	800238c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x248>)
 800237c:	4013      	ands	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	00da      	lsls	r2, r3, #3
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800238c:	f000 f82e 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002390:	0001      	movs	r1, r0
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_RCC_ClockConfig+0x23c>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	220f      	movs	r2, #15
 800239a:	4013      	ands	r3, r2
 800239c:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <HAL_RCC_ClockConfig+0x24c>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	000a      	movs	r2, r1
 80023a2:	40da      	lsrs	r2, r3
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_ClockConfig+0x250>)
 80023a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80023a8:	250b      	movs	r5, #11
 80023aa:	197c      	adds	r4, r7, r5
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7fe fc31 	bl	8000c14 <HAL_InitTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023b6:	197b      	adds	r3, r7, r5
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80023be:	230b      	movs	r3, #11
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	40022000 	.word	0x40022000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	00001388 	.word	0x00001388
 80023dc:	fffff8ff 	.word	0xfffff8ff
 80023e0:	ffffc7ff 	.word	0xffffc7ff
 80023e4:	080030cc 	.word	0x080030cc
 80023e8:	20000000 	.word	0x20000000

080023ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023f2:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	220c      	movs	r2, #12
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d00e      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x34>
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d00f      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x3a>
 8002406:	2b04      	cmp	r3, #4
 8002408:	d157      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800240a:	4b35      	ldr	r3, [pc, #212]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2210      	movs	r2, #16
 8002410:	4013      	ands	r3, r2
 8002412:	d002      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002414:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002416:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002418:	e05d      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800241c:	613b      	str	r3, [r7, #16]
      break;
 800241e:	e05a      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <HAL_RCC_GetSysClockFreq+0x100>)
 8002422:	613b      	str	r3, [r7, #16]
      break;
 8002424:	e057      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0c9b      	lsrs	r3, r3, #18
 800242a:	220f      	movs	r2, #15
 800242c:	4013      	ands	r3, r2
 800242e:	4a30      	ldr	r2, [pc, #192]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	0d9b      	lsrs	r3, r3, #22
 8002438:	2203      	movs	r2, #3
 800243a:	4013      	ands	r3, r2
 800243c:	3301      	adds	r3, #1
 800243e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	025b      	lsls	r3, r3, #9
 8002448:	4013      	ands	r3, r2
 800244a:	d00f      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	000a      	movs	r2, r1
 8002450:	0152      	lsls	r2, r2, #5
 8002452:	1a52      	subs	r2, r2, r1
 8002454:	0193      	lsls	r3, r2, #6
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	185b      	adds	r3, r3, r1
 800245c:	025b      	lsls	r3, r3, #9
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f7fd fe51 	bl	8000108 <__udivsi3>
 8002466:	0003      	movs	r3, r0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e023      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2210      	movs	r2, #16
 8002472:	4013      	ands	r3, r2
 8002474:	d00f      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	000a      	movs	r2, r1
 800247a:	0152      	lsls	r2, r2, #5
 800247c:	1a52      	subs	r2, r2, r1
 800247e:	0193      	lsls	r3, r2, #6
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	185b      	adds	r3, r3, r1
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	0018      	movs	r0, r3
 800248c:	f7fd fe3c 	bl	8000108 <__udivsi3>
 8002490:	0003      	movs	r3, r0
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e00e      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	000a      	movs	r2, r1
 800249a:	0152      	lsls	r2, r2, #5
 800249c:	1a52      	subs	r2, r2, r1
 800249e:	0193      	lsls	r3, r2, #6
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	185b      	adds	r3, r3, r1
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7fd fe2c 	bl	8000108 <__udivsi3>
 80024b0:	0003      	movs	r3, r0
 80024b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
      break;
 80024b8:	e00d      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	0b5b      	lsrs	r3, r3, #13
 80024c0:	2207      	movs	r2, #7
 80024c2:	4013      	ands	r3, r2
 80024c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	0212      	lsls	r2, r2, #8
 80024ce:	409a      	lsls	r2, r3
 80024d0:	0013      	movs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
      break;
 80024d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024d6:	693b      	ldr	r3, [r7, #16]
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b006      	add	sp, #24
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	003d0900 	.word	0x003d0900
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	007a1200 	.word	0x007a1200
 80024f0:	080030dc 	.word	0x080030dc

080024f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2220      	movs	r2, #32
 8002502:	4013      	ands	r3, r2
 8002504:	d100      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002506:	e0c7      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002508:	2317      	movs	r3, #23
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002510:	4b82      	ldr	r3, [pc, #520]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	055b      	lsls	r3, r3, #21
 8002518:	4013      	ands	r3, r2
 800251a:	d10a      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b7f      	ldr	r3, [pc, #508]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800251e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002520:	4b7e      	ldr	r3, [pc, #504]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0549      	lsls	r1, r1, #21
 8002526:	430a      	orrs	r2, r1
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800252a:	2317      	movs	r3, #23
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b7b      	ldr	r3, [pc, #492]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4013      	ands	r3, r2
 800253c:	d11a      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b78      	ldr	r3, [pc, #480]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b77      	ldr	r3, [pc, #476]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0049      	lsls	r1, r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254c:	f7fe fb98 	bl	8000c80 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	e008      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7fe fb93 	bl	8000c80 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0d4      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4013      	ands	r3, r2
 8002572:	d0f0      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002574:	4b69      	ldr	r3, [pc, #420]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	23c0      	movs	r3, #192	; 0xc0
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	23c0      	movs	r3, #192	; 0xc0
 8002586:	039b      	lsls	r3, r3, #14
 8002588:	4013      	ands	r3, r2
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d013      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	23c0      	movs	r3, #192	; 0xc0
 8002596:	029b      	lsls	r3, r3, #10
 8002598:	401a      	ands	r2, r3
 800259a:	23c0      	movs	r3, #192	; 0xc0
 800259c:	029b      	lsls	r3, r3, #10
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10a      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80025a2:	4b5e      	ldr	r3, [pc, #376]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	401a      	ands	r2, r3
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d101      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0ac      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80025b8:	4b58      	ldr	r3, [pc, #352]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80025ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025bc:	23c0      	movs	r3, #192	; 0xc0
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d03b      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	23c0      	movs	r3, #192	; 0xc0
 80025d0:	029b      	lsls	r3, r3, #10
 80025d2:	4013      	ands	r3, r2
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d033      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2220      	movs	r2, #32
 80025e0:	4013      	ands	r3, r2
 80025e2:	d02e      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80025e4:	4b4d      	ldr	r3, [pc, #308]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ee:	4b4b      	ldr	r3, [pc, #300]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80025f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025f2:	4b4a      	ldr	r3, [pc, #296]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0309      	lsls	r1, r1, #12
 80025f8:	430a      	orrs	r2, r1
 80025fa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80025fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002602:	4949      	ldr	r1, [pc, #292]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002604:	400a      	ands	r2, r1
 8002606:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002608:	4b44      	ldr	r3, [pc, #272]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4013      	ands	r3, r2
 8002616:	d014      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fb32 	bl	8000c80 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002620:	e009      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fb2d 	bl	8000c80 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	4a3f      	ldr	r2, [pc, #252]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e06d      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4013      	ands	r3, r2
 8002640:	d0ef      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	23c0      	movs	r3, #192	; 0xc0
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	401a      	ands	r2, r3
 800264c:	23c0      	movs	r3, #192	; 0xc0
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	429a      	cmp	r2, r3
 8002652:	d10c      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002654:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a35      	ldr	r2, [pc, #212]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	039b      	lsls	r3, r3, #14
 8002666:	401a      	ands	r2, r3
 8002668:	4b2c      	ldr	r3, [pc, #176]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002670:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	23c0      	movs	r3, #192	; 0xc0
 8002678:	029b      	lsls	r3, r3, #10
 800267a:	401a      	ands	r2, r3
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800267e:	430a      	orrs	r2, r1
 8002680:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002682:	2317      	movs	r3, #23
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800268e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002692:	4928      	ldr	r1, [pc, #160]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002694:	400a      	ands	r2, r1
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	220c      	movs	r2, #12
 80026a8:	4393      	bics	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2204      	movs	r2, #4
 80026bc:	4013      	ands	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	4013      	ands	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	4a16      	ldr	r2, [pc, #88]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	4013      	ands	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002702:	4013      	ands	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800270c:	430a      	orrs	r2, r1
 800270e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b006      	add	sp, #24
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
 8002724:	fffcffff 	.word	0xfffcffff
 8002728:	fff7ffff 	.word	0xfff7ffff
 800272c:	00001388 	.word	0x00001388
 8002730:	ffcfffff 	.word	0xffcfffff
 8002734:	efffffff 	.word	0xefffffff
 8002738:	fffff3ff 	.word	0xfffff3ff
 800273c:	ffffcfff 	.word	0xffffcfff
 8002740:	fff3ffff 	.word	0xfff3ffff

08002744 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e08e      	b.n	8002874 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2221      	movs	r2, #33	; 0x21
 800275a:	5c9b      	ldrb	r3, [r3, r2]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d107      	bne.n	8002772 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	2100      	movs	r1, #0
 8002768:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	f7fe f953 	bl	8000a18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2221      	movs	r2, #33	; 0x21
 8002776:	2102      	movs	r1, #2
 8002778:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	22ca      	movs	r2, #202	; 0xca
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2253      	movs	r2, #83	; 0x53
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fbb2 	bl	8002ef6 <RTC_EnterInitMode>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d009      	beq.n	80027aa <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2221      	movs	r2, #33	; 0x21
 80027a2:	2104      	movs	r1, #4
 80027a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e064      	b.n	8002874 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4931      	ldr	r1, [pc, #196]	; (800287c <HAL_RTC_Init+0x138>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68d2      	ldr	r2, [r2, #12]
 80027e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6919      	ldr	r1, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	438a      	bics	r2, r1
 8002804:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2103      	movs	r1, #3
 8002812:	438a      	bics	r2, r1
 8002814:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2220      	movs	r2, #32
 8002836:	4013      	ands	r3, r2
 8002838:	d113      	bne.n	8002862 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 fb33 	bl	8002ea8 <HAL_RTC_WaitForSynchro>
 8002842:	1e03      	subs	r3, r0, #0
 8002844:	d00d      	beq.n	8002862 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	22ff      	movs	r2, #255	; 0xff
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2221      	movs	r2, #33	; 0x21
 8002852:	2104      	movs	r1, #4
 8002854:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	2100      	movs	r1, #0
 800285c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e008      	b.n	8002874 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2221      	movs	r2, #33	; 0x21
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002872:	2300      	movs	r3, #0
  }
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}
 800287c:	ff8fffbf 	.word	0xff8fffbf

08002880 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	5c9b      	ldrb	r3, [r3, r2]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_RTC_SetTime+0x1a>
 8002896:	2302      	movs	r3, #2
 8002898:	e0ad      	b.n	80029f6 <HAL_RTC_SetTime+0x176>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2221      	movs	r2, #33	; 0x21
 80028a6:	2102      	movs	r1, #2
 80028a8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d125      	bne.n	80028fc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	4013      	ands	r3, r2
 80028ba:	d102      	bne.n	80028c2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2200      	movs	r2, #0
 80028c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 fb3f 	bl	8002f4a <RTC_ByteToBcd2>
 80028cc:	0003      	movs	r3, r0
 80028ce:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	785b      	ldrb	r3, [r3, #1]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 fb38 	bl	8002f4a <RTC_ByteToBcd2>
 80028da:	0003      	movs	r3, r0
 80028dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028de:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	789b      	ldrb	r3, [r3, #2]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 fb30 	bl	8002f4a <RTC_ByteToBcd2>
 80028ea:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80028ec:	0022      	movs	r2, r4
 80028ee:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	78db      	ldrb	r3, [r3, #3]
 80028f4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e017      	b.n	800292c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2240      	movs	r2, #64	; 0x40
 8002904:	4013      	ands	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800291a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002920:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	78db      	ldrb	r3, [r3, #3]
 8002926:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	22ca      	movs	r2, #202	; 0xca
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2253      	movs	r2, #83	; 0x53
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 fad9 	bl	8002ef6 <RTC_EnterInitMode>
 8002944:	1e03      	subs	r3, r0, #0
 8002946:	d00d      	beq.n	8002964 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	2104      	movs	r1, #4
 8002956:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e048      	b.n	80029f6 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4925      	ldr	r1, [pc, #148]	; (8002a00 <HAL_RTC_SetTime+0x180>)
 800296c:	400a      	ands	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4922      	ldr	r1, [pc, #136]	; (8002a04 <HAL_RTC_SetTime+0x184>)
 800297c:	400a      	ands	r2, r1
 800297e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	431a      	orrs	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	438a      	bics	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2220      	movs	r2, #32
 80029b0:	4013      	ands	r3, r2
 80029b2:	d113      	bne.n	80029dc <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fa76 	bl	8002ea8 <HAL_RTC_WaitForSynchro>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d00d      	beq.n	80029dc <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	22ff      	movs	r2, #255	; 0xff
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2221      	movs	r2, #33	; 0x21
 80029cc:	2104      	movs	r1, #4
 80029ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e00c      	b.n	80029f6 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2221      	movs	r2, #33	; 0x21
 80029e8:	2101      	movs	r1, #1
 80029ea:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	2100      	movs	r1, #0
 80029f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
  }
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b007      	add	sp, #28
 80029fc:	bd90      	pop	{r4, r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	007f7f7f 	.word	0x007f7f7f
 8002a04:	fffbffff 	.word	0xfffbffff

08002a08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	5c9b      	ldrb	r3, [r3, r2]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_RTC_SetDate+0x1a>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e099      	b.n	8002b56 <HAL_RTC_SetDate+0x14e>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2221      	movs	r2, #33	; 0x21
 8002a2e:	2102      	movs	r1, #2
 8002a30:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10e      	bne.n	8002a56 <HAL_RTC_SetDate+0x4e>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	2310      	movs	r3, #16
 8002a40:	4013      	ands	r3, r2
 8002a42:	d008      	beq.n	8002a56 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	330a      	adds	r3, #10
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11c      	bne.n	8002a96 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	78db      	ldrb	r3, [r3, #3]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 fa72 	bl	8002f4a <RTC_ByteToBcd2>
 8002a66:	0003      	movs	r3, r0
 8002a68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fa6b 	bl	8002f4a <RTC_ByteToBcd2>
 8002a74:	0003      	movs	r3, r0
 8002a76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	789b      	ldrb	r3, [r3, #2]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 fa63 	bl	8002f4a <RTC_ByteToBcd2>
 8002a84:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a86:	0022      	movs	r2, r4
 8002a88:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e00e      	b.n	8002ab4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002aa2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002aa8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	22ca      	movs	r2, #202	; 0xca
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2253      	movs	r2, #83	; 0x53
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 fa15 	bl	8002ef6 <RTC_EnterInitMode>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	22ff      	movs	r2, #255	; 0xff
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2221      	movs	r2, #33	; 0x21
 8002adc:	2104      	movs	r1, #4
 8002ade:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e034      	b.n	8002b56 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	491b      	ldr	r1, [pc, #108]	; (8002b60 <HAL_RTC_SetDate+0x158>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	438a      	bics	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	4013      	ands	r3, r2
 8002b12:	d113      	bne.n	8002b3c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 f9c6 	bl	8002ea8 <HAL_RTC_WaitForSynchro>
 8002b1c:	1e03      	subs	r3, r0, #0
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	22ff      	movs	r2, #255	; 0xff
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2221      	movs	r2, #33	; 0x21
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e00c      	b.n	8002b56 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2221      	movs	r2, #33	; 0x21
 8002b48:	2101      	movs	r1, #1
 8002b4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	2100      	movs	r1, #0
 8002b52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b54:	2300      	movs	r3, #0
  }
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b007      	add	sp, #28
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	00ffff3f 	.word	0x00ffff3f

08002b64 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	5c9b      	ldrb	r3, [r3, r2]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_RTC_SetAlarm_IT+0x1a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e130      	b.n	8002de0 <HAL_RTC_SetAlarm_IT+0x27c>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2221      	movs	r2, #33	; 0x21
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d136      	bne.n	8002c02 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f9cd 	bl	8002f4a <RTC_ByteToBcd2>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 f9c6 	bl	8002f4a <RTC_ByteToBcd2>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002bc2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 f9be 	bl	8002f4a <RTC_ByteToBcd2>
 8002bce:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002bd0:	0022      	movs	r2, r4
 8002bd2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	78db      	ldrb	r3, [r3, #3]
 8002bd8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2220      	movs	r2, #32
 8002be2:	5c9b      	ldrb	r3, [r3, r2]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 f9b0 	bl	8002f4a <RTC_ByteToBcd2>
 8002bea:	0003      	movs	r3, r0
 8002bec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002bee:	0022      	movs	r2, r4
 8002bf0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002bf6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	e022      	b.n	8002c48 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2240      	movs	r2, #64	; 0x40
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d102      	bne.n	8002c14 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	785b      	ldrb	r3, [r3, #1]
 8002c1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c20:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	78db      	ldrb	r3, [r3, #3]
 8002c2c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002c2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2120      	movs	r1, #32
 8002c34:	5c5b      	ldrb	r3, [r3, r1]
 8002c36:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	22ca      	movs	r2, #202	; 0xca
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2253      	movs	r2, #83	; 0x53
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d14e      	bne.n	8002d0e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	495b      	ldr	r1, [pc, #364]	; (8002de8 <HAL_RTC_SetAlarm_IT+0x284>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	22ff      	movs	r2, #255	; 0xff
 8002c88:	401a      	ands	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4957      	ldr	r1, [pc, #348]	; (8002dec <HAL_RTC_SetAlarm_IT+0x288>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c94:	f7fd fff4 	bl	8000c80 <HAL_GetTick>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c9c:	e016      	b.n	8002ccc <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c9e:	f7fd ffef 	bl	8000c80 <HAL_GetTick>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	1ad2      	subs	r2, r2, r3
 8002ca8:	23fa      	movs	r3, #250	; 0xfa
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d90d      	bls.n	8002ccc <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2221      	movs	r2, #33	; 0x21
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e089      	b.n	8002de0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d0e2      	beq.n	8002c9e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	0049      	lsls	r1, r1, #1
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0149      	lsls	r1, r1, #5
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e04d      	b.n	8002daa <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4935      	ldr	r1, [pc, #212]	; (8002df0 <HAL_RTC_SetAlarm_IT+0x28c>)
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	401a      	ands	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4931      	ldr	r1, [pc, #196]	; (8002df4 <HAL_RTC_SetAlarm_IT+0x290>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d32:	f7fd ffa5 	bl	8000c80 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d3a:	e016      	b.n	8002d6a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d3c:	f7fd ffa0 	bl	8000c80 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad2      	subs	r2, r2, r3
 8002d46:	23fa      	movs	r3, #250	; 0xfa
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90d      	bls.n	8002d6a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2221      	movs	r2, #33	; 0x21
 8002d5a:	2103      	movs	r1, #3
 8002d5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e03a      	b.n	8002de0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2202      	movs	r2, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	d0e2      	beq.n	8002d3c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0089      	lsls	r1, r1, #2
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2180      	movs	r1, #128	; 0x80
 8002da4:	0189      	lsls	r1, r1, #6
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RTC_SetAlarm_IT+0x294>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RTC_SetAlarm_IT+0x294>)
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	0289      	lsls	r1, r1, #10
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_RTC_SetAlarm_IT+0x294>)
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_RTC_SetAlarm_IT+0x294>)
 8002dbe:	2180      	movs	r1, #128	; 0x80
 8002dc0:	0289      	lsls	r1, r1, #10
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	22ff      	movs	r2, #255	; 0xff
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2221      	movs	r2, #33	; 0x21
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b009      	add	sp, #36	; 0x24
 8002de6:	bd90      	pop	{r4, r7, pc}
 8002de8:	fffffeff 	.word	0xfffffeff
 8002dec:	fffffe7f 	.word	0xfffffe7f
 8002df0:	fffffdff 	.word	0xfffffdff
 8002df4:	fffffd7f 	.word	0xfffffd7f
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	015b      	lsls	r3, r3, #5
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d014      	beq.n	8002e3c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d00d      	beq.n	8002e3c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f838 	bl	8002e98 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	22ff      	movs	r2, #255	; 0xff
 8002e30:	401a      	ands	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4915      	ldr	r1, [pc, #84]	; (8002e8c <HAL_RTC_AlarmIRQHandler+0x90>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	4013      	ands	r3, r2
 8002e48:	d014      	beq.n	8002e74 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4013      	ands	r3, r2
 8002e56:	d00d      	beq.n	8002e74 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 f89e 	bl	8002f9c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	401a      	ands	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	0292      	lsls	r2, r2, #10
 8002e7a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2221      	movs	r2, #33	; 0x21
 8002e80:	2101      	movs	r1, #1
 8002e82:	5499      	strb	r1, [r3, r2]
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	fffffe7f 	.word	0xfffffe7f
 8002e90:	fffffd7f 	.word	0xfffffd7f
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	21a0      	movs	r1, #160	; 0xa0
 8002ebc:	438a      	bics	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002ec0:	f7fd fede 	bl	8000c80 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002eca:	f7fd fed9 	bl	8000c80 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad2      	subs	r2, r2, r3
 8002ed4:	23fa      	movs	r3, #250	; 0xfa
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d901      	bls.n	8002ee0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e006      	b.n	8002eee <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d0ee      	beq.n	8002eca <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2240      	movs	r2, #64	; 0x40
 8002f06:	4013      	ands	r3, r2
 8002f08:	d11a      	bne.n	8002f40 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4252      	negs	r2, r2
 8002f12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002f14:	f7fd feb4 	bl	8000c80 <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002f1c:	e00a      	b.n	8002f34 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002f1e:	f7fd feaf 	bl	8000c80 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad2      	subs	r2, r2, r3
 8002f28:	23fa      	movs	r3, #250	; 0xfa
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d901      	bls.n	8002f34 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e006      	b.n	8002f42 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d0ee      	beq.n	8002f1e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	0002      	movs	r2, r0
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002f5a:	230b      	movs	r3, #11
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	1dfa      	adds	r2, r7, #7
 8002f60:	7812      	ldrb	r2, [r2, #0]
 8002f62:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002f64:	e008      	b.n	8002f78 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002f6c:	220b      	movs	r2, #11
 8002f6e:	18bb      	adds	r3, r7, r2
 8002f70:	18ba      	adds	r2, r7, r2
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	3a0a      	subs	r2, #10
 8002f76:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002f78:	230b      	movs	r3, #11
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d8f1      	bhi.n	8002f66 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	230b      	movs	r3, #11
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	b2db      	uxtb	r3, r3
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2600      	movs	r6, #0
 8002fb0:	4d0c      	ldr	r5, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1b64      	subs	r4, r4, r5
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	f000 f879 	bl	80030b4 <_init>
 8002fc2:	4d0a      	ldr	r5, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	00b3      	lsls	r3, r6, #2
 8002fd2:	58eb      	ldr	r3, [r5, r3]
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	00b3      	lsls	r3, r6, #2
 8002fdc:	58eb      	ldr	r3, [r5, r3]
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	0800310c 	.word	0x0800310c
 8002fe8:	0800310c 	.word	0x0800310c
 8002fec:	0800310c 	.word	0x0800310c
 8002ff0:	08003110 	.word	0x08003110

08002ff4 <__itoa>:
 8002ff4:	1e93      	subs	r3, r2, #2
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	000c      	movs	r4, r1
 8002ffa:	2b22      	cmp	r3, #34	; 0x22
 8002ffc:	d904      	bls.n	8003008 <__itoa+0x14>
 8002ffe:	2300      	movs	r3, #0
 8003000:	001c      	movs	r4, r3
 8003002:	700b      	strb	r3, [r1, #0]
 8003004:	0020      	movs	r0, r4
 8003006:	bd10      	pop	{r4, pc}
 8003008:	2a0a      	cmp	r2, #10
 800300a:	d109      	bne.n	8003020 <__itoa+0x2c>
 800300c:	2800      	cmp	r0, #0
 800300e:	da07      	bge.n	8003020 <__itoa+0x2c>
 8003010:	232d      	movs	r3, #45	; 0x2d
 8003012:	700b      	strb	r3, [r1, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	4240      	negs	r0, r0
 8003018:	1861      	adds	r1, r4, r1
 800301a:	f000 f80f 	bl	800303c <__utoa>
 800301e:	e7f1      	b.n	8003004 <__itoa+0x10>
 8003020:	2100      	movs	r1, #0
 8003022:	e7f9      	b.n	8003018 <__itoa+0x24>

08003024 <itoa>:
 8003024:	b510      	push	{r4, lr}
 8003026:	f7ff ffe5 	bl	8002ff4 <__itoa>
 800302a:	bd10      	pop	{r4, pc}

0800302c <memset>:
 800302c:	0003      	movs	r3, r0
 800302e:	1812      	adds	r2, r2, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	7019      	strb	r1, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <__utoa>:
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	0017      	movs	r7, r2
 8003040:	b08d      	sub	sp, #52	; 0x34
 8003042:	2225      	movs	r2, #37	; 0x25
 8003044:	0006      	movs	r6, r0
 8003046:	000d      	movs	r5, r1
 8003048:	a802      	add	r0, sp, #8
 800304a:	4914      	ldr	r1, [pc, #80]	; (800309c <__utoa+0x60>)
 800304c:	f000 f828 	bl	80030a0 <memcpy>
 8003050:	aa02      	add	r2, sp, #8
 8003052:	1ebb      	subs	r3, r7, #2
 8003054:	2400      	movs	r4, #0
 8003056:	9201      	str	r2, [sp, #4]
 8003058:	2b22      	cmp	r3, #34	; 0x22
 800305a:	d905      	bls.n	8003068 <__utoa+0x2c>
 800305c:	702c      	strb	r4, [r5, #0]
 800305e:	0025      	movs	r5, r4
 8003060:	0028      	movs	r0, r5
 8003062:	b00d      	add	sp, #52	; 0x34
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003066:	0014      	movs	r4, r2
 8003068:	0030      	movs	r0, r6
 800306a:	0039      	movs	r1, r7
 800306c:	f7fd f8d2 	bl	8000214 <__aeabi_uidivmod>
 8003070:	4684      	mov	ip, r0
 8003072:	9801      	ldr	r0, [sp, #4]
 8003074:	1c62      	adds	r2, r4, #1
 8003076:	18ab      	adds	r3, r5, r2
 8003078:	5c41      	ldrb	r1, [r0, r1]
 800307a:	1e5e      	subs	r6, r3, #1
 800307c:	7031      	strb	r1, [r6, #0]
 800307e:	4666      	mov	r6, ip
 8003080:	2e00      	cmp	r6, #0
 8003082:	d1f0      	bne.n	8003066 <__utoa+0x2a>
 8003084:	701e      	strb	r6, [r3, #0]
 8003086:	002b      	movs	r3, r5
 8003088:	1b5a      	subs	r2, r3, r5
 800308a:	4294      	cmp	r4, r2
 800308c:	dde8      	ble.n	8003060 <__utoa+0x24>
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	5d29      	ldrb	r1, [r5, r4]
 8003092:	7019      	strb	r1, [r3, #0]
 8003094:	552a      	strb	r2, [r5, r4]
 8003096:	3301      	adds	r3, #1
 8003098:	3c01      	subs	r4, #1
 800309a:	e7f5      	b.n	8003088 <__utoa+0x4c>
 800309c:	080030e5 	.word	0x080030e5

080030a0 <memcpy>:
 80030a0:	2300      	movs	r3, #0
 80030a2:	b510      	push	{r4, lr}
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d100      	bne.n	80030aa <memcpy+0xa>
 80030a8:	bd10      	pop	{r4, pc}
 80030aa:	5ccc      	ldrb	r4, [r1, r3]
 80030ac:	54c4      	strb	r4, [r0, r3]
 80030ae:	3301      	adds	r3, #1
 80030b0:	e7f8      	b.n	80030a4 <memcpy+0x4>
	...

080030b4 <_init>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr

080030c0 <_fini>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr
