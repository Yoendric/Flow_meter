
check_flujo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002518  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080025d8  080025d8  000125d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002644  08002644  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800264c  0800264c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000004  08002658  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000064  2000012c  08002658  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af22  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dd2  00000000  00000000  0002af4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004c8e  00000000  00000000  0002cd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000810  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000950  00000000  00000000  000321c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011985  00000000  00000000  00032b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008927  00000000  00000000  00044495  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006dede  00000000  00000000  0004cdbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000bac9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001800  00000000  00000000  000bad18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025c0 	.word	0x080025c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080025c0 	.word	0x080025c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	464f      	mov	r7, r9
 8000288:	4646      	mov	r6, r8
 800028a:	46d6      	mov	lr, sl
 800028c:	b5c0      	push	{r6, r7, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	b082      	sub	sp, #8
 8000292:	000d      	movs	r5, r1
 8000294:	4691      	mov	r9, r2
 8000296:	4698      	mov	r8, r3
 8000298:	428b      	cmp	r3, r1
 800029a:	d82f      	bhi.n	80002fc <__udivmoddi4+0x78>
 800029c:	d02c      	beq.n	80002f8 <__udivmoddi4+0x74>
 800029e:	4641      	mov	r1, r8
 80002a0:	4648      	mov	r0, r9
 80002a2:	f000 f8b1 	bl	8000408 <__clzdi2>
 80002a6:	0029      	movs	r1, r5
 80002a8:	0006      	movs	r6, r0
 80002aa:	0020      	movs	r0, r4
 80002ac:	f000 f8ac 	bl	8000408 <__clzdi2>
 80002b0:	1a33      	subs	r3, r6, r0
 80002b2:	469c      	mov	ip, r3
 80002b4:	3b20      	subs	r3, #32
 80002b6:	469a      	mov	sl, r3
 80002b8:	d500      	bpl.n	80002bc <__udivmoddi4+0x38>
 80002ba:	e076      	b.n	80003aa <__udivmoddi4+0x126>
 80002bc:	464b      	mov	r3, r9
 80002be:	4652      	mov	r2, sl
 80002c0:	4093      	lsls	r3, r2
 80002c2:	001f      	movs	r7, r3
 80002c4:	464b      	mov	r3, r9
 80002c6:	4662      	mov	r2, ip
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d828      	bhi.n	8000322 <__udivmoddi4+0x9e>
 80002d0:	d025      	beq.n	800031e <__udivmoddi4+0x9a>
 80002d2:	4653      	mov	r3, sl
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	41bd      	sbcs	r5, r7
 80002d8:	2b00      	cmp	r3, #0
 80002da:	da00      	bge.n	80002de <__udivmoddi4+0x5a>
 80002dc:	e07b      	b.n	80003d6 <__udivmoddi4+0x152>
 80002de:	2200      	movs	r2, #0
 80002e0:	2300      	movs	r3, #0
 80002e2:	9200      	str	r2, [sp, #0]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2301      	movs	r3, #1
 80002e8:	4652      	mov	r2, sl
 80002ea:	4093      	lsls	r3, r2
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2301      	movs	r3, #1
 80002f0:	4662      	mov	r2, ip
 80002f2:	4093      	lsls	r3, r2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	e018      	b.n	800032a <__udivmoddi4+0xa6>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	d9d0      	bls.n	800029e <__udivmoddi4+0x1a>
 80002fc:	2200      	movs	r2, #0
 80002fe:	2300      	movs	r3, #0
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <__udivmoddi4+0x8a>
 800030a:	601c      	str	r4, [r3, #0]
 800030c:	605d      	str	r5, [r3, #4]
 800030e:	9800      	ldr	r0, [sp, #0]
 8000310:	9901      	ldr	r1, [sp, #4]
 8000312:	b002      	add	sp, #8
 8000314:	bc1c      	pop	{r2, r3, r4}
 8000316:	4690      	mov	r8, r2
 8000318:	4699      	mov	r9, r3
 800031a:	46a2      	mov	sl, r4
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	42a3      	cmp	r3, r4
 8000320:	d9d7      	bls.n	80002d2 <__udivmoddi4+0x4e>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	4663      	mov	r3, ip
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0e9      	beq.n	8000304 <__udivmoddi4+0x80>
 8000330:	07fb      	lsls	r3, r7, #31
 8000332:	4698      	mov	r8, r3
 8000334:	4641      	mov	r1, r8
 8000336:	0872      	lsrs	r2, r6, #1
 8000338:	430a      	orrs	r2, r1
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	4666      	mov	r6, ip
 800033e:	e00e      	b.n	800035e <__udivmoddi4+0xda>
 8000340:	42ab      	cmp	r3, r5
 8000342:	d101      	bne.n	8000348 <__udivmoddi4+0xc4>
 8000344:	42a2      	cmp	r2, r4
 8000346:	d80c      	bhi.n	8000362 <__udivmoddi4+0xde>
 8000348:	1aa4      	subs	r4, r4, r2
 800034a:	419d      	sbcs	r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	1924      	adds	r4, r4, r4
 8000350:	416d      	adcs	r5, r5
 8000352:	2100      	movs	r1, #0
 8000354:	3e01      	subs	r6, #1
 8000356:	1824      	adds	r4, r4, r0
 8000358:	414d      	adcs	r5, r1
 800035a:	2e00      	cmp	r6, #0
 800035c:	d006      	beq.n	800036c <__udivmoddi4+0xe8>
 800035e:	42ab      	cmp	r3, r5
 8000360:	d9ee      	bls.n	8000340 <__udivmoddi4+0xbc>
 8000362:	3e01      	subs	r6, #1
 8000364:	1924      	adds	r4, r4, r4
 8000366:	416d      	adcs	r5, r5
 8000368:	2e00      	cmp	r6, #0
 800036a:	d1f8      	bne.n	800035e <__udivmoddi4+0xda>
 800036c:	9800      	ldr	r0, [sp, #0]
 800036e:	9901      	ldr	r1, [sp, #4]
 8000370:	4653      	mov	r3, sl
 8000372:	1900      	adds	r0, r0, r4
 8000374:	4169      	adcs	r1, r5
 8000376:	2b00      	cmp	r3, #0
 8000378:	db23      	blt.n	80003c2 <__udivmoddi4+0x13e>
 800037a:	002b      	movs	r3, r5
 800037c:	4652      	mov	r2, sl
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	4664      	mov	r4, ip
 8000384:	40e2      	lsrs	r2, r4
 8000386:	001c      	movs	r4, r3
 8000388:	4653      	mov	r3, sl
 800038a:	0015      	movs	r5, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	db2d      	blt.n	80003ec <__udivmoddi4+0x168>
 8000390:	0026      	movs	r6, r4
 8000392:	4657      	mov	r7, sl
 8000394:	40be      	lsls	r6, r7
 8000396:	0033      	movs	r3, r6
 8000398:	0026      	movs	r6, r4
 800039a:	4667      	mov	r7, ip
 800039c:	40be      	lsls	r6, r7
 800039e:	0032      	movs	r2, r6
 80003a0:	1a80      	subs	r0, r0, r2
 80003a2:	4199      	sbcs	r1, r3
 80003a4:	9000      	str	r0, [sp, #0]
 80003a6:	9101      	str	r1, [sp, #4]
 80003a8:	e7ac      	b.n	8000304 <__udivmoddi4+0x80>
 80003aa:	4662      	mov	r2, ip
 80003ac:	2320      	movs	r3, #32
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	464a      	mov	r2, r9
 80003b2:	40da      	lsrs	r2, r3
 80003b4:	4661      	mov	r1, ip
 80003b6:	0013      	movs	r3, r2
 80003b8:	4642      	mov	r2, r8
 80003ba:	408a      	lsls	r2, r1
 80003bc:	0017      	movs	r7, r2
 80003be:	431f      	orrs	r7, r3
 80003c0:	e780      	b.n	80002c4 <__udivmoddi4+0x40>
 80003c2:	4662      	mov	r2, ip
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4666      	mov	r6, ip
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4313      	orrs	r3, r2
 80003d4:	e7d4      	b.n	8000380 <__udivmoddi4+0xfc>
 80003d6:	4662      	mov	r2, ip
 80003d8:	2320      	movs	r3, #32
 80003da:	2100      	movs	r1, #0
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	2200      	movs	r2, #0
 80003e0:	9100      	str	r1, [sp, #0]
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	2201      	movs	r2, #1
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	9201      	str	r2, [sp, #4]
 80003ea:	e780      	b.n	80002ee <__udivmoddi4+0x6a>
 80003ec:	2320      	movs	r3, #32
 80003ee:	4662      	mov	r2, ip
 80003f0:	0026      	movs	r6, r4
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	40de      	lsrs	r6, r3
 80003f6:	002f      	movs	r7, r5
 80003f8:	46b0      	mov	r8, r6
 80003fa:	4666      	mov	r6, ip
 80003fc:	40b7      	lsls	r7, r6
 80003fe:	4646      	mov	r6, r8
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c8      	b.n	8000398 <__udivmoddi4+0x114>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <COUNTER_CONSUMER>:
			SUM_DEC=0;
			break;
	}
}
void COUNTER_CONSUMER(void){
	SUM_DEC++;
 800045c:	4a05      	ldr	r2, [pc, #20]	; (8000474 <COUNTER_CONSUMER+0x18>)
 800045e:	7813      	ldrb	r3, [r2, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	b2db      	uxtb	r3, r3
 8000464:	7013      	strb	r3, [r2, #0]
	SUM_COUNTER--;
 8000466:	4a04      	ldr	r2, [pc, #16]	; (8000478 <COUNTER_CONSUMER+0x1c>)
 8000468:	7813      	ldrb	r3, [r2, #0]
 800046a:	3b01      	subs	r3, #1
 800046c:	b2db      	uxtb	r3, r3
 800046e:	7013      	strb	r3, [r2, #0]
}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	20000020 	.word	0x20000020
 8000478:	20000021 	.word	0x20000021

0800047c <TRANSMIT_WSSFM10R2AT>:
void TRANSMIT_WSSFM10R2AT(char * buff, int ArrayLength){
 800047c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800047e:	000d      	movs	r5, r1
 8000480:	0006      	movs	r6, r0
	char AT_COMANDO[10];
	sprintf(AT_COMANDO,"AT$RC\r\n");
 8000482:	491f      	ldr	r1, [pc, #124]	; (8000500 <TRANSMIT_WSSFM10R2AT+0x84>)
 8000484:	a801      	add	r0, sp, #4
 8000486:	f002 f857 	bl	8002538 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 800048a:	a801      	add	r0, sp, #4
 800048c:	f7ff fe3c 	bl	8000108 <strlen>
 8000490:	4c1c      	ldr	r4, [pc, #112]	; (8000504 <TRANSMIT_WSSFM10R2AT+0x88>)
 8000492:	b282      	uxth	r2, r0
 8000494:	2364      	movs	r3, #100	; 0x64
 8000496:	a901      	add	r1, sp, #4
 8000498:	0020      	movs	r0, r4
 800049a:	f001 ff39 	bl	8002310 <HAL_UART_Transmit>
	HAL_Delay(100);
 800049e:	2064      	movs	r0, #100	; 0x64
 80004a0:	f000 fba4 	bl	8000bec <HAL_Delay>
	sprintf(AT_COMANDO,"AT$SF=");
 80004a4:	4918      	ldr	r1, [pc, #96]	; (8000508 <TRANSMIT_WSSFM10R2AT+0x8c>)
 80004a6:	a801      	add	r0, sp, #4
 80004a8:	f002 f846 	bl	8002538 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 80004ac:	a801      	add	r0, sp, #4
 80004ae:	f7ff fe2b 	bl	8000108 <strlen>
 80004b2:	2364      	movs	r3, #100	; 0x64
 80004b4:	b282      	uxth	r2, r0
 80004b6:	a901      	add	r1, sp, #4
 80004b8:	0020      	movs	r0, r4
 80004ba:	f001 ff29 	bl	8002310 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)buff,(uint16_t)ArrayLength,(uint32_t)100);
 80004be:	b2aa      	uxth	r2, r5
 80004c0:	2364      	movs	r3, #100	; 0x64
 80004c2:	0031      	movs	r1, r6
 80004c4:	0020      	movs	r0, r4
 80004c6:	f001 ff23 	bl	8002310 <HAL_UART_Transmit>
    sprintf(AT_COMANDO,"\r\n");
 80004ca:	4910      	ldr	r1, [pc, #64]	; (800050c <TRANSMIT_WSSFM10R2AT+0x90>)
 80004cc:	a801      	add	r0, sp, #4
 80004ce:	f002 f833 	bl	8002538 <strcpy>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 80004d2:	a801      	add	r0, sp, #4
 80004d4:	f7ff fe18 	bl	8000108 <strlen>
	for(int i=0;i<10;i++){
		HAL_GPIO_TogglePin(EN_VCC3V3s_GPIO_Port, EN_VCC3V3s_Pin);
 80004d8:	25a0      	movs	r5, #160	; 0xa0
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 80004da:	b282      	uxth	r2, r0
 80004dc:	2364      	movs	r3, #100	; 0x64
 80004de:	0020      	movs	r0, r4
 80004e0:	a901      	add	r1, sp, #4
 80004e2:	f001 ff15 	bl	8002310 <HAL_UART_Transmit>
 80004e6:	240a      	movs	r4, #10
		HAL_GPIO_TogglePin(EN_VCC3V3s_GPIO_Port, EN_VCC3V3s_Pin);
 80004e8:	05ed      	lsls	r5, r5, #23
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0028      	movs	r0, r5
 80004ee:	f000 ff0b 	bl	8001308 <HAL_GPIO_TogglePin>
 80004f2:	3c01      	subs	r4, #1
		HAL_Delay(200);
 80004f4:	20c8      	movs	r0, #200	; 0xc8
 80004f6:	f000 fb79 	bl	8000bec <HAL_Delay>
	for(int i=0;i<10;i++){
 80004fa:	2c00      	cmp	r4, #0
 80004fc:	d1f5      	bne.n	80004ea <TRANSMIT_WSSFM10R2AT+0x6e>
	}
}
 80004fe:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000500:	080025e1 	.word	0x080025e1
 8000504:	20000024 	.word	0x20000024
 8000508:	080025e9 	.word	0x080025e9
 800050c:	080025de 	.word	0x080025de

08000510 <CONFIG_CHANNEL_ADC>:
uint32_t CONFIG_CHANNEL_ADC(uint32_t channel){
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = channel;
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000510:	2380      	movs	r3, #128	; 0x80
uint32_t CONFIG_CHANNEL_ADC(uint32_t channel){
 8000512:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000514:	4c0e      	ldr	r4, [pc, #56]	; (8000550 <CONFIG_CHANNEL_ADC+0x40>)
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000516:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000518:	4669      	mov	r1, sp
	sConfig.Channel = channel;
 800051a:	9000      	str	r0, [sp, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800051c:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800051e:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000520:	f000 fda4 	bl	800106c <HAL_ADC_ConfigChannel>
	uint32_t raw = 0;
	HAL_ADC_Start(&hadc);
 8000524:	0020      	movs	r0, r4
 8000526:	f000 fcf5 	bl	8000f14 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800052a:	2164      	movs	r1, #100	; 0x64
 800052c:	0020      	movs	r0, r4
 800052e:	f000 fd3b 	bl	8000fa8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc);
 8000532:	0020      	movs	r0, r4
 8000534:	f000 fd96 	bl	8001064 <HAL_ADC_GetValue>
 8000538:	0005      	movs	r5, r0
	HAL_ADC_Stop(&hadc);
 800053a:	0020      	movs	r0, r4
 800053c:	f000 fd16 	bl	8000f6c <HAL_ADC_Stop>
	sConfig.Rank = ADC_RANK_NONE;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <CONFIG_CHANNEL_ADC+0x44>)
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000542:	4669      	mov	r1, sp
 8000544:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 8000546:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000548:	f000 fd90 	bl	800106c <HAL_ADC_ConfigChannel>
	return raw;
}
 800054c:	0028      	movs	r0, r5
 800054e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000550:	200000cc 	.word	0x200000cc
 8000554:	00001001 	.word	0x00001001

08000558 <GET_MEAS_BAT>:
uint32_t GET_MEAS_BAT(void){
 8000558:	b510      	push	{r4, lr}
	uint32_t bat;
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6600/4095;
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <GET_MEAS_BAT+0x14>)
 800055c:	f7ff ffd8 	bl	8000510 <CONFIG_CHANNEL_ADC>
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <GET_MEAS_BAT+0x18>)
 8000562:	4904      	ldr	r1, [pc, #16]	; (8000574 <GET_MEAS_BAT+0x1c>)
 8000564:	4358      	muls	r0, r3
 8000566:	f7ff fde1 	bl	800012c <__udivsi3>
	return bat;
}
 800056a:	bd10      	pop	{r4, pc}
 800056c:	04000002 	.word	0x04000002
 8000570:	000019c8 	.word	0x000019c8
 8000574:	00000fff 	.word	0x00000fff

08000578 <WAKE_WSSFM10R2AT>:
	uint32_t hall;
	hall = CONFIG_CHANNEL_ADC(ADC_CHANNEL_3)*3300/4095;
	return hall;
}
void WAKE_WSSFM10R2AT(void)
{
 8000578:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_RESET);
 800057a:	24a0      	movs	r4, #160	; 0xa0
 800057c:	05e4      	lsls	r4, r4, #23
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	0020      	movs	r0, r4
 8000584:	f000 feba 	bl	80012fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000588:	2064      	movs	r0, #100	; 0x64
 800058a:	f000 fb2f 	bl	8000bec <HAL_Delay>
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	0020      	movs	r0, r4
 8000594:	f000 feb2 	bl	80012fc <HAL_GPIO_WritePin>
	HAL_Delay(500);  // Wait for the wisol to be prepared
 8000598:	20fa      	movs	r0, #250	; 0xfa
 800059a:	0040      	lsls	r0, r0, #1
 800059c:	f000 fb26 	bl	8000bec <HAL_Delay>
}
 80005a0:	bd10      	pop	{r4, pc}
	...

080005a4 <DEEP_SLEEP_WSSFM10R2AT>:
	HAL_GPIO_WritePin(RST_WISOL_GPIO_Port, RST_WISOL_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(RST_WISOL_GPIO_Port, RST_WISOL_Pin, GPIO_PIN_SET);
}
void DEEP_SLEEP_WSSFM10R2AT(void)
{
 80005a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char AT[10];
	sprintf(AT,"AT$P=2\r\n");
 80005a6:	4909      	ldr	r1, [pc, #36]	; (80005cc <DEEP_SLEEP_WSSFM10R2AT+0x28>)
 80005a8:	a801      	add	r0, sp, #4
 80005aa:	f001 ffc5 	bl	8002538 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT,(uint16_t)strlen(AT),(uint32_t)100);
 80005ae:	a801      	add	r0, sp, #4
 80005b0:	f7ff fdaa 	bl	8000108 <strlen>
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	b282      	uxth	r2, r0
 80005b8:	a901      	add	r1, sp, #4
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <DEEP_SLEEP_WSSFM10R2AT+0x2c>)
 80005bc:	f001 fea8 	bl	8002310 <HAL_UART_Transmit>
	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fb13 	bl	8000bec <HAL_Delay>
}
 80005c6:	b005      	add	sp, #20
 80005c8:	bd00      	pop	{pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	080025d8 	.word	0x080025d8
 80005d0:	20000024 	.word	0x20000024

080005d4 <DATA_ASSIGMENT>:
void DATA_ASSIGMENT(char* buff,uint16_t s,uint8_t loc,uint8_t t)
{
 80005d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80005d6:	001f      	movs	r7, r3
 80005d8:	000e      	movs	r6, r1
 80005da:	0005      	movs	r5, r0
	uint8_t i;//Data position counter
	uint8_t j=0;//Conversion data position counter
	uint8_t dig_count=0;//Digit Counter
	char conversion_buff[5];
	memset(conversion_buff,'\0',5);
 80005dc:	2100      	movs	r1, #0
{
 80005de:	0014      	movs	r4, r2
	memset(conversion_buff,'\0',5);
 80005e0:	4668      	mov	r0, sp
 80005e2:	2205      	movs	r2, #5
 80005e4:	f001 ffa0 	bl	8002528 <memset>
	itoa(s,conversion_buff,t);//Convert int S to String in HEX
 80005e8:	003a      	movs	r2, r7
 80005ea:	4669      	mov	r1, sp
 80005ec:	0030      	movs	r0, r6
 80005ee:	f001 ff97 	bl	8002520 <itoa>
	uint8_t dig_count=0;//Digit Counter
 80005f2:	2300      	movs	r3, #0
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 80005f4:	466a      	mov	r2, sp
 80005f6:	5cd2      	ldrb	r2, [r2, r3]
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	d108      	bne.n	800060e <DATA_ASSIGMENT+0x3a>

	for (i = (loc-dig_count)+1; j < dig_count; ++i)//Data arrangement in output buffer
 80005fc:	3401      	adds	r4, #1
 80005fe:	1ae4      	subs	r4, r4, r3
 8000600:	b2e4      	uxtb	r4, r4
 8000602:	b2d0      	uxtb	r0, r2
 8000604:	1821      	adds	r1, r4, r0
 8000606:	b2c9      	uxtb	r1, r1
 8000608:	4283      	cmp	r3, r0
 800060a:	d803      	bhi.n	8000614 <DATA_ASSIGMENT+0x40>
	{
		 buff[i] = conversion_buff[j];
		 ++j;
	}
}
 800060c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 800060e:	3301      	adds	r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	e7ef      	b.n	80005f4 <DATA_ASSIGMENT+0x20>
		 buff[i] = conversion_buff[j];
 8000614:	4668      	mov	r0, sp
 8000616:	5c80      	ldrb	r0, [r0, r2]
 8000618:	3201      	adds	r2, #1
 800061a:	5468      	strb	r0, [r5, r1]
 800061c:	e7f1      	b.n	8000602 <DATA_ASSIGMENT+0x2e>
	...

08000620 <BUILD_DATA_TO_SEND>:
void BUILD_DATA_TO_SEND(char* buff)
{
 8000620:	b510      	push	{r4, lr}
	memset(buff,'0',10); //Clear memory variable
 8000622:	220a      	movs	r2, #10
 8000624:	2130      	movs	r1, #48	; 0x30
{
 8000626:	0004      	movs	r4, r0
	memset(buff,'0',10); //Clear memory variable
 8000628:	f001 ff7e 	bl	8002528 <memset>
	DATA_ASSIGMENT(buff,GET_MEAS_BAT(),VOLT_LOCA,16);
 800062c:	f7ff ff94 	bl	8000558 <GET_MEAS_BAT>
 8000630:	2310      	movs	r3, #16
 8000632:	b281      	uxth	r1, r0
 8000634:	2209      	movs	r2, #9
 8000636:	0020      	movs	r0, r4
 8000638:	f7ff ffcc 	bl	80005d4 <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,SUM_DEC,DATA_LOCA,16);
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <BUILD_DATA_TO_SEND+0x38>)
 800063e:	0020      	movs	r0, r4
 8000640:	7819      	ldrb	r1, [r3, #0]
 8000642:	2205      	movs	r2, #5
 8000644:	2310      	movs	r3, #16
 8000646:	f7ff ffc5 	bl	80005d4 <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,version,VERSION_LOCA,16);
 800064a:	2201      	movs	r2, #1
 800064c:	2310      	movs	r3, #16
 800064e:	0011      	movs	r1, r2
 8000650:	0020      	movs	r0, r4
 8000652:	f7ff ffbf 	bl	80005d4 <DATA_ASSIGMENT>
}
 8000656:	bd10      	pop	{r4, pc}
 8000658:	20000020 	.word	0x20000020

0800065c <CASES_CHOICE>:
{
 800065c:	b510      	push	{r4, lr}
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <CASES_CHOICE+0x50>)
{
 8000660:	0004      	movs	r4, r0
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	2a00      	cmp	r2, #0
 8000666:	d006      	beq.n	8000676 <CASES_CHOICE+0x1a>
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	2a0a      	cmp	r2, #10
 800066c:	d803      	bhi.n	8000676 <CASES_CHOICE+0x1a>
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <CASES_CHOICE+0x54>)
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	2a01      	cmp	r2, #1
 8000674:	d115      	bne.n	80006a2 <CASES_CHOICE+0x46>
			if ((SUM_COUNTER==0) || (SUM_COUNTER > SUM_THRD)){
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	2a00      	cmp	r2, #0
 800067a:	d002      	beq.n	8000682 <CASES_CHOICE+0x26>
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	2a0a      	cmp	r2, #10
 8000680:	d910      	bls.n	80006a4 <CASES_CHOICE+0x48>
			   SUM_COUNTER = SUM_THRD;
 8000682:	220a      	movs	r2, #10
			   time_flag = FALSE;
 8000684:	701a      	strb	r2, [r3, #0]
			BUILD_DATA_TO_SEND(buff);
 8000686:	0020      	movs	r0, r4
 8000688:	f7ff ffca 	bl	8000620 <BUILD_DATA_TO_SEND>
			WAKE_WSSFM10R2AT();
 800068c:	f7ff ff74 	bl	8000578 <WAKE_WSSFM10R2AT>
			TRANSMIT_WSSFM10R2AT(buff,10);
 8000690:	210a      	movs	r1, #10
 8000692:	0020      	movs	r0, r4
 8000694:	f7ff fef2 	bl	800047c <TRANSMIT_WSSFM10R2AT>
			DEEP_SLEEP_WSSFM10R2AT();
 8000698:	f7ff ff84 	bl	80005a4 <DEEP_SLEEP_WSSFM10R2AT>
			SUM_DEC=0;
 800069c:	2200      	movs	r2, #0
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <CASES_CHOICE+0x58>)
 80006a0:	701a      	strb	r2, [r3, #0]
}
 80006a2:	bd10      	pop	{r4, pc}
			   time_flag = FALSE;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <CASES_CHOICE+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	e7ec      	b.n	8000684 <CASES_CHOICE+0x28>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000021 	.word	0x20000021
 80006b0:	200000a4 	.word	0x200000a4
 80006b4:	20000020 	.word	0x20000020

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006bc:	2230      	movs	r2, #48	; 0x30
 80006be:	2100      	movs	r1, #0
 80006c0:	a80c      	add	r0, sp, #48	; 0x30
 80006c2:	f001 ff31 	bl	8002528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	2214      	movs	r2, #20
 80006c8:	2100      	movs	r1, #0
 80006ca:	4668      	mov	r0, sp
 80006cc:	f001 ff2c 	bl	8002528 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d0:	2218      	movs	r2, #24
 80006d2:	2100      	movs	r1, #0
 80006d4:	a805      	add	r0, sp, #20
 80006d6:	f001 ff27 	bl	8002528 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	4916      	ldr	r1, [pc, #88]	; (8000734 <SystemClock_Config+0x7c>)
 80006dc:	4a16      	ldr	r2, [pc, #88]	; (8000738 <SystemClock_Config+0x80>)
 80006de:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e0:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e2:	401a      	ands	r2, r3
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	4313      	orrs	r3, r2
 80006ea:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006ec:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006f0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	3306      	adds	r3, #6
 80006f6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006fa:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f000 fe55 	bl	80013ac <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000706:	3371      	adds	r3, #113	; 0x71
 8000708:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800070a:	23e0      	movs	r3, #224	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070c:	0021      	movs	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800070e:	00db      	lsls	r3, r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000710:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000712:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000718:	f001 f89a 	bl	8001850 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC;
 800071c:	2324      	movs	r3, #36	; 0x24
 800071e:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000720:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000724:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000726:	9408      	str	r4, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000728:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072a:	f001 f969 	bl	8001a00 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800072e:	b019      	add	sp, #100	; 0x64
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40007000 	.word	0x40007000
 8000738:	ffffe7ff 	.word	0xffffe7ff

0800073c <main>:
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
  SUM_DEC=0;
 800073e:	2400      	movs	r4, #0
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	2701      	movs	r7, #1
{
 8000742:	b089      	sub	sp, #36	; 0x24
  SUM_DEC=0;
 8000744:	4b6c      	ldr	r3, [pc, #432]	; (80008f8 <main+0x1bc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	ad03      	add	r5, sp, #12
  SUM_DEC=0;
 8000748:	701c      	strb	r4, [r3, #0]
  HAL_Init();
 800074a:	f000 fa2d 	bl	8000ba8 <HAL_Init>
  SystemClock_Config();
 800074e:	f7ff ffb3 	bl	80006b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	0021      	movs	r1, r4
 8000754:	2214      	movs	r2, #20
 8000756:	0028      	movs	r0, r5
 8000758:	f001 fee6 	bl	8002528 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 800075e:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b66      	ldr	r3, [pc, #408]	; (80008fc <main+0x1c0>)
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000762:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000766:	2608      	movs	r6, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	433a      	orrs	r2, r7
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
 800076c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800076e:	403a      	ands	r2, r7
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 800077c:	0022      	movs	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	400b      	ands	r3, r1
 8000780:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000782:	318e      	adds	r1, #142	; 0x8e
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000786:	f000 fdb9 	bl	80012fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, WAKE_DS_WISOL_Pin|RST_WISOL_Pin, GPIO_PIN_SET);
 800078a:	20a0      	movs	r0, #160	; 0xa0
 800078c:	003a      	movs	r2, r7
 800078e:	2160      	movs	r1, #96	; 0x60
 8000790:	05c0      	lsls	r0, r0, #23
 8000792:	f000 fdb3 	bl	80012fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000796:	0022      	movs	r2, r4
 8000798:	2108      	movs	r1, #8
 800079a:	4859      	ldr	r0, [pc, #356]	; (8000900 <main+0x1c4>)
 800079c:	f000 fdae 	bl	80012fc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007a0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a2:	4b58      	ldr	r3, [pc, #352]	; (8000904 <main+0x1c8>)
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007a4:	0029      	movs	r1, r5
 80007a6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pin = HALL_SENS_IRQ_Pin;
 80007aa:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ac:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f000 fcff 	bl	80011b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
 80007b4:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	0029      	movs	r1, r5
 80007b8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
 80007ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	60ec      	str	r4, [r5, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c0:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f000 fcf5 	bl	80011b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 80007c6:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 80007ca:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	0029      	movs	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007ce:	3b4f      	subs	r3, #79	; 0x4f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007d2:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	60ec      	str	r4, [r5, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d6:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f000 fcea 	bl	80011b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007dc:	0029      	movs	r1, r5
 80007de:	4848      	ldr	r0, [pc, #288]	; (8000900 <main+0x1c4>)
  GPIO_InitStruct.Pin = LED_Pin;
 80007e0:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	60ec      	str	r4, [r5, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e6:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f000 fce2 	bl	80011b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80007ec:	0022      	movs	r2, r4
 80007ee:	0021      	movs	r1, r4
 80007f0:	2005      	movs	r0, #5
 80007f2:	f000 fc8f 	bl	8001114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80007f6:	2005      	movs	r0, #5
 80007f8:	f000 fcb6 	bl	8001168 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80007fc:	0032      	movs	r2, r6
 80007fe:	0021      	movs	r1, r4
 8000800:	0028      	movs	r0, r5
 8000802:	f001 fe91 	bl	8002528 <memset>
  hadc.Instance = ADC1;
 8000806:	4e40      	ldr	r6, [pc, #256]	; (8000908 <main+0x1cc>)
 8000808:	4b40      	ldr	r3, [pc, #256]	; (800090c <main+0x1d0>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800080a:	0030      	movs	r0, r6
  hadc.Instance = ADC1;
 800080c:	6033      	str	r3, [r6, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	6073      	str	r3, [r6, #4]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000814:	19f3      	adds	r3, r6, r7
 8000816:	77dc      	strb	r4, [r3, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000818:	1cb3      	adds	r3, r6, #2
 800081a:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	23c2      	movs	r3, #194	; 0xc2
 800081e:	33ff      	adds	r3, #255	; 0xff
 8000820:	6273      	str	r3, [r6, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000822:	0033      	movs	r3, r6
 8000824:	332c      	adds	r3, #44	; 0x2c
 8000826:	701c      	strb	r4, [r3, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000828:	2304      	movs	r3, #4
  hadc.Init.OversamplingMode = DISABLE;
 800082a:	63f4      	str	r4, [r6, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800082c:	60b4      	str	r4, [r6, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082e:	63b4      	str	r4, [r6, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	60f4      	str	r4, [r6, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000832:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000834:	6173      	str	r3, [r6, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000836:	6334      	str	r4, [r6, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000838:	61b4      	str	r4, [r6, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800083a:	6374      	str	r4, [r6, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800083c:	61f4      	str	r4, [r6, #28]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800083e:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000840:	f000 fa90 	bl	8000d64 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_1;
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <main+0x1d4>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000846:	0029      	movs	r1, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8000848:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800084a:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800084c:	0030      	movs	r0, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800084e:	015b      	lsls	r3, r3, #5
 8000850:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000852:	f000 fc0b 	bl	800106c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <main+0x1d8>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000858:	0029      	movs	r1, r5
 800085a:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_3;
 800085c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800085e:	f000 fc05 	bl	800106c <HAL_ADC_ConfigChannel>
  RTC_TimeTypeDef sTime = {0};
 8000862:	0021      	movs	r1, r4
 8000864:	2214      	movs	r2, #20
 8000866:	0028      	movs	r0, r5
 8000868:	f001 fe5e 	bl	8002528 <memset>
  hrtc.Instance = RTC;
 800086c:	4e2a      	ldr	r6, [pc, #168]	; (8000918 <main+0x1dc>)
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <main+0x1e0>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000870:	0030      	movs	r0, r6
  hrtc.Instance = RTC;
 8000872:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 124;
 8000874:	237c      	movs	r3, #124	; 0x7c
 8000876:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 295;
 8000878:	2328      	movs	r3, #40	; 0x28
 800087a:	33ff      	adds	r3, #255	; 0xff
 800087c:	60f3      	str	r3, [r6, #12]
  RTC_DateTypeDef sDate = {0};
 800087e:	9400      	str	r4, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000880:	6074      	str	r4, [r6, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000882:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000884:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000886:	61b4      	str	r4, [r6, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000888:	61f4      	str	r4, [r6, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800088a:	f001 f9a9 	bl	8001be0 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800088e:	003a      	movs	r2, r7
 8000890:	0029      	movs	r1, r5
 8000892:	0030      	movs	r0, r6
  sTime.Hours = 0x0;
 8000894:	802c      	strh	r4, [r5, #0]
  sTime.Minutes = 0x0;
 8000896:	70ac      	strb	r4, [r5, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000898:	60ec      	str	r4, [r5, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800089a:	612c      	str	r4, [r5, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800089c:	f001 fa08 	bl	8001cb0 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <main+0x1e4>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008a2:	003a      	movs	r2, r7
 80008a4:	4669      	mov	r1, sp
 80008a6:	0030      	movs	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008a8:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008aa:	f001 fa81 	bl	8001db0 <HAL_RTC_SetDate>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80008ae:	2204      	movs	r2, #4
 80008b0:	213c      	movs	r1, #60	; 0x3c
 80008b2:	0030      	movs	r0, r6
 80008b4:	f001 fae8 	bl	8001e88 <HAL_RTCEx_SetWakeUpTimer_IT>
  hlpuart1.Instance = LPUART1;
 80008b8:	481a      	ldr	r0, [pc, #104]	; (8000924 <main+0x1e8>)
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <main+0x1ec>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008bc:	6084      	str	r4, [r0, #8]
  hlpuart1.Instance = LPUART1;
 80008be:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 80008c0:	2396      	movs	r3, #150	; 0x96
 80008c2:	019b      	lsls	r3, r3, #6
 80008c4:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008c6:	230c      	movs	r3, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	60c4      	str	r4, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	6104      	str	r4, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	6143      	str	r3, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	6184      	str	r4, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d0:	6204      	str	r4, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d4:	f001 fdb6 	bl	8002444 <HAL_UART_Init>
  HAL_Delay(2000);
 80008d8:	20fa      	movs	r0, #250	; 0xfa
  SUM_COUNTER=0;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <main+0x1f0>)
  HAL_Delay(2000);
 80008dc:	00c0      	lsls	r0, r0, #3
  SUM_COUNTER=0;
 80008de:	701c      	strb	r4, [r3, #0]
  HAL_Delay(2000);
 80008e0:	f000 f984 	bl	8000bec <HAL_Delay>
  	  HAL_Delay(400);
 80008e4:	3491      	adds	r4, #145	; 0x91
 80008e6:	34ff      	adds	r4, #255	; 0xff
  	  CASES_CHOICE(data_buff);
 80008e8:	0028      	movs	r0, r5
 80008ea:	f7ff feb7 	bl	800065c <CASES_CHOICE>
  	  HAL_Delay(400);
 80008ee:	0020      	movs	r0, r4
 80008f0:	f000 f97c 	bl	8000bec <HAL_Delay>
 80008f4:	e7f8      	b.n	80008e8 <main+0x1ac>
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000020 	.word	0x20000020
 80008fc:	40021000 	.word	0x40021000
 8000900:	50000400 	.word	0x50000400
 8000904:	10210000 	.word	0x10210000
 8000908:	200000cc 	.word	0x200000cc
 800090c:	40012400 	.word	0x40012400
 8000910:	04000002 	.word	0x04000002
 8000914:	0c000008 	.word	0x0c000008
 8000918:	200000a8 	.word	0x200000a8
 800091c:	40002800 	.word	0x40002800
 8000920:	00010101 	.word	0x00010101
 8000924:	20000024 	.word	0x20000024
 8000928:	40004800 	.word	0x40004800
 800092c:	20000021 	.word	0x20000021

08000930 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000930:	2201      	movs	r2, #1
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_MspInit+0x18>)
 8000934:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800093e:	0552      	lsls	r2, r2, #21
 8000940:	430a      	orrs	r2, r1
 8000942:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	4770      	bx	lr
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800094c:	b510      	push	{r4, lr}
 800094e:	0004      	movs	r4, r0
 8000950:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	2214      	movs	r2, #20
 8000954:	2100      	movs	r1, #0
 8000956:	a801      	add	r0, sp, #4
 8000958:	f001 fde6 	bl	8002528 <memset>
  if(hadc->Instance==ADC1)
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_ADC_MspInit+0x4c>)
 800095e:	6822      	ldr	r2, [r4, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	d116      	bne.n	8000992 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_ADC_MspInit+0x50>)
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800096e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	430a      	orrs	r2, r1
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	400b      	ands	r3, r1
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8000984:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8000988:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098a:	3b07      	subs	r3, #7
 800098c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f000 fc0f 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000992:	b006      	add	sp, #24
 8000994:	bd10      	pop	{r4, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40012400 	.word	0x40012400
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	0004      	movs	r4, r0
 80009a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	2214      	movs	r2, #20
 80009a8:	2100      	movs	r1, #0
 80009aa:	a803      	add	r0, sp, #12
 80009ac:	f001 fdbc 	bl	8002528 <memset>
  if(huart->Instance==LPUART1)
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_UART_MspInit+0x78>)
 80009b2:	6822      	ldr	r2, [r4, #0]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d12c      	bne.n	8000a12 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009b8:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	2402      	movs	r4, #2
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x7c>)
 80009c0:	02d2      	lsls	r2, r2, #11
 80009c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PB7     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2603      	movs	r6, #3
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009c6:	430a      	orrs	r2, r1
 80009c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80009cc:	2506      	movs	r5, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4301      	orrs	r1, r0
 80009d0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80009d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4002      	ands	r2, r0
 80009d8:	9201      	str	r2, [sp, #4]
 80009da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4322      	orrs	r2, r4
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4023      	ands	r3, r4
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ee:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80009f6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f000 fbda 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	a903      	add	r1, sp, #12
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000a0c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f000 fbcf 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a12:	b008      	add	sp, #32
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40004800 	.word	0x40004800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	50000400 	.word	0x50000400

08000a24 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_RTC_MspInit+0x28>)
 8000a26:	6802      	ldr	r2, [r0, #0]
{
 8000a28:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d10d      	bne.n	8000a4a <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_RTC_MspInit+0x2c>)
 8000a32:	02db      	lsls	r3, r3, #11
 8000a34:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a36:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0011      	movs	r1, r2
 8000a40:	f000 fb68 	bl	8001114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a44:	2002      	movs	r0, #2
 8000a46:	f000 fb8f 	bl	8001168 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a4a:	bd10      	pop	{r4, pc}
 8000a4c:	40002800 	.word	0x40002800
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a54:	4770      	bx	lr

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler>

08000a58 <SVC_Handler>:
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f8b7 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bd10      	pop	{r4, pc}

08000a64 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000a64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a66:	4802      	ldr	r0, [pc, #8]	; (8000a70 <RTC_IRQHandler+0xc>)
 8000a68:	f001 fa8c 	bl	8001f84 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	200000a8 	.word	0x200000a8

08000a74 <EXTI0_1_IRQHandler>:
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <EXTI0_1_IRQHandler+0x20>)
{
 8000a76:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	07db      	lsls	r3, r3, #31
 8000a7c:	d506      	bpl.n	8000a8c <EXTI0_1_IRQHandler+0x18>
	  HAL_GPIO_TogglePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin);
 8000a7e:	20a0      	movs	r0, #160	; 0xa0
 8000a80:	2120      	movs	r1, #32
 8000a82:	05c0      	lsls	r0, r0, #23
 8000a84:	f000 fc40 	bl	8001308 <HAL_GPIO_TogglePin>
	  COUNTER_CONSUMER();
 8000a88:	f7ff fce8 	bl	800045c <COUNTER_CONSUMER>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f000 fc41 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a92:	bd10      	pop	{r4, pc}
 8000a94:	40010400 	.word	0x40010400

08000a98 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <SystemInit+0x44>)
 8000a9c:	0052      	lsls	r2, r2, #1
 8000a9e:	6819      	ldr	r1, [r3, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <SystemInit+0x48>)
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <SystemInit+0x4c>)
 8000ab0:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ab2:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000ab4:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	438a      	bics	r2, r1
 8000aba:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	490a      	ldr	r1, [pc, #40]	; (8000ae8 <SystemInit+0x50>)
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	4909      	ldr	r1, [pc, #36]	; (8000aec <SystemInit+0x54>)
 8000ac8:	400a      	ands	r2, r1
 8000aca:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <SystemInit+0x58>)
 8000ad4:	0512      	lsls	r2, r2, #20
 8000ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad8:	4770      	bx	lr
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	88ff400c 	.word	0x88ff400c
 8000ae4:	fef6fff6 	.word	0xfef6fff6
 8000ae8:	fffbffff 	.word	0xfffbffff
 8000aec:	ff02ffff 	.word	0xff02ffff
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000af4:	4813      	ldr	r0, [pc, #76]	; (8000b44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000af6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000af8:	4813      	ldr	r0, [pc, #76]	; (8000b48 <LoopForever+0x6>)
    LDR R1, [R0]
 8000afa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000afc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <LoopForever+0xa>)
    CMP R1, R2
 8000b00:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b02:	d105      	bne.n	8000b10 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b04:	4812      	ldr	r0, [pc, #72]	; (8000b50 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <LoopForever+0x12>)
    STR R1, [R0]
 8000b08:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b0a:	4813      	ldr	r0, [pc, #76]	; (8000b58 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b0c:	4913      	ldr	r1, [pc, #76]	; (8000b5c <LoopForever+0x1a>)
    STR R1, [R0]
 8000b0e:	6001      	str	r1, [r0, #0]

08000b10 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b12:	e003      	b.n	8000b1c <LoopCopyDataInit>

08000b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b1a:	3104      	adds	r1, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <LoopForever+0x22>)
  ldr  r3, =_edata
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b24:	d3f6      	bcc.n	8000b14 <CopyDataInit>
  ldr  r2, =_sbss
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000b28:	e002      	b.n	8000b30 <LoopFillZerobss>

08000b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000b2a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b2c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2e:	3204      	adds	r2, #4

08000b30 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <LoopForever+0x2e>)
  cmp  r2, r3
 8000b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b34:	d3f9      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b36:	f7ff ffaf 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f001 fcb5 	bl	80024a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fdfd 	bl	800073c <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
   ldr   r0, =_estack
 8000b44:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000b48:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b4c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b50:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b54:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b58:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b5c:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000b60:	08002654 	.word	0x08002654
  ldr  r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b68:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000b6c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000b70:	2000012c 	.word	0x2000012c

08000b74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_COMP_IRQHandler>
	...

08000b78 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000b78:	21fa      	movs	r1, #250	; 0xfa
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_InitTick+0x2c>)
{
 8000b7c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000b7e:	0089      	lsls	r1, r1, #2
{
 8000b80:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	f7ff fad2 	bl	800012c <__udivsi3>
 8000b88:	f000 faf8 	bl	800117c <HAL_SYSTICK_Config>
 8000b8c:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000b8e:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000b90:	2c00      	cmp	r4, #0
 8000b92:	d105      	bne.n	8000ba0 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000b94:	3802      	subs	r0, #2
 8000b96:	0022      	movs	r2, r4
 8000b98:	0029      	movs	r1, r5
 8000b9a:	f000 fabb 	bl	8001114 <HAL_NVIC_SetPriority>
 8000b9e:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000ba0:	bd70      	pop	{r4, r5, r6, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_Init+0x24>)
{
 8000bac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bae:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb0:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb6:	f7ff ffdf 	bl	8000b78 <HAL_InitTick>
 8000bba:	1e04      	subs	r4, r0, #0
 8000bbc:	d103      	bne.n	8000bc6 <HAL_Init+0x1e>
    HAL_MspInit();
 8000bbe:	f7ff feb7 	bl	8000930 <HAL_MspInit>
}
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000bc6:	2401      	movs	r4, #1
 8000bc8:	e7fb      	b.n	8000bc2 <HAL_Init+0x1a>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000bd0:	4a02      	ldr	r2, [pc, #8]	; (8000bdc <HAL_IncTick+0xc>)
 8000bd2:	6813      	ldr	r3, [r2, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	4770      	bx	lr
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000128 	.word	0x20000128

08000be0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000be0:	4b01      	ldr	r3, [pc, #4]	; (8000be8 <HAL_GetTick+0x8>)
 8000be2:	6818      	ldr	r0, [r3, #0]
}
 8000be4:	4770      	bx	lr
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000128 	.word	0x20000128

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff fff6 	bl	8000be0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000bf4:	1c63      	adds	r3, r4, #1
 8000bf6:	1e5a      	subs	r2, r3, #1
 8000bf8:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8000bfa:	0005      	movs	r5, r0
    wait++;
 8000bfc:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfe:	f7ff ffef 	bl	8000be0 <HAL_GetTick>
 8000c02:	1b40      	subs	r0, r0, r5
 8000c04:	42a0      	cmp	r0, r4
 8000c06:	d3fa      	bcc.n	8000bfe <HAL_Delay+0x12>
  {
  }
}
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c0c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <ADC_DelayMicroSecond+0x24>)
{
 8000c0e:	b513      	push	{r0, r1, r4, lr}
 8000c10:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <ADC_DelayMicroSecond+0x28>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	f7ff fa89 	bl	800012c <__udivsi3>
 8000c1a:	4344      	muls	r4, r0
 8000c1c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8000c1e:	9b01      	ldr	r3, [sp, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d100      	bne.n	8000c26 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8000c24:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8000c26:	9b01      	ldr	r3, [sp, #4]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	e7f7      	b.n	8000c1e <ADC_DelayMicroSecond+0x12>
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000000 	.word	0x20000000
 8000c34:	000f4240 	.word	0x000f4240

08000c38 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c38:	2103      	movs	r1, #3
 8000c3a:	6803      	ldr	r3, [r0, #0]
{
 8000c3c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c3e:	689a      	ldr	r2, [r3, #8]
{
 8000c40:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c42:	400a      	ands	r2, r1
 8000c44:	2a01      	cmp	r2, #1
 8000c46:	d104      	bne.n	8000c52 <ADC_Enable+0x1a>
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	4211      	tst	r1, r2
 8000c4c:	d001      	beq.n	8000c52 <ADC_Enable+0x1a>
  return HAL_OK;
 8000c4e:	2000      	movs	r0, #0
}
 8000c50:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000c52:	6899      	ldr	r1, [r3, #8]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <ADC_Enable+0x6c>)
 8000c56:	4211      	tst	r1, r2
 8000c58:	d008      	beq.n	8000c6c <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c60:	4313      	orrs	r3, r2
 8000c62:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c66:	4303      	orrs	r3, r0
 8000c68:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000c6a:	e7f1      	b.n	8000c50 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8000c6c:	2501      	movs	r5, #1
 8000c6e:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000c70:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8000c72:	432a      	orrs	r2, r5
 8000c74:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000c76:	f7ff ffc9 	bl	8000c0c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8000c7a:	f7ff ffb1 	bl	8000be0 <HAL_GetTick>
 8000c7e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	422b      	tst	r3, r5
 8000c86:	d1e2      	bne.n	8000c4e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c88:	f7ff ffaa 	bl	8000be0 <HAL_GetTick>
 8000c8c:	1b80      	subs	r0, r0, r6
 8000c8e:	280a      	cmp	r0, #10
 8000c90:	d9f6      	bls.n	8000c80 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c92:	2310      	movs	r3, #16
 8000c94:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8000c96:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c9e:	431d      	orrs	r5, r3
 8000ca0:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000ca2:	e7d5      	b.n	8000c50 <ADC_Enable+0x18>
 8000ca4:	80000017 	.word	0x80000017

08000ca8 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ca8:	2103      	movs	r1, #3
 8000caa:	6803      	ldr	r3, [r0, #0]
{
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000cb0:	6898      	ldr	r0, [r3, #8]
 8000cb2:	4008      	ands	r0, r1
 8000cb4:	2801      	cmp	r0, #1
 8000cb6:	d001      	beq.n	8000cbc <ADC_Disable+0x14>
  return HAL_OK;
 8000cb8:	2000      	movs	r0, #0
}
 8000cba:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4202      	tst	r2, r0
 8000cc0:	d0fa      	beq.n	8000cb8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000cc2:	2205      	movs	r2, #5
 8000cc4:	689d      	ldr	r5, [r3, #8]
 8000cc6:	4015      	ands	r5, r2
 8000cc8:	2d01      	cmp	r5, #1
 8000cca:	d119      	bne.n	8000d00 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8000ccc:	6898      	ldr	r0, [r3, #8]
 8000cce:	3a03      	subs	r2, #3
 8000cd0:	4302      	orrs	r2, r0
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8000cd6:	f7ff ff83 	bl	8000be0 <HAL_GetTick>
 8000cda:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000cdc:	6823      	ldr	r3, [r4, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	422b      	tst	r3, r5
 8000ce2:	d0e9      	beq.n	8000cb8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ce4:	f7ff ff7c 	bl	8000be0 <HAL_GetTick>
 8000ce8:	1b80      	subs	r0, r0, r6
 8000cea:	280a      	cmp	r0, #10
 8000cec:	d9f6      	bls.n	8000cdc <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cee:	2310      	movs	r3, #16
 8000cf0:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cfa:	431d      	orrs	r5, r3
 8000cfc:	65a5      	str	r5, [r4, #88]	; 0x58
 8000cfe:	e7dc      	b.n	8000cba <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d00:	2310      	movs	r3, #16
 8000d02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d04:	4313      	orrs	r3, r2
 8000d06:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d0a:	4303      	orrs	r3, r0
 8000d0c:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000d0e:	e7d4      	b.n	8000cba <ADC_Disable+0x12>

08000d10 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000d10:	2204      	movs	r2, #4
 8000d12:	6803      	ldr	r3, [r0, #0]
{
 8000d14:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000d16:	6899      	ldr	r1, [r3, #8]
{
 8000d18:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000d1a:	4211      	tst	r1, r2
 8000d1c:	d101      	bne.n	8000d22 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8000d1e:	2000      	movs	r0, #0
}
 8000d20:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000d22:	6899      	ldr	r1, [r3, #8]
 8000d24:	4211      	tst	r1, r2
 8000d26:	d006      	beq.n	8000d36 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000d28:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000d2a:	0792      	lsls	r2, r2, #30
 8000d2c:	d403      	bmi.n	8000d36 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000d2e:	2210      	movs	r2, #16
 8000d30:	6899      	ldr	r1, [r3, #8]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d36:	f7ff ff53 	bl	8000be0 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000d3a:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8000d3c:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	422b      	tst	r3, r5
 8000d44:	d0eb      	beq.n	8000d1e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000d46:	f7ff ff4b 	bl	8000be0 <HAL_GetTick>
 8000d4a:	1b80      	subs	r0, r0, r6
 8000d4c:	280a      	cmp	r0, #10
 8000d4e:	d9f6      	bls.n	8000d3e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d50:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d52:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d54:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d56:	4313      	orrs	r3, r2
 8000d58:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d60:	e7de      	b.n	8000d20 <ADC_ConversionStop+0x10>
	...

08000d64 <HAL_ADC_Init>:
{
 8000d64:	b570      	push	{r4, r5, r6, lr}
 8000d66:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000d68:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000d6a:	2c00      	cmp	r4, #0
 8000d6c:	d019      	beq.n	8000da2 <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d106      	bne.n	8000d82 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000d74:	0022      	movs	r2, r4
 8000d76:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000d78:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8000d7a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000d7c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000d7e:	f7ff fde5 	bl	800094c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d84:	06db      	lsls	r3, r3, #27
 8000d86:	d404      	bmi.n	8000d92 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000d88:	2204      	movs	r2, #4
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	6898      	ldr	r0, [r3, #8]
 8000d8e:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d90:	d008      	beq.n	8000da4 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d92:	2310      	movs	r3, #16
 8000d94:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000d96:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	3450      	adds	r4, #80	; 0x50
 8000da0:	7023      	strb	r3, [r4, #0]
}
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8000da4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000da6:	4955      	ldr	r1, [pc, #340]	; (8000efc <HAL_ADC_Init+0x198>)
 8000da8:	4011      	ands	r1, r2
 8000daa:	2202      	movs	r2, #2
 8000dac:	430a      	orrs	r2, r1
 8000dae:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000db0:	2203      	movs	r2, #3
 8000db2:	6899      	ldr	r1, [r3, #8]
 8000db4:	4011      	ands	r1, r2
 8000db6:	4a52      	ldr	r2, [pc, #328]	; (8000f00 <HAL_ADC_Init+0x19c>)
 8000db8:	2901      	cmp	r1, #1
 8000dba:	d102      	bne.n	8000dc2 <HAL_ADC_Init+0x5e>
 8000dbc:	681d      	ldr	r5, [r3, #0]
 8000dbe:	420d      	tst	r5, r1
 8000dc0:	d119      	bne.n	8000df6 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000dc2:	2680      	movs	r6, #128	; 0x80
 8000dc4:	6861      	ldr	r1, [r4, #4]
 8000dc6:	05f6      	lsls	r6, r6, #23
 8000dc8:	004d      	lsls	r5, r1, #1
 8000dca:	086d      	lsrs	r5, r5, #1
 8000dcc:	42b5      	cmp	r5, r6
 8000dce:	d003      	beq.n	8000dd8 <HAL_ADC_Init+0x74>
 8000dd0:	2580      	movs	r5, #128	; 0x80
 8000dd2:	062d      	lsls	r5, r5, #24
 8000dd4:	42a9      	cmp	r1, r5
 8000dd6:	d176      	bne.n	8000ec6 <HAL_ADC_Init+0x162>
 8000dd8:	691d      	ldr	r5, [r3, #16]
 8000dda:	00ad      	lsls	r5, r5, #2
 8000ddc:	08ad      	lsrs	r5, r5, #2
 8000dde:	611d      	str	r5, [r3, #16]
 8000de0:	691d      	ldr	r5, [r3, #16]
 8000de2:	4329      	orrs	r1, r5
 8000de4:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000de6:	2518      	movs	r5, #24
 8000de8:	68d9      	ldr	r1, [r3, #12]
 8000dea:	43a9      	bics	r1, r5
 8000dec:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000dee:	68d9      	ldr	r1, [r3, #12]
 8000df0:	68a5      	ldr	r5, [r4, #8]
 8000df2:	4329      	orrs	r1, r5
 8000df4:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000df6:	6811      	ldr	r1, [r2, #0]
 8000df8:	4d42      	ldr	r5, [pc, #264]	; (8000f04 <HAL_ADC_Init+0x1a0>)
 8000dfa:	4029      	ands	r1, r5
 8000dfc:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e00:	6815      	ldr	r5, [r2, #0]
 8000e02:	0649      	lsls	r1, r1, #25
 8000e04:	4329      	orrs	r1, r5
 8000e06:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	6899      	ldr	r1, [r3, #8]
 8000e0c:	0552      	lsls	r2, r2, #21
 8000e0e:	4211      	tst	r1, r2
 8000e10:	d102      	bne.n	8000e18 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e12:	6899      	ldr	r1, [r3, #8]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	493b      	ldr	r1, [pc, #236]	; (8000f08 <HAL_ADC_Init+0x1a4>)
 8000e1c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e1e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e20:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e22:	68dd      	ldr	r5, [r3, #12]
 8000e24:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e26:	2902      	cmp	r1, #2
 8000e28:	d100      	bne.n	8000e2c <HAL_ADC_Init+0xc8>
 8000e2a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e2c:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e2e:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e30:	4332      	orrs	r2, r6
 8000e32:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e34:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e36:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e38:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e3a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000e3c:	69e5      	ldr	r5, [r4, #28]
 8000e3e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e40:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e42:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e44:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e46:	0025      	movs	r5, r4
 8000e48:	352c      	adds	r5, #44	; 0x2c
 8000e4a:	782d      	ldrb	r5, [r5, #0]
 8000e4c:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e52:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e54:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e58:	30ff      	adds	r0, #255	; 0xff
 8000e5a:	4282      	cmp	r2, r0
 8000e5c:	d004      	beq.n	8000e68 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e5e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000e60:	68d8      	ldr	r0, [r3, #12]
 8000e62:	432a      	orrs	r2, r5
 8000e64:	4302      	orrs	r2, r0
 8000e66:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e68:	1ca2      	adds	r2, r4, #2
 8000e6a:	7fd2      	ldrb	r2, [r2, #31]
 8000e6c:	2a01      	cmp	r2, #1
 8000e6e:	d106      	bne.n	8000e7e <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e70:	2900      	cmp	r1, #0
 8000e72:	d134      	bne.n	8000ede <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	68d9      	ldr	r1, [r3, #12]
 8000e78:	0252      	lsls	r2, r2, #9
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000e7e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000e80:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000e82:	2901      	cmp	r1, #1
 8000e84:	d133      	bne.n	8000eee <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000e86:	4821      	ldr	r0, [pc, #132]	; (8000f0c <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e88:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000e8a:	4002      	ands	r2, r0
 8000e8c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e90:	6918      	ldr	r0, [r3, #16]
 8000e92:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8000e94:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000e96:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e98:	4302      	orrs	r2, r0
 8000e9a:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	4311      	orrs	r1, r2
 8000ea0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000ea6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ea8:	438a      	bics	r2, r1
 8000eaa:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000eb6:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000eb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000eba:	4393      	bics	r3, r2
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000ec4:	e76d      	b.n	8000da2 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000ec6:	691d      	ldr	r5, [r3, #16]
 8000ec8:	4e11      	ldr	r6, [pc, #68]	; (8000f10 <HAL_ADC_Init+0x1ac>)
 8000eca:	00ad      	lsls	r5, r5, #2
 8000ecc:	08ad      	lsrs	r5, r5, #2
 8000ece:	611d      	str	r5, [r3, #16]
 8000ed0:	6815      	ldr	r5, [r2, #0]
 8000ed2:	4035      	ands	r5, r6
 8000ed4:	6015      	str	r5, [r2, #0]
 8000ed6:	6815      	ldr	r5, [r2, #0]
 8000ed8:	4329      	orrs	r1, r5
 8000eda:	6011      	str	r1, [r2, #0]
 8000edc:	e783      	b.n	8000de6 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ede:	2120      	movs	r1, #32
 8000ee0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	65a2      	str	r2, [r4, #88]	; 0x58
 8000eec:	e7c7      	b.n	8000e7e <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000eee:	2101      	movs	r1, #1
 8000ef0:	420a      	tst	r2, r1
 8000ef2:	d0d6      	beq.n	8000ea2 <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	438a      	bics	r2, r1
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	e7d2      	b.n	8000ea2 <HAL_ADC_Init+0x13e>
 8000efc:	fffffefd 	.word	0xfffffefd
 8000f00:	40012708 	.word	0x40012708
 8000f04:	fdffffff 	.word	0xfdffffff
 8000f08:	fffe0219 	.word	0xfffe0219
 8000f0c:	fffffc03 	.word	0xfffffc03
 8000f10:	ffc3ffff 	.word	0xffc3ffff

08000f14 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f14:	6803      	ldr	r3, [r0, #0]
{
 8000f16:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f18:	689b      	ldr	r3, [r3, #8]
{
 8000f1a:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000f1c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f1e:	075b      	lsls	r3, r3, #29
 8000f20:	d41a      	bmi.n	8000f58 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8000f22:	0025      	movs	r5, r4
 8000f24:	3550      	adds	r5, #80	; 0x50
 8000f26:	782b      	ldrb	r3, [r5, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d015      	beq.n	8000f58 <HAL_ADC_Start+0x44>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f30:	69e3      	ldr	r3, [r4, #28]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d111      	bne.n	8000f5a <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000f36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f44:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8000f46:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f48:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8000f4a:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8000f4c:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f4e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f50:	6899      	ldr	r1, [r3, #8]
 8000f52:	3a18      	subs	r2, #24
 8000f54:	430a      	orrs	r2, r1
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000f5a:	0020      	movs	r0, r4
 8000f5c:	f7ff fe6c 	bl	8000c38 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d0e8      	beq.n	8000f36 <HAL_ADC_Start+0x22>
 8000f64:	e7f8      	b.n	8000f58 <HAL_ADC_Start+0x44>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	fffff0fe 	.word	0xfffff0fe

08000f6c <HAL_ADC_Stop>:
{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000f6e:	0006      	movs	r6, r0
 8000f70:	3650      	adds	r6, #80	; 0x50
 8000f72:	7833      	ldrb	r3, [r6, #0]
{
 8000f74:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000f76:	2002      	movs	r0, #2
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d012      	beq.n	8000fa2 <HAL_ADC_Stop+0x36>
 8000f7c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000f7e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8000f80:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000f82:	f7ff fec5 	bl	8000d10 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d109      	bne.n	8000f9e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8000f8a:	0020      	movs	r0, r4
 8000f8c:	f7ff fe8c 	bl	8000ca8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d104      	bne.n	8000f9e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8000f94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f96:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <HAL_ADC_Stop+0x38>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	431d      	orrs	r5, r3
 8000f9c:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	7033      	strb	r3, [r6, #0]
}
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	fffffefe 	.word	0xfffffefe

08000fa8 <HAL_ADC_PollForConversion>:
{
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000faa:	6945      	ldr	r5, [r0, #20]
{
 8000fac:	0004      	movs	r4, r0
 8000fae:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fb0:	2d08      	cmp	r5, #8
 8000fb2:	d00d      	beq.n	8000fd0 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000fb4:	6803      	ldr	r3, [r0, #0]
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000fba:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000fbc:	4203      	tst	r3, r0
 8000fbe:	d007      	beq.n	8000fd0 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8000fc4:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	7023      	strb	r3, [r4, #0]
}
 8000fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8000fd0:	f7ff fe06 	bl	8000be0 <HAL_GetTick>
 8000fd4:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4215      	tst	r5, r2
 8000fdc:	d024      	beq.n	8001028 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fe8:	22c0      	movs	r2, #192	; 0xc0
 8000fea:	68d9      	ldr	r1, [r3, #12]
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	4211      	tst	r1, r2
 8000ff0:	d113      	bne.n	800101a <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ff2:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ff4:	7fd2      	ldrb	r2, [r2, #31]
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d10f      	bne.n	800101a <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	0712      	lsls	r2, r2, #28
 8000ffe:	d50c      	bpl.n	800101a <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	0752      	lsls	r2, r2, #29
 8001004:	d423      	bmi.n	800104e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001006:	210c      	movs	r1, #12
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	438a      	bics	r2, r1
 800100c:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800100e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001010:	4913      	ldr	r1, [pc, #76]	; (8001060 <HAL_ADC_PollForConversion+0xb8>)
 8001012:	4011      	ands	r1, r2
 8001014:	2201      	movs	r2, #1
 8001016:	430a      	orrs	r2, r1
 8001018:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800101a:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800101c:	69a2      	ldr	r2, [r4, #24]
 800101e:	4282      	cmp	r2, r0
 8001020:	d1d5      	bne.n	8000fce <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e7d2      	b.n	8000fce <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001028:	1c72      	adds	r2, r6, #1
 800102a:	d0d5      	beq.n	8000fd8 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800102c:	2e00      	cmp	r6, #0
 800102e:	d108      	bne.n	8001042 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001030:	2304      	movs	r3, #4
 8001032:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8001034:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001036:	4313      	orrs	r3, r2
 8001038:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800103a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800103c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800103e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001040:	e7c5      	b.n	8000fce <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001042:	f7ff fdcd 	bl	8000be0 <HAL_GetTick>
 8001046:	1bc0      	subs	r0, r0, r7
 8001048:	42b0      	cmp	r0, r6
 800104a:	d9c4      	bls.n	8000fd6 <HAL_ADC_PollForConversion+0x2e>
 800104c:	e7f0      	b.n	8001030 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800104e:	2220      	movs	r2, #32
 8001050:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001052:	430a      	orrs	r2, r1
 8001054:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001056:	2201      	movs	r2, #1
 8001058:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800105a:	430a      	orrs	r2, r1
 800105c:	65a2      	str	r2, [r4, #88]	; 0x58
 800105e:	e7dc      	b.n	800101a <HAL_ADC_PollForConversion+0x72>
 8001060:	fffffefe 	.word	0xfffffefe

08001064 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001064:	6803      	ldr	r3, [r0, #0]
 8001066:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001068:	4770      	bx	lr
	...

0800106c <HAL_ADC_ConfigChannel>:
{
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800106e:	0004      	movs	r4, r0
 8001070:	3450      	adds	r4, #80	; 0x50
 8001072:	7823      	ldrb	r3, [r4, #0]
{
 8001074:	0006      	movs	r6, r0
 8001076:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8001078:	2002      	movs	r0, #2
 800107a:	2b01      	cmp	r3, #1
 800107c:	d00b      	beq.n	8001096 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800107e:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 8001080:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001082:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 8001084:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001086:	074b      	lsls	r3, r1, #29
 8001088:	d506      	bpl.n	8001098 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800108a:	2220      	movs	r2, #32
 800108c:	6d71      	ldr	r1, [r6, #84]	; 0x54
 800108e:	430a      	orrs	r2, r1
 8001090:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001092:	2200      	movs	r2, #0
 8001094:	7022      	strb	r2, [r4, #0]
}
 8001096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 800109c:	4e19      	ldr	r6, [pc, #100]	; (8001104 <HAL_ADC_ConfigChannel+0x98>)
 800109e:	686f      	ldr	r7, [r5, #4]
 80010a0:	0341      	lsls	r1, r0, #13
 80010a2:	02db      	lsls	r3, r3, #11
 80010a4:	0b49      	lsrs	r1, r1, #13
 80010a6:	4003      	ands	r3, r0
 80010a8:	42b7      	cmp	r7, r6
 80010aa:	d019      	beq.n	80010e0 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80010ac:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80010ae:	4301      	orrs	r1, r0
 80010b0:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_ADC_ConfigChannel+0x9c>)
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80010be:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80010c4:	f7ff fda2 	bl	8000c0c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	039b      	lsls	r3, r3, #14
 80010cc:	d505      	bpl.n	80010da <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_ADC_ConfigChannel+0x9c>)
 80010d2:	03db      	lsls	r3, r3, #15
 80010d4:	6811      	ldr	r1, [r2, #0]
 80010d6:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80010d8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80010da:	2000      	movs	r0, #0
 80010dc:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80010de:	e7da      	b.n	8001096 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80010e0:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80010e2:	438d      	bics	r5, r1
 80010e4:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_ADC_ConfigChannel+0x9c>)
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <HAL_ADC_ConfigChannel+0xa0>)
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	400b      	ands	r3, r1
 80010f2:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010f4:	0383      	lsls	r3, r0, #14
 80010f6:	d5f0      	bpl.n	80010da <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_ADC_ConfigChannel+0x9c>)
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <HAL_ADC_ConfigChannel+0xa4>)
 80010fc:	6813      	ldr	r3, [r2, #0]
 80010fe:	400b      	ands	r3, r1
 8001100:	e7ea      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x6c>
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	00001001 	.word	0x00001001
 8001108:	40012708 	.word	0x40012708
 800110c:	ff7fffff 	.word	0xff7fffff
 8001110:	ffbfffff 	.word	0xffbfffff

08001114 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001114:	b530      	push	{r4, r5, lr}
 8001116:	25ff      	movs	r5, #255	; 0xff
 8001118:	2403      	movs	r4, #3
 800111a:	002a      	movs	r2, r5
 800111c:	b2c3      	uxtb	r3, r0
 800111e:	401c      	ands	r4, r3
 8001120:	00e4      	lsls	r4, r4, #3
 8001122:	40a2      	lsls	r2, r4
 8001124:	0189      	lsls	r1, r1, #6
 8001126:	4029      	ands	r1, r5
 8001128:	43d2      	mvns	r2, r2
 800112a:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800112c:	2800      	cmp	r0, #0
 800112e:	da0b      	bge.n	8001148 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001130:	200f      	movs	r0, #15
 8001132:	4003      	ands	r3, r0
 8001134:	3b08      	subs	r3, #8
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <HAL_NVIC_SetPriority+0x4c>)
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	181b      	adds	r3, r3, r0
 800113e:	69d8      	ldr	r0, [r3, #28]
 8001140:	4002      	ands	r2, r0
 8001142:	4311      	orrs	r1, r2
 8001144:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001146:	bd30      	pop	{r4, r5, pc}
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114a:	0880      	lsrs	r0, r0, #2
 800114c:	0080      	lsls	r0, r0, #2
 800114e:	18c0      	adds	r0, r0, r3
 8001150:	23c0      	movs	r3, #192	; 0xc0
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	58c4      	ldr	r4, [r0, r3]
 8001156:	4022      	ands	r2, r4
 8001158:	4311      	orrs	r1, r2
 800115a:	50c1      	str	r1, [r0, r3]
 800115c:	e7f3      	b.n	8001146 <HAL_NVIC_SetPriority+0x32>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	e000e100 	.word	0xe000e100

08001168 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001168:	231f      	movs	r3, #31
 800116a:	4018      	ands	r0, r3
 800116c:	3b1e      	subs	r3, #30
 800116e:	4083      	lsls	r3, r0
 8001170:	4a01      	ldr	r2, [pc, #4]	; (8001178 <HAL_NVIC_EnableIRQ+0x10>)
 8001172:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001174:	4770      	bx	lr
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	e000e100 	.word	0xe000e100

0800117c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <HAL_SYSTICK_Config+0x28>)
 800117e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001180:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001182:	4293      	cmp	r3, r2
 8001184:	d80d      	bhi.n	80011a2 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001186:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118a:	4808      	ldr	r0, [pc, #32]	; (80011ac <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118e:	6a03      	ldr	r3, [r0, #32]
 8001190:	0609      	lsls	r1, r1, #24
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	430b      	orrs	r3, r1
 8001198:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011a2:	4770      	bx	lr
 80011a4:	00ffffff 	.word	0x00ffffff
 80011a8:	e000e010 	.word	0xe000e010
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011b2:	680b      	ldr	r3, [r1, #0]
{
 80011b4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80011b6:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 80011b8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0)
 80011ba:	9a03      	ldr	r2, [sp, #12]
 80011bc:	40da      	lsrs	r2, r3
 80011be:	d101      	bne.n	80011c4 <HAL_GPIO_Init+0x14>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80011c0:	b005      	add	sp, #20
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011c4:	2201      	movs	r2, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	9202      	str	r2, [sp, #8]
 80011ca:	9c02      	ldr	r4, [sp, #8]
 80011cc:	9a03      	ldr	r2, [sp, #12]
 80011ce:	4022      	ands	r2, r4
 80011d0:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 80011d2:	d100      	bne.n	80011d6 <HAL_GPIO_Init+0x26>
 80011d4:	e086      	b.n	80012e4 <HAL_GPIO_Init+0x134>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80011d6:	684a      	ldr	r2, [r1, #4]
 80011d8:	0015      	movs	r5, r2
 80011da:	4694      	mov	ip, r2
 80011dc:	2210      	movs	r2, #16
 80011de:	4395      	bics	r5, r2
 80011e0:	2d02      	cmp	r5, #2
 80011e2:	d10d      	bne.n	8001200 <HAL_GPIO_Init+0x50>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80011e4:	2407      	movs	r4, #7
 80011e6:	270f      	movs	r7, #15
 80011e8:	401c      	ands	r4, r3
 80011ea:	00a4      	lsls	r4, r4, #2
 80011ec:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	1882      	adds	r2, r0, r2
 80011f4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80011f6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80011f8:	690f      	ldr	r7, [r1, #16]
 80011fa:	40a7      	lsls	r7, r4
 80011fc:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80011fe:	6216      	str	r6, [r2, #32]
 8001200:	2203      	movs	r2, #3
 8001202:	005e      	lsls	r6, r3, #1
 8001204:	40b2      	lsls	r2, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001206:	3d01      	subs	r5, #1
 8001208:	43d2      	mvns	r2, r2
 800120a:	2d01      	cmp	r5, #1
 800120c:	d80f      	bhi.n	800122e <HAL_GPIO_Init+0x7e>
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120e:	68cc      	ldr	r4, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8001210:	6885      	ldr	r5, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001212:	40b4      	lsls	r4, r6
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001214:	4015      	ands	r5, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001218:	6084      	str	r4, [r0, #8]
        temp= GPIOx->OTYPER;
 800121a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	9c02      	ldr	r4, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800121e:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001220:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001222:	4664      	mov	r4, ip
 8001224:	0924      	lsrs	r4, r4, #4
 8001226:	403c      	ands	r4, r7
 8001228:	409c      	lsls	r4, r3
 800122a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800122c:	6044      	str	r4, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122e:	4664      	mov	r4, ip
 8001230:	2703      	movs	r7, #3
 8001232:	403c      	ands	r4, r7
 8001234:	40b4      	lsls	r4, r6
      temp = GPIOx->MODER;
 8001236:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001238:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800123c:	6004      	str	r4, [r0, #0]
      temp = GPIOx->PUPDR;
 800123e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001240:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001242:	688c      	ldr	r4, [r1, #8]
 8001244:	40b4      	lsls	r4, r6
 8001246:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001248:	2480      	movs	r4, #128	; 0x80
      GPIOx->PUPDR = temp;
 800124a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800124c:	4662      	mov	r2, ip
 800124e:	0564      	lsls	r4, r4, #21
 8001250:	4222      	tst	r2, r4
 8001252:	d047      	beq.n	80012e4 <HAL_GPIO_Init+0x134>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	2501      	movs	r5, #1
 8001256:	4c24      	ldr	r4, [pc, #144]	; (80012e8 <HAL_GPIO_Init+0x138>)
 8001258:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800125a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800125c:	003d      	movs	r5, r7
 800125e:	401d      	ands	r5, r3
 8001260:	00ad      	lsls	r5, r5, #2
 8001262:	370c      	adds	r7, #12
 8001264:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	6362      	str	r2, [r4, #52]	; 0x34
 8001268:	4a20      	ldr	r2, [pc, #128]	; (80012ec <HAL_GPIO_Init+0x13c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800126a:	089c      	lsrs	r4, r3, #2
 800126c:	00a4      	lsls	r4, r4, #2
 800126e:	18a4      	adds	r4, r4, r2
 8001270:	68a6      	ldr	r6, [r4, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001272:	2200      	movs	r2, #0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001274:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001276:	27a0      	movs	r7, #160	; 0xa0
 8001278:	05ff      	lsls	r7, r7, #23
 800127a:	42b8      	cmp	r0, r7
 800127c:	d008      	beq.n	8001290 <HAL_GPIO_Init+0xe0>
 800127e:	4f1c      	ldr	r7, [pc, #112]	; (80012f0 <HAL_GPIO_Init+0x140>)
 8001280:	3201      	adds	r2, #1
 8001282:	42b8      	cmp	r0, r7
 8001284:	d004      	beq.n	8001290 <HAL_GPIO_Init+0xe0>
 8001286:	4f1b      	ldr	r7, [pc, #108]	; (80012f4 <HAL_GPIO_Init+0x144>)
 8001288:	3205      	adds	r2, #5
 800128a:	42b8      	cmp	r0, r7
 800128c:	d100      	bne.n	8001290 <HAL_GPIO_Init+0xe0>
 800128e:	3a04      	subs	r2, #4
 8001290:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001292:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001294:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001296:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_GPIO_Init+0x148>)
        temp &= ~((uint32_t)iocurrent);
 800129a:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 800129c:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800129e:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80012a2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a4:	03ff      	lsls	r7, r7, #15
 80012a6:	d401      	bmi.n	80012ac <HAL_GPIO_Init+0xfc>
        temp &= ~((uint32_t)iocurrent);
 80012a8:	0035      	movs	r5, r6
 80012aa:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80012ae:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80012b0:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80012b2:	9d01      	ldr	r5, [sp, #4]
 80012b4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b6:	03bf      	lsls	r7, r7, #14
 80012b8:	d401      	bmi.n	80012be <HAL_GPIO_Init+0x10e>
        temp &= ~((uint32_t)iocurrent);
 80012ba:	0035      	movs	r5, r6
 80012bc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012be:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80012c0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80012c2:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80012c4:	9d01      	ldr	r5, [sp, #4]
 80012c6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c8:	02ff      	lsls	r7, r7, #11
 80012ca:	d401      	bmi.n	80012d0 <HAL_GPIO_Init+0x120>
        temp &= ~((uint32_t)iocurrent);
 80012cc:	0035      	movs	r5, r6
 80012ce:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80012d2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80012d4:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80012d6:	9e01      	ldr	r6, [sp, #4]
 80012d8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012da:	02bf      	lsls	r7, r7, #10
 80012dc:	d401      	bmi.n	80012e2 <HAL_GPIO_Init+0x132>
        temp &= ~((uint32_t)iocurrent);
 80012de:	4025      	ands	r5, r4
 80012e0:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80012e2:	60d6      	str	r6, [r2, #12]
    position++;
 80012e4:	3301      	adds	r3, #1
 80012e6:	e768      	b.n	80011ba <HAL_GPIO_Init+0xa>
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	50000400 	.word	0x50000400
 80012f4:	50000800 	.word	0x50000800
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d001      	beq.n	8001304 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001300:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001302:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001304:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001306:	e7fc      	b.n	8001302 <HAL_GPIO_WritePin+0x6>

08001308 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001308:	6943      	ldr	r3, [r0, #20]
 800130a:	4059      	eors	r1, r3
 800130c:	6141      	str	r1, [r0, #20]
}
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001310:	4770      	bx	lr
	...

08001314 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001316:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	4210      	tst	r0, r2
 800131c:	d002      	beq.n	8001324 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001320:	f7ff fff6 	bl	8001310 <HAL_GPIO_EXTI_Callback>
}
 8001324:	bd10      	pop	{r4, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800132c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001330:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001332:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001334:	400a      	ands	r2, r1
 8001336:	2a08      	cmp	r2, #8
 8001338:	d029      	beq.n	800138e <HAL_RCC_GetSysClockFreq+0x62>
 800133a:	2a0c      	cmp	r2, #12
 800133c:	d009      	beq.n	8001352 <HAL_RCC_GetSysClockFreq+0x26>
 800133e:	2a04      	cmp	r2, #4
 8001340:	d11d      	bne.n	800137e <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001342:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001346:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8001348:	17c0      	asrs	r0, r0, #31
 800134a:	4018      	ands	r0, r3
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_RCC_GetSysClockFreq+0x70>)
 800134e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001350:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001352:	028a      	lsls	r2, r1, #10
 8001354:	4812      	ldr	r0, [pc, #72]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x74>)
 8001356:	0f12      	lsrs	r2, r2, #28
 8001358:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800135a:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800135c:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800135e:	0f89      	lsrs	r1, r1, #30
 8001360:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001362:	03c0      	lsls	r0, r0, #15
 8001364:	d504      	bpl.n	8001370 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001366:	480f      	ldr	r0, [pc, #60]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8001368:	4350      	muls	r0, r2
 800136a:	f7fe fedf 	bl	800012c <__udivsi3>
 800136e:	e7ef      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	06db      	lsls	r3, r3, #27
 8001374:	d501      	bpl.n	800137a <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001376:	480c      	ldr	r0, [pc, #48]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001378:	e7f6      	b.n	8001368 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <HAL_RCC_GetSysClockFreq+0x70>)
 800137c:	e7f4      	b.n	8001368 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800137e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001380:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001382:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001384:	041b      	lsls	r3, r3, #16
 8001386:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001388:	3301      	adds	r3, #1
 800138a:	4098      	lsls	r0, r3
 800138c:	e7e0      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001390:	e7de      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x24>
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40021000 	.word	0x40021000
 8001398:	ff48e500 	.word	0xff48e500
 800139c:	00f42400 	.word	0x00f42400
 80013a0:	08002608 	.word	0x08002608
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	003d0900 	.word	0x003d0900

080013ac <HAL_RCC_OscConfig>:
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	0005      	movs	r5, r0
 80013b0:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80013b6:	2001      	movs	r0, #1
}
 80013b8:	b007      	add	sp, #28
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013bc:	230c      	movs	r3, #12
 80013be:	4cc0      	ldr	r4, [pc, #768]	; (80016c0 <HAL_RCC_OscConfig+0x314>)
 80013c0:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c2:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c4:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	401a      	ands	r2, r3
 80013cc:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	6802      	ldr	r2, [r0, #0]
 80013d0:	07d2      	lsls	r2, r2, #31
 80013d2:	d43d      	bmi.n	8001450 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	079b      	lsls	r3, r3, #30
 80013d8:	d500      	bpl.n	80013dc <HAL_RCC_OscConfig+0x30>
 80013da:	e083      	b.n	80014e4 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	06db      	lsls	r3, r3, #27
 80013e0:	d528      	bpl.n	8001434 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d000      	beq.n	80013e8 <HAL_RCC_OscConfig+0x3c>
 80013e6:	e0dd      	b.n	80015a4 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	059b      	lsls	r3, r3, #22
 80013ec:	d502      	bpl.n	80013f4 <HAL_RCC_OscConfig+0x48>
 80013ee:	69ab      	ldr	r3, [r5, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0e0      	beq.n	80013b6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f4:	6862      	ldr	r2, [r4, #4]
 80013f6:	49b3      	ldr	r1, [pc, #716]	; (80016c4 <HAL_RCC_OscConfig+0x318>)
 80013f8:	6a2b      	ldr	r3, [r5, #32]
 80013fa:	400a      	ands	r2, r1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001400:	6861      	ldr	r1, [r4, #4]
 8001402:	69ea      	ldr	r2, [r5, #28]
 8001404:	0209      	lsls	r1, r1, #8
 8001406:	0a09      	lsrs	r1, r1, #8
 8001408:	0612      	lsls	r2, r2, #24
 800140a:	430a      	orrs	r2, r1
 800140c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	0b5b      	lsrs	r3, r3, #13
 8001412:	3301      	adds	r3, #1
 8001414:	0212      	lsls	r2, r2, #8
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800141a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800141c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800141e:	060a      	lsls	r2, r1, #24
 8001420:	49a9      	ldr	r1, [pc, #676]	; (80016c8 <HAL_RCC_OscConfig+0x31c>)
 8001422:	0f12      	lsrs	r2, r2, #28
 8001424:	5c8a      	ldrb	r2, [r1, r2]
 8001426:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001428:	4aa8      	ldr	r2, [pc, #672]	; (80016cc <HAL_RCC_OscConfig+0x320>)
 800142a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800142c:	f7ff fba4 	bl	8000b78 <HAL_InitTick>
        if(status != HAL_OK)
 8001430:	2800      	cmp	r0, #0
 8001432:	d1c1      	bne.n	80013b8 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	071b      	lsls	r3, r3, #28
 8001438:	d500      	bpl.n	800143c <HAL_RCC_OscConfig+0x90>
 800143a:	e0ea      	b.n	8001612 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	075b      	lsls	r3, r3, #29
 8001440:	d500      	bpl.n	8001444 <HAL_RCC_OscConfig+0x98>
 8001442:	e10c      	b.n	800165e <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001444:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001446:	2b00      	cmp	r3, #0
 8001448:	d000      	beq.n	800144c <HAL_RCC_OscConfig+0xa0>
 800144a:	e191      	b.n	8001770 <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 800144c:	2000      	movs	r0, #0
 800144e:	e7b3      	b.n	80013b8 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001450:	2e08      	cmp	r6, #8
 8001452:	d004      	beq.n	800145e <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001454:	2e0c      	cmp	r6, #12
 8001456:	d109      	bne.n	800146c <HAL_RCC_OscConfig+0xc0>
 8001458:	9a01      	ldr	r2, [sp, #4]
 800145a:	2a00      	cmp	r2, #0
 800145c:	d006      	beq.n	800146c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	039b      	lsls	r3, r3, #14
 8001462:	d5b7      	bpl.n	80013d4 <HAL_RCC_OscConfig+0x28>
 8001464:	686b      	ldr	r3, [r5, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1b4      	bne.n	80013d4 <HAL_RCC_OscConfig+0x28>
 800146a:	e7a4      	b.n	80013b6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146c:	686a      	ldr	r2, [r5, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	d111      	bne.n	8001496 <HAL_RCC_OscConfig+0xea>
 8001472:	6822      	ldr	r2, [r4, #0]
 8001474:	4313      	orrs	r3, r2
 8001476:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001478:	f7ff fbb2 	bl	8000be0 <HAL_GetTick>
 800147c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	0292      	lsls	r2, r2, #10
 8001484:	4213      	tst	r3, r2
 8001486:	d1a5      	bne.n	80013d4 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fbaa 	bl	8000be0 <HAL_GetTick>
 800148c:	1bc0      	subs	r0, r0, r7
 800148e:	2864      	cmp	r0, #100	; 0x64
 8001490:	d9f5      	bls.n	800147e <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8001492:	2003      	movs	r0, #3
 8001494:	e790      	b.n	80013b8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001496:	21a0      	movs	r1, #160	; 0xa0
 8001498:	02c9      	lsls	r1, r1, #11
 800149a:	428a      	cmp	r2, r1
 800149c:	d105      	bne.n	80014aa <HAL_RCC_OscConfig+0xfe>
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	6821      	ldr	r1, [r4, #0]
 80014a2:	02d2      	lsls	r2, r2, #11
 80014a4:	430a      	orrs	r2, r1
 80014a6:	6022      	str	r2, [r4, #0]
 80014a8:	e7e3      	b.n	8001472 <HAL_RCC_OscConfig+0xc6>
 80014aa:	6821      	ldr	r1, [r4, #0]
 80014ac:	4888      	ldr	r0, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x324>)
 80014ae:	4001      	ands	r1, r0
 80014b0:	6021      	str	r1, [r4, #0]
 80014b2:	6821      	ldr	r1, [r4, #0]
 80014b4:	400b      	ands	r3, r1
 80014b6:	9305      	str	r3, [sp, #20]
 80014b8:	9b05      	ldr	r3, [sp, #20]
 80014ba:	4986      	ldr	r1, [pc, #536]	; (80016d4 <HAL_RCC_OscConfig+0x328>)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	400b      	ands	r3, r1
 80014c0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d1d8      	bne.n	8001478 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 80014c6:	f7ff fb8b 	bl	8000be0 <HAL_GetTick>
 80014ca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	0292      	lsls	r2, r2, #10
 80014d2:	4213      	tst	r3, r2
 80014d4:	d100      	bne.n	80014d8 <HAL_RCC_OscConfig+0x12c>
 80014d6:	e77d      	b.n	80013d4 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fb82 	bl	8000be0 <HAL_GetTick>
 80014dc:	1bc0      	subs	r0, r0, r7
 80014de:	2864      	cmp	r0, #100	; 0x64
 80014e0:	d9f4      	bls.n	80014cc <HAL_RCC_OscConfig+0x120>
 80014e2:	e7d6      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014e4:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80014e6:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014e8:	4213      	tst	r3, r2
 80014ea:	d003      	beq.n	80014f4 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014ec:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014ee:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014f0:	4311      	orrs	r1, r2
 80014f2:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f4:	2e04      	cmp	r6, #4
 80014f6:	d004      	beq.n	8001502 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014f8:	2e0c      	cmp	r6, #12
 80014fa:	d125      	bne.n	8001548 <HAL_RCC_OscConfig+0x19c>
 80014fc:	9a01      	ldr	r2, [sp, #4]
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d122      	bne.n	8001548 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	0752      	lsls	r2, r2, #29
 8001506:	d502      	bpl.n	800150e <HAL_RCC_OscConfig+0x162>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x162>
 800150c:	e753      	b.n	80013b6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	6861      	ldr	r1, [r4, #4]
 8001510:	692a      	ldr	r2, [r5, #16]
 8001512:	4871      	ldr	r0, [pc, #452]	; (80016d8 <HAL_RCC_OscConfig+0x32c>)
 8001514:	0212      	lsls	r2, r2, #8
 8001516:	4001      	ands	r1, r0
 8001518:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800151a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800151e:	6822      	ldr	r2, [r4, #0]
 8001520:	438a      	bics	r2, r1
 8001522:	4313      	orrs	r3, r2
 8001524:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001526:	f7ff ff01 	bl	800132c <HAL_RCC_GetSysClockFreq>
 800152a:	68e3      	ldr	r3, [r4, #12]
 800152c:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x31c>)
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	0f1b      	lsrs	r3, r3, #28
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	40d8      	lsrs	r0, r3
 8001536:	4b65      	ldr	r3, [pc, #404]	; (80016cc <HAL_RCC_OscConfig+0x320>)
 8001538:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fb1c 	bl	8000b78 <HAL_InitTick>
      if(status != HAL_OK)
 8001540:	2800      	cmp	r0, #0
 8001542:	d100      	bne.n	8001546 <HAL_RCC_OscConfig+0x19a>
 8001544:	e74a      	b.n	80013dc <HAL_RCC_OscConfig+0x30>
 8001546:	e737      	b.n	80013b8 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8001548:	2b00      	cmp	r3, #0
 800154a:	d019      	beq.n	8001580 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800154c:	2109      	movs	r1, #9
 800154e:	6822      	ldr	r2, [r4, #0]
 8001550:	438a      	bics	r2, r1
 8001552:	4313      	orrs	r3, r2
 8001554:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001556:	f7ff fb43 	bl	8000be0 <HAL_GetTick>
 800155a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155c:	2204      	movs	r2, #4
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	4213      	tst	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	692b      	ldr	r3, [r5, #16]
 8001568:	495b      	ldr	r1, [pc, #364]	; (80016d8 <HAL_RCC_OscConfig+0x32c>)
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	400a      	ands	r2, r1
 800156e:	4313      	orrs	r3, r2
 8001570:	6063      	str	r3, [r4, #4]
 8001572:	e733      	b.n	80013dc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fb34 	bl	8000be0 <HAL_GetTick>
 8001578:	1bc0      	subs	r0, r0, r7
 800157a:	2802      	cmp	r0, #2
 800157c:	d9ee      	bls.n	800155c <HAL_RCC_OscConfig+0x1b0>
 800157e:	e788      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 8001580:	2201      	movs	r2, #1
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	4393      	bics	r3, r2
 8001586:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001588:	f7ff fb2a 	bl	8000be0 <HAL_GetTick>
 800158c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800158e:	2204      	movs	r2, #4
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	4213      	tst	r3, r2
 8001594:	d100      	bne.n	8001598 <HAL_RCC_OscConfig+0x1ec>
 8001596:	e721      	b.n	80013dc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fb22 	bl	8000be0 <HAL_GetTick>
 800159c:	1bc0      	subs	r0, r0, r7
 800159e:	2802      	cmp	r0, #2
 80015a0:	d9f5      	bls.n	800158e <HAL_RCC_OscConfig+0x1e2>
 80015a2:	e776      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015a4:	69ab      	ldr	r3, [r5, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d020      	beq.n	80015ec <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	6822      	ldr	r2, [r4, #0]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4313      	orrs	r3, r2
 80015b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb14 	bl	8000be0 <HAL_GetTick>
 80015b8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	4213      	tst	r3, r2
 80015c2:	d00d      	beq.n	80015e0 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c4:	6863      	ldr	r3, [r4, #4]
 80015c6:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x318>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	6a2a      	ldr	r2, [r5, #32]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d0:	6862      	ldr	r2, [r4, #4]
 80015d2:	69eb      	ldr	r3, [r5, #28]
 80015d4:	0212      	lsls	r2, r2, #8
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	0a12      	lsrs	r2, r2, #8
 80015da:	4313      	orrs	r3, r2
 80015dc:	6063      	str	r3, [r4, #4]
 80015de:	e729      	b.n	8001434 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e0:	f7ff fafe 	bl	8000be0 <HAL_GetTick>
 80015e4:	1bc0      	subs	r0, r0, r7
 80015e6:	2802      	cmp	r0, #2
 80015e8:	d9e7      	bls.n	80015ba <HAL_RCC_OscConfig+0x20e>
 80015ea:	e752      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	4a3b      	ldr	r2, [pc, #236]	; (80016dc <HAL_RCC_OscConfig+0x330>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015f4:	f7ff faf4 	bl	8000be0 <HAL_GetTick>
 80015f8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015fa:	2280      	movs	r2, #128	; 0x80
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4213      	tst	r3, r2
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x25a>
 8001604:	e716      	b.n	8001434 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001606:	f7ff faeb 	bl	8000be0 <HAL_GetTick>
 800160a:	1bc0      	subs	r0, r0, r7
 800160c:	2802      	cmp	r0, #2
 800160e:	d9f4      	bls.n	80015fa <HAL_RCC_OscConfig+0x24e>
 8001610:	e73f      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001612:	696a      	ldr	r2, [r5, #20]
 8001614:	2301      	movs	r3, #1
 8001616:	2a00      	cmp	r2, #0
 8001618:	d010      	beq.n	800163c <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 800161a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800161c:	4313      	orrs	r3, r2
 800161e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001620:	f7ff fade 	bl	8000be0 <HAL_GetTick>
 8001624:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001626:	2202      	movs	r2, #2
 8001628:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800162a:	4213      	tst	r3, r2
 800162c:	d000      	beq.n	8001630 <HAL_RCC_OscConfig+0x284>
 800162e:	e705      	b.n	800143c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fad6 	bl	8000be0 <HAL_GetTick>
 8001634:	1bc0      	subs	r0, r0, r7
 8001636:	2802      	cmp	r0, #2
 8001638:	d9f5      	bls.n	8001626 <HAL_RCC_OscConfig+0x27a>
 800163a:	e72a      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 800163c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800163e:	439a      	bics	r2, r3
 8001640:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001642:	f7ff facd 	bl	8000be0 <HAL_GetTick>
 8001646:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001648:	2202      	movs	r2, #2
 800164a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800164c:	4213      	tst	r3, r2
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x2a6>
 8001650:	e6f4      	b.n	800143c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fac5 	bl	8000be0 <HAL_GetTick>
 8001656:	1bc0      	subs	r0, r0, r7
 8001658:	2802      	cmp	r0, #2
 800165a:	d9f5      	bls.n	8001648 <HAL_RCC_OscConfig+0x29c>
 800165c:	e719      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001660:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001664:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001666:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001668:	421a      	tst	r2, r3
 800166a:	d104      	bne.n	8001676 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800166e:	4313      	orrs	r3, r2
 8001670:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001672:	2301      	movs	r3, #1
 8001674:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	4f19      	ldr	r7, [pc, #100]	; (80016e0 <HAL_RCC_OscConfig+0x334>)
 800167a:	0052      	lsls	r2, r2, #1
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4213      	tst	r3, r2
 8001680:	d008      	beq.n	8001694 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	68ab      	ldr	r3, [r5, #8]
 8001686:	0052      	lsls	r2, r2, #1
 8001688:	4293      	cmp	r3, r2
 800168a:	d12b      	bne.n	80016e4 <HAL_RCC_OscConfig+0x338>
 800168c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800168e:	4313      	orrs	r3, r2
 8001690:	6523      	str	r3, [r4, #80]	; 0x50
 8001692:	e04c      	b.n	800172e <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	0052      	lsls	r2, r2, #1
 800169a:	4313      	orrs	r3, r2
 800169c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800169e:	f7ff fa9f 	bl	8000be0 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80016a6:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	9303      	str	r3, [sp, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9a03      	ldr	r2, [sp, #12]
 80016ae:	4213      	tst	r3, r2
 80016b0:	d1e7      	bne.n	8001682 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fa95 	bl	8000be0 <HAL_GetTick>
 80016b6:	9b02      	ldr	r3, [sp, #8]
 80016b8:	1ac0      	subs	r0, r0, r3
 80016ba:	2864      	cmp	r0, #100	; 0x64
 80016bc:	d9f5      	bls.n	80016aa <HAL_RCC_OscConfig+0x2fe>
 80016be:	e6e8      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	ffff1fff 	.word	0xffff1fff
 80016c8:	080025f0 	.word	0x080025f0
 80016cc:	20000000 	.word	0x20000000
 80016d0:	fffeffff 	.word	0xfffeffff
 80016d4:	fffbffff 	.word	0xfffbffff
 80016d8:	ffffe0ff 	.word	0xffffe0ff
 80016dc:	fffffeff 	.word	0xfffffeff
 80016e0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d116      	bne.n	8001716 <HAL_RCC_OscConfig+0x36a>
 80016e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016ea:	4a53      	ldr	r2, [pc, #332]	; (8001838 <HAL_RCC_OscConfig+0x48c>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	6523      	str	r3, [r4, #80]	; 0x50
 80016f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016f2:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_RCC_OscConfig+0x490>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80016f8:	f7ff fa72 	bl	8000be0 <HAL_GetTick>
 80016fc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4213      	tst	r3, r2
 8001706:	d02a      	beq.n	800175e <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fa6a 	bl	8000be0 <HAL_GetTick>
 800170c:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <HAL_RCC_OscConfig+0x494>)
 800170e:	1bc0      	subs	r0, r0, r7
 8001710:	4298      	cmp	r0, r3
 8001712:	d9f4      	bls.n	80016fe <HAL_RCC_OscConfig+0x352>
 8001714:	e6bd      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001716:	21a0      	movs	r1, #160	; 0xa0
 8001718:	00c9      	lsls	r1, r1, #3
 800171a:	428b      	cmp	r3, r1
 800171c:	d10b      	bne.n	8001736 <HAL_RCC_OscConfig+0x38a>
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	430b      	orrs	r3, r1
 8001726:	6523      	str	r3, [r4, #80]	; 0x50
 8001728:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800172a:	431a      	orrs	r2, r3
 800172c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800172e:	f7ff fa57 	bl	8000be0 <HAL_GetTick>
 8001732:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001734:	e00e      	b.n	8001754 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001736:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001738:	4a3f      	ldr	r2, [pc, #252]	; (8001838 <HAL_RCC_OscConfig+0x48c>)
 800173a:	4013      	ands	r3, r2
 800173c:	6523      	str	r3, [r4, #80]	; 0x50
 800173e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001740:	4a3e      	ldr	r2, [pc, #248]	; (800183c <HAL_RCC_OscConfig+0x490>)
 8001742:	4013      	ands	r3, r2
 8001744:	e7a4      	b.n	8001690 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fa4b 	bl	8000be0 <HAL_GetTick>
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <HAL_RCC_OscConfig+0x494>)
 800174c:	1bc0      	subs	r0, r0, r7
 800174e:	4298      	cmp	r0, r3
 8001750:	d900      	bls.n	8001754 <HAL_RCC_OscConfig+0x3a8>
 8001752:	e69e      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	4213      	tst	r3, r2
 800175c:	d0f3      	beq.n	8001746 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 800175e:	9b01      	ldr	r3, [sp, #4]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d000      	beq.n	8001766 <HAL_RCC_OscConfig+0x3ba>
 8001764:	e66e      	b.n	8001444 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001768:	4a36      	ldr	r2, [pc, #216]	; (8001844 <HAL_RCC_OscConfig+0x498>)
 800176a:	4013      	ands	r3, r2
 800176c:	63a3      	str	r3, [r4, #56]	; 0x38
 800176e:	e669      	b.n	8001444 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	2e0c      	cmp	r6, #12
 8001772:	d043      	beq.n	80017fc <HAL_RCC_OscConfig+0x450>
 8001774:	4a34      	ldr	r2, [pc, #208]	; (8001848 <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001776:	2b02      	cmp	r3, #2
 8001778:	d12e      	bne.n	80017d8 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 800177a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800177c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800177e:	4013      	ands	r3, r2
 8001780:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001782:	f7ff fa2d 	bl	8000be0 <HAL_GetTick>
 8001786:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001788:	04b6      	lsls	r6, r6, #18
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	4233      	tst	r3, r6
 800178e:	d11d      	bne.n	80017cc <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001790:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001792:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001794:	68e2      	ldr	r2, [r4, #12]
 8001796:	430b      	orrs	r3, r1
 8001798:	492c      	ldr	r1, [pc, #176]	; (800184c <HAL_RCC_OscConfig+0x4a0>)
 800179a:	400a      	ands	r2, r1
 800179c:	4313      	orrs	r3, r2
 800179e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017a0:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	6822      	ldr	r2, [r4, #0]
 80017aa:	045b      	lsls	r3, r3, #17
 80017ac:	4313      	orrs	r3, r2
 80017ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa16 	bl	8000be0 <HAL_GetTick>
 80017b4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017b6:	04ad      	lsls	r5, r5, #18
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	422b      	tst	r3, r5
 80017bc:	d000      	beq.n	80017c0 <HAL_RCC_OscConfig+0x414>
 80017be:	e645      	b.n	800144c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fa0e 	bl	8000be0 <HAL_GetTick>
 80017c4:	1b80      	subs	r0, r0, r6
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d9f6      	bls.n	80017b8 <HAL_RCC_OscConfig+0x40c>
 80017ca:	e662      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fa08 	bl	8000be0 <HAL_GetTick>
 80017d0:	1bc0      	subs	r0, r0, r7
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d9d9      	bls.n	800178a <HAL_RCC_OscConfig+0x3de>
 80017d6:	e65c      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 80017d8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017da:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80017dc:	4013      	ands	r3, r2
 80017de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017e0:	f7ff f9fe 	bl	8000be0 <HAL_GetTick>
 80017e4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017e6:	04ad      	lsls	r5, r5, #18
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	422b      	tst	r3, r5
 80017ec:	d100      	bne.n	80017f0 <HAL_RCC_OscConfig+0x444>
 80017ee:	e62d      	b.n	800144c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f9f6 	bl	8000be0 <HAL_GetTick>
 80017f4:	1b80      	subs	r0, r0, r6
 80017f6:	2802      	cmp	r0, #2
 80017f8:	d9f6      	bls.n	80017e8 <HAL_RCC_OscConfig+0x43c>
 80017fa:	e64a      	b.n	8001492 <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 80017fc:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d100      	bne.n	8001804 <HAL_RCC_OscConfig+0x458>
 8001802:	e5d9      	b.n	80013b8 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001804:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001806:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001808:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800180a:	0252      	lsls	r2, r2, #9
 800180c:	401a      	ands	r2, r3
        return HAL_ERROR;
 800180e:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001810:	428a      	cmp	r2, r1
 8001812:	d000      	beq.n	8001816 <HAL_RCC_OscConfig+0x46a>
 8001814:	e5d0      	b.n	80013b8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001816:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001818:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800181a:	0392      	lsls	r2, r2, #14
 800181c:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	428a      	cmp	r2, r1
 8001820:	d000      	beq.n	8001824 <HAL_RCC_OscConfig+0x478>
 8001822:	e5c9      	b.n	80013b8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001824:	20c0      	movs	r0, #192	; 0xc0
 8001826:	0400      	lsls	r0, r0, #16
 8001828:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800182a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800182c:	1a18      	subs	r0, r3, r0
 800182e:	1e43      	subs	r3, r0, #1
 8001830:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001832:	b2c0      	uxtb	r0, r0
 8001834:	e5c0      	b.n	80013b8 <HAL_RCC_OscConfig+0xc>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	fffffeff 	.word	0xfffffeff
 800183c:	fffffbff 	.word	0xfffffbff
 8001840:	00001388 	.word	0x00001388
 8001844:	efffffff 	.word	0xefffffff
 8001848:	feffffff 	.word	0xfeffffff
 800184c:	ff02ffff 	.word	0xff02ffff

08001850 <HAL_RCC_ClockConfig>:
{
 8001850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001852:	1e06      	subs	r6, r0, #0
 8001854:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
}
 800185a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	2201      	movs	r2, #1
 800185e:	4c51      	ldr	r4, [pc, #324]	; (80019a4 <HAL_RCC_ClockConfig+0x154>)
 8001860:	9901      	ldr	r1, [sp, #4]
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	4013      	ands	r3, r2
 8001866:	428b      	cmp	r3, r1
 8001868:	d327      	bcc.n	80018ba <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186a:	6832      	ldr	r2, [r6, #0]
 800186c:	0793      	lsls	r3, r2, #30
 800186e:	d42f      	bmi.n	80018d0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001870:	07d3      	lsls	r3, r2, #31
 8001872:	d435      	bmi.n	80018e0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	2301      	movs	r3, #1
 8001876:	6822      	ldr	r2, [r4, #0]
 8001878:	9901      	ldr	r1, [sp, #4]
 800187a:	401a      	ands	r2, r3
 800187c:	428a      	cmp	r2, r1
 800187e:	d900      	bls.n	8001882 <HAL_RCC_ClockConfig+0x32>
 8001880:	e081      	b.n	8001986 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001882:	6832      	ldr	r2, [r6, #0]
 8001884:	4c48      	ldr	r4, [pc, #288]	; (80019a8 <HAL_RCC_ClockConfig+0x158>)
 8001886:	0753      	lsls	r3, r2, #29
 8001888:	d500      	bpl.n	800188c <HAL_RCC_ClockConfig+0x3c>
 800188a:	e084      	b.n	8001996 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	0713      	lsls	r3, r2, #28
 800188e:	d506      	bpl.n	800189e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001890:	68e2      	ldr	r2, [r4, #12]
 8001892:	6933      	ldr	r3, [r6, #16]
 8001894:	4945      	ldr	r1, [pc, #276]	; (80019ac <HAL_RCC_ClockConfig+0x15c>)
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	400a      	ands	r2, r1
 800189a:	4313      	orrs	r3, r2
 800189c:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189e:	f7ff fd45 	bl	800132c <HAL_RCC_GetSysClockFreq>
 80018a2:	68e3      	ldr	r3, [r4, #12]
 80018a4:	4a42      	ldr	r2, [pc, #264]	; (80019b0 <HAL_RCC_ClockConfig+0x160>)
 80018a6:	061b      	lsls	r3, r3, #24
 80018a8:	0f1b      	lsrs	r3, r3, #28
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	40d8      	lsrs	r0, r3
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_ClockConfig+0x164>)
 80018b0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff f960 	bl	8000b78 <HAL_InitTick>
 80018b8:	e7cf      	b.n	800185a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	9901      	ldr	r1, [sp, #4]
 80018be:	4393      	bics	r3, r2
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	4013      	ands	r3, r2
 80018c8:	9a01      	ldr	r2, [sp, #4]
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d1c4      	bne.n	8001858 <HAL_RCC_ClockConfig+0x8>
 80018ce:	e7cc      	b.n	800186a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	20f0      	movs	r0, #240	; 0xf0
 80018d2:	4935      	ldr	r1, [pc, #212]	; (80019a8 <HAL_RCC_ClockConfig+0x158>)
 80018d4:	68cb      	ldr	r3, [r1, #12]
 80018d6:	4383      	bics	r3, r0
 80018d8:	68b0      	ldr	r0, [r6, #8]
 80018da:	4303      	orrs	r3, r0
 80018dc:	60cb      	str	r3, [r1, #12]
 80018de:	e7c7      	b.n	8001870 <HAL_RCC_ClockConfig+0x20>
 80018e0:	4d31      	ldr	r5, [pc, #196]	; (80019a8 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018e4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	2a02      	cmp	r2, #2
 80018e8:	d119      	bne.n	800191e <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ea:	039b      	lsls	r3, r3, #14
 80018ec:	d5b4      	bpl.n	8001858 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ee:	2103      	movs	r1, #3
 80018f0:	68eb      	ldr	r3, [r5, #12]
 80018f2:	438b      	bics	r3, r1
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80018f8:	f7ff f972 	bl	8000be0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fc:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80018fe:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001900:	2b02      	cmp	r3, #2
 8001902:	d119      	bne.n	8001938 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001904:	220c      	movs	r2, #12
 8001906:	68eb      	ldr	r3, [r5, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	2b08      	cmp	r3, #8
 800190c:	d0b2      	beq.n	8001874 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7ff f967 	bl	8000be0 <HAL_GetTick>
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_RCC_ClockConfig+0x168>)
 8001914:	1bc0      	subs	r0, r0, r7
 8001916:	4298      	cmp	r0, r3
 8001918:	d9f4      	bls.n	8001904 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 800191a:	2003      	movs	r0, #3
 800191c:	e79d      	b.n	800185a <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191e:	2a03      	cmp	r2, #3
 8001920:	d102      	bne.n	8001928 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001922:	019b      	lsls	r3, r3, #6
 8001924:	d4e3      	bmi.n	80018ee <HAL_RCC_ClockConfig+0x9e>
 8001926:	e797      	b.n	8001858 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001928:	2a01      	cmp	r2, #1
 800192a:	d102      	bne.n	8001932 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800192c:	075b      	lsls	r3, r3, #29
 800192e:	d4de      	bmi.n	80018ee <HAL_RCC_ClockConfig+0x9e>
 8001930:	e792      	b.n	8001858 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001932:	059b      	lsls	r3, r3, #22
 8001934:	d4db      	bmi.n	80018ee <HAL_RCC_ClockConfig+0x9e>
 8001936:	e78f      	b.n	8001858 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001938:	2b03      	cmp	r3, #3
 800193a:	d10b      	bne.n	8001954 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193c:	220c      	movs	r2, #12
 800193e:	68eb      	ldr	r3, [r5, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	4293      	cmp	r3, r2
 8001944:	d096      	beq.n	8001874 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001946:	f7ff f94b 	bl	8000be0 <HAL_GetTick>
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_RCC_ClockConfig+0x168>)
 800194c:	1bc0      	subs	r0, r0, r7
 800194e:	4298      	cmp	r0, r3
 8001950:	d9f4      	bls.n	800193c <HAL_RCC_ClockConfig+0xec>
 8001952:	e7e2      	b.n	800191a <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001954:	2b01      	cmp	r3, #1
 8001956:	d010      	beq.n	800197a <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001958:	220c      	movs	r2, #12
 800195a:	68eb      	ldr	r3, [r5, #12]
 800195c:	4213      	tst	r3, r2
 800195e:	d089      	beq.n	8001874 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff f93e 	bl	8000be0 <HAL_GetTick>
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_RCC_ClockConfig+0x168>)
 8001966:	1bc0      	subs	r0, r0, r7
 8001968:	4298      	cmp	r0, r3
 800196a:	d9f5      	bls.n	8001958 <HAL_RCC_ClockConfig+0x108>
 800196c:	e7d5      	b.n	800191a <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196e:	f7ff f937 	bl	8000be0 <HAL_GetTick>
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_RCC_ClockConfig+0x168>)
 8001974:	1bc0      	subs	r0, r0, r7
 8001976:	4298      	cmp	r0, r3
 8001978:	d8cf      	bhi.n	800191a <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800197a:	220c      	movs	r2, #12
 800197c:	68eb      	ldr	r3, [r5, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b04      	cmp	r3, #4
 8001982:	d1f4      	bne.n	800196e <HAL_RCC_ClockConfig+0x11e>
 8001984:	e776      	b.n	8001874 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	439a      	bics	r2, r3
 800198a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	6822      	ldr	r2, [r4, #0]
 800198e:	421a      	tst	r2, r3
 8001990:	d100      	bne.n	8001994 <HAL_RCC_ClockConfig+0x144>
 8001992:	e776      	b.n	8001882 <HAL_RCC_ClockConfig+0x32>
 8001994:	e760      	b.n	8001858 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001996:	68e3      	ldr	r3, [r4, #12]
 8001998:	4908      	ldr	r1, [pc, #32]	; (80019bc <HAL_RCC_ClockConfig+0x16c>)
 800199a:	400b      	ands	r3, r1
 800199c:	68f1      	ldr	r1, [r6, #12]
 800199e:	430b      	orrs	r3, r1
 80019a0:	60e3      	str	r3, [r4, #12]
 80019a2:	e773      	b.n	800188c <HAL_RCC_ClockConfig+0x3c>
 80019a4:	40022000 	.word	0x40022000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	ffffc7ff 	.word	0xffffc7ff
 80019b0:	080025f0 	.word	0x080025f0
 80019b4:	20000000 	.word	0x20000000
 80019b8:	00001388 	.word	0x00001388
 80019bc:	fffff8ff 	.word	0xfffff8ff

080019c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	0f5b      	lsrs	r3, r3, #29
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019ce:	6810      	ldr	r0, [r2, #0]
 80019d0:	40d8      	lsrs	r0, r3
}
 80019d2:	4770      	bx	lr
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08002600 	.word	0x08002600
 80019dc:	20000000 	.word	0x20000000

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	049b      	lsls	r3, r3, #18
 80019e8:	0f5b      	lsrs	r3, r3, #29
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019ee:	6810      	ldr	r0, [r2, #0]
 80019f0:	40d8      	lsrs	r0, r3
}
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000
 80019f8:	08002600 	.word	0x08002600
 80019fc:	20000000 	.word	0x20000000

08001a00 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a00:	6803      	ldr	r3, [r0, #0]
{
 8001a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a04:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a06:	069b      	lsls	r3, r3, #26
 8001a08:	d53b      	bpl.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0e:	4c4f      	ldr	r4, [pc, #316]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a10:	055b      	lsls	r3, r3, #21
 8001a12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001a14:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a16:	421a      	tst	r2, r3
 8001a18:	d104      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	2780      	movs	r7, #128	; 0x80
 8001a26:	4e4a      	ldr	r6, [pc, #296]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001a28:	007f      	lsls	r7, r7, #1
 8001a2a:	6833      	ldr	r3, [r6, #0]
 8001a2c:	423b      	tst	r3, r7
 8001a2e:	d04f      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a30:	6868      	ldr	r0, [r5, #4]
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	26c0      	movs	r6, #192	; 0xc0
 8001a36:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a38:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a3a:	03b6      	lsls	r6, r6, #14
 8001a3c:	029b      	lsls	r3, r3, #10
 8001a3e:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a40:	4032      	ands	r2, r6
 8001a42:	4019      	ands	r1, r3
 8001a44:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a46:	4290      	cmp	r0, r2
 8001a48:	d153      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001a4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a4c:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001a4e:	d157      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a50:	6869      	ldr	r1, [r5, #4]
 8001a52:	23c0      	movs	r3, #192	; 0xc0
 8001a54:	000a      	movs	r2, r1
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	401a      	ands	r2, r3
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	483c      	ldr	r0, [pc, #240]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001a62:	4003      	ands	r3, r0
 8001a64:	20c0      	movs	r0, #192	; 0xc0
 8001a66:	0380      	lsls	r0, r0, #14
 8001a68:	4001      	ands	r1, r0
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a70:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a72:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a74:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d103      	bne.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a7c:	4a36      	ldr	r2, [pc, #216]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a82:	682a      	ldr	r2, [r5, #0]
 8001a84:	0793      	lsls	r3, r2, #30
 8001a86:	d506      	bpl.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a88:	200c      	movs	r0, #12
 8001a8a:	4930      	ldr	r1, [pc, #192]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a8c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001a8e:	4383      	bics	r3, r0
 8001a90:	68a8      	ldr	r0, [r5, #8]
 8001a92:	4303      	orrs	r3, r0
 8001a94:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a96:	0753      	lsls	r3, r2, #29
 8001a98:	d506      	bpl.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a9a:	492c      	ldr	r1, [pc, #176]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a9c:	482f      	ldr	r0, [pc, #188]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a9e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001aa0:	4003      	ands	r3, r0
 8001aa2:	68e8      	ldr	r0, [r5, #12]
 8001aa4:	4303      	orrs	r3, r0
 8001aa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aa8:	0713      	lsls	r3, r2, #28
 8001aaa:	d506      	bpl.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aac:	4927      	ldr	r1, [pc, #156]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001aae:	482c      	ldr	r0, [pc, #176]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001ab2:	4003      	ands	r3, r0
 8001ab4:	6928      	ldr	r0, [r5, #16]
 8001ab6:	4303      	orrs	r3, r0
 8001ab8:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001aba:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001abc:	0613      	lsls	r3, r2, #24
 8001abe:	d517      	bpl.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ac2:	4928      	ldr	r1, [pc, #160]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ac4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	6969      	ldr	r1, [r5, #20]
 8001aca:	430b      	orrs	r3, r1
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	e00f      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad0:	6833      	ldr	r3, [r6, #0]
 8001ad2:	433b      	orrs	r3, r7
 8001ad4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ad6:	f7ff f883 	bl	8000be0 <HAL_GetTick>
 8001ada:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	6833      	ldr	r3, [r6, #0]
 8001ade:	423b      	tst	r3, r7
 8001ae0:	d1a6      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff f87d 	bl	8000be0 <HAL_GetTick>
 8001ae6:	9b01      	ldr	r3, [sp, #4]
 8001ae8:	1ac0      	subs	r0, r0, r3
 8001aea:	2864      	cmp	r0, #100	; 0x64
 8001aec:	d9f6      	bls.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 8001aee:	2003      	movs	r0, #3
}
 8001af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001af2:	4299      	cmp	r1, r3
 8001af4:	d1a9      	bne.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001af6:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8001af8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001afa:	039b      	lsls	r3, r3, #14
 8001afc:	d5a5      	bpl.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8001afe:	e7f7      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b00:	428b      	cmp	r3, r1
 8001b02:	d0a5      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	069b      	lsls	r3, r3, #26
 8001b08:	d5a2      	bpl.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b0a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b0c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001b10:	0312      	lsls	r2, r2, #12
 8001b12:	4302      	orrs	r2, r0
 8001b14:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b16:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b1a:	4814      	ldr	r0, [pc, #80]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b1c:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b1e:	4002      	ands	r2, r0
 8001b20:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001b22:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b24:	05cb      	lsls	r3, r1, #23
 8001b26:	d400      	bmi.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8001b28:	e792      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f859 	bl	8000be0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b2e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001b30:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b32:	00bf      	lsls	r7, r7, #2
 8001b34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b36:	423b      	tst	r3, r7
 8001b38:	d000      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001b3a:	e789      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f850 	bl	8000be0 <HAL_GetTick>
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001b42:	1b80      	subs	r0, r0, r6
 8001b44:	4298      	cmp	r0, r3
 8001b46:	d9f5      	bls.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001b48:	e7d1      	b.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0xee>
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40007000 	.word	0x40007000
 8001b54:	ffcfffff 	.word	0xffcfffff
 8001b58:	efffffff 	.word	0xefffffff
 8001b5c:	fffff3ff 	.word	0xfffff3ff
 8001b60:	ffffcfff 	.word	0xffffcfff
 8001b64:	fff3ffff 	.word	0xfff3ffff
 8001b68:	fffcffff 	.word	0xfffcffff
 8001b6c:	fff7ffff 	.word	0xfff7ffff
 8001b70:	00001388 	.word	0x00001388

08001b74 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001b74:	21a0      	movs	r1, #160	; 0xa0
 8001b76:	6802      	ldr	r2, [r0, #0]
{
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001b7a:	68d3      	ldr	r3, [r2, #12]
{
 8001b7c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001b7e:	438b      	bics	r3, r1
 8001b80:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001b82:	f7ff f82d 	bl	8000be0 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001b86:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001b88:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001b8a:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001b8c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	422b      	tst	r3, r5
 8001b94:	d001      	beq.n	8001b9a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001b96:	2000      	movs	r0, #0
}
 8001b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001b9a:	f7ff f821 	bl	8000be0 <HAL_GetTick>
 8001b9e:	1b80      	subs	r0, r0, r6
 8001ba0:	42b8      	cmp	r0, r7
 8001ba2:	d9f4      	bls.n	8001b8e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	e7f7      	b.n	8001b98 <HAL_RTC_WaitForSynchro+0x24>

08001ba8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001baa:	2440      	movs	r4, #64	; 0x40
 8001bac:	6803      	ldr	r3, [r0, #0]
{
 8001bae:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4222      	tst	r2, r4
 8001bb4:	d001      	beq.n	8001bba <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001bb6:	2000      	movs	r0, #0
}
 8001bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4252      	negs	r2, r2
 8001bbe:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001bc0:	f7ff f80e 	bl	8000be0 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001bc4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001bc6:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001bc8:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001bca:	682b      	ldr	r3, [r5, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4223      	tst	r3, r4
 8001bd0:	d1f1      	bne.n	8001bb6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001bd2:	f7ff f805 	bl	8000be0 <HAL_GetTick>
 8001bd6:	1b80      	subs	r0, r0, r6
 8001bd8:	42b8      	cmp	r0, r7
 8001bda:	d9f6      	bls.n	8001bca <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8001bdc:	2003      	movs	r0, #3
 8001bde:	e7eb      	b.n	8001bb8 <RTC_EnterInitMode+0x10>

08001be0 <HAL_RTC_Init>:
{
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001be4:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d01a      	beq.n	8001c20 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001bea:	1c86      	adds	r6, r0, #2
 8001bec:	7ff3      	ldrb	r3, [r6, #31]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8001bf4:	1942      	adds	r2, r0, r5
 8001bf6:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8001bf8:	f7fe ff14 	bl	8000a24 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bfc:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bfe:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c00:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c02:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c04:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
 8001c08:	3a77      	subs	r2, #119	; 0x77
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c0c:	f7ff ffcc 	bl	8001ba8 <RTC_EnterInitMode>
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	1e05      	subs	r5, r0, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c16:	22ff      	movs	r2, #255	; 0xff
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8001c1e:	2501      	movs	r5, #1
}
 8001c20:	0028      	movs	r0, r5
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	491b      	ldr	r1, [pc, #108]	; (8001c94 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001c28:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001c2e:	6862      	ldr	r2, [r4, #4]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	4302      	orrs	r2, r0
 8001c34:	69a0      	ldr	r0, [r4, #24]
 8001c36:	4302      	orrs	r2, r0
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001c3c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001c3e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001c40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001c42:	68a2      	ldr	r2, [r4, #8]
 8001c44:	6919      	ldr	r1, [r3, #16]
 8001c46:	0412      	lsls	r2, r2, #16
 8001c48:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001c4a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001c4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	438a      	bics	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c56:	397d      	subs	r1, #125	; 0x7d
 8001c58:	438a      	bics	r2, r1
 8001c5a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001c5c:	69e2      	ldr	r2, [r4, #28]
 8001c5e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001c60:	4302      	orrs	r2, r0
 8001c62:	430a      	orrs	r2, r1
 8001c64:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	069b      	lsls	r3, r3, #26
 8001c6a:	d40c      	bmi.n	8001c86 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	f7ff ff81 	bl	8001b74 <HAL_RTC_WaitForSynchro>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c76:	22ff      	movs	r2, #255	; 0xff
 8001c78:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8001c7a:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8001c82:	77e5      	strb	r5, [r4, #31]
 8001c84:	e7cb      	b.n	8001c1e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c86:	22ff      	movs	r2, #255	; 0xff
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8001c90:	e7c6      	b.n	8001c20 <HAL_RTC_Init+0x40>
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	ff8fffbf 	.word	0xff8fffbf

08001c98 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001c98:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8001c9a:	2809      	cmp	r0, #9
 8001c9c:	d803      	bhi.n	8001ca6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4318      	orrs	r0, r3
 8001ca2:	b2c0      	uxtb	r0, r0
}
 8001ca4:	4770      	bx	lr
    Param -= 10U;
 8001ca6:	380a      	subs	r0, #10
    bcdhigh++;
 8001ca8:	3301      	adds	r3, #1
    Param -= 10U;
 8001caa:	b2c0      	uxtb	r0, r0
 8001cac:	e7f5      	b.n	8001c9a <RTC_ByteToBcd2+0x2>
	...

08001cb0 <HAL_RTC_SetTime>:
{
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001cb4:	1c47      	adds	r7, r0, #1
{
 8001cb6:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001cb8:	7ff9      	ldrb	r1, [r7, #31]
{
 8001cba:	b085      	sub	sp, #20
 8001cbc:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8001cbe:	001e      	movs	r6, r3
 8001cc0:	2901      	cmp	r1, #1
 8001cc2:	d037      	beq.n	8001d34 <HAL_RTC_SetTime+0x84>
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cc8:	18c1      	adds	r1, r0, r3
 8001cca:	77cb      	strb	r3, [r1, #31]
 8001ccc:	9101      	str	r1, [sp, #4]
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	6806      	ldr	r6, [r0, #0]
 8001cd2:	7863      	ldrb	r3, [r4, #1]
 8001cd4:	7820      	ldrb	r0, [r4, #0]
 8001cd6:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001cd8:	68b3      	ldr	r3, [r6, #8]
 8001cda:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d12c      	bne.n	8001d3a <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d100      	bne.n	8001ce6 <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 8001ce4:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ce6:	f7ff ffd7 	bl	8001c98 <RTC_ByteToBcd2>
 8001cea:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001cec:	9802      	ldr	r0, [sp, #8]
 8001cee:	f7ff ffd3 	bl	8001c98 <RTC_ByteToBcd2>
 8001cf2:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001cf4:	78a0      	ldrb	r0, [r4, #2]
 8001cf6:	f7ff ffcf 	bl	8001c98 <RTC_ByteToBcd2>
 8001cfa:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001cfc:	78e0      	ldrb	r0, [r4, #3]
 8001cfe:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001d00:	4318      	orrs	r0, r3
 8001d02:	9b03      	ldr	r3, [sp, #12]
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001d08:	9b02      	ldr	r3, [sp, #8]
 8001d0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001d0c:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d0e:	23ca      	movs	r3, #202	; 0xca
 8001d10:	6273      	str	r3, [r6, #36]	; 0x24
 8001d12:	3b77      	subs	r3, #119	; 0x77
 8001d14:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001d16:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d18:	0028      	movs	r0, r5
 8001d1a:	f7ff ff45 	bl	8001ba8 <RTC_EnterInitMode>
 8001d1e:	682b      	ldr	r3, [r5, #0]
 8001d20:	1e06      	subs	r6, r0, #0
 8001d22:	d016      	beq.n	8001d52 <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	9a01      	ldr	r2, [sp, #4]
 8001d2c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8001d32:	2601      	movs	r6, #1
}
 8001d34:	0030      	movs	r0, r6
 8001d36:	b005      	add	sp, #20
 8001d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d100      	bne.n	8001d40 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 8001d3e:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001d40:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001d42:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001d44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001d46:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 8001d48:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001d4a:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001d4c:	78e3      	ldrb	r3, [r4, #3]
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	e7dc      	b.n	8001d0c <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001d52:	4815      	ldr	r0, [pc, #84]	; (8001da8 <HAL_RTC_SetTime+0xf8>)
 8001d54:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001d56:	4915      	ldr	r1, [pc, #84]	; (8001dac <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001d58:	4002      	ands	r2, r0
 8001d5a:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001d5c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001d5e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001d60:	400a      	ands	r2, r1
 8001d62:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001d64:	68e2      	ldr	r2, [r4, #12]
 8001d66:	6899      	ldr	r1, [r3, #8]
 8001d68:	4302      	orrs	r2, r0
 8001d6a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001d6c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001d6e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	438a      	bics	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	069b      	lsls	r3, r3, #26
 8001d7a:	d40c      	bmi.n	8001d96 <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d7c:	0028      	movs	r0, r5
 8001d7e:	f7ff fef9 	bl	8001b74 <HAL_RTC_WaitForSynchro>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d86:	22ff      	movs	r2, #255	; 0xff
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	9a01      	ldr	r2, [sp, #4]
 8001d90:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8001d92:	77fe      	strb	r6, [r7, #31]
 8001d94:	e7cd      	b.n	8001d32 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d96:	22ff      	movs	r2, #255	; 0xff
 8001d98:	682b      	ldr	r3, [r5, #0]
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	9a01      	ldr	r2, [sp, #4]
 8001da0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001da2:	2300      	movs	r3, #0
 8001da4:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001da6:	e7c5      	b.n	8001d34 <HAL_RTC_SetTime+0x84>
 8001da8:	007f7f7f 	.word	0x007f7f7f
 8001dac:	fffbffff 	.word	0xfffbffff

08001db0 <HAL_RTC_SetDate>:
{
 8001db0:	2302      	movs	r3, #2
 8001db2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001db4:	1c47      	adds	r7, r0, #1
{
 8001db6:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001db8:	7ff9      	ldrb	r1, [r7, #31]
{
 8001dba:	b085      	sub	sp, #20
 8001dbc:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8001dbe:	001d      	movs	r5, r3
 8001dc0:	2901      	cmp	r1, #1
 8001dc2:	d036      	beq.n	8001e32 <HAL_RTC_SetDate+0x82>
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dc8:	18c1      	adds	r1, r0, r3
 8001dca:	9101      	str	r1, [sp, #4]
 8001dcc:	77cb      	strb	r3, [r1, #31]
 8001dce:	7831      	ldrb	r1, [r6, #0]
 8001dd0:	78f0      	ldrb	r0, [r6, #3]
 8001dd2:	0349      	lsls	r1, r1, #13
 8001dd4:	7873      	ldrb	r3, [r6, #1]
 8001dd6:	78b5      	ldrb	r5, [r6, #2]
 8001dd8:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d14c      	bne.n	8001e78 <HAL_RTC_SetDate+0xc8>
 8001dde:	3210      	adds	r2, #16
 8001de0:	4213      	tst	r3, r2
 8001de2:	d002      	beq.n	8001dea <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001de4:	4393      	bics	r3, r2
 8001de6:	330a      	adds	r3, #10
 8001de8:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001dea:	f7ff ff55 	bl	8001c98 <RTC_ByteToBcd2>
 8001dee:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001df0:	7870      	ldrb	r0, [r6, #1]
 8001df2:	f7ff ff51 	bl	8001c98 <RTC_ByteToBcd2>
 8001df6:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001df8:	0028      	movs	r0, r5
 8001dfa:	f7ff ff4d 	bl	8001c98 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001dfe:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001e00:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001e02:	041d      	lsls	r5, r3, #16
 8001e04:	9b02      	ldr	r3, [sp, #8]
 8001e06:	4318      	orrs	r0, r3
 8001e08:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e0a:	22ca      	movs	r2, #202	; 0xca
 8001e0c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e0e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
 8001e12:	3a77      	subs	r2, #119	; 0x77
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e16:	f7ff fec7 	bl	8001ba8 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001e1a:	432e      	orrs	r6, r5
 8001e1c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e1e:	1e05      	subs	r5, r0, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e22:	22ff      	movs	r2, #255	; 0xff
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e26:	2304      	movs	r3, #4
 8001e28:	9a01      	ldr	r2, [sp, #4]
 8001e2a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8001e30:	2501      	movs	r5, #1
}
 8001e32:	0028      	movs	r0, r5
 8001e34:	b005      	add	sp, #20
 8001e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001e38:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001e3a:	4812      	ldr	r0, [pc, #72]	; (8001e84 <HAL_RTC_SetDate+0xd4>)
 8001e3c:	4006      	ands	r6, r0
 8001e3e:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	438a      	bics	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	069b      	lsls	r3, r3, #26
 8001e4a:	d40c      	bmi.n	8001e66 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e4c:	0020      	movs	r0, r4
 8001e4e:	f7ff fe91 	bl	8001b74 <HAL_RTC_WaitForSynchro>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e56:	22ff      	movs	r2, #255	; 0xff
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	9a01      	ldr	r2, [sp, #4]
 8001e60:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8001e62:	77fd      	strb	r5, [r7, #31]
 8001e64:	e7e4      	b.n	8001e30 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	9a01      	ldr	r2, [sp, #4]
 8001e70:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001e72:	2300      	movs	r3, #0
 8001e74:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001e76:	e7dc      	b.n	8001e32 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001e78:	9a02      	ldr	r2, [sp, #8]
 8001e7a:	0400      	lsls	r0, r0, #16
 8001e7c:	4310      	orrs	r0, r2
 8001e7e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8001e80:	021e      	lsls	r6, r3, #8
 8001e82:	e7c2      	b.n	8001e0a <HAL_RTC_SetDate+0x5a>
 8001e84:	00ffff3f 	.word	0x00ffff3f

08001e88 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8001e88:	2302      	movs	r3, #2
 8001e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8c:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e8e:	1c46      	adds	r6, r0, #1
{
 8001e90:	9102      	str	r1, [sp, #8]
 8001e92:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hrtc);
 8001e94:	7ff2      	ldrb	r2, [r6, #31]
{
 8001e96:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8001e98:	0018      	movs	r0, r3
 8001e9a:	2a01      	cmp	r2, #1
 8001e9c:	d058      	beq.n	8001f50 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
 8001e9e:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ea0:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 8001ea2:	77f2      	strb	r2, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ea4:	77fb      	strb	r3, [r7, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	32c9      	adds	r2, #201	; 0xc9
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
 8001eac:	3a77      	subs	r2, #119	; 0x77
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	055b      	lsls	r3, r3, #21
 8001eb4:	d435      	bmi.n	8001f22 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	492e      	ldr	r1, [pc, #184]	; (8001f74 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001ec0:	68d9      	ldr	r1, [r3, #12]
 8001ec2:	4a2d      	ldr	r2, [pc, #180]	; (8001f78 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8001ec4:	b2c9      	uxtb	r1, r1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001eca:	f7fe fe89 	bl	8000be0 <HAL_GetTick>
 8001ece:	9001      	str	r0, [sp, #4]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	68dd      	ldr	r5, [r3, #12]
 8001ed6:	4015      	ands	r5, r2
 8001ed8:	d03c      	beq.n	8001f54 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8001eda:	2107      	movs	r1, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8001edc:	9a02      	ldr	r2, [sp, #8]
 8001ede:	615a      	str	r2, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	438a      	bics	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	9903      	ldr	r1, [sp, #12]
 8001eea:	430a      	orrs	r2, r1

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001eec:	2180      	movs	r1, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8001eee:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001ef0:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8001ef2:	0349      	lsls	r1, r1, #13
 8001ef4:	6810      	ldr	r0, [r2, #0]
 8001ef6:	4308      	orrs	r0, r1
 8001ef8:	6010      	str	r0, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8001efa:	6890      	ldr	r0, [r2, #8]
 8001efc:	4301      	orrs	r1, r0
 8001efe:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	6899      	ldr	r1, [r3, #8]
 8001f04:	01d2      	lsls	r2, r2, #7
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	6899      	ldr	r1, [r3, #8]
 8001f0e:	00d2      	lsls	r2, r2, #3
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f14:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f16:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8001f1e:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
 8001f20:	e016      	b.n	8001f50 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
    tickstart = HAL_GetTick();
 8001f22:	f7fe fe5d 	bl	8000be0 <HAL_GetTick>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8001f26:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8001f28:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	422b      	tst	r3, r5
 8001f30:	d0c1      	beq.n	8001eb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f32:	f7fe fe55 	bl	8000be0 <HAL_GetTick>
 8001f36:	9b01      	ldr	r3, [sp, #4]
 8001f38:	1ac0      	subs	r0, r0, r3
 8001f3a:	23fa      	movs	r3, #250	; 0xfa
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4298      	cmp	r0, r3
 8001f40:	d9f3      	bls.n	8001f2a <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f46:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001f4a:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f4c:	77f8      	strb	r0, [r7, #31]
        __HAL_UNLOCK(hrtc);
 8001f4e:	77f3      	strb	r3, [r6, #31]
}
 8001f50:	b005      	add	sp, #20
 8001f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f54:	f7fe fe44 	bl	8000be0 <HAL_GetTick>
 8001f58:	9b01      	ldr	r3, [sp, #4]
 8001f5a:	1ac0      	subs	r0, r0, r3
 8001f5c:	23fa      	movs	r3, #250	; 0xfa
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4298      	cmp	r0, r3
 8001f62:	d9b5      	bls.n	8001ed0 <HAL_RTCEx_SetWakeUpTimer_IT+0x48>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f64:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f66:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f6c:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 8001f6e:	77f5      	strb	r5, [r6, #31]
      return HAL_TIMEOUT;
 8001f70:	e7ee      	b.n	8001f50 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	fffffbff 	.word	0xfffffbff
 8001f78:	fffffb7f 	.word	0xfffffb7f
 8001f7c:	40010400 	.word	0x40010400

08001f80 <HAL_RTCEx_WakeUpTimerEventCallback>:
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8001f84:	6803      	ldr	r3, [r0, #0]
{
 8001f86:	b510      	push	{r4, lr}
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8001f88:	68db      	ldr	r3, [r3, #12]
{
 8001f8a:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8001f8c:	055b      	lsls	r3, r3, #21
 8001f8e:	d507      	bpl.n	8001fa0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8001f90:	f7ff fff6 	bl	8001f80 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001f94:	6821      	ldr	r1, [r4, #0]
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8001f98:	68ca      	ldr	r2, [r1, #12]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8001fa4:	0352      	lsls	r2, r2, #13
 8001fa6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	3402      	adds	r4, #2
 8001fac:	77e3      	strb	r3, [r4, #31]
}
 8001fae:	bd10      	pop	{r4, pc}
 8001fb0:	fffffb7f 	.word	0xfffffb7f
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fbc:	6925      	ldr	r5, [r4, #16]
 8001fbe:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001fc0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fc2:	432a      	orrs	r2, r5
 8001fc4:	6965      	ldr	r5, [r4, #20]
 8001fc6:	69c1      	ldr	r1, [r0, #28]
 8001fc8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	4d76      	ldr	r5, [pc, #472]	; (80021a8 <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fce:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fd0:	4028      	ands	r0, r5
 8001fd2:	4302      	orrs	r2, r0
 8001fd4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4874      	ldr	r0, [pc, #464]	; (80021ac <UART_SetConfig+0x1f4>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fda:	4d75      	ldr	r5, [pc, #468]	; (80021b0 <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fdc:	4002      	ands	r2, r0
 8001fde:	68e0      	ldr	r0, [r4, #12]
 8001fe0:	4302      	orrs	r2, r0
 8001fe2:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fe4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fe6:	42ab      	cmp	r3, r5
 8001fe8:	d001      	beq.n	8001fee <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fea:	6a22      	ldr	r2, [r4, #32]
 8001fec:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	4e70      	ldr	r6, [pc, #448]	; (80021b4 <UART_SetConfig+0x1fc>)
 8001ff2:	4032      	ands	r2, r6
 8001ff4:	4302      	orrs	r2, r0
 8001ff6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ff8:	4a6f      	ldr	r2, [pc, #444]	; (80021b8 <UART_SetConfig+0x200>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d114      	bne.n	8002028 <UART_SetConfig+0x70>
 8001ffe:	200c      	movs	r0, #12
 8002000:	4b6e      	ldr	r3, [pc, #440]	; (80021bc <UART_SetConfig+0x204>)
 8002002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002004:	4002      	ands	r2, r0
 8002006:	486e      	ldr	r0, [pc, #440]	; (80021c0 <UART_SetConfig+0x208>)
 8002008:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	0212      	lsls	r2, r2, #8
 800200e:	4291      	cmp	r1, r2
 8002010:	d000      	beq.n	8002014 <UART_SetConfig+0x5c>
 8002012:	e08b      	b.n	800212c <UART_SetConfig+0x174>
  {
    switch (clocksource)
 8002014:	2808      	cmp	r0, #8
 8002016:	d900      	bls.n	800201a <UART_SetConfig+0x62>
 8002018:	e085      	b.n	8002126 <UART_SetConfig+0x16e>
 800201a:	f7fe f87d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800201e:	5850      	.short	0x5850
 8002020:	847c845b 	.word	0x847c845b
 8002024:	8484      	.short	0x8484
 8002026:	7f          	.byte	0x7f
 8002027:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002028:	42ab      	cmp	r3, r5
 800202a:	d000      	beq.n	800202e <UART_SetConfig+0x76>
 800202c:	e0b4      	b.n	8002198 <UART_SetConfig+0x1e0>
 800202e:	21c0      	movs	r1, #192	; 0xc0
 8002030:	2080      	movs	r0, #128	; 0x80
 8002032:	4a62      	ldr	r2, [pc, #392]	; (80021bc <UART_SetConfig+0x204>)
 8002034:	0109      	lsls	r1, r1, #4
 8002036:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002038:	00c0      	lsls	r0, r0, #3
 800203a:	400b      	ands	r3, r1
 800203c:	4283      	cmp	r3, r0
 800203e:	d03b      	beq.n	80020b8 <UART_SetConfig+0x100>
 8002040:	d803      	bhi.n	800204a <UART_SetConfig+0x92>
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <UART_SetConfig+0xa4>
        ret = HAL_ERROR;
 8002046:	2501      	movs	r5, #1
 8002048:	e00d      	b.n	8002066 <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800204a:	2080      	movs	r0, #128	; 0x80
 800204c:	0100      	lsls	r0, r0, #4
 800204e:	4283      	cmp	r3, r0
 8002050:	d00e      	beq.n	8002070 <UART_SetConfig+0xb8>
 8002052:	428b      	cmp	r3, r1
 8002054:	d1f7      	bne.n	8002046 <UART_SetConfig+0x8e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002056:	2080      	movs	r0, #128	; 0x80
 8002058:	0200      	lsls	r0, r0, #8
 800205a:	e010      	b.n	800207e <UART_SetConfig+0xc6>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800205c:	f7ff fcb0 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
 8002060:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8002062:	42a8      	cmp	r0, r5
 8002064:	d10b      	bne.n	800207e <UART_SetConfig+0xc6>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002066:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8002068:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 800206a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800206c:	6663      	str	r3, [r4, #100]	; 0x64
}
 800206e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002070:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <UART_SetConfig+0x20c>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002074:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002076:	17c0      	asrs	r0, r0, #31
 8002078:	4018      	ands	r0, r3
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <UART_SetConfig+0x210>)
 800207c:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800207e:	2203      	movs	r2, #3
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	435a      	muls	r2, r3
 8002084:	4282      	cmp	r2, r0
 8002086:	d8de      	bhi.n	8002046 <UART_SetConfig+0x8e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002088:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800208a:	4282      	cmp	r2, r0
 800208c:	d3db      	bcc.n	8002046 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800208e:	2700      	movs	r7, #0
 8002090:	0e02      	lsrs	r2, r0, #24
 8002092:	0201      	lsls	r1, r0, #8
 8002094:	085e      	lsrs	r6, r3, #1
 8002096:	1989      	adds	r1, r1, r6
 8002098:	417a      	adcs	r2, r7
 800209a:	0008      	movs	r0, r1
 800209c:	0011      	movs	r1, r2
 800209e:	001a      	movs	r2, r3
 80020a0:	003b      	movs	r3, r7
 80020a2:	f7fe f8cf 	bl	8000244 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <UART_SetConfig+0x214>)
 80020a8:	18c2      	adds	r2, r0, r3
 80020aa:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <UART_SetConfig+0x218>)
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8ca      	bhi.n	8002046 <UART_SetConfig+0x8e>
          huart->Instance->BRR = usartdiv;
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	003d      	movs	r5, r7
 80020b4:	60d8      	str	r0, [r3, #12]
 80020b6:	e7d6      	b.n	8002066 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80020b8:	f7ff f938 	bl	800132c <HAL_RCC_GetSysClockFreq>
        break;
 80020bc:	e7d0      	b.n	8002060 <UART_SetConfig+0xa8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80020be:	f7ff fc7f 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80020c2:	6863      	ldr	r3, [r4, #4]
 80020c4:	0040      	lsls	r0, r0, #1
 80020c6:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020c8:	18c0      	adds	r0, r0, r3
 80020ca:	6861      	ldr	r1, [r4, #4]
 80020cc:	e00b      	b.n	80020e6 <UART_SetConfig+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80020ce:	f7ff fc87 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 80020d2:	e7f6      	b.n	80020c2 <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020d4:	2510      	movs	r5, #16
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	6861      	ldr	r1, [r4, #4]
 80020da:	4015      	ands	r5, r2
 80020dc:	0848      	lsrs	r0, r1, #1
 80020de:	2d00      	cmp	r5, #0
 80020e0:	d006      	beq.n	80020f0 <UART_SetConfig+0x138>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80020e2:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <UART_SetConfig+0x21c>)
 80020e4:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020e6:	f7fe f821 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80020ea:	2500      	movs	r5, #0
 80020ec:	b283      	uxth	r3, r0
        break;
 80020ee:	e004      	b.n	80020fa <UART_SetConfig+0x142>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80020f0:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <UART_SetConfig+0x220>)
 80020f2:	18c0      	adds	r0, r0, r3
 80020f4:	f7fe f81a 	bl	800012c <__udivsi3>
 80020f8:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020fa:	0019      	movs	r1, r3
 80020fc:	4837      	ldr	r0, [pc, #220]	; (80021dc <UART_SetConfig+0x224>)
 80020fe:	3910      	subs	r1, #16
 8002100:	4281      	cmp	r1, r0
 8002102:	d8a0      	bhi.n	8002046 <UART_SetConfig+0x8e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002104:	210f      	movs	r1, #15
 8002106:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002108:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800210a:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800210c:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800210e:	6821      	ldr	r1, [r4, #0]
 8002110:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8002112:	60cb      	str	r3, [r1, #12]
 8002114:	e7a7      	b.n	8002066 <UART_SetConfig+0xae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002116:	f7ff f909 	bl	800132c <HAL_RCC_GetSysClockFreq>
 800211a:	e7d2      	b.n	80020c2 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800211c:	6863      	ldr	r3, [r4, #4]
 800211e:	0858      	lsrs	r0, r3, #1
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	e7d0      	b.n	80020c8 <UART_SetConfig+0x110>
        ret = HAL_ERROR;
 8002126:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002128:	2300      	movs	r3, #0
 800212a:	e7e6      	b.n	80020fa <UART_SetConfig+0x142>
    switch (clocksource)
 800212c:	2808      	cmp	r0, #8
 800212e:	d837      	bhi.n	80021a0 <UART_SetConfig+0x1e8>
 8002130:	f7fd fff2 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002134:	360f0c05 	.word	0x360f0c05
 8002138:	3636362a 	.word	0x3636362a
 800213c:	2d          	.byte	0x2d
 800213d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800213e:	f7ff fc3f 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002142:	6863      	ldr	r3, [r4, #4]
 8002144:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002146:	18c0      	adds	r0, r0, r3
 8002148:	6861      	ldr	r1, [r4, #4]
 800214a:	e00b      	b.n	8002164 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800214c:	f7ff fc48 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8002150:	e7f7      	b.n	8002142 <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002152:	2510      	movs	r5, #16
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	6861      	ldr	r1, [r4, #4]
 8002158:	4015      	ands	r5, r2
 800215a:	0848      	lsrs	r0, r1, #1
 800215c:	2d00      	cmp	r5, #0
 800215e:	d00d      	beq.n	800217c <UART_SetConfig+0x1c4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <UART_SetConfig+0x228>)
 8002162:	18c0      	adds	r0, r0, r3
 8002164:	f7fd ffe2 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002168:	2500      	movs	r5, #0
 800216a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800216c:	0019      	movs	r1, r3
 800216e:	481b      	ldr	r0, [pc, #108]	; (80021dc <UART_SetConfig+0x224>)
 8002170:	3910      	subs	r1, #16
 8002172:	4281      	cmp	r1, r0
 8002174:	d900      	bls.n	8002178 <UART_SetConfig+0x1c0>
 8002176:	e766      	b.n	8002046 <UART_SetConfig+0x8e>
      huart->Instance->BRR = usartdiv;
 8002178:	6821      	ldr	r1, [r4, #0]
 800217a:	e7ca      	b.n	8002112 <UART_SetConfig+0x15a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <UART_SetConfig+0x210>)
 800217e:	18c0      	adds	r0, r0, r3
 8002180:	f7fd ffd4 	bl	800012c <__udivsi3>
 8002184:	b283      	uxth	r3, r0
 8002186:	e7f1      	b.n	800216c <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002188:	f7ff f8d0 	bl	800132c <HAL_RCC_GetSysClockFreq>
 800218c:	e7d9      	b.n	8002142 <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	0858      	lsrs	r0, r3, #1
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	e7d6      	b.n	8002146 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	4299      	cmp	r1, r3
 800219e:	d0c2      	beq.n	8002126 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 80021a0:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e7e2      	b.n	800216c <UART_SetConfig+0x1b4>
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	efff69f3 	.word	0xefff69f3
 80021ac:	ffffcfff 	.word	0xffffcfff
 80021b0:	40004800 	.word	0x40004800
 80021b4:	fffff4ff 	.word	0xfffff4ff
 80021b8:	40004400 	.word	0x40004400
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08002611 	.word	0x08002611
 80021c4:	ff48e500 	.word	0xff48e500
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	fffffd00 	.word	0xfffffd00
 80021d0:	000ffcff 	.word	0x000ffcff
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	01e84800 	.word	0x01e84800
 80021dc:	0000ffef 	.word	0x0000ffef
 80021e0:	003d0900 	.word	0x003d0900

080021e4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80021e6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021e8:	07da      	lsls	r2, r3, #31
 80021ea:	d506      	bpl.n	80021fa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021ec:	6801      	ldr	r1, [r0, #0]
 80021ee:	4c28      	ldr	r4, [pc, #160]	; (8002290 <UART_AdvFeatureConfig+0xac>)
 80021f0:	684a      	ldr	r2, [r1, #4]
 80021f2:	4022      	ands	r2, r4
 80021f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80021f6:	4322      	orrs	r2, r4
 80021f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021fa:	079a      	lsls	r2, r3, #30
 80021fc:	d506      	bpl.n	800220c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021fe:	6801      	ldr	r1, [r0, #0]
 8002200:	4c24      	ldr	r4, [pc, #144]	; (8002294 <UART_AdvFeatureConfig+0xb0>)
 8002202:	684a      	ldr	r2, [r1, #4]
 8002204:	4022      	ands	r2, r4
 8002206:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002208:	4322      	orrs	r2, r4
 800220a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800220c:	075a      	lsls	r2, r3, #29
 800220e:	d506      	bpl.n	800221e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002210:	6801      	ldr	r1, [r0, #0]
 8002212:	4c21      	ldr	r4, [pc, #132]	; (8002298 <UART_AdvFeatureConfig+0xb4>)
 8002214:	684a      	ldr	r2, [r1, #4]
 8002216:	4022      	ands	r2, r4
 8002218:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800221a:	4322      	orrs	r2, r4
 800221c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800221e:	071a      	lsls	r2, r3, #28
 8002220:	d506      	bpl.n	8002230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002222:	6801      	ldr	r1, [r0, #0]
 8002224:	4c1d      	ldr	r4, [pc, #116]	; (800229c <UART_AdvFeatureConfig+0xb8>)
 8002226:	684a      	ldr	r2, [r1, #4]
 8002228:	4022      	ands	r2, r4
 800222a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800222c:	4322      	orrs	r2, r4
 800222e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002230:	06da      	lsls	r2, r3, #27
 8002232:	d506      	bpl.n	8002242 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002234:	6801      	ldr	r1, [r0, #0]
 8002236:	4c1a      	ldr	r4, [pc, #104]	; (80022a0 <UART_AdvFeatureConfig+0xbc>)
 8002238:	688a      	ldr	r2, [r1, #8]
 800223a:	4022      	ands	r2, r4
 800223c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800223e:	4322      	orrs	r2, r4
 8002240:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002242:	069a      	lsls	r2, r3, #26
 8002244:	d506      	bpl.n	8002254 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002246:	6801      	ldr	r1, [r0, #0]
 8002248:	4c16      	ldr	r4, [pc, #88]	; (80022a4 <UART_AdvFeatureConfig+0xc0>)
 800224a:	688a      	ldr	r2, [r1, #8]
 800224c:	4022      	ands	r2, r4
 800224e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002250:	4322      	orrs	r2, r4
 8002252:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002254:	065a      	lsls	r2, r3, #25
 8002256:	d510      	bpl.n	800227a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002258:	6801      	ldr	r1, [r0, #0]
 800225a:	4d13      	ldr	r5, [pc, #76]	; (80022a8 <UART_AdvFeatureConfig+0xc4>)
 800225c:	684a      	ldr	r2, [r1, #4]
 800225e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002260:	402a      	ands	r2, r5
 8002262:	4322      	orrs	r2, r4
 8002264:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	0352      	lsls	r2, r2, #13
 800226a:	4294      	cmp	r4, r2
 800226c:	d105      	bne.n	800227a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800226e:	684a      	ldr	r2, [r1, #4]
 8002270:	4c0e      	ldr	r4, [pc, #56]	; (80022ac <UART_AdvFeatureConfig+0xc8>)
 8002272:	4022      	ands	r2, r4
 8002274:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002276:	4322      	orrs	r2, r4
 8002278:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800227a:	061b      	lsls	r3, r3, #24
 800227c:	d506      	bpl.n	800228c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800227e:	6802      	ldr	r2, [r0, #0]
 8002280:	490b      	ldr	r1, [pc, #44]	; (80022b0 <UART_AdvFeatureConfig+0xcc>)
 8002282:	6853      	ldr	r3, [r2, #4]
 8002284:	400b      	ands	r3, r1
 8002286:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002288:	430b      	orrs	r3, r1
 800228a:	6053      	str	r3, [r2, #4]
  }
}
 800228c:	bd30      	pop	{r4, r5, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	fffdffff 	.word	0xfffdffff
 8002294:	fffeffff 	.word	0xfffeffff
 8002298:	fffbffff 	.word	0xfffbffff
 800229c:	ffff7fff 	.word	0xffff7fff
 80022a0:	ffffefff 	.word	0xffffefff
 80022a4:	ffffdfff 	.word	0xffffdfff
 80022a8:	ffefffff 	.word	0xffefffff
 80022ac:	ff9fffff 	.word	0xff9fffff
 80022b0:	fff7ffff 	.word	0xfff7ffff

080022b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	0004      	movs	r4, r0
 80022b8:	000e      	movs	r6, r1
 80022ba:	0015      	movs	r5, r2
 80022bc:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	69d3      	ldr	r3, [r2, #28]
 80022c2:	4033      	ands	r3, r6
 80022c4:	1b9b      	subs	r3, r3, r6
 80022c6:	4259      	negs	r1, r3
 80022c8:	414b      	adcs	r3, r1
 80022ca:	42ab      	cmp	r3, r5
 80022cc:	d001      	beq.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80022ce:	2000      	movs	r0, #0
 80022d0:	e01b      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80022d2:	9b06      	ldr	r3, [sp, #24]
 80022d4:	3301      	adds	r3, #1
 80022d6:	d0f3      	beq.n	80022c0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d8:	f7fe fc82 	bl	8000be0 <HAL_GetTick>
 80022dc:	9b06      	ldr	r3, [sp, #24]
 80022de:	1bc0      	subs	r0, r0, r7
 80022e0:	4298      	cmp	r0, r3
 80022e2:	d801      	bhi.n	80022e8 <UART_WaitOnFlagUntilTimeout+0x34>
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ea      	bne.n	80022be <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <UART_WaitOnFlagUntilTimeout+0x58>)
 80022ec:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80022ee:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022f0:	400a      	ands	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	31a3      	adds	r1, #163	; 0xa3
 80022f8:	31ff      	adds	r1, #255	; 0xff
 80022fa:	438a      	bics	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80022fe:	2320      	movs	r3, #32
 8002300:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002302:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002304:	2300      	movs	r3, #0
 8002306:	3470      	adds	r4, #112	; 0x70
 8002308:	7023      	strb	r3, [r4, #0]
}
 800230a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800230c:	fffffe5f 	.word	0xfffffe5f

08002310 <HAL_UART_Transmit>:
{
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	b087      	sub	sp, #28
 8002314:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002316:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002318:	0004      	movs	r4, r0
 800231a:	000d      	movs	r5, r1
 800231c:	0017      	movs	r7, r2
    return HAL_BUSY;
 800231e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002320:	2b20      	cmp	r3, #32
 8002322:	d149      	bne.n	80023b8 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002324:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002326:	2900      	cmp	r1, #0
 8002328:	d046      	beq.n	80023b8 <HAL_UART_Transmit+0xa8>
 800232a:	2a00      	cmp	r2, #0
 800232c:	d044      	beq.n	80023b8 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	68a2      	ldr	r2, [r4, #8]
 8002332:	015b      	lsls	r3, r3, #5
 8002334:	429a      	cmp	r2, r3
 8002336:	d104      	bne.n	8002342 <HAL_UART_Transmit+0x32>
 8002338:	6923      	ldr	r3, [r4, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 800233e:	4201      	tst	r1, r0
 8002340:	d13a      	bne.n	80023b8 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8002342:	0023      	movs	r3, r4
 8002344:	3370      	adds	r3, #112	; 0x70
 8002346:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002348:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800234a:	2a01      	cmp	r2, #1
 800234c:	d034      	beq.n	80023b8 <HAL_UART_Transmit+0xa8>
 800234e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002350:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8002352:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002354:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002356:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002358:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800235a:	f7fe fc41 	bl	8000be0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800235e:	0023      	movs	r3, r4
 8002360:	3350      	adds	r3, #80	; 0x50
 8002362:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8002364:	3302      	adds	r3, #2
 8002366:	9303      	str	r3, [sp, #12]
 8002368:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800236e:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002370:	015b      	lsls	r3, r3, #5
 8002372:	429a      	cmp	r2, r3
 8002374:	d104      	bne.n	8002380 <HAL_UART_Transmit+0x70>
 8002376:	6923      	ldr	r3, [r4, #16]
 8002378:	42b3      	cmp	r3, r6
 800237a:	d101      	bne.n	8002380 <HAL_UART_Transmit+0x70>
 800237c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800237e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002380:	0023      	movs	r3, r4
 8002382:	3352      	adds	r3, #82	; 0x52
 8002384:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002386:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002388:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800238e:	2a00      	cmp	r2, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002392:	2140      	movs	r1, #64	; 0x40
 8002394:	0020      	movs	r0, r4
 8002396:	f7ff ff8d 	bl	80022b4 <UART_WaitOnFlagUntilTimeout>
 800239a:	2800      	cmp	r0, #0
 800239c:	d10b      	bne.n	80023b6 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 800239e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80023a0:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80023a2:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80023a4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80023a6:	e007      	b.n	80023b8 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a8:	2200      	movs	r2, #0
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0020      	movs	r0, r4
 80023ae:	f7ff ff81 	bl	80022b4 <UART_WaitOnFlagUntilTimeout>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d002      	beq.n	80023bc <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80023b6:	2003      	movs	r0, #3
}
 80023b8:	b007      	add	sp, #28
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023bc:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80023be:	2d00      	cmp	r5, #0
 80023c0:	d10b      	bne.n	80023da <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c2:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80023c4:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c6:	05db      	lsls	r3, r3, #23
 80023c8:	0ddb      	lsrs	r3, r3, #23
 80023ca:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80023cc:	9b03      	ldr	r3, [sp, #12]
 80023ce:	9a03      	ldr	r2, [sp, #12]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	8013      	strh	r3, [r2, #0]
 80023d8:	e7d2      	b.n	8002380 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023da:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80023dc:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023de:	6293      	str	r3, [r2, #40]	; 0x28
 80023e0:	e7f4      	b.n	80023cc <HAL_UART_Transmit+0xbc>
	...

080023e4 <UART_CheckIdleState>:
{
 80023e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	2600      	movs	r6, #0
{
 80023e8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80023ec:	f7fe fbf8 	bl	8000be0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023f0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80023f2:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	071b      	lsls	r3, r3, #28
 80023f8:	d415      	bmi.n	8002426 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	075b      	lsls	r3, r3, #29
 8002400:	d50a      	bpl.n	8002418 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <UART_CheckIdleState+0x5c>)
 8002406:	2200      	movs	r2, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	03c9      	lsls	r1, r1, #15
 800240c:	002b      	movs	r3, r5
 800240e:	0020      	movs	r0, r4
 8002410:	f7ff ff50 	bl	80022b4 <UART_WaitOnFlagUntilTimeout>
 8002414:	2800      	cmp	r0, #0
 8002416:	d111      	bne.n	800243c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002418:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800241a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800241c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800241e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002420:	3470      	adds	r4, #112	; 0x70
 8002422:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002424:	e00b      	b.n	800243e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <UART_CheckIdleState+0x5c>)
 800242a:	0032      	movs	r2, r6
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	0389      	lsls	r1, r1, #14
 8002430:	0003      	movs	r3, r0
 8002432:	0020      	movs	r0, r4
 8002434:	f7ff ff3e 	bl	80022b4 <UART_WaitOnFlagUntilTimeout>
 8002438:	2800      	cmp	r0, #0
 800243a:	d0de      	beq.n	80023fa <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800243c:	2003      	movs	r0, #3
}
 800243e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002440:	01ffffff 	.word	0x01ffffff

08002444 <HAL_UART_Init>:
{
 8002444:	b510      	push	{r4, lr}
 8002446:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002448:	d101      	bne.n	800244e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800244a:	2001      	movs	r0, #1
}
 800244c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800244e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002454:	0002      	movs	r2, r0
 8002456:	3270      	adds	r2, #112	; 0x70
 8002458:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800245a:	f7fe faa1 	bl	80009a0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800245e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002460:	2101      	movs	r1, #1
 8002462:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002464:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002466:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002468:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800246a:	438b      	bics	r3, r1
 800246c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800246e:	f7ff fda3 	bl	8001fb8 <UART_SetConfig>
 8002472:	2801      	cmp	r0, #1
 8002474:	d0e9      	beq.n	800244a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800247c:	0020      	movs	r0, r4
 800247e:	f7ff feb1 	bl	80021e4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <HAL_UART_Init+0x60>)
 8002486:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002488:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800248a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800248e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	438a      	bics	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002496:	2201      	movs	r2, #1
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800249e:	f7ff ffa1 	bl	80023e4 <UART_CheckIdleState>
 80024a2:	e7d3      	b.n	800244c <HAL_UART_Init+0x8>
 80024a4:	ffffb7ff 	.word	0xffffb7ff

080024a8 <__libc_init_array>:
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	2600      	movs	r6, #0
 80024ac:	4d0c      	ldr	r5, [pc, #48]	; (80024e0 <__libc_init_array+0x38>)
 80024ae:	4c0d      	ldr	r4, [pc, #52]	; (80024e4 <__libc_init_array+0x3c>)
 80024b0:	1b64      	subs	r4, r4, r5
 80024b2:	10a4      	asrs	r4, r4, #2
 80024b4:	42a6      	cmp	r6, r4
 80024b6:	d109      	bne.n	80024cc <__libc_init_array+0x24>
 80024b8:	2600      	movs	r6, #0
 80024ba:	f000 f881 	bl	80025c0 <_init>
 80024be:	4d0a      	ldr	r5, [pc, #40]	; (80024e8 <__libc_init_array+0x40>)
 80024c0:	4c0a      	ldr	r4, [pc, #40]	; (80024ec <__libc_init_array+0x44>)
 80024c2:	1b64      	subs	r4, r4, r5
 80024c4:	10a4      	asrs	r4, r4, #2
 80024c6:	42a6      	cmp	r6, r4
 80024c8:	d105      	bne.n	80024d6 <__libc_init_array+0x2e>
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	00b3      	lsls	r3, r6, #2
 80024ce:	58eb      	ldr	r3, [r5, r3]
 80024d0:	4798      	blx	r3
 80024d2:	3601      	adds	r6, #1
 80024d4:	e7ee      	b.n	80024b4 <__libc_init_array+0xc>
 80024d6:	00b3      	lsls	r3, r6, #2
 80024d8:	58eb      	ldr	r3, [r5, r3]
 80024da:	4798      	blx	r3
 80024dc:	3601      	adds	r6, #1
 80024de:	e7f2      	b.n	80024c6 <__libc_init_array+0x1e>
 80024e0:	0800264c 	.word	0x0800264c
 80024e4:	0800264c 	.word	0x0800264c
 80024e8:	0800264c 	.word	0x0800264c
 80024ec:	08002650 	.word	0x08002650

080024f0 <__itoa>:
 80024f0:	1e93      	subs	r3, r2, #2
 80024f2:	b510      	push	{r4, lr}
 80024f4:	000c      	movs	r4, r1
 80024f6:	2b22      	cmp	r3, #34	; 0x22
 80024f8:	d904      	bls.n	8002504 <__itoa+0x14>
 80024fa:	2300      	movs	r3, #0
 80024fc:	001c      	movs	r4, r3
 80024fe:	700b      	strb	r3, [r1, #0]
 8002500:	0020      	movs	r0, r4
 8002502:	bd10      	pop	{r4, pc}
 8002504:	2a0a      	cmp	r2, #10
 8002506:	d109      	bne.n	800251c <__itoa+0x2c>
 8002508:	2800      	cmp	r0, #0
 800250a:	da07      	bge.n	800251c <__itoa+0x2c>
 800250c:	232d      	movs	r3, #45	; 0x2d
 800250e:	700b      	strb	r3, [r1, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	4240      	negs	r0, r0
 8002514:	1861      	adds	r1, r4, r1
 8002516:	f000 f817 	bl	8002548 <__utoa>
 800251a:	e7f1      	b.n	8002500 <__itoa+0x10>
 800251c:	2100      	movs	r1, #0
 800251e:	e7f9      	b.n	8002514 <__itoa+0x24>

08002520 <itoa>:
 8002520:	b510      	push	{r4, lr}
 8002522:	f7ff ffe5 	bl	80024f0 <__itoa>
 8002526:	bd10      	pop	{r4, pc}

08002528 <memset>:
 8002528:	0003      	movs	r3, r0
 800252a:	1812      	adds	r2, r2, r0
 800252c:	4293      	cmp	r3, r2
 800252e:	d100      	bne.n	8002532 <memset+0xa>
 8002530:	4770      	bx	lr
 8002532:	7019      	strb	r1, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	e7f9      	b.n	800252c <memset+0x4>

08002538 <strcpy>:
 8002538:	0003      	movs	r3, r0
 800253a:	780a      	ldrb	r2, [r1, #0]
 800253c:	3101      	adds	r1, #1
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	2a00      	cmp	r2, #0
 8002544:	d1f9      	bne.n	800253a <strcpy+0x2>
 8002546:	4770      	bx	lr

08002548 <__utoa>:
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	0017      	movs	r7, r2
 800254c:	b08d      	sub	sp, #52	; 0x34
 800254e:	2225      	movs	r2, #37	; 0x25
 8002550:	0006      	movs	r6, r0
 8002552:	000d      	movs	r5, r1
 8002554:	a802      	add	r0, sp, #8
 8002556:	4914      	ldr	r1, [pc, #80]	; (80025a8 <__utoa+0x60>)
 8002558:	f000 f828 	bl	80025ac <memcpy>
 800255c:	aa02      	add	r2, sp, #8
 800255e:	1ebb      	subs	r3, r7, #2
 8002560:	2400      	movs	r4, #0
 8002562:	9201      	str	r2, [sp, #4]
 8002564:	2b22      	cmp	r3, #34	; 0x22
 8002566:	d905      	bls.n	8002574 <__utoa+0x2c>
 8002568:	702c      	strb	r4, [r5, #0]
 800256a:	0025      	movs	r5, r4
 800256c:	0028      	movs	r0, r5
 800256e:	b00d      	add	sp, #52	; 0x34
 8002570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002572:	0014      	movs	r4, r2
 8002574:	0030      	movs	r0, r6
 8002576:	0039      	movs	r1, r7
 8002578:	f7fd fe5e 	bl	8000238 <__aeabi_uidivmod>
 800257c:	4684      	mov	ip, r0
 800257e:	9801      	ldr	r0, [sp, #4]
 8002580:	1c62      	adds	r2, r4, #1
 8002582:	18ab      	adds	r3, r5, r2
 8002584:	5c41      	ldrb	r1, [r0, r1]
 8002586:	1e5e      	subs	r6, r3, #1
 8002588:	7031      	strb	r1, [r6, #0]
 800258a:	4666      	mov	r6, ip
 800258c:	2e00      	cmp	r6, #0
 800258e:	d1f0      	bne.n	8002572 <__utoa+0x2a>
 8002590:	701e      	strb	r6, [r3, #0]
 8002592:	002b      	movs	r3, r5
 8002594:	1b5a      	subs	r2, r3, r5
 8002596:	4294      	cmp	r4, r2
 8002598:	dde8      	ble.n	800256c <__utoa+0x24>
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	5d29      	ldrb	r1, [r5, r4]
 800259e:	7019      	strb	r1, [r3, #0]
 80025a0:	552a      	strb	r2, [r5, r4]
 80025a2:	3301      	adds	r3, #1
 80025a4:	3c01      	subs	r4, #1
 80025a6:	e7f5      	b.n	8002594 <__utoa+0x4c>
 80025a8:	0800261e 	.word	0x0800261e

080025ac <memcpy>:
 80025ac:	2300      	movs	r3, #0
 80025ae:	b510      	push	{r4, lr}
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d100      	bne.n	80025b6 <memcpy+0xa>
 80025b4:	bd10      	pop	{r4, pc}
 80025b6:	5ccc      	ldrb	r4, [r1, r3]
 80025b8:	54c4      	strb	r4, [r0, r3]
 80025ba:	3301      	adds	r3, #1
 80025bc:	e7f8      	b.n	80025b0 <memcpy+0x4>
	...

080025c0 <_init>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c6:	bc08      	pop	{r3}
 80025c8:	469e      	mov	lr, r3
 80025ca:	4770      	bx	lr

080025cc <_fini>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d2:	bc08      	pop	{r3}
 80025d4:	469e      	mov	lr, r3
 80025d6:	4770      	bx	lr
