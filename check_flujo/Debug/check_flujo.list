
check_flujo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800301c  0800301c  0001301c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030d4  080030d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080030dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000074  08003150  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000064  200001ac  08003150  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb35  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002017  00000000  00000000  0002bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004d26  00000000  00000000  0002dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000840  00000000  00000000  00032910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000970  00000000  00000000  00033150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011d74  00000000  00000000  00033ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008ee6  00000000  00000000  00045834  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006e452  00000000  00000000  0004e71a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000bcb6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b20  00000000  00000000  000bcbe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003004 	.word	0x08003004

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08003004 	.word	0x08003004

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	464f      	mov	r7, r9
 8000288:	4646      	mov	r6, r8
 800028a:	46d6      	mov	lr, sl
 800028c:	b5c0      	push	{r6, r7, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	b082      	sub	sp, #8
 8000292:	000d      	movs	r5, r1
 8000294:	4691      	mov	r9, r2
 8000296:	4698      	mov	r8, r3
 8000298:	428b      	cmp	r3, r1
 800029a:	d82f      	bhi.n	80002fc <__udivmoddi4+0x78>
 800029c:	d02c      	beq.n	80002f8 <__udivmoddi4+0x74>
 800029e:	4641      	mov	r1, r8
 80002a0:	4648      	mov	r0, r9
 80002a2:	f000 f8b1 	bl	8000408 <__clzdi2>
 80002a6:	0029      	movs	r1, r5
 80002a8:	0006      	movs	r6, r0
 80002aa:	0020      	movs	r0, r4
 80002ac:	f000 f8ac 	bl	8000408 <__clzdi2>
 80002b0:	1a33      	subs	r3, r6, r0
 80002b2:	469c      	mov	ip, r3
 80002b4:	3b20      	subs	r3, #32
 80002b6:	469a      	mov	sl, r3
 80002b8:	d500      	bpl.n	80002bc <__udivmoddi4+0x38>
 80002ba:	e076      	b.n	80003aa <__udivmoddi4+0x126>
 80002bc:	464b      	mov	r3, r9
 80002be:	4652      	mov	r2, sl
 80002c0:	4093      	lsls	r3, r2
 80002c2:	001f      	movs	r7, r3
 80002c4:	464b      	mov	r3, r9
 80002c6:	4662      	mov	r2, ip
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d828      	bhi.n	8000322 <__udivmoddi4+0x9e>
 80002d0:	d025      	beq.n	800031e <__udivmoddi4+0x9a>
 80002d2:	4653      	mov	r3, sl
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	41bd      	sbcs	r5, r7
 80002d8:	2b00      	cmp	r3, #0
 80002da:	da00      	bge.n	80002de <__udivmoddi4+0x5a>
 80002dc:	e07b      	b.n	80003d6 <__udivmoddi4+0x152>
 80002de:	2200      	movs	r2, #0
 80002e0:	2300      	movs	r3, #0
 80002e2:	9200      	str	r2, [sp, #0]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2301      	movs	r3, #1
 80002e8:	4652      	mov	r2, sl
 80002ea:	4093      	lsls	r3, r2
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2301      	movs	r3, #1
 80002f0:	4662      	mov	r2, ip
 80002f2:	4093      	lsls	r3, r2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	e018      	b.n	800032a <__udivmoddi4+0xa6>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	d9d0      	bls.n	800029e <__udivmoddi4+0x1a>
 80002fc:	2200      	movs	r2, #0
 80002fe:	2300      	movs	r3, #0
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <__udivmoddi4+0x8a>
 800030a:	601c      	str	r4, [r3, #0]
 800030c:	605d      	str	r5, [r3, #4]
 800030e:	9800      	ldr	r0, [sp, #0]
 8000310:	9901      	ldr	r1, [sp, #4]
 8000312:	b002      	add	sp, #8
 8000314:	bc1c      	pop	{r2, r3, r4}
 8000316:	4690      	mov	r8, r2
 8000318:	4699      	mov	r9, r3
 800031a:	46a2      	mov	sl, r4
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	42a3      	cmp	r3, r4
 8000320:	d9d7      	bls.n	80002d2 <__udivmoddi4+0x4e>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	4663      	mov	r3, ip
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0e9      	beq.n	8000304 <__udivmoddi4+0x80>
 8000330:	07fb      	lsls	r3, r7, #31
 8000332:	4698      	mov	r8, r3
 8000334:	4641      	mov	r1, r8
 8000336:	0872      	lsrs	r2, r6, #1
 8000338:	430a      	orrs	r2, r1
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	4666      	mov	r6, ip
 800033e:	e00e      	b.n	800035e <__udivmoddi4+0xda>
 8000340:	42ab      	cmp	r3, r5
 8000342:	d101      	bne.n	8000348 <__udivmoddi4+0xc4>
 8000344:	42a2      	cmp	r2, r4
 8000346:	d80c      	bhi.n	8000362 <__udivmoddi4+0xde>
 8000348:	1aa4      	subs	r4, r4, r2
 800034a:	419d      	sbcs	r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	1924      	adds	r4, r4, r4
 8000350:	416d      	adcs	r5, r5
 8000352:	2100      	movs	r1, #0
 8000354:	3e01      	subs	r6, #1
 8000356:	1824      	adds	r4, r4, r0
 8000358:	414d      	adcs	r5, r1
 800035a:	2e00      	cmp	r6, #0
 800035c:	d006      	beq.n	800036c <__udivmoddi4+0xe8>
 800035e:	42ab      	cmp	r3, r5
 8000360:	d9ee      	bls.n	8000340 <__udivmoddi4+0xbc>
 8000362:	3e01      	subs	r6, #1
 8000364:	1924      	adds	r4, r4, r4
 8000366:	416d      	adcs	r5, r5
 8000368:	2e00      	cmp	r6, #0
 800036a:	d1f8      	bne.n	800035e <__udivmoddi4+0xda>
 800036c:	9800      	ldr	r0, [sp, #0]
 800036e:	9901      	ldr	r1, [sp, #4]
 8000370:	4653      	mov	r3, sl
 8000372:	1900      	adds	r0, r0, r4
 8000374:	4169      	adcs	r1, r5
 8000376:	2b00      	cmp	r3, #0
 8000378:	db23      	blt.n	80003c2 <__udivmoddi4+0x13e>
 800037a:	002b      	movs	r3, r5
 800037c:	4652      	mov	r2, sl
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	4664      	mov	r4, ip
 8000384:	40e2      	lsrs	r2, r4
 8000386:	001c      	movs	r4, r3
 8000388:	4653      	mov	r3, sl
 800038a:	0015      	movs	r5, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	db2d      	blt.n	80003ec <__udivmoddi4+0x168>
 8000390:	0026      	movs	r6, r4
 8000392:	4657      	mov	r7, sl
 8000394:	40be      	lsls	r6, r7
 8000396:	0033      	movs	r3, r6
 8000398:	0026      	movs	r6, r4
 800039a:	4667      	mov	r7, ip
 800039c:	40be      	lsls	r6, r7
 800039e:	0032      	movs	r2, r6
 80003a0:	1a80      	subs	r0, r0, r2
 80003a2:	4199      	sbcs	r1, r3
 80003a4:	9000      	str	r0, [sp, #0]
 80003a6:	9101      	str	r1, [sp, #4]
 80003a8:	e7ac      	b.n	8000304 <__udivmoddi4+0x80>
 80003aa:	4662      	mov	r2, ip
 80003ac:	2320      	movs	r3, #32
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	464a      	mov	r2, r9
 80003b2:	40da      	lsrs	r2, r3
 80003b4:	4661      	mov	r1, ip
 80003b6:	0013      	movs	r3, r2
 80003b8:	4642      	mov	r2, r8
 80003ba:	408a      	lsls	r2, r1
 80003bc:	0017      	movs	r7, r2
 80003be:	431f      	orrs	r7, r3
 80003c0:	e780      	b.n	80002c4 <__udivmoddi4+0x40>
 80003c2:	4662      	mov	r2, ip
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4666      	mov	r6, ip
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4313      	orrs	r3, r2
 80003d4:	e7d4      	b.n	8000380 <__udivmoddi4+0xfc>
 80003d6:	4662      	mov	r2, ip
 80003d8:	2320      	movs	r3, #32
 80003da:	2100      	movs	r1, #0
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	2200      	movs	r2, #0
 80003e0:	9100      	str	r1, [sp, #0]
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	2201      	movs	r2, #1
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	9201      	str	r2, [sp, #4]
 80003ea:	e780      	b.n	80002ee <__udivmoddi4+0x6a>
 80003ec:	2320      	movs	r3, #32
 80003ee:	4662      	mov	r2, ip
 80003f0:	0026      	movs	r6, r4
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	40de      	lsrs	r6, r3
 80003f6:	002f      	movs	r7, r5
 80003f8:	46b0      	mov	r8, r6
 80003fa:	4666      	mov	r6, ip
 80003fc:	40b7      	lsls	r7, r6
 80003fe:	4646      	mov	r6, r8
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c8      	b.n	8000398 <__udivmoddi4+0x114>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_RTC_AlarmAEventCallback>:
	//HAL_GPIO_TogglePin(EN_VCC3V3s_GPIO_Port, EN_VCC3V3s_Pin);
}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
  /* Turn LED2 on: Alarm generation */
  if (SUM_HOUR == HOUR_EVERY_MSG-1){
 800045c:	4a06      	ldr	r2, [pc, #24]	; (8000478 <HAL_RTC_AlarmAEventCallback+0x1c>)
 800045e:	7813      	ldrb	r3, [r2, #0]
 8000460:	2b05      	cmp	r3, #5
 8000462:	d105      	bne.n	8000470 <HAL_RTC_AlarmAEventCallback+0x14>
	 time_flag = TRUE;
 8000464:	2101      	movs	r1, #1
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <HAL_RTC_AlarmAEventCallback+0x20>)
 8000468:	7019      	strb	r1, [r3, #0]
	 SUM_HOUR = 0;
 800046a:	2300      	movs	r3, #0
  }else{
	 SUM_HOUR++;
 800046c:	7013      	strb	r3, [r2, #0]
  }
}
 800046e:	4770      	bx	lr
	 SUM_HOUR++;
 8000470:	7813      	ldrb	r3, [r2, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	e7f9      	b.n	800046c <HAL_RTC_AlarmAEventCallback+0x10>
 8000478:	20000121 	.word	0x20000121
 800047c:	20000120 	.word	0x20000120

08000480 <COUNTER_CONSUMER>:
			//LowPowerConfig();
			break;
	}
}
void COUNTER_CONSUMER(void){
	SUM_DEC++;
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <COUNTER_CONSUMER+0x18>)
 8000482:	7813      	ldrb	r3, [r2, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	7013      	strb	r3, [r2, #0]
	SUM_COUNTER--;
 800048a:	4a04      	ldr	r2, [pc, #16]	; (800049c <COUNTER_CONSUMER+0x1c>)
 800048c:	7813      	ldrb	r3, [r2, #0]
 800048e:	3b01      	subs	r3, #1
 8000490:	b2db      	uxtb	r3, r3
 8000492:	7013      	strb	r3, [r2, #0]
}
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	2000009c 	.word	0x2000009c
 800049c:	2000009d 	.word	0x2000009d

080004a0 <TRANSMIT_WSSFM10R2AT>:
void TRANSMIT_WSSFM10R2AT(char * buff, int ArrayLength){
 80004a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80004a2:	000d      	movs	r5, r1
 80004a4:	0006      	movs	r6, r0
	char AT_COMANDO[10];
	sprintf(AT_COMANDO,"AT$RC\r\n");
 80004a6:	491f      	ldr	r1, [pc, #124]	; (8000524 <TRANSMIT_WSSFM10R2AT+0x84>)
 80004a8:	a801      	add	r0, sp, #4
 80004aa:	f002 f989 	bl	80027c0 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 80004ae:	a801      	add	r0, sp, #4
 80004b0:	f7ff fe2a 	bl	8000108 <strlen>
 80004b4:	4c1c      	ldr	r4, [pc, #112]	; (8000528 <TRANSMIT_WSSFM10R2AT+0x88>)
 80004b6:	b282      	uxth	r2, r0
 80004b8:	2364      	movs	r3, #100	; 0x64
 80004ba:	a901      	add	r1, sp, #4
 80004bc:	0020      	movs	r0, r4
 80004be:	f002 f845 	bl	800254c <HAL_UART_Transmit>
	HAL_Delay(100);
 80004c2:	2064      	movs	r0, #100	; 0x64
 80004c4:	f000 fbfa 	bl	8000cbc <HAL_Delay>
	sprintf(AT_COMANDO,"AT$SF=");
 80004c8:	4918      	ldr	r1, [pc, #96]	; (800052c <TRANSMIT_WSSFM10R2AT+0x8c>)
 80004ca:	a801      	add	r0, sp, #4
 80004cc:	f002 f978 	bl	80027c0 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 80004d0:	a801      	add	r0, sp, #4
 80004d2:	f7ff fe19 	bl	8000108 <strlen>
 80004d6:	2364      	movs	r3, #100	; 0x64
 80004d8:	b282      	uxth	r2, r0
 80004da:	a901      	add	r1, sp, #4
 80004dc:	0020      	movs	r0, r4
 80004de:	f002 f835 	bl	800254c <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)buff,(uint16_t)ArrayLength,(uint32_t)100);
 80004e2:	b2aa      	uxth	r2, r5
 80004e4:	2364      	movs	r3, #100	; 0x64
 80004e6:	0031      	movs	r1, r6
 80004e8:	0020      	movs	r0, r4
 80004ea:	f002 f82f 	bl	800254c <HAL_UART_Transmit>
    sprintf(AT_COMANDO,"\r\n");
 80004ee:	4910      	ldr	r1, [pc, #64]	; (8000530 <TRANSMIT_WSSFM10R2AT+0x90>)
 80004f0:	a801      	add	r0, sp, #4
 80004f2:	f002 f965 	bl	80027c0 <strcpy>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 80004f6:	a801      	add	r0, sp, #4
 80004f8:	f7ff fe06 	bl	8000108 <strlen>
	for(int i=0;i<10;i++){
		HAL_GPIO_TogglePin(EN_VCC3V3s_GPIO_Port, EN_VCC3V3s_Pin);
 80004fc:	25a0      	movs	r5, #160	; 0xa0
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 80004fe:	b282      	uxth	r2, r0
 8000500:	2364      	movs	r3, #100	; 0x64
 8000502:	0020      	movs	r0, r4
 8000504:	a901      	add	r1, sp, #4
 8000506:	f002 f821 	bl	800254c <HAL_UART_Transmit>
 800050a:	240a      	movs	r4, #10
		HAL_GPIO_TogglePin(EN_VCC3V3s_GPIO_Port, EN_VCC3V3s_Pin);
 800050c:	05ed      	lsls	r5, r5, #23
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0028      	movs	r0, r5
 8000512:	f000 ff61 	bl	80013d8 <HAL_GPIO_TogglePin>
 8000516:	3c01      	subs	r4, #1
		HAL_Delay(200);
 8000518:	20c8      	movs	r0, #200	; 0xc8
 800051a:	f000 fbcf 	bl	8000cbc <HAL_Delay>
	for(int i=0;i<10;i++){
 800051e:	2c00      	cmp	r4, #0
 8000520:	d1f5      	bne.n	800050e <TRANSMIT_WSSFM10R2AT+0x6e>
	}
}
 8000522:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000524:	08003025 	.word	0x08003025
 8000528:	200000a0 	.word	0x200000a0
 800052c:	0800302d 	.word	0x0800302d
 8000530:	08003022 	.word	0x08003022

08000534 <CONFIG_CHANNEL_ADC>:
uint32_t CONFIG_CHANNEL_ADC(uint32_t channel){
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = channel;
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000534:	2380      	movs	r3, #128	; 0x80
uint32_t CONFIG_CHANNEL_ADC(uint32_t channel){
 8000536:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000538:	4c0e      	ldr	r4, [pc, #56]	; (8000574 <CONFIG_CHANNEL_ADC+0x40>)
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800053a:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800053c:	4669      	mov	r1, sp
	sConfig.Channel = channel;
 800053e:	9000      	str	r0, [sp, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000540:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000542:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000544:	f000 fdfa 	bl	800113c <HAL_ADC_ConfigChannel>
	uint32_t raw = 0;
	HAL_ADC_Start(&hadc);
 8000548:	0020      	movs	r0, r4
 800054a:	f000 fd4b 	bl	8000fe4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800054e:	2164      	movs	r1, #100	; 0x64
 8000550:	0020      	movs	r0, r4
 8000552:	f000 fd91 	bl	8001078 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc);
 8000556:	0020      	movs	r0, r4
 8000558:	f000 fdec 	bl	8001134 <HAL_ADC_GetValue>
 800055c:	0005      	movs	r5, r0
	HAL_ADC_Stop(&hadc);
 800055e:	0020      	movs	r0, r4
 8000560:	f000 fd6c 	bl	800103c <HAL_ADC_Stop>
	sConfig.Rank = ADC_RANK_NONE;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <CONFIG_CHANNEL_ADC+0x44>)
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000566:	4669      	mov	r1, sp
 8000568:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 800056a:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800056c:	f000 fde6 	bl	800113c <HAL_ADC_ConfigChannel>
	return raw;
}
 8000570:	0028      	movs	r0, r5
 8000572:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000574:	20000148 	.word	0x20000148
 8000578:	00001001 	.word	0x00001001

0800057c <GET_MEAS_BAT>:
uint32_t GET_MEAS_BAT(void){
 800057c:	b570      	push	{r4, r5, r6, lr}
	uint32_t bat;
	HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin, GPIO_PIN_SET);
 800057e:	24a0      	movs	r4, #160	; 0xa0
 8000580:	05e4      	lsls	r4, r4, #23
 8000582:	2201      	movs	r2, #1
 8000584:	2110      	movs	r1, #16
 8000586:	0020      	movs	r0, r4
 8000588:	f000 ff20 	bl	80013cc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800058c:	2032      	movs	r0, #50	; 0x32
 800058e:	f000 fb95 	bl	8000cbc <HAL_Delay>
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6600/4095;
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <GET_MEAS_BAT+0x34>)
 8000594:	f7ff ffce 	bl	8000534 <CONFIG_CHANNEL_ADC>
 8000598:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	0020      	movs	r0, r4
 800059e:	2110      	movs	r1, #16
 80005a0:	f000 ff14 	bl	80013cc <HAL_GPIO_WritePin>
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6600/4095;
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <GET_MEAS_BAT+0x38>)
 80005a6:	4904      	ldr	r1, [pc, #16]	; (80005b8 <GET_MEAS_BAT+0x3c>)
 80005a8:	4368      	muls	r0, r5
 80005aa:	f7ff fdbf 	bl	800012c <__udivsi3>
	return bat;
}
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	04000002 	.word	0x04000002
 80005b4:	000019c8 	.word	0x000019c8
 80005b8:	00000fff 	.word	0x00000fff

080005bc <WAKE_WSSFM10R2AT>:
	hall = CONFIG_CHANNEL_ADC(ADC_CHANNEL_3)*3300/4095;
	HAL_GPIO_WritePin(GPIOA, EN_VCC3V3s_Pin, GPIO_PIN_RESET);
	return hall;
}
void WAKE_WSSFM10R2AT(void)
{
 80005bc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_RESET);
 80005be:	24a0      	movs	r4, #160	; 0xa0
 80005c0:	05e4      	lsls	r4, r4, #23
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	0020      	movs	r0, r4
 80005c8:	f000 ff00 	bl	80013cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f000 fb75 	bl	8000cbc <HAL_Delay>
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2120      	movs	r1, #32
 80005d6:	0020      	movs	r0, r4
 80005d8:	f000 fef8 	bl	80013cc <HAL_GPIO_WritePin>
	HAL_Delay(500);  // Wait for the wisol to be prepared
 80005dc:	20fa      	movs	r0, #250	; 0xfa
 80005de:	0040      	lsls	r0, r0, #1
 80005e0:	f000 fb6c 	bl	8000cbc <HAL_Delay>
}
 80005e4:	bd10      	pop	{r4, pc}
	...

080005e8 <DEEP_SLEEP_WSSFM10R2AT>:
	HAL_GPIO_WritePin(RST_WISOL_GPIO_Port, RST_WISOL_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(RST_WISOL_GPIO_Port, RST_WISOL_Pin, GPIO_PIN_SET);
}
void DEEP_SLEEP_WSSFM10R2AT(void)
{
 80005e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char AT[10];
	sprintf(AT,"AT$P=2\r\n");
 80005ea:	4909      	ldr	r1, [pc, #36]	; (8000610 <DEEP_SLEEP_WSSFM10R2AT+0x28>)
 80005ec:	a801      	add	r0, sp, #4
 80005ee:	f002 f8e7 	bl	80027c0 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT,(uint16_t)strlen(AT),(uint32_t)100);
 80005f2:	a801      	add	r0, sp, #4
 80005f4:	f7ff fd88 	bl	8000108 <strlen>
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	b282      	uxth	r2, r0
 80005fc:	a901      	add	r1, sp, #4
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <DEEP_SLEEP_WSSFM10R2AT+0x2c>)
 8000600:	f001 ffa4 	bl	800254c <HAL_UART_Transmit>
	HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 fb59 	bl	8000cbc <HAL_Delay>
}
 800060a:	b005      	add	sp, #20
 800060c:	bd00      	pop	{pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	0800301c 	.word	0x0800301c
 8000614:	200000a0 	.word	0x200000a0

08000618 <DATA_ASSIGMENT>:
void DATA_ASSIGMENT(char* buff,uint16_t s,uint8_t loc,uint8_t t)
{
 8000618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800061a:	001f      	movs	r7, r3
 800061c:	000e      	movs	r6, r1
 800061e:	0005      	movs	r5, r0
	uint8_t i;//Data position counter
	uint8_t j=0;//Conversion data position counter
	uint8_t dig_count=0;//Digit Counter
	char conversion_buff[5];
	memset(conversion_buff,'\0',5);
 8000620:	2100      	movs	r1, #0
{
 8000622:	0014      	movs	r4, r2
	memset(conversion_buff,'\0',5);
 8000624:	4668      	mov	r0, sp
 8000626:	2205      	movs	r2, #5
 8000628:	f002 f8a2 	bl	8002770 <memset>
	itoa(s,conversion_buff,t);//Convert int S to String in HEX
 800062c:	003a      	movs	r2, r7
 800062e:	4669      	mov	r1, sp
 8000630:	0030      	movs	r0, r6
 8000632:	f002 f899 	bl	8002768 <itoa>
	uint8_t dig_count=0;//Digit Counter
 8000636:	2300      	movs	r3, #0
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 8000638:	466a      	mov	r2, sp
 800063a:	5cd2      	ldrb	r2, [r2, r3]
 800063c:	2a00      	cmp	r2, #0
 800063e:	d108      	bne.n	8000652 <DATA_ASSIGMENT+0x3a>

	for (i = (loc-dig_count)+1; j < dig_count; ++i)//Data arrangement in output buffer
 8000640:	3401      	adds	r4, #1
 8000642:	1ae4      	subs	r4, r4, r3
 8000644:	b2e4      	uxtb	r4, r4
 8000646:	b2d0      	uxtb	r0, r2
 8000648:	1821      	adds	r1, r4, r0
 800064a:	b2c9      	uxtb	r1, r1
 800064c:	4283      	cmp	r3, r0
 800064e:	d803      	bhi.n	8000658 <DATA_ASSIGMENT+0x40>
	{
		 buff[i] = conversion_buff[j];
		 ++j;
	}
}
 8000650:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 8000652:	3301      	adds	r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	e7ef      	b.n	8000638 <DATA_ASSIGMENT+0x20>
		 buff[i] = conversion_buff[j];
 8000658:	4668      	mov	r0, sp
 800065a:	5c80      	ldrb	r0, [r0, r2]
 800065c:	3201      	adds	r2, #1
 800065e:	5468      	strb	r0, [r5, r1]
 8000660:	e7f1      	b.n	8000646 <DATA_ASSIGMENT+0x2e>
	...

08000664 <BUILD_DATA_TO_SEND>:
void BUILD_DATA_TO_SEND(char* buff)
{
 8000664:	b510      	push	{r4, lr}
	memset(buff,'0',10); //Clear memory variable
 8000666:	220a      	movs	r2, #10
 8000668:	2130      	movs	r1, #48	; 0x30
{
 800066a:	0004      	movs	r4, r0
	memset(buff,'0',10); //Clear memory variable
 800066c:	f002 f880 	bl	8002770 <memset>
	DATA_ASSIGMENT(buff,GET_MEAS_BAT(),VOLT_LOCA,16);
 8000670:	f7ff ff84 	bl	800057c <GET_MEAS_BAT>
 8000674:	2310      	movs	r3, #16
 8000676:	b281      	uxth	r1, r0
 8000678:	2209      	movs	r2, #9
 800067a:	0020      	movs	r0, r4
 800067c:	f7ff ffcc 	bl	8000618 <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,SUM_DEC,DATA_LOCA,16);
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <BUILD_DATA_TO_SEND+0x38>)
 8000682:	0020      	movs	r0, r4
 8000684:	7819      	ldrb	r1, [r3, #0]
 8000686:	2205      	movs	r2, #5
 8000688:	2310      	movs	r3, #16
 800068a:	f7ff ffc5 	bl	8000618 <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,version,VERSION_LOCA,16);
 800068e:	2201      	movs	r2, #1
 8000690:	2310      	movs	r3, #16
 8000692:	0011      	movs	r1, r2
 8000694:	0020      	movs	r0, r4
 8000696:	f7ff ffbf 	bl	8000618 <DATA_ASSIGMENT>
}
 800069a:	bd10      	pop	{r4, pc}
 800069c:	2000009c 	.word	0x2000009c

080006a0 <CASES_CHOICE>:
{
 80006a0:	b570      	push	{r4, r5, r6, lr}
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 80006a2:	4c15      	ldr	r4, [pc, #84]	; (80006f8 <CASES_CHOICE+0x58>)
{
 80006a4:	0005      	movs	r5, r0
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 80006a6:	7823      	ldrb	r3, [r4, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <CASES_CHOICE+0x1a>
 80006ac:	7823      	ldrb	r3, [r4, #0]
 80006ae:	2b0a      	cmp	r3, #10
 80006b0:	d803      	bhi.n	80006ba <CASES_CHOICE+0x1a>
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <CASES_CHOICE+0x5c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d118      	bne.n	80006ec <CASES_CHOICE+0x4c>
			HAL_Delay(30);
 80006ba:	201e      	movs	r0, #30
 80006bc:	f000 fafe 	bl	8000cbc <HAL_Delay>
			if ((SUM_COUNTER==0) || (SUM_COUNTER > SUM_THRD)){
 80006c0:	7823      	ldrb	r3, [r4, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d002      	beq.n	80006cc <CASES_CHOICE+0x2c>
 80006c6:	7823      	ldrb	r3, [r4, #0]
 80006c8:	2b0a      	cmp	r3, #10
 80006ca:	d910      	bls.n	80006ee <CASES_CHOICE+0x4e>
			   SUM_COUNTER = SUM_THRD;
 80006cc:	230a      	movs	r3, #10
 80006ce:	7023      	strb	r3, [r4, #0]
			BUILD_DATA_TO_SEND(buff);
 80006d0:	0028      	movs	r0, r5
 80006d2:	f7ff ffc7 	bl	8000664 <BUILD_DATA_TO_SEND>
			WAKE_WSSFM10R2AT();
 80006d6:	f7ff ff71 	bl	80005bc <WAKE_WSSFM10R2AT>
			TRANSMIT_WSSFM10R2AT(buff,10);
 80006da:	210a      	movs	r1, #10
 80006dc:	0028      	movs	r0, r5
 80006de:	f7ff fedf 	bl	80004a0 <TRANSMIT_WSSFM10R2AT>
			DEEP_SLEEP_WSSFM10R2AT();
 80006e2:	f7ff ff81 	bl	80005e8 <DEEP_SLEEP_WSSFM10R2AT>
			SUM_DEC=0;
 80006e6:	2200      	movs	r2, #0
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <CASES_CHOICE+0x60>)
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
			   time_flag = FALSE;
 80006ee:	2200      	movs	r2, #0
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <CASES_CHOICE+0x5c>)
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e7ec      	b.n	80006d0 <CASES_CHOICE+0x30>
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	2000009d 	.word	0x2000009d
 80006fc:	20000120 	.word	0x20000120
 8000700:	2000009c 	.word	0x2000009c

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	2230      	movs	r2, #48	; 0x30
 800070a:	2100      	movs	r1, #0
 800070c:	a80c      	add	r0, sp, #48	; 0x30
 800070e:	f002 f82f 	bl	8002770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2214      	movs	r2, #20
 8000714:	2100      	movs	r1, #0
 8000716:	4668      	mov	r0, sp
 8000718:	f002 f82a 	bl	8002770 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	2218      	movs	r2, #24
 800071e:	2100      	movs	r1, #0
 8000720:	a805      	add	r0, sp, #20
 8000722:	f002 f825 	bl	8002770 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000726:	4915      	ldr	r1, [pc, #84]	; (800077c <SystemClock_Config+0x78>)
 8000728:	4a15      	ldr	r2, [pc, #84]	; (8000780 <SystemClock_Config+0x7c>)
 800072a:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	401a      	ands	r2, r3
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4313      	orrs	r3, r2
 8000736:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000738:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800073c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	3306      	adds	r3, #6
 8000742:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000746:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000748:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f000 fe97 	bl	800147c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000752:	23e0      	movs	r3, #224	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	0021      	movs	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000756:	00db      	lsls	r3, r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000758:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800075a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075c:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000762:	f001 f8dd 	bl	8001920 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC;
 8000766:	2324      	movs	r3, #36	; 0x24
 8000768:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800076a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800076e:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000770:	9408      	str	r4, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000772:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	f001 f9ac 	bl	8001ad0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000778:	b019      	add	sp, #100	; 0x64
 800077a:	bd30      	pop	{r4, r5, pc}
 800077c:	40007000 	.word	0x40007000
 8000780:	ffffe7ff 	.word	0xffffe7ff

08000784 <main>:
{
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}
  SUM_DEC=0;
 8000786:	2400      	movs	r4, #0
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	2701      	movs	r7, #1
  SUM_DEC=0;
 800078a:	4b7f      	ldr	r3, [pc, #508]	; (8000988 <main+0x204>)
{
 800078c:	b095      	sub	sp, #84	; 0x54
  SUM_DEC=0;
 800078e:	701c      	strb	r4, [r3, #0]
  SUM_HOUR=0;
 8000790:	4b7e      	ldr	r3, [pc, #504]	; (800098c <main+0x208>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	ad0a      	add	r5, sp, #40	; 0x28
  SUM_HOUR=0;
 8000794:	701c      	strb	r4, [r3, #0]
  HAL_Init();
 8000796:	f000 fa6f 	bl	8000c78 <HAL_Init>
  SystemClock_Config();
 800079a:	f7ff ffb3 	bl	8000704 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	2214      	movs	r2, #20
 80007a0:	0021      	movs	r1, r4
 80007a2:	0028      	movs	r0, r5
 80007a4:	f001 ffe4 	bl	8002770 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a8:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 80007aa:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b78      	ldr	r3, [pc, #480]	; (8000990 <main+0x20c>)
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 80007ae:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007b2:	2608      	movs	r6, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	433a      	orrs	r2, r7
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ba:	403a      	ands	r2, r7
 80007bc:	9202      	str	r2, [sp, #8]
 80007be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c2:	430a      	orrs	r2, r1
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 80007c8:	0022      	movs	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	400b      	ands	r3, r1
 80007cc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 80007ce:	318e      	adds	r1, #142	; 0x8e
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 80007d2:	f000 fdfb 	bl	80013cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, WAKE_DS_WISOL_Pin|RST_WISOL_Pin, GPIO_PIN_SET);
 80007d6:	20a0      	movs	r0, #160	; 0xa0
 80007d8:	003a      	movs	r2, r7
 80007da:	2160      	movs	r1, #96	; 0x60
 80007dc:	05c0      	lsls	r0, r0, #23
 80007de:	f000 fdf5 	bl	80013cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007e2:	0022      	movs	r2, r4
 80007e4:	2108      	movs	r1, #8
 80007e6:	486b      	ldr	r0, [pc, #428]	; (8000994 <main+0x210>)
 80007e8:	f000 fdf0 	bl	80013cc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007ec:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ee:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <main+0x214>)
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007f0:	0029      	movs	r1, r5
 80007f2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f4:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pin = HALL_SENS_IRQ_Pin;
 80007f6:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f000 fd41 	bl	8001280 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
 8000800:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	0029      	movs	r1, r5
 8000804:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
 8000806:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080a:	60af      	str	r7, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f000 fd37 	bl	8001280 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 8000812:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 8000816:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	0029      	movs	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800081a:	3b4f      	subs	r3, #79	; 0x4f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800081e:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	60af      	str	r7, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f000 fd2c 	bl	8001280 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000828:	0029      	movs	r1, r5
 800082a:	485a      	ldr	r0, [pc, #360]	; (8000994 <main+0x210>)
  GPIO_InitStruct.Pin = LED_Pin;
 800082c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	60af      	str	r7, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000834:	f000 fd24 	bl	8001280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000838:	0022      	movs	r2, r4
 800083a:	0021      	movs	r1, r4
 800083c:	2005      	movs	r0, #5
 800083e:	f000 fcd1 	bl	80011e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000842:	2005      	movs	r0, #5
 8000844:	f000 fcf8 	bl	8001238 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000848:	0032      	movs	r2, r6
 800084a:	0021      	movs	r1, r4
 800084c:	0028      	movs	r0, r5
 800084e:	f001 ff8f 	bl	8002770 <memset>
  hadc.Instance = ADC1;
 8000852:	4e52      	ldr	r6, [pc, #328]	; (800099c <main+0x218>)
 8000854:	4b52      	ldr	r3, [pc, #328]	; (80009a0 <main+0x21c>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000856:	0030      	movs	r0, r6
  hadc.Instance = ADC1;
 8000858:	6033      	str	r3, [r6, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	6073      	str	r3, [r6, #4]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000860:	19f3      	adds	r3, r6, r7
 8000862:	77dc      	strb	r4, [r3, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000864:	1cb3      	adds	r3, r6, #2
 8000866:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000868:	23c2      	movs	r3, #194	; 0xc2
 800086a:	33ff      	adds	r3, #255	; 0xff
 800086c:	6273      	str	r3, [r6, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800086e:	0033      	movs	r3, r6
 8000870:	332c      	adds	r3, #44	; 0x2c
 8000872:	701c      	strb	r4, [r3, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	2304      	movs	r3, #4
  hadc.Init.OversamplingMode = DISABLE;
 8000876:	63f4      	str	r4, [r6, #60]	; 0x3c
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000878:	6173      	str	r3, [r6, #20]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800087a:	60b4      	str	r4, [r6, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800087c:	63b4      	str	r4, [r6, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800087e:	6137      	str	r7, [r6, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000880:	60f4      	str	r4, [r6, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000882:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000884:	6334      	str	r4, [r6, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000886:	61b4      	str	r4, [r6, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000888:	6374      	str	r4, [r6, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800088a:	61f4      	str	r4, [r6, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800088c:	f000 fad2 	bl	8000e34 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_1;
 8000890:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <main+0x220>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000892:	0029      	movs	r1, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8000894:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000896:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000898:	0030      	movs	r0, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800089a:	015b      	lsls	r3, r3, #5
 800089c:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800089e:	f000 fc4d 	bl	800113c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <main+0x224>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008a4:	0029      	movs	r1, r5
 80008a6:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_3;
 80008a8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008aa:	f000 fc47 	bl	800113c <HAL_ADC_ConfigChannel>
  RTC_TimeTypeDef sTime = {0};
 80008ae:	2214      	movs	r2, #20
 80008b0:	0021      	movs	r1, r4
 80008b2:	a805      	add	r0, sp, #20
 80008b4:	f001 ff5c 	bl	8002770 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80008b8:	2228      	movs	r2, #40	; 0x28
 80008ba:	0021      	movs	r1, r4
 80008bc:	0028      	movs	r0, r5
  RTC_DateTypeDef sDate = {0};
 80008be:	9404      	str	r4, [sp, #16]
  RTC_AlarmTypeDef sAlarm = {0};
 80008c0:	f001 ff56 	bl	8002770 <memset>
  hrtc.Instance = RTC;
 80008c4:	4e39      	ldr	r6, [pc, #228]	; (80009ac <main+0x228>)
 80008c6:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <main+0x22c>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c8:	0030      	movs	r0, r6
  hrtc.Instance = RTC;
 80008ca:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 124;
 80008cc:	237c      	movs	r3, #124	; 0x7c
 80008ce:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 295;
 80008d0:	2328      	movs	r3, #40	; 0x28
 80008d2:	33ff      	adds	r3, #255	; 0xff
 80008d4:	60f3      	str	r3, [r6, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008d6:	6074      	str	r4, [r6, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008d8:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008da:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008dc:	61b4      	str	r4, [r6, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008de:	61f4      	str	r4, [r6, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008e0:	f001 fa16 	bl	8001d10 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 80008e4:	466b      	mov	r3, sp
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008e6:	003a      	movs	r2, r7
  sTime.Hours = 0x0;
 80008e8:	829c      	strh	r4, [r3, #20]
  sTime.Minutes = 0x0;
 80008ea:	759c      	strb	r4, [r3, #22]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ec:	a905      	add	r1, sp, #20
 80008ee:	0030      	movs	r0, r6
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008f0:	9408      	str	r4, [sp, #32]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008f2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008f4:	f001 fa74 	bl	8001de0 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <main+0x230>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008fa:	003a      	movs	r2, r7
 80008fc:	a904      	add	r1, sp, #16
 80008fe:	0030      	movs	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000900:	9304      	str	r3, [sp, #16]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000902:	f001 faed 	bl	8001ee0 <HAL_RTC_SetDate>
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS;
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	041b      	lsls	r3, r3, #16
 800090a:	616b      	str	r3, [r5, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 800090c:	2329      	movs	r3, #41	; 0x29
 800090e:	446b      	add	r3, sp
  sAlarm.AlarmTime.Hours = 0x0;
 8000910:	802c      	strh	r4, [r5, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000912:	70ac      	strb	r4, [r5, #2]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000914:	77df      	strb	r7, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8000916:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000918:	003a      	movs	r2, r7
  sAlarm.Alarm = RTC_ALARM_A;
 800091a:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800091c:	0029      	movs	r1, r5
 800091e:	0030      	movs	r0, r6
  sAlarm.Alarm = RTC_ALARM_A;
 8000920:	626b      	str	r3, [r5, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000922:	606c      	str	r4, [r5, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000924:	60ec      	str	r4, [r5, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000926:	612c      	str	r4, [r5, #16]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000928:	61ac      	str	r4, [r5, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800092a:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800092c:	f001 fb44 	bl	8001fb8 <HAL_RTC_SetAlarm_IT>
  hlpuart1.Instance = LPUART1;
 8000930:	4821      	ldr	r0, [pc, #132]	; (80009b8 <main+0x234>)
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <main+0x238>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000934:	6084      	str	r4, [r0, #8]
  hlpuart1.Instance = LPUART1;
 8000936:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000938:	2396      	movs	r3, #150	; 0x96
 800093a:	019b      	lsls	r3, r3, #6
 800093c:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800093e:	230c      	movs	r3, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	60c4      	str	r4, [r0, #12]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000942:	6143      	str	r3, [r0, #20]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000944:	6104      	str	r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	6184      	str	r4, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000948:	6204      	str	r4, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094a:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800094c:	f001 fe98 	bl	8002680 <HAL_UART_Init>
  HAL_Delay(2000);
 8000950:	20fa      	movs	r0, #250	; 0xfa
  SUM_COUNTER=0;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <main+0x23c>)
  HAL_Delay(2000);
 8000954:	00c0      	lsls	r0, r0, #3
  SUM_COUNTER=0;
 8000956:	701c      	strb	r4, [r3, #0]
  HAL_Delay(2000);
 8000958:	f000 f9b0 	bl	8000cbc <HAL_Delay>
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800095c:	0029      	movs	r1, r5
 800095e:	2200      	movs	r2, #0
 8000960:	0030      	movs	r0, r6
 8000962:	f001 fbf9 	bl	8002158 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000966:	a904      	add	r1, sp, #16
 8000968:	2200      	movs	r2, #0
 800096a:	0030      	movs	r0, r6
 800096c:	f001 fc1e 	bl	80021ac <HAL_RTC_GetDate>
  sprintf((char*)showtime,"%02d:%02d:%02d",stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8000970:	78a9      	ldrb	r1, [r5, #2]
 8000972:	786b      	ldrb	r3, [r5, #1]
 8000974:	782a      	ldrb	r2, [r5, #0]
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <main+0x240>)
 8000978:	9100      	str	r1, [sp, #0]
 800097a:	4913      	ldr	r1, [pc, #76]	; (80009c8 <main+0x244>)
 800097c:	f001 ff00 	bl	8002780 <siprintf>
	  CASES_CHOICE(data_buff);
 8000980:	a805      	add	r0, sp, #20
 8000982:	f7ff fe8d 	bl	80006a0 <CASES_CHOICE>
 8000986:	e7e9      	b.n	800095c <main+0x1d8>
 8000988:	2000009c 	.word	0x2000009c
 800098c:	20000121 	.word	0x20000121
 8000990:	40021000 	.word	0x40021000
 8000994:	50000400 	.word	0x50000400
 8000998:	10210000 	.word	0x10210000
 800099c:	20000148 	.word	0x20000148
 80009a0:	40012400 	.word	0x40012400
 80009a4:	04000002 	.word	0x04000002
 80009a8:	0c000008 	.word	0x0c000008
 80009ac:	20000124 	.word	0x20000124
 80009b0:	40002800 	.word	0x40002800
 80009b4:	00010101 	.word	0x00010101
 80009b8:	200000a0 	.word	0x200000a0
 80009bc:	40004800 	.word	0x40004800
 80009c0:	2000009d 	.word	0x2000009d
 80009c4:	20000000 	.word	0x20000000
 80009c8:	08003034 	.word	0x08003034

080009cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009cc:	2201      	movs	r2, #1
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_MspInit+0x18>)
 80009d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009d2:	430a      	orrs	r2, r1
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80009da:	0552      	lsls	r2, r2, #21
 80009dc:	430a      	orrs	r2, r1
 80009de:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	4770      	bx	lr
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e8:	b510      	push	{r4, lr}
 80009ea:	0004      	movs	r4, r0
 80009ec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	2214      	movs	r2, #20
 80009f0:	2100      	movs	r1, #0
 80009f2:	a801      	add	r0, sp, #4
 80009f4:	f001 febc 	bl	8002770 <memset>
  if(hadc->Instance==ADC1)
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_ADC_MspInit+0x4c>)
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d116      	bne.n	8000a2e <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_ADC_MspInit+0x50>)
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a0a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	430a      	orrs	r2, r1
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8000a20:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8000a24:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	3b07      	subs	r3, #7
 8000a28:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f000 fc29 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a2e:	b006      	add	sp, #24
 8000a30:	bd10      	pop	{r4, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40012400 	.word	0x40012400
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	0004      	movs	r4, r0
 8000a40:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	2214      	movs	r2, #20
 8000a44:	2100      	movs	r1, #0
 8000a46:	a803      	add	r0, sp, #12
 8000a48:	f001 fe92 	bl	8002770 <memset>
  if(huart->Instance==LPUART1)
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_UART_MspInit+0x78>)
 8000a4e:	6822      	ldr	r2, [r4, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d12c      	bne.n	8000aae <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a54:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	2402      	movs	r4, #2
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_UART_MspInit+0x7c>)
 8000a5c:	02d2      	lsls	r2, r2, #11
 8000a5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PB7     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2603      	movs	r6, #3
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a62:	430a      	orrs	r2, r1
 8000a64:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000a68:	2506      	movs	r5, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4301      	orrs	r1, r0
 8000a6c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4002      	ands	r2, r0
 8000a74:	9201      	str	r2, [sp, #4]
 8000a76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4322      	orrs	r2, r4
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4023      	ands	r3, r4
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a8a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000a92:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f000 fbf4 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	a903      	add	r1, sp, #12
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000aa8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f000 fbe9 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000aae:	b008      	add	sp, #32
 8000ab0:	bd70      	pop	{r4, r5, r6, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40004800 	.word	0x40004800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	50000400 	.word	0x50000400

08000ac0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_RTC_MspInit+0x28>)
 8000ac2:	6802      	ldr	r2, [r0, #0]
{
 8000ac4:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d10d      	bne.n	8000ae6 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_RTC_MspInit+0x2c>)
 8000ace:	02db      	lsls	r3, r3, #11
 8000ad0:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000ad2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0011      	movs	r1, r2
 8000adc:	f000 fb82 	bl	80011e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f000 fba9 	bl	8001238 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ae6:	bd10      	pop	{r4, pc}
 8000ae8:	40002800 	.word	0x40002800
 8000aec:	40021000 	.word	0x40021000

08000af0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af0:	4770      	bx	lr

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler>

08000af4 <SVC_Handler>:
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afa:	f000 f8d1 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afe:	bd10      	pop	{r4, pc}

08000b00 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000b00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b02:	4802      	ldr	r0, [pc, #8]	; (8000b0c <RTC_IRQHandler+0xc>)
 8000b04:	f001 f89e 	bl	8001c44 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000b08:	bd10      	pop	{r4, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000124 	.word	0x20000124

08000b10 <EXTI0_1_IRQHandler>:
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <EXTI0_1_IRQHandler+0x20>)
{
 8000b12:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	07db      	lsls	r3, r3, #31
 8000b18:	d506      	bpl.n	8000b28 <EXTI0_1_IRQHandler+0x18>
	  HAL_GPIO_TogglePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin);
 8000b1a:	20a0      	movs	r0, #160	; 0xa0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	05c0      	lsls	r0, r0, #23
 8000b20:	f000 fc5a 	bl	80013d8 <HAL_GPIO_TogglePin>
	  COUNTER_CONSUMER();
 8000b24:	f7ff fcac 	bl	8000480 <COUNTER_CONSUMER>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f000 fc5b 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b2e:	bd10      	pop	{r4, pc}
 8000b30:	40010400 	.word	0x40010400

08000b34 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <_sbrk+0x2c>)
{
 8000b36:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8000b38:	6819      	ldr	r1, [r3, #0]
{
 8000b3a:	0002      	movs	r2, r0
	if (heap_end == 0)
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d101      	bne.n	8000b44 <_sbrk+0x10>
		heap_end = &end;
 8000b40:	4908      	ldr	r1, [pc, #32]	; (8000b64 <_sbrk+0x30>)
 8000b42:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000b44:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000b46:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000b48:	1882      	adds	r2, r0, r2
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	d906      	bls.n	8000b5c <_sbrk+0x28>
	{
		errno = ENOMEM;
 8000b4e:	f001 fdc9 	bl	80026e4 <__errno>
 8000b52:	230c      	movs	r3, #12
 8000b54:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000b56:	2001      	movs	r0, #1
 8000b58:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000b5a:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8000b5c:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000b5e:	e7fc      	b.n	8000b5a <_sbrk+0x26>
 8000b60:	20000090 	.word	0x20000090
 8000b64:	200001b0 	.word	0x200001b0

08000b68 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <SystemInit+0x44>)
 8000b6c:	0052      	lsls	r2, r2, #1
 8000b6e:	6819      	ldr	r1, [r3, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <SystemInit+0x48>)
 8000b78:	400a      	ands	r2, r1
 8000b7a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <SystemInit+0x4c>)
 8000b80:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b82:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000b84:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	438a      	bics	r2, r1
 8000b8a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	490a      	ldr	r1, [pc, #40]	; (8000bb8 <SystemInit+0x50>)
 8000b90:	400a      	ands	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	4909      	ldr	r1, [pc, #36]	; (8000bbc <SystemInit+0x54>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <SystemInit+0x58>)
 8000ba4:	0512      	lsls	r2, r2, #20
 8000ba6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ba8:	4770      	bx	lr
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	88ff400c 	.word	0x88ff400c
 8000bb4:	fef6fff6 	.word	0xfef6fff6
 8000bb8:	fffbffff 	.word	0xfffbffff
 8000bbc:	ff02ffff 	.word	0xff02ffff
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bc6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <LoopForever+0x6>)
    LDR R1, [R0]
 8000bca:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000bcc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <LoopForever+0xa>)
    CMP R1, R2
 8000bd0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000bd2:	d105      	bne.n	8000be0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000bd6:	4913      	ldr	r1, [pc, #76]	; (8000c24 <LoopForever+0x12>)
    STR R1, [R0]
 8000bd8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000bda:	4813      	ldr	r0, [pc, #76]	; (8000c28 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <LoopForever+0x1a>)
    STR R1, [R0]
 8000bde:	6001      	str	r1, [r0, #0]

08000be0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000be0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000be2:	e003      	b.n	8000bec <LoopCopyDataInit>

08000be4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000be6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000be8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bea:	3104      	adds	r1, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <LoopForever+0x22>)
  ldr  r3, =_edata
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000bf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bf4:	d3f6      	bcc.n	8000be4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000bf8:	e002      	b.n	8000c00 <LoopFillZerobss>

08000bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000bfa:	2300      	movs	r3, #0
  str  r3, [r2]
 8000bfc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfe:	3204      	adds	r2, #4

08000c00 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <LoopForever+0x2e>)
  cmp  r2, r3
 8000c02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c04:	d3f9      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c06:	f7ff ffaf 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f001 fd71 	bl	80026f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fdb9 	bl	8000784 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
   ldr   r0, =_estack
 8000c14:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000c18:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c1c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c20:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c24:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c28:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c2c:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000c30:	080030dc 	.word	0x080030dc
  ldr  r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c38:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000c3c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000c40:	200001ac 	.word	0x200001ac

08000c44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_COMP_IRQHandler>
	...

08000c48 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c48:	21fa      	movs	r1, #250	; 0xfa
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_InitTick+0x2c>)
{
 8000c4c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c4e:	0089      	lsls	r1, r1, #2
{
 8000c50:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f7ff fa6a 	bl	800012c <__udivsi3>
 8000c58:	f000 faf8 	bl	800124c <HAL_SYSTICK_Config>
 8000c5c:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000c5e:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c60:	2c00      	cmp	r4, #0
 8000c62:	d105      	bne.n	8000c70 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000c64:	3802      	subs	r0, #2
 8000c66:	0022      	movs	r2, r4
 8000c68:	0029      	movs	r1, r5
 8000c6a:	f000 fabb 	bl	80011e4 <HAL_NVIC_SetPriority>
 8000c6e:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	2000000c 	.word	0x2000000c

08000c78 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c78:	2340      	movs	r3, #64	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_Init+0x24>)
{
 8000c7c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c7e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c80:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c82:	430b      	orrs	r3, r1
 8000c84:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	f7ff ffdf 	bl	8000c48 <HAL_InitTick>
 8000c8a:	1e04      	subs	r4, r0, #0
 8000c8c:	d103      	bne.n	8000c96 <HAL_Init+0x1e>
    HAL_MspInit();
 8000c8e:	f7ff fe9d 	bl	80009cc <HAL_MspInit>
}
 8000c92:	0020      	movs	r0, r4
 8000c94:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000c96:	2401      	movs	r4, #1
 8000c98:	e7fb      	b.n	8000c92 <HAL_Init+0x1a>
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ca0:	4a02      	ldr	r2, [pc, #8]	; (8000cac <HAL_IncTick+0xc>)
 8000ca2:	6813      	ldr	r3, [r2, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	4770      	bx	lr
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	200001a4 	.word	0x200001a4

08000cb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cb0:	4b01      	ldr	r3, [pc, #4]	; (8000cb8 <HAL_GetTick+0x8>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
}
 8000cb4:	4770      	bx	lr
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	200001a4 	.word	0x200001a4

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff fff6 	bl	8000cb0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000cc4:	1c63      	adds	r3, r4, #1
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8000cca:	0005      	movs	r5, r0
    wait++;
 8000ccc:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cce:	f7ff ffef 	bl	8000cb0 <HAL_GetTick>
 8000cd2:	1b40      	subs	r0, r0, r5
 8000cd4:	42a0      	cmp	r0, r4
 8000cd6:	d3fa      	bcc.n	8000cce <HAL_Delay+0x12>
  {
  }
}
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cdc <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <ADC_DelayMicroSecond+0x24>)
{
 8000cde:	b513      	push	{r0, r1, r4, lr}
 8000ce0:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <ADC_DelayMicroSecond+0x28>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	f7ff fa21 	bl	800012c <__udivsi3>
 8000cea:	4344      	muls	r4, r0
 8000cec:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8000cee:	9b01      	ldr	r3, [sp, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d100      	bne.n	8000cf6 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8000cf4:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8000cf6:	9b01      	ldr	r3, [sp, #4]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	e7f7      	b.n	8000cee <ADC_DelayMicroSecond+0x12>
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	2000000c 	.word	0x2000000c
 8000d04:	000f4240 	.word	0x000f4240

08000d08 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d08:	2103      	movs	r1, #3
 8000d0a:	6803      	ldr	r3, [r0, #0]
{
 8000d0c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d0e:	689a      	ldr	r2, [r3, #8]
{
 8000d10:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d12:	400a      	ands	r2, r1
 8000d14:	2a01      	cmp	r2, #1
 8000d16:	d104      	bne.n	8000d22 <ADC_Enable+0x1a>
 8000d18:	6819      	ldr	r1, [r3, #0]
 8000d1a:	4211      	tst	r1, r2
 8000d1c:	d001      	beq.n	8000d22 <ADC_Enable+0x1a>
  return HAL_OK;
 8000d1e:	2000      	movs	r0, #0
}
 8000d20:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000d22:	6899      	ldr	r1, [r3, #8]
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <ADC_Enable+0x6c>)
 8000d26:	4211      	tst	r1, r2
 8000d28:	d008      	beq.n	8000d3c <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d2c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d30:	4313      	orrs	r3, r2
 8000d32:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d36:	4303      	orrs	r3, r0
 8000d38:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000d3a:	e7f1      	b.n	8000d20 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8000d3c:	2501      	movs	r5, #1
 8000d3e:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000d40:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8000d42:	432a      	orrs	r2, r5
 8000d44:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000d46:	f7ff ffc9 	bl	8000cdc <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8000d4a:	f7ff ffb1 	bl	8000cb0 <HAL_GetTick>
 8000d4e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	422b      	tst	r3, r5
 8000d56:	d1e2      	bne.n	8000d1e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d58:	f7ff ffaa 	bl	8000cb0 <HAL_GetTick>
 8000d5c:	1b80      	subs	r0, r0, r6
 8000d5e:	280a      	cmp	r0, #10
 8000d60:	d9f6      	bls.n	8000d50 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d62:	2310      	movs	r3, #16
 8000d64:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8000d66:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d6e:	431d      	orrs	r5, r3
 8000d70:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000d72:	e7d5      	b.n	8000d20 <ADC_Enable+0x18>
 8000d74:	80000017 	.word	0x80000017

08000d78 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d78:	2103      	movs	r1, #3
 8000d7a:	6803      	ldr	r3, [r0, #0]
{
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d80:	6898      	ldr	r0, [r3, #8]
 8000d82:	4008      	ands	r0, r1
 8000d84:	2801      	cmp	r0, #1
 8000d86:	d001      	beq.n	8000d8c <ADC_Disable+0x14>
  return HAL_OK;
 8000d88:	2000      	movs	r0, #0
}
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4202      	tst	r2, r0
 8000d90:	d0fa      	beq.n	8000d88 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000d92:	2205      	movs	r2, #5
 8000d94:	689d      	ldr	r5, [r3, #8]
 8000d96:	4015      	ands	r5, r2
 8000d98:	2d01      	cmp	r5, #1
 8000d9a:	d119      	bne.n	8000dd0 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8000d9c:	6898      	ldr	r0, [r3, #8]
 8000d9e:	3a03      	subs	r2, #3
 8000da0:	4302      	orrs	r2, r0
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8000da6:	f7ff ff83 	bl	8000cb0 <HAL_GetTick>
 8000daa:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	422b      	tst	r3, r5
 8000db2:	d0e9      	beq.n	8000d88 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000db4:	f7ff ff7c 	bl	8000cb0 <HAL_GetTick>
 8000db8:	1b80      	subs	r0, r0, r6
 8000dba:	280a      	cmp	r0, #10
 8000dbc:	d9f6      	bls.n	8000dac <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dca:	431d      	orrs	r5, r3
 8000dcc:	65a5      	str	r5, [r4, #88]	; 0x58
 8000dce:	e7dc      	b.n	8000d8a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000dde:	e7d4      	b.n	8000d8a <ADC_Disable+0x12>

08000de0 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000de0:	2204      	movs	r2, #4
 8000de2:	6803      	ldr	r3, [r0, #0]
{
 8000de4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000de6:	6899      	ldr	r1, [r3, #8]
{
 8000de8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000dea:	4211      	tst	r1, r2
 8000dec:	d101      	bne.n	8000df2 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8000dee:	2000      	movs	r0, #0
}
 8000df0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000df2:	6899      	ldr	r1, [r3, #8]
 8000df4:	4211      	tst	r1, r2
 8000df6:	d006      	beq.n	8000e06 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000df8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000dfa:	0792      	lsls	r2, r2, #30
 8000dfc:	d403      	bmi.n	8000e06 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000dfe:	2210      	movs	r2, #16
 8000e00:	6899      	ldr	r1, [r3, #8]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000e06:	f7ff ff53 	bl	8000cb0 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000e0a:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8000e0c:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	422b      	tst	r3, r5
 8000e14:	d0eb      	beq.n	8000dee <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000e16:	f7ff ff4b 	bl	8000cb0 <HAL_GetTick>
 8000e1a:	1b80      	subs	r0, r0, r6
 8000e1c:	280a      	cmp	r0, #10
 8000e1e:	d9f6      	bls.n	8000e0e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e20:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e22:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e26:	4313      	orrs	r3, r2
 8000e28:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e2c:	4303      	orrs	r3, r0
 8000e2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e30:	e7de      	b.n	8000df0 <ADC_ConversionStop+0x10>
	...

08000e34 <HAL_ADC_Init>:
{
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000e38:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d019      	beq.n	8000e72 <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d106      	bne.n	8000e52 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000e44:	0022      	movs	r2, r4
 8000e46:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8000e4a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000e4c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000e4e:	f7ff fdcb 	bl	80009e8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e54:	06db      	lsls	r3, r3, #27
 8000e56:	d404      	bmi.n	8000e62 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000e58:	2204      	movs	r2, #4
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	6898      	ldr	r0, [r3, #8]
 8000e5e:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e60:	d008      	beq.n	8000e74 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e62:	2310      	movs	r3, #16
 8000e64:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000e66:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	3450      	adds	r4, #80	; 0x50
 8000e70:	7023      	strb	r3, [r4, #0]
}
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8000e74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e76:	4955      	ldr	r1, [pc, #340]	; (8000fcc <HAL_ADC_Init+0x198>)
 8000e78:	4011      	ands	r1, r2
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e80:	2203      	movs	r2, #3
 8000e82:	6899      	ldr	r1, [r3, #8]
 8000e84:	4011      	ands	r1, r2
 8000e86:	4a52      	ldr	r2, [pc, #328]	; (8000fd0 <HAL_ADC_Init+0x19c>)
 8000e88:	2901      	cmp	r1, #1
 8000e8a:	d102      	bne.n	8000e92 <HAL_ADC_Init+0x5e>
 8000e8c:	681d      	ldr	r5, [r3, #0]
 8000e8e:	420d      	tst	r5, r1
 8000e90:	d119      	bne.n	8000ec6 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e92:	2680      	movs	r6, #128	; 0x80
 8000e94:	6861      	ldr	r1, [r4, #4]
 8000e96:	05f6      	lsls	r6, r6, #23
 8000e98:	004d      	lsls	r5, r1, #1
 8000e9a:	086d      	lsrs	r5, r5, #1
 8000e9c:	42b5      	cmp	r5, r6
 8000e9e:	d003      	beq.n	8000ea8 <HAL_ADC_Init+0x74>
 8000ea0:	2580      	movs	r5, #128	; 0x80
 8000ea2:	062d      	lsls	r5, r5, #24
 8000ea4:	42a9      	cmp	r1, r5
 8000ea6:	d176      	bne.n	8000f96 <HAL_ADC_Init+0x162>
 8000ea8:	691d      	ldr	r5, [r3, #16]
 8000eaa:	00ad      	lsls	r5, r5, #2
 8000eac:	08ad      	lsrs	r5, r5, #2
 8000eae:	611d      	str	r5, [r3, #16]
 8000eb0:	691d      	ldr	r5, [r3, #16]
 8000eb2:	4329      	orrs	r1, r5
 8000eb4:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000eb6:	2518      	movs	r5, #24
 8000eb8:	68d9      	ldr	r1, [r3, #12]
 8000eba:	43a9      	bics	r1, r5
 8000ebc:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000ebe:	68d9      	ldr	r1, [r3, #12]
 8000ec0:	68a5      	ldr	r5, [r4, #8]
 8000ec2:	4329      	orrs	r1, r5
 8000ec4:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000ec6:	6811      	ldr	r1, [r2, #0]
 8000ec8:	4d42      	ldr	r5, [pc, #264]	; (8000fd4 <HAL_ADC_Init+0x1a0>)
 8000eca:	4029      	ands	r1, r5
 8000ecc:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ed0:	6815      	ldr	r5, [r2, #0]
 8000ed2:	0649      	lsls	r1, r1, #25
 8000ed4:	4329      	orrs	r1, r5
 8000ed6:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	6899      	ldr	r1, [r3, #8]
 8000edc:	0552      	lsls	r2, r2, #21
 8000ede:	4211      	tst	r1, r2
 8000ee0:	d102      	bne.n	8000ee8 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000ee2:	6899      	ldr	r1, [r3, #8]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	493b      	ldr	r1, [pc, #236]	; (8000fd8 <HAL_ADC_Init+0x1a4>)
 8000eec:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000eee:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ef0:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ef2:	68dd      	ldr	r5, [r3, #12]
 8000ef4:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ef6:	2902      	cmp	r1, #2
 8000ef8:	d100      	bne.n	8000efc <HAL_ADC_Init+0xc8>
 8000efa:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000efc:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000efe:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f00:	4332      	orrs	r2, r6
 8000f02:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f04:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f06:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f08:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f0a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f0c:	69e5      	ldr	r5, [r4, #28]
 8000f0e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f10:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f12:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f14:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f16:	0025      	movs	r5, r4
 8000f18:	352c      	adds	r5, #44	; 0x2c
 8000f1a:	782d      	ldrb	r5, [r5, #0]
 8000f1c:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f1e:	432a      	orrs	r2, r5
 8000f20:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f22:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f24:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f28:	30ff      	adds	r0, #255	; 0xff
 8000f2a:	4282      	cmp	r2, r0
 8000f2c:	d004      	beq.n	8000f38 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f2e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000f30:	68d8      	ldr	r0, [r3, #12]
 8000f32:	432a      	orrs	r2, r5
 8000f34:	4302      	orrs	r2, r0
 8000f36:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f38:	1ca2      	adds	r2, r4, #2
 8000f3a:	7fd2      	ldrb	r2, [r2, #31]
 8000f3c:	2a01      	cmp	r2, #1
 8000f3e:	d106      	bne.n	8000f4e <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f40:	2900      	cmp	r1, #0
 8000f42:	d134      	bne.n	8000fae <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	68d9      	ldr	r1, [r3, #12]
 8000f48:	0252      	lsls	r2, r2, #9
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f50:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f52:	2901      	cmp	r1, #1
 8000f54:	d133      	bne.n	8000fbe <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f56:	4821      	ldr	r0, [pc, #132]	; (8000fdc <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f58:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f5a:	4002      	ands	r2, r0
 8000f5c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f60:	6918      	ldr	r0, [r3, #16]
 8000f62:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8000f64:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000f66:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f68:	4302      	orrs	r2, r0
 8000f6a:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	4311      	orrs	r1, r2
 8000f70:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f72:	2107      	movs	r1, #7
 8000f74:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000f76:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f78:	438a      	bics	r2, r1
 8000f7a:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000f80:	430a      	orrs	r2, r1
 8000f82:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8000f84:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000f86:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000f88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f8a:	4393      	bics	r3, r2
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2301      	movs	r3, #1
 8000f90:	4313      	orrs	r3, r2
 8000f92:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000f94:	e76d      	b.n	8000e72 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000f96:	691d      	ldr	r5, [r3, #16]
 8000f98:	4e11      	ldr	r6, [pc, #68]	; (8000fe0 <HAL_ADC_Init+0x1ac>)
 8000f9a:	00ad      	lsls	r5, r5, #2
 8000f9c:	08ad      	lsrs	r5, r5, #2
 8000f9e:	611d      	str	r5, [r3, #16]
 8000fa0:	6815      	ldr	r5, [r2, #0]
 8000fa2:	4035      	ands	r5, r6
 8000fa4:	6015      	str	r5, [r2, #0]
 8000fa6:	6815      	ldr	r5, [r2, #0]
 8000fa8:	4329      	orrs	r1, r5
 8000faa:	6011      	str	r1, [r2, #0]
 8000fac:	e783      	b.n	8000eb6 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fae:	2120      	movs	r1, #32
 8000fb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000fb2:	4301      	orrs	r1, r0
 8000fb4:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	65a2      	str	r2, [r4, #88]	; 0x58
 8000fbc:	e7c7      	b.n	8000f4e <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	420a      	tst	r2, r1
 8000fc2:	d0d6      	beq.n	8000f72 <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	e7d2      	b.n	8000f72 <HAL_ADC_Init+0x13e>
 8000fcc:	fffffefd 	.word	0xfffffefd
 8000fd0:	40012708 	.word	0x40012708
 8000fd4:	fdffffff 	.word	0xfdffffff
 8000fd8:	fffe0219 	.word	0xfffe0219
 8000fdc:	fffffc03 	.word	0xfffffc03
 8000fe0:	ffc3ffff 	.word	0xffc3ffff

08000fe4 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fe4:	6803      	ldr	r3, [r0, #0]
{
 8000fe6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fe8:	689b      	ldr	r3, [r3, #8]
{
 8000fea:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000fec:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fee:	075b      	lsls	r3, r3, #29
 8000ff0:	d41a      	bmi.n	8001028 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8000ff2:	0025      	movs	r5, r4
 8000ff4:	3550      	adds	r5, #80	; 0x50
 8000ff6:	782b      	ldrb	r3, [r5, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d015      	beq.n	8001028 <HAL_ADC_Start+0x44>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001000:	69e3      	ldr	r3, [r4, #28]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d111      	bne.n	800102a <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001006:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800100a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800100c:	401a      	ands	r2, r3
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001014:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001016:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001018:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800101a:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800101c:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800101e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001020:	6899      	ldr	r1, [r3, #8]
 8001022:	3a18      	subs	r2, #24
 8001024:	430a      	orrs	r2, r1
 8001026:	609a      	str	r2, [r3, #8]
}
 8001028:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800102a:	0020      	movs	r0, r4
 800102c:	f7ff fe6c 	bl	8000d08 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001030:	2800      	cmp	r0, #0
 8001032:	d0e8      	beq.n	8001006 <HAL_ADC_Start+0x22>
 8001034:	e7f8      	b.n	8001028 <HAL_ADC_Start+0x44>
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	fffff0fe 	.word	0xfffff0fe

0800103c <HAL_ADC_Stop>:
{
 800103c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800103e:	0006      	movs	r6, r0
 8001040:	3650      	adds	r6, #80	; 0x50
 8001042:	7833      	ldrb	r3, [r6, #0]
{
 8001044:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001046:	2002      	movs	r0, #2
 8001048:	2b01      	cmp	r3, #1
 800104a:	d012      	beq.n	8001072 <HAL_ADC_Stop+0x36>
 800104c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800104e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8001050:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001052:	f7ff fec5 	bl	8000de0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001056:	2800      	cmp	r0, #0
 8001058:	d109      	bne.n	800106e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800105a:	0020      	movs	r0, r4
 800105c:	f7ff fe8c 	bl	8000d78 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001060:	2800      	cmp	r0, #0
 8001062:	d104      	bne.n	800106e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001064:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001066:	4a03      	ldr	r2, [pc, #12]	; (8001074 <HAL_ADC_Stop+0x38>)
 8001068:	4013      	ands	r3, r2
 800106a:	431d      	orrs	r5, r3
 800106c:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800106e:	2300      	movs	r3, #0
 8001070:	7033      	strb	r3, [r6, #0]
}
 8001072:	bd70      	pop	{r4, r5, r6, pc}
 8001074:	fffffefe 	.word	0xfffffefe

08001078 <HAL_ADC_PollForConversion>:
{
 8001078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800107a:	6945      	ldr	r5, [r0, #20]
{
 800107c:	0004      	movs	r4, r0
 800107e:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001080:	2d08      	cmp	r5, #8
 8001082:	d00d      	beq.n	80010a0 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001084:	6803      	ldr	r3, [r0, #0]
 8001086:	2001      	movs	r0, #1
 8001088:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800108a:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800108c:	4203      	tst	r3, r0
 800108e:	d007      	beq.n	80010a0 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001090:	2320      	movs	r3, #32
 8001092:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8001094:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001096:	4313      	orrs	r3, r2
 8001098:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800109a:	2300      	movs	r3, #0
 800109c:	7023      	strb	r3, [r4, #0]
}
 800109e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80010a0:	f7ff fe06 	bl	8000cb0 <HAL_GetTick>
 80010a4:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4215      	tst	r5, r2
 80010ac:	d024      	beq.n	80010f8 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	430a      	orrs	r2, r1
 80010b6:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b8:	22c0      	movs	r2, #192	; 0xc0
 80010ba:	68d9      	ldr	r1, [r3, #12]
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	4211      	tst	r1, r2
 80010c0:	d113      	bne.n	80010ea <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010c2:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c4:	7fd2      	ldrb	r2, [r2, #31]
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	d10f      	bne.n	80010ea <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	0712      	lsls	r2, r2, #28
 80010ce:	d50c      	bpl.n	80010ea <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	0752      	lsls	r2, r2, #29
 80010d4:	d423      	bmi.n	800111e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010d6:	210c      	movs	r1, #12
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	438a      	bics	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80010de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80010e0:	4913      	ldr	r1, [pc, #76]	; (8001130 <HAL_ADC_PollForConversion+0xb8>)
 80010e2:	4011      	ands	r1, r2
 80010e4:	2201      	movs	r2, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80010ea:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80010ec:	69a2      	ldr	r2, [r4, #24]
 80010ee:	4282      	cmp	r2, r0
 80010f0:	d1d5      	bne.n	800109e <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e7d2      	b.n	800109e <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80010f8:	1c72      	adds	r2, r6, #1
 80010fa:	d0d5      	beq.n	80010a8 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d108      	bne.n	8001112 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001100:	2304      	movs	r3, #4
 8001102:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8001104:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001106:	4313      	orrs	r3, r2
 8001108:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800110a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800110c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800110e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001110:	e7c5      	b.n	800109e <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001112:	f7ff fdcd 	bl	8000cb0 <HAL_GetTick>
 8001116:	1bc0      	subs	r0, r0, r7
 8001118:	42b0      	cmp	r0, r6
 800111a:	d9c4      	bls.n	80010a6 <HAL_ADC_PollForConversion+0x2e>
 800111c:	e7f0      	b.n	8001100 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111e:	2220      	movs	r2, #32
 8001120:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001122:	430a      	orrs	r2, r1
 8001124:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	2201      	movs	r2, #1
 8001128:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800112a:	430a      	orrs	r2, r1
 800112c:	65a2      	str	r2, [r4, #88]	; 0x58
 800112e:	e7dc      	b.n	80010ea <HAL_ADC_PollForConversion+0x72>
 8001130:	fffffefe 	.word	0xfffffefe

08001134 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001134:	6803      	ldr	r3, [r0, #0]
 8001136:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001138:	4770      	bx	lr
	...

0800113c <HAL_ADC_ConfigChannel>:
{
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800113e:	0004      	movs	r4, r0
 8001140:	3450      	adds	r4, #80	; 0x50
 8001142:	7823      	ldrb	r3, [r4, #0]
{
 8001144:	0006      	movs	r6, r0
 8001146:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8001148:	2002      	movs	r0, #2
 800114a:	2b01      	cmp	r3, #1
 800114c:	d00b      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800114e:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 8001150:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001152:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 8001154:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001156:	074b      	lsls	r3, r1, #29
 8001158:	d506      	bpl.n	8001168 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800115a:	2220      	movs	r2, #32
 800115c:	6d71      	ldr	r1, [r6, #84]	; 0x54
 800115e:	430a      	orrs	r2, r1
 8001160:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001162:	2200      	movs	r2, #0
 8001164:	7022      	strb	r2, [r4, #0]
}
 8001166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 800116c:	4e19      	ldr	r6, [pc, #100]	; (80011d4 <HAL_ADC_ConfigChannel+0x98>)
 800116e:	686f      	ldr	r7, [r5, #4]
 8001170:	0341      	lsls	r1, r0, #13
 8001172:	02db      	lsls	r3, r3, #11
 8001174:	0b49      	lsrs	r1, r1, #13
 8001176:	4003      	ands	r3, r0
 8001178:	42b7      	cmp	r7, r6
 800117a:	d019      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800117c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800117e:	4301      	orrs	r1, r0
 8001180:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001182:	2b00      	cmp	r3, #0
 8001184:	d008      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_ADC_ConfigChannel+0x9c>)
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800118e:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8001190:	430b      	orrs	r3, r1
 8001192:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001194:	f7ff fda2 	bl	8000cdc <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	039b      	lsls	r3, r3, #14
 800119c:	d505      	bpl.n	80011aa <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_ADC_ConfigChannel+0x9c>)
 80011a2:	03db      	lsls	r3, r3, #15
 80011a4:	6811      	ldr	r1, [r2, #0]
 80011a6:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011a8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80011aa:	2000      	movs	r0, #0
 80011ac:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80011ae:	e7da      	b.n	8001166 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011b0:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80011b2:	438d      	bics	r5, r1
 80011b4:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_ADC_ConfigChannel+0x9c>)
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <HAL_ADC_ConfigChannel+0xa0>)
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	400b      	ands	r3, r1
 80011c2:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011c4:	0383      	lsls	r3, r0, #14
 80011c6:	d5f0      	bpl.n	80011aa <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011c8:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_ADC_ConfigChannel+0x9c>)
 80011ca:	4905      	ldr	r1, [pc, #20]	; (80011e0 <HAL_ADC_ConfigChannel+0xa4>)
 80011cc:	6813      	ldr	r3, [r2, #0]
 80011ce:	400b      	ands	r3, r1
 80011d0:	e7ea      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x6c>
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	00001001 	.word	0x00001001
 80011d8:	40012708 	.word	0x40012708
 80011dc:	ff7fffff 	.word	0xff7fffff
 80011e0:	ffbfffff 	.word	0xffbfffff

080011e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e4:	b530      	push	{r4, r5, lr}
 80011e6:	25ff      	movs	r5, #255	; 0xff
 80011e8:	2403      	movs	r4, #3
 80011ea:	002a      	movs	r2, r5
 80011ec:	b2c3      	uxtb	r3, r0
 80011ee:	401c      	ands	r4, r3
 80011f0:	00e4      	lsls	r4, r4, #3
 80011f2:	40a2      	lsls	r2, r4
 80011f4:	0189      	lsls	r1, r1, #6
 80011f6:	4029      	ands	r1, r5
 80011f8:	43d2      	mvns	r2, r2
 80011fa:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80011fc:	2800      	cmp	r0, #0
 80011fe:	da0b      	bge.n	8001218 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001200:	200f      	movs	r0, #15
 8001202:	4003      	ands	r3, r0
 8001204:	3b08      	subs	r3, #8
 8001206:	480a      	ldr	r0, [pc, #40]	; (8001230 <HAL_NVIC_SetPriority+0x4c>)
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	181b      	adds	r3, r3, r0
 800120e:	69d8      	ldr	r0, [r3, #28]
 8001210:	4002      	ands	r2, r0
 8001212:	4311      	orrs	r1, r2
 8001214:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001216:	bd30      	pop	{r4, r5, pc}
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800121a:	0880      	lsrs	r0, r0, #2
 800121c:	0080      	lsls	r0, r0, #2
 800121e:	18c0      	adds	r0, r0, r3
 8001220:	23c0      	movs	r3, #192	; 0xc0
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	58c4      	ldr	r4, [r0, r3]
 8001226:	4022      	ands	r2, r4
 8001228:	4311      	orrs	r1, r2
 800122a:	50c1      	str	r1, [r0, r3]
 800122c:	e7f3      	b.n	8001216 <HAL_NVIC_SetPriority+0x32>
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	e000e100 	.word	0xe000e100

08001238 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001238:	231f      	movs	r3, #31
 800123a:	4018      	ands	r0, r3
 800123c:	3b1e      	subs	r3, #30
 800123e:	4083      	lsls	r3, r0
 8001240:	4a01      	ldr	r2, [pc, #4]	; (8001248 <HAL_NVIC_EnableIRQ+0x10>)
 8001242:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001244:	4770      	bx	lr
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	e000e100 	.word	0xe000e100

0800124c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_SYSTICK_Config+0x28>)
 800124e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001250:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001252:	4293      	cmp	r3, r2
 8001254:	d80d      	bhi.n	8001272 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001256:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125a:	4808      	ldr	r0, [pc, #32]	; (800127c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125e:	6a03      	ldr	r3, [r0, #32]
 8001260:	0609      	lsls	r1, r1, #24
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	430b      	orrs	r3, r1
 8001268:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001270:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001272:	4770      	bx	lr
 8001274:	00ffffff 	.word	0x00ffffff
 8001278:	e000e010 	.word	0xe000e010
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001282:	680b      	ldr	r3, [r1, #0]
{
 8001284:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8001286:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8001288:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0)
 800128a:	9a03      	ldr	r2, [sp, #12]
 800128c:	40da      	lsrs	r2, r3
 800128e:	d101      	bne.n	8001294 <HAL_GPIO_Init+0x14>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8001290:	b005      	add	sp, #20
 8001292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001294:	2201      	movs	r2, #1
 8001296:	409a      	lsls	r2, r3
 8001298:	9202      	str	r2, [sp, #8]
 800129a:	9c02      	ldr	r4, [sp, #8]
 800129c:	9a03      	ldr	r2, [sp, #12]
 800129e:	4022      	ands	r2, r4
 80012a0:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 80012a2:	d100      	bne.n	80012a6 <HAL_GPIO_Init+0x26>
 80012a4:	e086      	b.n	80013b4 <HAL_GPIO_Init+0x134>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80012a6:	684a      	ldr	r2, [r1, #4]
 80012a8:	0015      	movs	r5, r2
 80012aa:	4694      	mov	ip, r2
 80012ac:	2210      	movs	r2, #16
 80012ae:	4395      	bics	r5, r2
 80012b0:	2d02      	cmp	r5, #2
 80012b2:	d10d      	bne.n	80012d0 <HAL_GPIO_Init+0x50>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012b4:	2407      	movs	r4, #7
 80012b6:	270f      	movs	r7, #15
 80012b8:	401c      	ands	r4, r3
 80012ba:	00a4      	lsls	r4, r4, #2
 80012bc:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	1882      	adds	r2, r0, r2
 80012c4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012c6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80012c8:	690f      	ldr	r7, [r1, #16]
 80012ca:	40a7      	lsls	r7, r4
 80012cc:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	6216      	str	r6, [r2, #32]
 80012d0:	2203      	movs	r2, #3
 80012d2:	005e      	lsls	r6, r3, #1
 80012d4:	40b2      	lsls	r2, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d6:	3d01      	subs	r5, #1
 80012d8:	43d2      	mvns	r2, r2
 80012da:	2d01      	cmp	r5, #1
 80012dc:	d80f      	bhi.n	80012fe <HAL_GPIO_Init+0x7e>
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012de:	68cc      	ldr	r4, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80012e0:	6885      	ldr	r5, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e2:	40b4      	lsls	r4, r6
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012e4:	4015      	ands	r5, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80012e8:	6084      	str	r4, [r0, #8]
        temp= GPIOx->OTYPER;
 80012ea:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ec:	9c02      	ldr	r4, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ee:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f0:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012f2:	4664      	mov	r4, ip
 80012f4:	0924      	lsrs	r4, r4, #4
 80012f6:	403c      	ands	r4, r7
 80012f8:	409c      	lsls	r4, r3
 80012fa:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80012fc:	6044      	str	r4, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fe:	4664      	mov	r4, ip
 8001300:	2703      	movs	r7, #3
 8001302:	403c      	ands	r4, r7
 8001304:	40b4      	lsls	r4, r6
      temp = GPIOx->MODER;
 8001306:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001308:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800130c:	6004      	str	r4, [r0, #0]
      temp = GPIOx->PUPDR;
 800130e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001310:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001312:	688c      	ldr	r4, [r1, #8]
 8001314:	40b4      	lsls	r4, r6
 8001316:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001318:	2480      	movs	r4, #128	; 0x80
      GPIOx->PUPDR = temp;
 800131a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800131c:	4662      	mov	r2, ip
 800131e:	0564      	lsls	r4, r4, #21
 8001320:	4222      	tst	r2, r4
 8001322:	d047      	beq.n	80013b4 <HAL_GPIO_Init+0x134>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001324:	2501      	movs	r5, #1
 8001326:	4c24      	ldr	r4, [pc, #144]	; (80013b8 <HAL_GPIO_Init+0x138>)
 8001328:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800132a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800132c:	003d      	movs	r5, r7
 800132e:	401d      	ands	r5, r3
 8001330:	00ad      	lsls	r5, r5, #2
 8001332:	370c      	adds	r7, #12
 8001334:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	6362      	str	r2, [r4, #52]	; 0x34
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <HAL_GPIO_Init+0x13c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	089c      	lsrs	r4, r3, #2
 800133c:	00a4      	lsls	r4, r4, #2
 800133e:	18a4      	adds	r4, r4, r2
 8001340:	68a6      	ldr	r6, [r4, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001342:	2200      	movs	r2, #0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001344:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001346:	27a0      	movs	r7, #160	; 0xa0
 8001348:	05ff      	lsls	r7, r7, #23
 800134a:	42b8      	cmp	r0, r7
 800134c:	d008      	beq.n	8001360 <HAL_GPIO_Init+0xe0>
 800134e:	4f1c      	ldr	r7, [pc, #112]	; (80013c0 <HAL_GPIO_Init+0x140>)
 8001350:	3201      	adds	r2, #1
 8001352:	42b8      	cmp	r0, r7
 8001354:	d004      	beq.n	8001360 <HAL_GPIO_Init+0xe0>
 8001356:	4f1b      	ldr	r7, [pc, #108]	; (80013c4 <HAL_GPIO_Init+0x144>)
 8001358:	3205      	adds	r2, #5
 800135a:	42b8      	cmp	r0, r7
 800135c:	d100      	bne.n	8001360 <HAL_GPIO_Init+0xe0>
 800135e:	3a04      	subs	r2, #4
 8001360:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001362:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001364:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001366:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_GPIO_Init+0x148>)
        temp &= ~((uint32_t)iocurrent);
 800136a:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 800136c:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800136e:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8001370:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001372:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001374:	03ff      	lsls	r7, r7, #15
 8001376:	d401      	bmi.n	800137c <HAL_GPIO_Init+0xfc>
        temp &= ~((uint32_t)iocurrent);
 8001378:	0035      	movs	r5, r6
 800137a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800137c:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800137e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001380:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001382:	9d01      	ldr	r5, [sp, #4]
 8001384:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001386:	03bf      	lsls	r7, r7, #14
 8001388:	d401      	bmi.n	800138e <HAL_GPIO_Init+0x10e>
        temp &= ~((uint32_t)iocurrent);
 800138a:	0035      	movs	r5, r6
 800138c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138e:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001390:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001392:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001394:	9d01      	ldr	r5, [sp, #4]
 8001396:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001398:	02ff      	lsls	r7, r7, #11
 800139a:	d401      	bmi.n	80013a0 <HAL_GPIO_Init+0x120>
        temp &= ~((uint32_t)iocurrent);
 800139c:	0035      	movs	r5, r6
 800139e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80013a2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80013a4:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80013a6:	9e01      	ldr	r6, [sp, #4]
 80013a8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013aa:	02bf      	lsls	r7, r7, #10
 80013ac:	d401      	bmi.n	80013b2 <HAL_GPIO_Init+0x132>
        temp &= ~((uint32_t)iocurrent);
 80013ae:	4025      	ands	r5, r4
 80013b0:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80013b2:	60d6      	str	r6, [r2, #12]
    position++;
 80013b4:	3301      	adds	r3, #1
 80013b6:	e768      	b.n	800128a <HAL_GPIO_Init+0xa>
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000
 80013c0:	50000400 	.word	0x50000400
 80013c4:	50000800 	.word	0x50000800
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013d2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80013d4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80013d6:	e7fc      	b.n	80013d2 <HAL_GPIO_WritePin+0x6>

080013d8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80013d8:	6943      	ldr	r3, [r0, #20]
 80013da:	4059      	eors	r1, r3
 80013dc:	6141      	str	r1, [r0, #20]
}
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80013e6:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	4210      	tst	r0, r2
 80013ec:	d002      	beq.n	80013f4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ee:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f0:	f7ff fff6 	bl	80013e0 <HAL_GPIO_EXTI_Callback>
}
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013fc:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001400:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001402:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001404:	400a      	ands	r2, r1
 8001406:	2a08      	cmp	r2, #8
 8001408:	d029      	beq.n	800145e <HAL_RCC_GetSysClockFreq+0x62>
 800140a:	2a0c      	cmp	r2, #12
 800140c:	d009      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x26>
 800140e:	2a04      	cmp	r2, #4
 8001410:	d11d      	bne.n	800144e <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001412:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001416:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8001418:	17c0      	asrs	r0, r0, #31
 800141a:	4018      	ands	r0, r3
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_RCC_GetSysClockFreq+0x70>)
 800141e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001420:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001422:	028a      	lsls	r2, r1, #10
 8001424:	4812      	ldr	r0, [pc, #72]	; (8001470 <HAL_RCC_GetSysClockFreq+0x74>)
 8001426:	0f12      	lsrs	r2, r2, #28
 8001428:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800142a:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142c:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800142e:	0f89      	lsrs	r1, r1, #30
 8001430:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001432:	03c0      	lsls	r0, r0, #15
 8001434:	d504      	bpl.n	8001440 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8001438:	4350      	muls	r0, r2
 800143a:	f7fe fe77 	bl	800012c <__udivsi3>
 800143e:	e7ef      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	06db      	lsls	r3, r3, #27
 8001444:	d501      	bpl.n	800144a <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001446:	480c      	ldr	r0, [pc, #48]	; (8001478 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001448:	e7f6      	b.n	8001438 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 800144a:	4808      	ldr	r0, [pc, #32]	; (800146c <HAL_RCC_GetSysClockFreq+0x70>)
 800144c:	e7f4      	b.n	8001438 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800144e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001450:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001452:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001458:	3301      	adds	r3, #1
 800145a:	4098      	lsls	r0, r3
 800145c:	e7e0      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_RCC_GetSysClockFreq+0x78>)
 8001460:	e7de      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x24>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40021000 	.word	0x40021000
 8001468:	ff48e500 	.word	0xff48e500
 800146c:	00f42400 	.word	0x00f42400
 8001470:	0800305b 	.word	0x0800305b
 8001474:	007a1200 	.word	0x007a1200
 8001478:	003d0900 	.word	0x003d0900

0800147c <HAL_RCC_OscConfig>:
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	0005      	movs	r5, r0
 8001480:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8001482:	2800      	cmp	r0, #0
 8001484:	d102      	bne.n	800148c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001486:	2001      	movs	r0, #1
}
 8001488:	b007      	add	sp, #28
 800148a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148c:	230c      	movs	r3, #12
 800148e:	4cc0      	ldr	r4, [pc, #768]	; (8001790 <HAL_RCC_OscConfig+0x314>)
 8001490:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001492:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001494:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	401a      	ands	r2, r3
 800149c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149e:	6802      	ldr	r2, [r0, #0]
 80014a0:	07d2      	lsls	r2, r2, #31
 80014a2:	d43d      	bmi.n	8001520 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	079b      	lsls	r3, r3, #30
 80014a8:	d500      	bpl.n	80014ac <HAL_RCC_OscConfig+0x30>
 80014aa:	e083      	b.n	80015b4 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	06db      	lsls	r3, r3, #27
 80014b0:	d528      	bpl.n	8001504 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80014b2:	2e00      	cmp	r6, #0
 80014b4:	d000      	beq.n	80014b8 <HAL_RCC_OscConfig+0x3c>
 80014b6:	e0dd      	b.n	8001674 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	059b      	lsls	r3, r3, #22
 80014bc:	d502      	bpl.n	80014c4 <HAL_RCC_OscConfig+0x48>
 80014be:	69ab      	ldr	r3, [r5, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0e0      	beq.n	8001486 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c4:	6862      	ldr	r2, [r4, #4]
 80014c6:	49b3      	ldr	r1, [pc, #716]	; (8001794 <HAL_RCC_OscConfig+0x318>)
 80014c8:	6a2b      	ldr	r3, [r5, #32]
 80014ca:	400a      	ands	r2, r1
 80014cc:	431a      	orrs	r2, r3
 80014ce:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d0:	6861      	ldr	r1, [r4, #4]
 80014d2:	69ea      	ldr	r2, [r5, #28]
 80014d4:	0209      	lsls	r1, r1, #8
 80014d6:	0a09      	lsrs	r1, r1, #8
 80014d8:	0612      	lsls	r2, r2, #24
 80014da:	430a      	orrs	r2, r1
 80014dc:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	0b5b      	lsrs	r3, r3, #13
 80014e2:	3301      	adds	r3, #1
 80014e4:	0212      	lsls	r2, r2, #8
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014ea:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80014ec:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014ee:	060a      	lsls	r2, r1, #24
 80014f0:	49a9      	ldr	r1, [pc, #676]	; (8001798 <HAL_RCC_OscConfig+0x31c>)
 80014f2:	0f12      	lsrs	r2, r2, #28
 80014f4:	5c8a      	ldrb	r2, [r1, r2]
 80014f6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014f8:	4aa8      	ldr	r2, [pc, #672]	; (800179c <HAL_RCC_OscConfig+0x320>)
 80014fa:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80014fc:	f7ff fba4 	bl	8000c48 <HAL_InitTick>
        if(status != HAL_OK)
 8001500:	2800      	cmp	r0, #0
 8001502:	d1c1      	bne.n	8001488 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001504:	682b      	ldr	r3, [r5, #0]
 8001506:	071b      	lsls	r3, r3, #28
 8001508:	d500      	bpl.n	800150c <HAL_RCC_OscConfig+0x90>
 800150a:	e0ea      	b.n	80016e2 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	075b      	lsls	r3, r3, #29
 8001510:	d500      	bpl.n	8001514 <HAL_RCC_OscConfig+0x98>
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001514:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001516:	2b00      	cmp	r3, #0
 8001518:	d000      	beq.n	800151c <HAL_RCC_OscConfig+0xa0>
 800151a:	e191      	b.n	8001840 <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 800151c:	2000      	movs	r0, #0
 800151e:	e7b3      	b.n	8001488 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001520:	2e08      	cmp	r6, #8
 8001522:	d004      	beq.n	800152e <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001524:	2e0c      	cmp	r6, #12
 8001526:	d109      	bne.n	800153c <HAL_RCC_OscConfig+0xc0>
 8001528:	9a01      	ldr	r2, [sp, #4]
 800152a:	2a00      	cmp	r2, #0
 800152c:	d006      	beq.n	800153c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	039b      	lsls	r3, r3, #14
 8001532:	d5b7      	bpl.n	80014a4 <HAL_RCC_OscConfig+0x28>
 8001534:	686b      	ldr	r3, [r5, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1b4      	bne.n	80014a4 <HAL_RCC_OscConfig+0x28>
 800153a:	e7a4      	b.n	8001486 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153c:	686a      	ldr	r2, [r5, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	d111      	bne.n	8001566 <HAL_RCC_OscConfig+0xea>
 8001542:	6822      	ldr	r2, [r4, #0]
 8001544:	4313      	orrs	r3, r2
 8001546:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001548:	f7ff fbb2 	bl	8000cb0 <HAL_GetTick>
 800154c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	0292      	lsls	r2, r2, #10
 8001554:	4213      	tst	r3, r2
 8001556:	d1a5      	bne.n	80014a4 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fbaa 	bl	8000cb0 <HAL_GetTick>
 800155c:	1bc0      	subs	r0, r0, r7
 800155e:	2864      	cmp	r0, #100	; 0x64
 8001560:	d9f5      	bls.n	800154e <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8001562:	2003      	movs	r0, #3
 8001564:	e790      	b.n	8001488 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001566:	21a0      	movs	r1, #160	; 0xa0
 8001568:	02c9      	lsls	r1, r1, #11
 800156a:	428a      	cmp	r2, r1
 800156c:	d105      	bne.n	800157a <HAL_RCC_OscConfig+0xfe>
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	6821      	ldr	r1, [r4, #0]
 8001572:	02d2      	lsls	r2, r2, #11
 8001574:	430a      	orrs	r2, r1
 8001576:	6022      	str	r2, [r4, #0]
 8001578:	e7e3      	b.n	8001542 <HAL_RCC_OscConfig+0xc6>
 800157a:	6821      	ldr	r1, [r4, #0]
 800157c:	4888      	ldr	r0, [pc, #544]	; (80017a0 <HAL_RCC_OscConfig+0x324>)
 800157e:	4001      	ands	r1, r0
 8001580:	6021      	str	r1, [r4, #0]
 8001582:	6821      	ldr	r1, [r4, #0]
 8001584:	400b      	ands	r3, r1
 8001586:	9305      	str	r3, [sp, #20]
 8001588:	9b05      	ldr	r3, [sp, #20]
 800158a:	4986      	ldr	r1, [pc, #536]	; (80017a4 <HAL_RCC_OscConfig+0x328>)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	400b      	ands	r3, r1
 8001590:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001592:	2a00      	cmp	r2, #0
 8001594:	d1d8      	bne.n	8001548 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8001596:	f7ff fb8b 	bl	8000cb0 <HAL_GetTick>
 800159a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	0292      	lsls	r2, r2, #10
 80015a2:	4213      	tst	r3, r2
 80015a4:	d100      	bne.n	80015a8 <HAL_RCC_OscConfig+0x12c>
 80015a6:	e77d      	b.n	80014a4 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fb82 	bl	8000cb0 <HAL_GetTick>
 80015ac:	1bc0      	subs	r0, r0, r7
 80015ae:	2864      	cmp	r0, #100	; 0x64
 80015b0:	d9f4      	bls.n	800159c <HAL_RCC_OscConfig+0x120>
 80015b2:	e7d6      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80015b4:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80015b6:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80015b8:	4213      	tst	r3, r2
 80015ba:	d003      	beq.n	80015c4 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80015bc:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80015be:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80015c0:	4311      	orrs	r1, r2
 80015c2:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c4:	2e04      	cmp	r6, #4
 80015c6:	d004      	beq.n	80015d2 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c8:	2e0c      	cmp	r6, #12
 80015ca:	d125      	bne.n	8001618 <HAL_RCC_OscConfig+0x19c>
 80015cc:	9a01      	ldr	r2, [sp, #4]
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	d122      	bne.n	8001618 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015d2:	6822      	ldr	r2, [r4, #0]
 80015d4:	0752      	lsls	r2, r2, #29
 80015d6:	d502      	bpl.n	80015de <HAL_RCC_OscConfig+0x162>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d100      	bne.n	80015de <HAL_RCC_OscConfig+0x162>
 80015dc:	e753      	b.n	8001486 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	6861      	ldr	r1, [r4, #4]
 80015e0:	692a      	ldr	r2, [r5, #16]
 80015e2:	4871      	ldr	r0, [pc, #452]	; (80017a8 <HAL_RCC_OscConfig+0x32c>)
 80015e4:	0212      	lsls	r2, r2, #8
 80015e6:	4001      	ands	r1, r0
 80015e8:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015ea:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	438a      	bics	r2, r1
 80015f2:	4313      	orrs	r3, r2
 80015f4:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015f6:	f7ff ff01 	bl	80013fc <HAL_RCC_GetSysClockFreq>
 80015fa:	68e3      	ldr	r3, [r4, #12]
 80015fc:	4a66      	ldr	r2, [pc, #408]	; (8001798 <HAL_RCC_OscConfig+0x31c>)
 80015fe:	061b      	lsls	r3, r3, #24
 8001600:	0f1b      	lsrs	r3, r3, #28
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	40d8      	lsrs	r0, r3
 8001606:	4b65      	ldr	r3, [pc, #404]	; (800179c <HAL_RCC_OscConfig+0x320>)
 8001608:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fb1c 	bl	8000c48 <HAL_InitTick>
      if(status != HAL_OK)
 8001610:	2800      	cmp	r0, #0
 8001612:	d100      	bne.n	8001616 <HAL_RCC_OscConfig+0x19a>
 8001614:	e74a      	b.n	80014ac <HAL_RCC_OscConfig+0x30>
 8001616:	e737      	b.n	8001488 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8001618:	2b00      	cmp	r3, #0
 800161a:	d019      	beq.n	8001650 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800161c:	2109      	movs	r1, #9
 800161e:	6822      	ldr	r2, [r4, #0]
 8001620:	438a      	bics	r2, r1
 8001622:	4313      	orrs	r3, r2
 8001624:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001626:	f7ff fb43 	bl	8000cb0 <HAL_GetTick>
 800162a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800162c:	2204      	movs	r2, #4
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	4213      	tst	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	6862      	ldr	r2, [r4, #4]
 8001636:	692b      	ldr	r3, [r5, #16]
 8001638:	495b      	ldr	r1, [pc, #364]	; (80017a8 <HAL_RCC_OscConfig+0x32c>)
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	400a      	ands	r2, r1
 800163e:	4313      	orrs	r3, r2
 8001640:	6063      	str	r3, [r4, #4]
 8001642:	e733      	b.n	80014ac <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fb34 	bl	8000cb0 <HAL_GetTick>
 8001648:	1bc0      	subs	r0, r0, r7
 800164a:	2802      	cmp	r0, #2
 800164c:	d9ee      	bls.n	800162c <HAL_RCC_OscConfig+0x1b0>
 800164e:	e788      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 8001650:	2201      	movs	r2, #1
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	4393      	bics	r3, r2
 8001656:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001658:	f7ff fb2a 	bl	8000cb0 <HAL_GetTick>
 800165c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800165e:	2204      	movs	r2, #4
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	4213      	tst	r3, r2
 8001664:	d100      	bne.n	8001668 <HAL_RCC_OscConfig+0x1ec>
 8001666:	e721      	b.n	80014ac <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fb22 	bl	8000cb0 <HAL_GetTick>
 800166c:	1bc0      	subs	r0, r0, r7
 800166e:	2802      	cmp	r0, #2
 8001670:	d9f5      	bls.n	800165e <HAL_RCC_OscConfig+0x1e2>
 8001672:	e776      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001674:	69ab      	ldr	r3, [r5, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d020      	beq.n	80016bc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4313      	orrs	r3, r2
 8001682:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001684:	f7ff fb14 	bl	8000cb0 <HAL_GetTick>
 8001688:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4213      	tst	r3, r2
 8001692:	d00d      	beq.n	80016b0 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	6863      	ldr	r3, [r4, #4]
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_RCC_OscConfig+0x318>)
 8001698:	4013      	ands	r3, r2
 800169a:	6a2a      	ldr	r2, [r5, #32]
 800169c:	4313      	orrs	r3, r2
 800169e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a0:	6862      	ldr	r2, [r4, #4]
 80016a2:	69eb      	ldr	r3, [r5, #28]
 80016a4:	0212      	lsls	r2, r2, #8
 80016a6:	061b      	lsls	r3, r3, #24
 80016a8:	0a12      	lsrs	r2, r2, #8
 80016aa:	4313      	orrs	r3, r2
 80016ac:	6063      	str	r3, [r4, #4]
 80016ae:	e729      	b.n	8001504 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b0:	f7ff fafe 	bl	8000cb0 <HAL_GetTick>
 80016b4:	1bc0      	subs	r0, r0, r7
 80016b6:	2802      	cmp	r0, #2
 80016b8:	d9e7      	bls.n	800168a <HAL_RCC_OscConfig+0x20e>
 80016ba:	e752      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016c4:	f7ff faf4 	bl	8000cb0 <HAL_GetTick>
 80016c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	4213      	tst	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x25a>
 80016d4:	e716      	b.n	8001504 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d6:	f7ff faeb 	bl	8000cb0 <HAL_GetTick>
 80016da:	1bc0      	subs	r0, r0, r7
 80016dc:	2802      	cmp	r0, #2
 80016de:	d9f4      	bls.n	80016ca <HAL_RCC_OscConfig+0x24e>
 80016e0:	e73f      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e2:	696a      	ldr	r2, [r5, #20]
 80016e4:	2301      	movs	r3, #1
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d010      	beq.n	800170c <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 80016ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80016ec:	4313      	orrs	r3, r2
 80016ee:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80016f0:	f7ff fade 	bl	8000cb0 <HAL_GetTick>
 80016f4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016f6:	2202      	movs	r2, #2
 80016f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016fa:	4213      	tst	r3, r2
 80016fc:	d000      	beq.n	8001700 <HAL_RCC_OscConfig+0x284>
 80016fe:	e705      	b.n	800150c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fad6 	bl	8000cb0 <HAL_GetTick>
 8001704:	1bc0      	subs	r0, r0, r7
 8001706:	2802      	cmp	r0, #2
 8001708:	d9f5      	bls.n	80016f6 <HAL_RCC_OscConfig+0x27a>
 800170a:	e72a      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 800170c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800170e:	439a      	bics	r2, r3
 8001710:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001712:	f7ff facd 	bl	8000cb0 <HAL_GetTick>
 8001716:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001718:	2202      	movs	r2, #2
 800171a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800171c:	4213      	tst	r3, r2
 800171e:	d100      	bne.n	8001722 <HAL_RCC_OscConfig+0x2a6>
 8001720:	e6f4      	b.n	800150c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fac5 	bl	8000cb0 <HAL_GetTick>
 8001726:	1bc0      	subs	r0, r0, r7
 8001728:	2802      	cmp	r0, #2
 800172a:	d9f5      	bls.n	8001718 <HAL_RCC_OscConfig+0x29c>
 800172c:	e719      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001730:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001734:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001736:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001738:	421a      	tst	r2, r3
 800173a:	d104      	bne.n	8001746 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 800173c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800173e:	4313      	orrs	r3, r2
 8001740:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001742:	2301      	movs	r3, #1
 8001744:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	4f19      	ldr	r7, [pc, #100]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800174a:	0052      	lsls	r2, r2, #1
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	4213      	tst	r3, r2
 8001750:	d008      	beq.n	8001764 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	68ab      	ldr	r3, [r5, #8]
 8001756:	0052      	lsls	r2, r2, #1
 8001758:	4293      	cmp	r3, r2
 800175a:	d12b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x338>
 800175c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800175e:	4313      	orrs	r3, r2
 8001760:	6523      	str	r3, [r4, #80]	; 0x50
 8001762:	e04c      	b.n	80017fe <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	0052      	lsls	r2, r2, #1
 800176a:	4313      	orrs	r3, r2
 800176c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800176e:	f7ff fa9f 	bl	8000cb0 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8001776:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	9303      	str	r3, [sp, #12]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	9a03      	ldr	r2, [sp, #12]
 800177e:	4213      	tst	r3, r2
 8001780:	d1e7      	bne.n	8001752 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fa95 	bl	8000cb0 <HAL_GetTick>
 8001786:	9b02      	ldr	r3, [sp, #8]
 8001788:	1ac0      	subs	r0, r0, r3
 800178a:	2864      	cmp	r0, #100	; 0x64
 800178c:	d9f5      	bls.n	800177a <HAL_RCC_OscConfig+0x2fe>
 800178e:	e6e8      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
 8001790:	40021000 	.word	0x40021000
 8001794:	ffff1fff 	.word	0xffff1fff
 8001798:	08003043 	.word	0x08003043
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	fffeffff 	.word	0xfffeffff
 80017a4:	fffbffff 	.word	0xfffbffff
 80017a8:	ffffe0ff 	.word	0xffffe0ff
 80017ac:	fffffeff 	.word	0xfffffeff
 80017b0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d116      	bne.n	80017e6 <HAL_RCC_OscConfig+0x36a>
 80017b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017ba:	4a53      	ldr	r2, [pc, #332]	; (8001908 <HAL_RCC_OscConfig+0x48c>)
 80017bc:	4013      	ands	r3, r2
 80017be:	6523      	str	r3, [r4, #80]	; 0x50
 80017c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017c2:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_OscConfig+0x490>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80017c8:	f7ff fa72 	bl	8000cb0 <HAL_GetTick>
 80017cc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4213      	tst	r3, r2
 80017d6:	d02a      	beq.n	800182e <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fa6a 	bl	8000cb0 <HAL_GetTick>
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 80017de:	1bc0      	subs	r0, r0, r7
 80017e0:	4298      	cmp	r0, r3
 80017e2:	d9f4      	bls.n	80017ce <HAL_RCC_OscConfig+0x352>
 80017e4:	e6bd      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e6:	21a0      	movs	r1, #160	; 0xa0
 80017e8:	00c9      	lsls	r1, r1, #3
 80017ea:	428b      	cmp	r3, r1
 80017ec:	d10b      	bne.n	8001806 <HAL_RCC_OscConfig+0x38a>
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6523      	str	r3, [r4, #80]	; 0x50
 80017f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017fa:	431a      	orrs	r2, r3
 80017fc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa57 	bl	8000cb0 <HAL_GetTick>
 8001802:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001804:	e00e      	b.n	8001824 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001806:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001808:	4a3f      	ldr	r2, [pc, #252]	; (8001908 <HAL_RCC_OscConfig+0x48c>)
 800180a:	4013      	ands	r3, r2
 800180c:	6523      	str	r3, [r4, #80]	; 0x50
 800180e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001810:	4a3e      	ldr	r2, [pc, #248]	; (800190c <HAL_RCC_OscConfig+0x490>)
 8001812:	4013      	ands	r3, r2
 8001814:	e7a4      	b.n	8001760 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff fa4b 	bl	8000cb0 <HAL_GetTick>
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 800181c:	1bc0      	subs	r0, r0, r7
 800181e:	4298      	cmp	r0, r3
 8001820:	d900      	bls.n	8001824 <HAL_RCC_OscConfig+0x3a8>
 8001822:	e69e      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001828:	0092      	lsls	r2, r2, #2
 800182a:	4213      	tst	r3, r2
 800182c:	d0f3      	beq.n	8001816 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 800182e:	9b01      	ldr	r3, [sp, #4]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d000      	beq.n	8001836 <HAL_RCC_OscConfig+0x3ba>
 8001834:	e66e      	b.n	8001514 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001838:	4a36      	ldr	r2, [pc, #216]	; (8001914 <HAL_RCC_OscConfig+0x498>)
 800183a:	4013      	ands	r3, r2
 800183c:	63a3      	str	r3, [r4, #56]	; 0x38
 800183e:	e669      	b.n	8001514 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001840:	2e0c      	cmp	r6, #12
 8001842:	d043      	beq.n	80018cc <HAL_RCC_OscConfig+0x450>
 8001844:	4a34      	ldr	r2, [pc, #208]	; (8001918 <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001846:	2b02      	cmp	r3, #2
 8001848:	d12e      	bne.n	80018a8 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 800184a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800184c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800184e:	4013      	ands	r3, r2
 8001850:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001852:	f7ff fa2d 	bl	8000cb0 <HAL_GetTick>
 8001856:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001858:	04b6      	lsls	r6, r6, #18
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	4233      	tst	r3, r6
 800185e:	d11d      	bne.n	800189c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001862:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001864:	68e2      	ldr	r2, [r4, #12]
 8001866:	430b      	orrs	r3, r1
 8001868:	492c      	ldr	r1, [pc, #176]	; (800191c <HAL_RCC_OscConfig+0x4a0>)
 800186a:	400a      	ands	r2, r1
 800186c:	4313      	orrs	r3, r2
 800186e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001870:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001872:	4313      	orrs	r3, r2
 8001874:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	6822      	ldr	r2, [r4, #0]
 800187a:	045b      	lsls	r3, r3, #17
 800187c:	4313      	orrs	r3, r2
 800187e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001880:	f7ff fa16 	bl	8000cb0 <HAL_GetTick>
 8001884:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001886:	04ad      	lsls	r5, r5, #18
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	422b      	tst	r3, r5
 800188c:	d000      	beq.n	8001890 <HAL_RCC_OscConfig+0x414>
 800188e:	e645      	b.n	800151c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fa0e 	bl	8000cb0 <HAL_GetTick>
 8001894:	1b80      	subs	r0, r0, r6
 8001896:	2802      	cmp	r0, #2
 8001898:	d9f6      	bls.n	8001888 <HAL_RCC_OscConfig+0x40c>
 800189a:	e662      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fa08 	bl	8000cb0 <HAL_GetTick>
 80018a0:	1bc0      	subs	r0, r0, r7
 80018a2:	2802      	cmp	r0, #2
 80018a4:	d9d9      	bls.n	800185a <HAL_RCC_OscConfig+0x3de>
 80018a6:	e65c      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 80018a8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018aa:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4013      	ands	r3, r2
 80018ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018b0:	f7ff f9fe 	bl	8000cb0 <HAL_GetTick>
 80018b4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018b6:	04ad      	lsls	r5, r5, #18
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	422b      	tst	r3, r5
 80018bc:	d100      	bne.n	80018c0 <HAL_RCC_OscConfig+0x444>
 80018be:	e62d      	b.n	800151c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f9f6 	bl	8000cb0 <HAL_GetTick>
 80018c4:	1b80      	subs	r0, r0, r6
 80018c6:	2802      	cmp	r0, #2
 80018c8:	d9f6      	bls.n	80018b8 <HAL_RCC_OscConfig+0x43c>
 80018ca:	e64a      	b.n	8001562 <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 80018cc:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d100      	bne.n	80018d4 <HAL_RCC_OscConfig+0x458>
 80018d2:	e5d9      	b.n	8001488 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d4:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80018d6:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80018da:	0252      	lsls	r2, r2, #9
 80018dc:	401a      	ands	r2, r3
        return HAL_ERROR;
 80018de:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	428a      	cmp	r2, r1
 80018e2:	d000      	beq.n	80018e6 <HAL_RCC_OscConfig+0x46a>
 80018e4:	e5d0      	b.n	8001488 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018e6:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018ea:	0392      	lsls	r2, r2, #14
 80018ec:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	428a      	cmp	r2, r1
 80018f0:	d000      	beq.n	80018f4 <HAL_RCC_OscConfig+0x478>
 80018f2:	e5c9      	b.n	8001488 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018f4:	20c0      	movs	r0, #192	; 0xc0
 80018f6:	0400      	lsls	r0, r0, #16
 80018f8:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018fa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018fc:	1a18      	subs	r0, r3, r0
 80018fe:	1e43      	subs	r3, r0, #1
 8001900:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001902:	b2c0      	uxtb	r0, r0
 8001904:	e5c0      	b.n	8001488 <HAL_RCC_OscConfig+0xc>
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	fffffeff 	.word	0xfffffeff
 800190c:	fffffbff 	.word	0xfffffbff
 8001910:	00001388 	.word	0x00001388
 8001914:	efffffff 	.word	0xefffffff
 8001918:	feffffff 	.word	0xfeffffff
 800191c:	ff02ffff 	.word	0xff02ffff

08001920 <HAL_RCC_ClockConfig>:
{
 8001920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001922:	1e06      	subs	r6, r0, #0
 8001924:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
}
 800192a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	2201      	movs	r2, #1
 800192e:	4c51      	ldr	r4, [pc, #324]	; (8001a74 <HAL_RCC_ClockConfig+0x154>)
 8001930:	9901      	ldr	r1, [sp, #4]
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	4013      	ands	r3, r2
 8001936:	428b      	cmp	r3, r1
 8001938:	d327      	bcc.n	800198a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193a:	6832      	ldr	r2, [r6, #0]
 800193c:	0793      	lsls	r3, r2, #30
 800193e:	d42f      	bmi.n	80019a0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001940:	07d3      	lsls	r3, r2, #31
 8001942:	d435      	bmi.n	80019b0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	2301      	movs	r3, #1
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	9901      	ldr	r1, [sp, #4]
 800194a:	401a      	ands	r2, r3
 800194c:	428a      	cmp	r2, r1
 800194e:	d900      	bls.n	8001952 <HAL_RCC_ClockConfig+0x32>
 8001950:	e081      	b.n	8001a56 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001952:	6832      	ldr	r2, [r6, #0]
 8001954:	4c48      	ldr	r4, [pc, #288]	; (8001a78 <HAL_RCC_ClockConfig+0x158>)
 8001956:	0753      	lsls	r3, r2, #29
 8001958:	d500      	bpl.n	800195c <HAL_RCC_ClockConfig+0x3c>
 800195a:	e084      	b.n	8001a66 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	0713      	lsls	r3, r2, #28
 800195e:	d506      	bpl.n	800196e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001960:	68e2      	ldr	r2, [r4, #12]
 8001962:	6933      	ldr	r3, [r6, #16]
 8001964:	4945      	ldr	r1, [pc, #276]	; (8001a7c <HAL_RCC_ClockConfig+0x15c>)
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	400a      	ands	r2, r1
 800196a:	4313      	orrs	r3, r2
 800196c:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196e:	f7ff fd45 	bl	80013fc <HAL_RCC_GetSysClockFreq>
 8001972:	68e3      	ldr	r3, [r4, #12]
 8001974:	4a42      	ldr	r2, [pc, #264]	; (8001a80 <HAL_RCC_ClockConfig+0x160>)
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	0f1b      	lsrs	r3, r3, #28
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	40d8      	lsrs	r0, r3
 800197e:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_RCC_ClockConfig+0x164>)
 8001980:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff f960 	bl	8000c48 <HAL_InitTick>
 8001988:	e7cf      	b.n	800192a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	9901      	ldr	r1, [sp, #4]
 800198e:	4393      	bics	r3, r2
 8001990:	430b      	orrs	r3, r1
 8001992:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	4013      	ands	r3, r2
 8001998:	9a01      	ldr	r2, [sp, #4]
 800199a:	4293      	cmp	r3, r2
 800199c:	d1c4      	bne.n	8001928 <HAL_RCC_ClockConfig+0x8>
 800199e:	e7cc      	b.n	800193a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	20f0      	movs	r0, #240	; 0xf0
 80019a2:	4935      	ldr	r1, [pc, #212]	; (8001a78 <HAL_RCC_ClockConfig+0x158>)
 80019a4:	68cb      	ldr	r3, [r1, #12]
 80019a6:	4383      	bics	r3, r0
 80019a8:	68b0      	ldr	r0, [r6, #8]
 80019aa:	4303      	orrs	r3, r0
 80019ac:	60cb      	str	r3, [r1, #12]
 80019ae:	e7c7      	b.n	8001940 <HAL_RCC_ClockConfig+0x20>
 80019b0:	4d31      	ldr	r5, [pc, #196]	; (8001a78 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	2a02      	cmp	r2, #2
 80019b8:	d119      	bne.n	80019ee <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ba:	039b      	lsls	r3, r3, #14
 80019bc:	d5b4      	bpl.n	8001928 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019be:	2103      	movs	r1, #3
 80019c0:	68eb      	ldr	r3, [r5, #12]
 80019c2:	438b      	bics	r3, r1
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80019c8:	f7ff f972 	bl	8000cb0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019cc:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80019ce:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d119      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d4:	220c      	movs	r2, #12
 80019d6:	68eb      	ldr	r3, [r5, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d0b2      	beq.n	8001944 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019de:	f7ff f967 	bl	8000cb0 <HAL_GetTick>
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_RCC_ClockConfig+0x168>)
 80019e4:	1bc0      	subs	r0, r0, r7
 80019e6:	4298      	cmp	r0, r3
 80019e8:	d9f4      	bls.n	80019d4 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80019ea:	2003      	movs	r0, #3
 80019ec:	e79d      	b.n	800192a <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ee:	2a03      	cmp	r2, #3
 80019f0:	d102      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f2:	019b      	lsls	r3, r3, #6
 80019f4:	d4e3      	bmi.n	80019be <HAL_RCC_ClockConfig+0x9e>
 80019f6:	e797      	b.n	8001928 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019f8:	2a01      	cmp	r2, #1
 80019fa:	d102      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019fc:	075b      	lsls	r3, r3, #29
 80019fe:	d4de      	bmi.n	80019be <HAL_RCC_ClockConfig+0x9e>
 8001a00:	e792      	b.n	8001928 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a02:	059b      	lsls	r3, r3, #22
 8001a04:	d4db      	bmi.n	80019be <HAL_RCC_ClockConfig+0x9e>
 8001a06:	e78f      	b.n	8001928 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d10b      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	220c      	movs	r2, #12
 8001a0e:	68eb      	ldr	r3, [r5, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d096      	beq.n	8001944 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a16:	f7ff f94b 	bl	8000cb0 <HAL_GetTick>
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_ClockConfig+0x168>)
 8001a1c:	1bc0      	subs	r0, r0, r7
 8001a1e:	4298      	cmp	r0, r3
 8001a20:	d9f4      	bls.n	8001a0c <HAL_RCC_ClockConfig+0xec>
 8001a22:	e7e2      	b.n	80019ea <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d010      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a28:	220c      	movs	r2, #12
 8001a2a:	68eb      	ldr	r3, [r5, #12]
 8001a2c:	4213      	tst	r3, r2
 8001a2e:	d089      	beq.n	8001944 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff f93e 	bl	8000cb0 <HAL_GetTick>
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_RCC_ClockConfig+0x168>)
 8001a36:	1bc0      	subs	r0, r0, r7
 8001a38:	4298      	cmp	r0, r3
 8001a3a:	d9f5      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x108>
 8001a3c:	e7d5      	b.n	80019ea <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3e:	f7ff f937 	bl	8000cb0 <HAL_GetTick>
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_RCC_ClockConfig+0x168>)
 8001a44:	1bc0      	subs	r0, r0, r7
 8001a46:	4298      	cmp	r0, r3
 8001a48:	d8cf      	bhi.n	80019ea <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	68eb      	ldr	r3, [r5, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d1f4      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x11e>
 8001a54:	e776      	b.n	8001944 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	6822      	ldr	r2, [r4, #0]
 8001a58:	439a      	bics	r2, r3
 8001a5a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5c:	6822      	ldr	r2, [r4, #0]
 8001a5e:	421a      	tst	r2, r3
 8001a60:	d100      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x144>
 8001a62:	e776      	b.n	8001952 <HAL_RCC_ClockConfig+0x32>
 8001a64:	e760      	b.n	8001928 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a66:	68e3      	ldr	r3, [r4, #12]
 8001a68:	4908      	ldr	r1, [pc, #32]	; (8001a8c <HAL_RCC_ClockConfig+0x16c>)
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	68f1      	ldr	r1, [r6, #12]
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	60e3      	str	r3, [r4, #12]
 8001a72:	e773      	b.n	800195c <HAL_RCC_ClockConfig+0x3c>
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	ffffc7ff 	.word	0xffffc7ff
 8001a80:	08003043 	.word	0x08003043
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	00001388 	.word	0x00001388
 8001a8c:	fffff8ff 	.word	0xfffff8ff

08001a90 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	055b      	lsls	r3, r3, #21
 8001a98:	0f5b      	lsrs	r3, r3, #29
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a9e:	6810      	ldr	r0, [r2, #0]
 8001aa0:	40d8      	lsrs	r0, r3
}
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	08003053 	.word	0x08003053
 8001aac:	2000000c 	.word	0x2000000c

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	049b      	lsls	r3, r3, #18
 8001ab8:	0f5b      	lsrs	r3, r3, #29
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001abe:	6810      	ldr	r0, [r2, #0]
 8001ac0:	40d8      	lsrs	r0, r3
}
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	08003053 	.word	0x08003053
 8001acc:	2000000c 	.word	0x2000000c

08001ad0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ad0:	6803      	ldr	r3, [r0, #0]
{
 8001ad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ad4:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ad6:	069b      	lsls	r3, r3, #26
 8001ad8:	d53b      	bpl.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001adc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4c4f      	ldr	r4, [pc, #316]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ae0:	055b      	lsls	r3, r3, #21
 8001ae2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001ae4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	421a      	tst	r2, r3
 8001ae8:	d104      	bne.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001aec:	4313      	orrs	r3, r2
 8001aee:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001af0:	2301      	movs	r3, #1
 8001af2:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	2780      	movs	r7, #128	; 0x80
 8001af6:	4e4a      	ldr	r6, [pc, #296]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001af8:	007f      	lsls	r7, r7, #1
 8001afa:	6833      	ldr	r3, [r6, #0]
 8001afc:	423b      	tst	r3, r7
 8001afe:	d04f      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b00:	6868      	ldr	r0, [r5, #4]
 8001b02:	23c0      	movs	r3, #192	; 0xc0
 8001b04:	26c0      	movs	r6, #192	; 0xc0
 8001b06:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b08:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b0a:	03b6      	lsls	r6, r6, #14
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b10:	4032      	ands	r2, r6
 8001b12:	4019      	ands	r1, r3
 8001b14:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b16:	4290      	cmp	r0, r2
 8001b18:	d153      	bne.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b1c:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b1e:	d157      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b20:	6869      	ldr	r1, [r5, #4]
 8001b22:	23c0      	movs	r3, #192	; 0xc0
 8001b24:	000a      	movs	r2, r1
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	401a      	ands	r2, r3
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	483c      	ldr	r0, [pc, #240]	; (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001b32:	4003      	ands	r3, r0
 8001b34:	20c0      	movs	r0, #192	; 0xc0
 8001b36:	0380      	lsls	r0, r0, #14
 8001b38:	4001      	ands	r1, r0
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b40:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b42:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b44:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d103      	bne.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b4c:	4a36      	ldr	r2, [pc, #216]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b52:	682a      	ldr	r2, [r5, #0]
 8001b54:	0793      	lsls	r3, r2, #30
 8001b56:	d506      	bpl.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b58:	200c      	movs	r0, #12
 8001b5a:	4930      	ldr	r1, [pc, #192]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b5c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001b5e:	4383      	bics	r3, r0
 8001b60:	68a8      	ldr	r0, [r5, #8]
 8001b62:	4303      	orrs	r3, r0
 8001b64:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b66:	0753      	lsls	r3, r2, #29
 8001b68:	d506      	bpl.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b6a:	492c      	ldr	r1, [pc, #176]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b6c:	482f      	ldr	r0, [pc, #188]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b6e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001b70:	4003      	ands	r3, r0
 8001b72:	68e8      	ldr	r0, [r5, #12]
 8001b74:	4303      	orrs	r3, r0
 8001b76:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b78:	0713      	lsls	r3, r2, #28
 8001b7a:	d506      	bpl.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b7c:	4927      	ldr	r1, [pc, #156]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b7e:	482c      	ldr	r0, [pc, #176]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b80:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001b82:	4003      	ands	r3, r0
 8001b84:	6928      	ldr	r0, [r5, #16]
 8001b86:	4303      	orrs	r3, r0
 8001b88:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001b8a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b8c:	0613      	lsls	r3, r2, #24
 8001b8e:	d517      	bpl.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001b90:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b92:	4928      	ldr	r1, [pc, #160]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b94:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001b96:	400b      	ands	r3, r1
 8001b98:	6969      	ldr	r1, [r5, #20]
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9e:	e00f      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba0:	6833      	ldr	r3, [r6, #0]
 8001ba2:	433b      	orrs	r3, r7
 8001ba4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f883 	bl	8000cb0 <HAL_GetTick>
 8001baa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	6833      	ldr	r3, [r6, #0]
 8001bae:	423b      	tst	r3, r7
 8001bb0:	d1a6      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff f87d 	bl	8000cb0 <HAL_GetTick>
 8001bb6:	9b01      	ldr	r3, [sp, #4]
 8001bb8:	1ac0      	subs	r0, r0, r3
 8001bba:	2864      	cmp	r0, #100	; 0x64
 8001bbc:	d9f6      	bls.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 8001bbe:	2003      	movs	r0, #3
}
 8001bc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001bc2:	4299      	cmp	r1, r3
 8001bc4:	d1a9      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001bc6:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8001bc8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001bca:	039b      	lsls	r3, r3, #14
 8001bcc:	d5a5      	bpl.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8001bce:	e7f7      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001bd0:	428b      	cmp	r3, r1
 8001bd2:	d0a5      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	069b      	lsls	r3, r3, #26
 8001bd8:	d5a2      	bpl.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bda:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001bdc:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bde:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001be0:	0312      	lsls	r2, r2, #12
 8001be2:	4302      	orrs	r2, r0
 8001be4:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001be6:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bea:	4814      	ldr	r0, [pc, #80]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001bec:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bee:	4002      	ands	r2, r0
 8001bf0:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001bf2:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001bf4:	05cb      	lsls	r3, r1, #23
 8001bf6:	d400      	bmi.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8001bf8:	e792      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f859 	bl	8000cb0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bfe:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001c00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c02:	00bf      	lsls	r7, r7, #2
 8001c04:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001c06:	423b      	tst	r3, r7
 8001c08:	d000      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001c0a:	e789      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7ff f850 	bl	8000cb0 <HAL_GetTick>
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001c12:	1b80      	subs	r0, r0, r6
 8001c14:	4298      	cmp	r0, r3
 8001c16:	d9f5      	bls.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001c18:	e7d1      	b.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0xee>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40007000 	.word	0x40007000
 8001c24:	ffcfffff 	.word	0xffcfffff
 8001c28:	efffffff 	.word	0xefffffff
 8001c2c:	fffff3ff 	.word	0xfffff3ff
 8001c30:	ffffcfff 	.word	0xffffcfff
 8001c34:	fff3ffff 	.word	0xfff3ffff
 8001c38:	fffcffff 	.word	0xfffcffff
 8001c3c:	fff7ffff 	.word	0xfff7ffff
 8001c40:	00001388 	.word	0x00001388

08001c44 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001c44:	6803      	ldr	r3, [r0, #0]
{
 8001c46:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001c48:	689a      	ldr	r2, [r3, #8]
{
 8001c4a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001c4c:	04d2      	lsls	r2, r2, #19
 8001c4e:	d50a      	bpl.n	8001c66 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	05db      	lsls	r3, r3, #23
 8001c54:	d507      	bpl.n	8001c66 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001c56:	f7fe fc01 	bl	800045c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001c5a:	6821      	ldr	r1, [r4, #0]
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_RTC_AlarmIRQHandler+0x54>)
 8001c5e:	68ca      	ldr	r2, [r1, #12]
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	0492      	lsls	r2, r2, #18
 8001c6c:	d50b      	bpl.n	8001c86 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	059b      	lsls	r3, r3, #22
 8001c72:	d508      	bpl.n	8001c86 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001c74:	0020      	movs	r0, r4
 8001c76:	f000 fabb 	bl	80021f0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001c7a:	6821      	ldr	r1, [r4, #0]
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_RTC_AlarmIRQHandler+0x58>)
 8001c7e:	68ca      	ldr	r2, [r1, #12]
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8001c8a:	0292      	lsls	r2, r2, #10
 8001c8c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	3402      	adds	r4, #2
 8001c92:	77e3      	strb	r3, [r4, #31]
}
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	fffffe7f 	.word	0xfffffe7f
 8001c9c:	fffffd7f 	.word	0xfffffd7f
 8001ca0:	40010400 	.word	0x40010400

08001ca4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001ca4:	21a0      	movs	r1, #160	; 0xa0
 8001ca6:	6802      	ldr	r2, [r0, #0]
{
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001caa:	68d3      	ldr	r3, [r2, #12]
{
 8001cac:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001cae:	438b      	bics	r3, r1
 8001cb0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001cb2:	f7fe fffd 	bl	8000cb0 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001cb6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001cb8:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001cba:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001cbc:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	422b      	tst	r3, r5
 8001cc4:	d001      	beq.n	8001cca <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001cc6:	2000      	movs	r0, #0
}
 8001cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001cca:	f7fe fff1 	bl	8000cb0 <HAL_GetTick>
 8001cce:	1b80      	subs	r0, r0, r6
 8001cd0:	42b8      	cmp	r0, r7
 8001cd2:	d9f4      	bls.n	8001cbe <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	e7f7      	b.n	8001cc8 <HAL_RTC_WaitForSynchro+0x24>

08001cd8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001cda:	2440      	movs	r4, #64	; 0x40
 8001cdc:	6803      	ldr	r3, [r0, #0]
{
 8001cde:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4222      	tst	r2, r4
 8001ce4:	d001      	beq.n	8001cea <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001ce6:	2000      	movs	r0, #0
}
 8001ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001cea:	2201      	movs	r2, #1
 8001cec:	4252      	negs	r2, r2
 8001cee:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001cf0:	f7fe ffde 	bl	8000cb0 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001cf4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001cf6:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001cf8:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001cfa:	682b      	ldr	r3, [r5, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4223      	tst	r3, r4
 8001d00:	d1f1      	bne.n	8001ce6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001d02:	f7fe ffd5 	bl	8000cb0 <HAL_GetTick>
 8001d06:	1b80      	subs	r0, r0, r6
 8001d08:	42b8      	cmp	r0, r7
 8001d0a:	d9f6      	bls.n	8001cfa <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	e7eb      	b.n	8001ce8 <RTC_EnterInitMode+0x10>

08001d10 <HAL_RTC_Init>:
{
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001d14:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d01a      	beq.n	8001d50 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d1a:	1c86      	adds	r6, r0, #2
 8001d1c:	7ff3      	ldrb	r3, [r6, #31]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8001d24:	1942      	adds	r2, r0, r5
 8001d26:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8001d28:	f7fe feca 	bl	8000ac0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d2c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d2e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d30:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d32:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d34:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
 8001d38:	3a77      	subs	r2, #119	; 0x77
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d3c:	f7ff ffcc 	bl	8001cd8 <RTC_EnterInitMode>
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	1e05      	subs	r5, r0, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d46:	22ff      	movs	r2, #255	; 0xff
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8001d4e:	2501      	movs	r5, #1
}
 8001d50:	0028      	movs	r0, r5
 8001d52:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	491b      	ldr	r1, [pc, #108]	; (8001dc4 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d58:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d5e:	6862      	ldr	r2, [r4, #4]
 8001d60:	6899      	ldr	r1, [r3, #8]
 8001d62:	4302      	orrs	r2, r0
 8001d64:	69a0      	ldr	r0, [r4, #24]
 8001d66:	4302      	orrs	r2, r0
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001d6c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001d6e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001d70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001d72:	68a2      	ldr	r2, [r4, #8]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	0412      	lsls	r2, r2, #16
 8001d78:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001d7a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001d7c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	438a      	bics	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001d84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d86:	397d      	subs	r1, #125	; 0x7d
 8001d88:	438a      	bics	r2, r1
 8001d8a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001d8c:	69e2      	ldr	r2, [r4, #28]
 8001d8e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001d90:	4302      	orrs	r2, r0
 8001d92:	430a      	orrs	r2, r1
 8001d94:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	069b      	lsls	r3, r3, #26
 8001d9a:	d40c      	bmi.n	8001db6 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	f7ff ff81 	bl	8001ca4 <HAL_RTC_WaitForSynchro>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001da6:	22ff      	movs	r2, #255	; 0xff
 8001da8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8001daa:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001dae:	2304      	movs	r3, #4
 8001db0:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8001db2:	77e5      	strb	r5, [r4, #31]
 8001db4:	e7cb      	b.n	8001d4e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001db6:	22ff      	movs	r2, #255	; 0xff
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8001dc0:	e7c6      	b.n	8001d50 <HAL_RTC_Init+0x40>
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	ff8fffbf 	.word	0xff8fffbf

08001dc8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001dc8:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8001dca:	2809      	cmp	r0, #9
 8001dcc:	d803      	bhi.n	8001dd6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4318      	orrs	r0, r3
 8001dd2:	b2c0      	uxtb	r0, r0
}
 8001dd4:	4770      	bx	lr
    Param -= 10U;
 8001dd6:	380a      	subs	r0, #10
    bcdhigh++;
 8001dd8:	3301      	adds	r3, #1
    Param -= 10U;
 8001dda:	b2c0      	uxtb	r0, r0
 8001ddc:	e7f5      	b.n	8001dca <RTC_ByteToBcd2+0x2>
	...

08001de0 <HAL_RTC_SetTime>:
{
 8001de0:	2302      	movs	r3, #2
 8001de2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001de4:	1c47      	adds	r7, r0, #1
{
 8001de6:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001de8:	7ff9      	ldrb	r1, [r7, #31]
{
 8001dea:	b085      	sub	sp, #20
 8001dec:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8001dee:	001e      	movs	r6, r3
 8001df0:	2901      	cmp	r1, #1
 8001df2:	d037      	beq.n	8001e64 <HAL_RTC_SetTime+0x84>
 8001df4:	2101      	movs	r1, #1
 8001df6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001df8:	18c1      	adds	r1, r0, r3
 8001dfa:	77cb      	strb	r3, [r1, #31]
 8001dfc:	9101      	str	r1, [sp, #4]
 8001dfe:	2140      	movs	r1, #64	; 0x40
 8001e00:	6806      	ldr	r6, [r0, #0]
 8001e02:	7863      	ldrb	r3, [r4, #1]
 8001e04:	7820      	ldrb	r0, [r4, #0]
 8001e06:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e08:	68b3      	ldr	r3, [r6, #8]
 8001e0a:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	d12c      	bne.n	8001e6a <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d100      	bne.n	8001e16 <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 8001e14:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001e16:	f7ff ffd7 	bl	8001dc8 <RTC_ByteToBcd2>
 8001e1a:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001e1c:	9802      	ldr	r0, [sp, #8]
 8001e1e:	f7ff ffd3 	bl	8001dc8 <RTC_ByteToBcd2>
 8001e22:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001e24:	78a0      	ldrb	r0, [r4, #2]
 8001e26:	f7ff ffcf 	bl	8001dc8 <RTC_ByteToBcd2>
 8001e2a:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001e2c:	78e0      	ldrb	r0, [r4, #3]
 8001e2e:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001e30:	4318      	orrs	r0, r3
 8001e32:	9b03      	ldr	r3, [sp, #12]
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001e38:	9b02      	ldr	r3, [sp, #8]
 8001e3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001e3c:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e3e:	23ca      	movs	r3, #202	; 0xca
 8001e40:	6273      	str	r3, [r6, #36]	; 0x24
 8001e42:	3b77      	subs	r3, #119	; 0x77
 8001e44:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001e46:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e48:	0028      	movs	r0, r5
 8001e4a:	f7ff ff45 	bl	8001cd8 <RTC_EnterInitMode>
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	1e06      	subs	r6, r0, #0
 8001e52:	d016      	beq.n	8001e82 <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e54:	22ff      	movs	r2, #255	; 0xff
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	9a01      	ldr	r2, [sp, #4]
 8001e5c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8001e62:	2601      	movs	r6, #1
}
 8001e64:	0030      	movs	r0, r6
 8001e66:	b005      	add	sp, #20
 8001e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d100      	bne.n	8001e70 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 8001e6e:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001e70:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001e72:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001e74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001e76:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 8001e78:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001e7a:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001e7c:	78e3      	ldrb	r3, [r4, #3]
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	e7dc      	b.n	8001e3c <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001e82:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <HAL_RTC_SetTime+0xf8>)
 8001e84:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001e86:	4915      	ldr	r1, [pc, #84]	; (8001edc <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001e88:	4002      	ands	r2, r0
 8001e8a:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001e8c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001e8e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001e90:	400a      	ands	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001e94:	68e2      	ldr	r2, [r4, #12]
 8001e96:	6899      	ldr	r1, [r3, #8]
 8001e98:	4302      	orrs	r2, r0
 8001e9a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001e9c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001e9e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	438a      	bics	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	069b      	lsls	r3, r3, #26
 8001eaa:	d40c      	bmi.n	8001ec6 <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001eac:	0028      	movs	r0, r5
 8001eae:	f7ff fef9 	bl	8001ca4 <HAL_RTC_WaitForSynchro>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eb6:	22ff      	movs	r2, #255	; 0xff
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	9a01      	ldr	r2, [sp, #4]
 8001ec0:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8001ec2:	77fe      	strb	r6, [r7, #31]
 8001ec4:	e7cd      	b.n	8001e62 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ec6:	22ff      	movs	r2, #255	; 0xff
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9a01      	ldr	r2, [sp, #4]
 8001ed0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001ed6:	e7c5      	b.n	8001e64 <HAL_RTC_SetTime+0x84>
 8001ed8:	007f7f7f 	.word	0x007f7f7f
 8001edc:	fffbffff 	.word	0xfffbffff

08001ee0 <HAL_RTC_SetDate>:
{
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001ee4:	1c47      	adds	r7, r0, #1
{
 8001ee6:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001ee8:	7ff9      	ldrb	r1, [r7, #31]
{
 8001eea:	b085      	sub	sp, #20
 8001eec:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8001eee:	001d      	movs	r5, r3
 8001ef0:	2901      	cmp	r1, #1
 8001ef2:	d036      	beq.n	8001f62 <HAL_RTC_SetDate+0x82>
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ef8:	18c1      	adds	r1, r0, r3
 8001efa:	9101      	str	r1, [sp, #4]
 8001efc:	77cb      	strb	r3, [r1, #31]
 8001efe:	7831      	ldrb	r1, [r6, #0]
 8001f00:	78f0      	ldrb	r0, [r6, #3]
 8001f02:	0349      	lsls	r1, r1, #13
 8001f04:	7873      	ldrb	r3, [r6, #1]
 8001f06:	78b5      	ldrb	r5, [r6, #2]
 8001f08:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d14c      	bne.n	8001fa8 <HAL_RTC_SetDate+0xc8>
 8001f0e:	3210      	adds	r2, #16
 8001f10:	4213      	tst	r3, r2
 8001f12:	d002      	beq.n	8001f1a <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001f14:	4393      	bics	r3, r2
 8001f16:	330a      	adds	r3, #10
 8001f18:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001f1a:	f7ff ff55 	bl	8001dc8 <RTC_ByteToBcd2>
 8001f1e:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001f20:	7870      	ldrb	r0, [r6, #1]
 8001f22:	f7ff ff51 	bl	8001dc8 <RTC_ByteToBcd2>
 8001f26:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001f28:	0028      	movs	r0, r5
 8001f2a:	f7ff ff4d 	bl	8001dc8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001f2e:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001f30:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001f32:	041d      	lsls	r5, r3, #16
 8001f34:	9b02      	ldr	r3, [sp, #8]
 8001f36:	4318      	orrs	r0, r3
 8001f38:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f3a:	22ca      	movs	r2, #202	; 0xca
 8001f3c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f3e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
 8001f42:	3a77      	subs	r2, #119	; 0x77
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f46:	f7ff fec7 	bl	8001cd8 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001f4a:	432e      	orrs	r6, r5
 8001f4c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f4e:	1e05      	subs	r5, r0, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f56:	2304      	movs	r3, #4
 8001f58:	9a01      	ldr	r2, [sp, #4]
 8001f5a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8001f60:	2501      	movs	r5, #1
}
 8001f62:	0028      	movs	r0, r5
 8001f64:	b005      	add	sp, #20
 8001f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001f68:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <HAL_RTC_SetDate+0xd4>)
 8001f6c:	4006      	ands	r6, r0
 8001f6e:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	438a      	bics	r2, r1
 8001f74:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	069b      	lsls	r3, r3, #26
 8001f7a:	d40c      	bmi.n	8001f96 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	f7ff fe91 	bl	8001ca4 <HAL_RTC_WaitForSynchro>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f86:	22ff      	movs	r2, #255	; 0xff
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	9a01      	ldr	r2, [sp, #4]
 8001f90:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8001f92:	77fd      	strb	r5, [r7, #31]
 8001f94:	e7e4      	b.n	8001f60 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9a01      	ldr	r2, [sp, #4]
 8001fa0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001fa6:	e7dc      	b.n	8001f62 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001fa8:	9a02      	ldr	r2, [sp, #8]
 8001faa:	0400      	lsls	r0, r0, #16
 8001fac:	4310      	orrs	r0, r2
 8001fae:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8001fb0:	021e      	lsls	r6, r3, #8
 8001fb2:	e7c2      	b.n	8001f3a <HAL_RTC_SetDate+0x5a>
 8001fb4:	00ffff3f 	.word	0x00ffff3f

08001fb8 <HAL_RTC_SetAlarm_IT>:
{
 8001fb8:	2302      	movs	r3, #2
 8001fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fbc:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8001fbe:	1c41      	adds	r1, r0, #1
 8001fc0:	7fce      	ldrb	r6, [r1, #31]
{
 8001fc2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	2e01      	cmp	r6, #1
 8001fc8:	d100      	bne.n	8001fcc <HAL_RTC_SetAlarm_IT+0x14>
 8001fca:	e08c      	b.n	80020e6 <HAL_RTC_SetAlarm_IT+0x12e>
 8001fcc:	3801      	subs	r0, #1
 8001fce:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fd0:	18e1      	adds	r1, r4, r3
 8001fd2:	77cb      	strb	r3, [r1, #31]
 8001fd4:	2140      	movs	r1, #64	; 0x40
 8001fd6:	786b      	ldrb	r3, [r5, #1]
 8001fd8:	6826      	ldr	r6, [r4, #0]
 8001fda:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001fdc:	68b3      	ldr	r3, [r6, #8]
 8001fde:	7828      	ldrb	r0, [r5, #0]
 8001fe0:	78af      	ldrb	r7, [r5, #2]
 8001fe2:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001fe4:	2a00      	cmp	r2, #0
 8001fe6:	d15d      	bne.n	80020a4 <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d100      	bne.n	8001fee <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001fec:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001fee:	f7ff feeb 	bl	8001dc8 <RTC_ByteToBcd2>
 8001ff2:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001ff4:	9800      	ldr	r0, [sp, #0]
 8001ff6:	f7ff fee7 	bl	8001dc8 <RTC_ByteToBcd2>
 8001ffa:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001ffc:	0038      	movs	r0, r7
 8001ffe:	f7ff fee3 	bl	8001dc8 <RTC_ByteToBcd2>
 8002002:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002004:	1c6b      	adds	r3, r5, #1
 8002006:	7fd8      	ldrb	r0, [r3, #31]
 8002008:	f7ff fede 	bl	8001dc8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800200c:	696a      	ldr	r2, [r5, #20]
 800200e:	69eb      	ldr	r3, [r5, #28]
 8002010:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002012:	78ea      	ldrb	r2, [r5, #3]
 8002014:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002016:	4313      	orrs	r3, r2
 8002018:	431f      	orrs	r7, r3
 800201a:	9b01      	ldr	r3, [sp, #4]
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002020:	9b00      	ldr	r3, [sp, #0]
 8002022:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002024:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002026:	69aa      	ldr	r2, [r5, #24]
 8002028:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800202a:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800202c:	4313      	orrs	r3, r2
 800202e:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002030:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002032:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002034:	6273      	str	r3, [r6, #36]	; 0x24
 8002036:	3b77      	subs	r3, #119	; 0x77
 8002038:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800203a:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800203c:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 800203e:	429a      	cmp	r2, r3
 8002040:	d152      	bne.n	80020e8 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002042:	68b3      	ldr	r3, [r6, #8]
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <HAL_RTC_SetAlarm_IT+0x17c>)
 8002046:	4013      	ands	r3, r2
 8002048:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800204a:	68f2      	ldr	r2, [r6, #12]
 800204c:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RTC_SetAlarm_IT+0x180>)
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	4313      	orrs	r3, r2
 8002052:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002054:	f7fe fe2c 	bl	8000cb0 <HAL_GetTick>
 8002058:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800205a:	2201      	movs	r2, #1
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	68dd      	ldr	r5, [r3, #12]
 8002060:	4015      	ands	r5, r2
 8002062:	d031      	beq.n	80020c8 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002064:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002066:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	0052      	lsls	r2, r2, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800207a:	430a      	orrs	r2, r1
 800207c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_RTC_SetAlarm_IT+0x184>)
 8002082:	0292      	lsls	r2, r2, #10
 8002084:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8002086:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002088:	4311      	orrs	r1, r2
 800208a:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800208c:	6899      	ldr	r1, [r3, #8]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002092:	22ff      	movs	r2, #255	; 0xff
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002098:	3afe      	subs	r2, #254	; 0xfe
 800209a:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 800209c:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 800209e:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80020a0:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80020a2:	e020      	b.n	80020e6 <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d100      	bne.n	80020aa <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80020a8:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80020aa:	69eb      	ldr	r3, [r5, #28]
 80020ac:	696a      	ldr	r2, [r5, #20]
 80020ae:	0400      	lsls	r0, r0, #16
 80020b0:	4313      	orrs	r3, r2
 80020b2:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80020b4:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80020b6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80020b8:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80020ba:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80020bc:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80020be:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80020c0:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80020c2:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80020c4:	7fd8      	ldrb	r0, [r3, #31]
 80020c6:	e7ae      	b.n	8002026 <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80020c8:	f7fe fdf2 	bl	8000cb0 <HAL_GetTick>
 80020cc:	23fa      	movs	r3, #250	; 0xfa
 80020ce:	1b80      	subs	r0, r0, r6
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4298      	cmp	r0, r3
 80020d4:	d9c1      	bls.n	800205a <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020d6:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80020d8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80020de:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 80020e0:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80020e2:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80020e4:	77e5      	strb	r5, [r4, #31]
}
 80020e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80020e8:	68b3      	ldr	r3, [r6, #8]
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RTC_SetAlarm_IT+0x188>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80020f0:	68f2      	ldr	r2, [r6, #12]
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_RTC_SetAlarm_IT+0x18c>)
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80020fa:	f7fe fdd9 	bl	8000cb0 <HAL_GetTick>
 80020fe:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002100:	2202      	movs	r2, #2
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	68dd      	ldr	r5, [r3, #12]
 8002106:	4015      	ands	r5, r2
 8002108:	d00b      	beq.n	8002122 <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800210a:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800210c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800210e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	0092      	lsls	r2, r2, #2
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	0192      	lsls	r2, r2, #6
 8002120:	e7ab      	b.n	800207a <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002122:	f7fe fdc5 	bl	8000cb0 <HAL_GetTick>
 8002126:	23fa      	movs	r3, #250	; 0xfa
 8002128:	1b80      	subs	r0, r0, r6
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4298      	cmp	r0, r3
 800212e:	d9e7      	bls.n	8002100 <HAL_RTC_SetAlarm_IT+0x148>
 8002130:	e7d1      	b.n	80020d6 <HAL_RTC_SetAlarm_IT+0x11e>
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	fffffeff 	.word	0xfffffeff
 8002138:	fffffe7f 	.word	0xfffffe7f
 800213c:	40010400 	.word	0x40010400
 8002140:	fffffdff 	.word	0xfffffdff
 8002144:	fffffd7f 	.word	0xfffffd7f

08002148 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002148:	230a      	movs	r3, #10
 800214a:	0902      	lsrs	r2, r0, #4
 800214c:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800214e:	220f      	movs	r2, #15
 8002150:	4010      	ands	r0, r2
 8002152:	1818      	adds	r0, r3, r0
 8002154:	b2c0      	uxtb	r0, r0
}
 8002156:	4770      	bx	lr

08002158 <HAL_RTC_GetTime>:
{
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800215c:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800215e:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002160:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002162:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002164:	690b      	ldr	r3, [r1, #16]
 8002166:	045b      	lsls	r3, r3, #17
 8002168:	0c5b      	lsrs	r3, r3, #17
 800216a:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800216c:	680b      	ldr	r3, [r1, #0]
 800216e:	490e      	ldr	r1, [pc, #56]	; (80021a8 <HAL_RTC_GetTime+0x50>)
 8002170:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002172:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002174:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002176:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002178:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800217a:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800217c:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800217e:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002180:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002182:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002184:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002186:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8002188:	2a00      	cmp	r2, #0
 800218a:	d10a      	bne.n	80021a2 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800218c:	f7ff ffdc 	bl	8002148 <RTC_Bcd2ToByte>
 8002190:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002192:	0030      	movs	r0, r6
 8002194:	f7ff ffd8 	bl	8002148 <RTC_Bcd2ToByte>
 8002198:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800219a:	0028      	movs	r0, r5
 800219c:	f7ff ffd4 	bl	8002148 <RTC_Bcd2ToByte>
 80021a0:	70a0      	strb	r0, [r4, #2]
}
 80021a2:	2000      	movs	r0, #0
 80021a4:	bd70      	pop	{r4, r5, r6, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	007f7f7f 	.word	0x007f7f7f

080021ac <HAL_RTC_GetDate>:
{
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80021b0:	6803      	ldr	r3, [r0, #0]
 80021b2:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_RTC_GetDate+0x40>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80021b8:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80021ba:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80021bc:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80021be:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80021c0:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80021c2:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80021c4:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80021c6:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80021c8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80021ca:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80021d0:	f7ff ffba 	bl	8002148 <RTC_Bcd2ToByte>
 80021d4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80021d6:	0028      	movs	r0, r5
 80021d8:	f7ff ffb6 	bl	8002148 <RTC_Bcd2ToByte>
 80021dc:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80021de:	0030      	movs	r0, r6
 80021e0:	f7ff ffb2 	bl	8002148 <RTC_Bcd2ToByte>
 80021e4:	70a0      	strb	r0, [r4, #2]
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	bd70      	pop	{r4, r5, r6, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	00ffff3f 	.word	0x00ffff3f

080021f0 <HAL_RTCEx_AlarmBEventCallback>:
 80021f0:	4770      	bx	lr
	...

080021f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021f8:	6925      	ldr	r5, [r4, #16]
 80021fa:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80021fc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021fe:	432a      	orrs	r2, r5
 8002200:	6965      	ldr	r5, [r4, #20]
 8002202:	69c1      	ldr	r1, [r0, #28]
 8002204:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	4d76      	ldr	r5, [pc, #472]	; (80023e4 <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800220a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800220c:	4028      	ands	r0, r5
 800220e:	4302      	orrs	r2, r0
 8002210:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4874      	ldr	r0, [pc, #464]	; (80023e8 <UART_SetConfig+0x1f4>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002216:	4d75      	ldr	r5, [pc, #468]	; (80023ec <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002218:	4002      	ands	r2, r0
 800221a:	68e0      	ldr	r0, [r4, #12]
 800221c:	4302      	orrs	r2, r0
 800221e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002220:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002222:	42ab      	cmp	r3, r5
 8002224:	d001      	beq.n	800222a <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002226:	6a22      	ldr	r2, [r4, #32]
 8002228:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	4e70      	ldr	r6, [pc, #448]	; (80023f0 <UART_SetConfig+0x1fc>)
 800222e:	4032      	ands	r2, r6
 8002230:	4302      	orrs	r2, r0
 8002232:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002234:	4a6f      	ldr	r2, [pc, #444]	; (80023f4 <UART_SetConfig+0x200>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d114      	bne.n	8002264 <UART_SetConfig+0x70>
 800223a:	200c      	movs	r0, #12
 800223c:	4b6e      	ldr	r3, [pc, #440]	; (80023f8 <UART_SetConfig+0x204>)
 800223e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002240:	4002      	ands	r2, r0
 8002242:	486e      	ldr	r0, [pc, #440]	; (80023fc <UART_SetConfig+0x208>)
 8002244:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	0212      	lsls	r2, r2, #8
 800224a:	4291      	cmp	r1, r2
 800224c:	d000      	beq.n	8002250 <UART_SetConfig+0x5c>
 800224e:	e08b      	b.n	8002368 <UART_SetConfig+0x174>
  {
    switch (clocksource)
 8002250:	2808      	cmp	r0, #8
 8002252:	d900      	bls.n	8002256 <UART_SetConfig+0x62>
 8002254:	e085      	b.n	8002362 <UART_SetConfig+0x16e>
 8002256:	f7fd ff5f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800225a:	5850      	.short	0x5850
 800225c:	847c845b 	.word	0x847c845b
 8002260:	8484      	.short	0x8484
 8002262:	7f          	.byte	0x7f
 8002263:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002264:	42ab      	cmp	r3, r5
 8002266:	d000      	beq.n	800226a <UART_SetConfig+0x76>
 8002268:	e0b4      	b.n	80023d4 <UART_SetConfig+0x1e0>
 800226a:	21c0      	movs	r1, #192	; 0xc0
 800226c:	2080      	movs	r0, #128	; 0x80
 800226e:	4a62      	ldr	r2, [pc, #392]	; (80023f8 <UART_SetConfig+0x204>)
 8002270:	0109      	lsls	r1, r1, #4
 8002272:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002274:	00c0      	lsls	r0, r0, #3
 8002276:	400b      	ands	r3, r1
 8002278:	4283      	cmp	r3, r0
 800227a:	d03b      	beq.n	80022f4 <UART_SetConfig+0x100>
 800227c:	d803      	bhi.n	8002286 <UART_SetConfig+0x92>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <UART_SetConfig+0xa4>
        ret = HAL_ERROR;
 8002282:	2501      	movs	r5, #1
 8002284:	e00d      	b.n	80022a2 <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002286:	2080      	movs	r0, #128	; 0x80
 8002288:	0100      	lsls	r0, r0, #4
 800228a:	4283      	cmp	r3, r0
 800228c:	d00e      	beq.n	80022ac <UART_SetConfig+0xb8>
 800228e:	428b      	cmp	r3, r1
 8002290:	d1f7      	bne.n	8002282 <UART_SetConfig+0x8e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002292:	2080      	movs	r0, #128	; 0x80
 8002294:	0200      	lsls	r0, r0, #8
 8002296:	e010      	b.n	80022ba <UART_SetConfig+0xc6>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002298:	f7ff fbfa 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 800229c:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 800229e:	42a8      	cmp	r0, r5
 80022a0:	d10b      	bne.n	80022ba <UART_SetConfig+0xc6>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022a2:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 80022a4:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 80022a6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80022a8:	6663      	str	r3, [r4, #100]	; 0x64
}
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ac:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80022ae:	4b54      	ldr	r3, [pc, #336]	; (8002400 <UART_SetConfig+0x20c>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b0:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80022b2:	17c0      	asrs	r0, r0, #31
 80022b4:	4018      	ands	r0, r3
 80022b6:	4b53      	ldr	r3, [pc, #332]	; (8002404 <UART_SetConfig+0x210>)
 80022b8:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022ba:	2203      	movs	r2, #3
 80022bc:	6863      	ldr	r3, [r4, #4]
 80022be:	435a      	muls	r2, r3
 80022c0:	4282      	cmp	r2, r0
 80022c2:	d8de      	bhi.n	8002282 <UART_SetConfig+0x8e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80022c4:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022c6:	4282      	cmp	r2, r0
 80022c8:	d3db      	bcc.n	8002282 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80022ca:	2700      	movs	r7, #0
 80022cc:	0e02      	lsrs	r2, r0, #24
 80022ce:	0201      	lsls	r1, r0, #8
 80022d0:	085e      	lsrs	r6, r3, #1
 80022d2:	1989      	adds	r1, r1, r6
 80022d4:	417a      	adcs	r2, r7
 80022d6:	0008      	movs	r0, r1
 80022d8:	0011      	movs	r1, r2
 80022da:	001a      	movs	r2, r3
 80022dc:	003b      	movs	r3, r7
 80022de:	f7fd ffb1 	bl	8000244 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022e2:	4b49      	ldr	r3, [pc, #292]	; (8002408 <UART_SetConfig+0x214>)
 80022e4:	18c2      	adds	r2, r0, r3
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <UART_SetConfig+0x218>)
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8ca      	bhi.n	8002282 <UART_SetConfig+0x8e>
          huart->Instance->BRR = usartdiv;
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	003d      	movs	r5, r7
 80022f0:	60d8      	str	r0, [r3, #12]
 80022f2:	e7d6      	b.n	80022a2 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80022f4:	f7ff f882 	bl	80013fc <HAL_RCC_GetSysClockFreq>
        break;
 80022f8:	e7d0      	b.n	800229c <UART_SetConfig+0xa8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022fa:	f7ff fbc9 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	0040      	lsls	r0, r0, #1
 8002302:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002304:	18c0      	adds	r0, r0, r3
 8002306:	6861      	ldr	r1, [r4, #4]
 8002308:	e00b      	b.n	8002322 <UART_SetConfig+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800230a:	f7ff fbd1 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 800230e:	e7f6      	b.n	80022fe <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002310:	2510      	movs	r5, #16
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	6861      	ldr	r1, [r4, #4]
 8002316:	4015      	ands	r5, r2
 8002318:	0848      	lsrs	r0, r1, #1
 800231a:	2d00      	cmp	r5, #0
 800231c:	d006      	beq.n	800232c <UART_SetConfig+0x138>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800231e:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <UART_SetConfig+0x21c>)
 8002320:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002322:	f7fd ff03 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002326:	2500      	movs	r5, #0
 8002328:	b283      	uxth	r3, r0
        break;
 800232a:	e004      	b.n	8002336 <UART_SetConfig+0x142>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <UART_SetConfig+0x220>)
 800232e:	18c0      	adds	r0, r0, r3
 8002330:	f7fd fefc 	bl	800012c <__udivsi3>
 8002334:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002336:	0019      	movs	r1, r3
 8002338:	4837      	ldr	r0, [pc, #220]	; (8002418 <UART_SetConfig+0x224>)
 800233a:	3910      	subs	r1, #16
 800233c:	4281      	cmp	r1, r0
 800233e:	d8a0      	bhi.n	8002282 <UART_SetConfig+0x8e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002340:	210f      	movs	r1, #15
 8002342:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002344:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002346:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002348:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800234a:	6821      	ldr	r1, [r4, #0]
 800234c:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 800234e:	60cb      	str	r3, [r1, #12]
 8002350:	e7a7      	b.n	80022a2 <UART_SetConfig+0xae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002352:	f7ff f853 	bl	80013fc <HAL_RCC_GetSysClockFreq>
 8002356:	e7d2      	b.n	80022fe <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	0858      	lsrs	r0, r3, #1
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	e7d0      	b.n	8002304 <UART_SetConfig+0x110>
        ret = HAL_ERROR;
 8002362:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002364:	2300      	movs	r3, #0
 8002366:	e7e6      	b.n	8002336 <UART_SetConfig+0x142>
    switch (clocksource)
 8002368:	2808      	cmp	r0, #8
 800236a:	d837      	bhi.n	80023dc <UART_SetConfig+0x1e8>
 800236c:	f7fd fed4 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002370:	360f0c05 	.word	0x360f0c05
 8002374:	3636362a 	.word	0x3636362a
 8002378:	2d          	.byte	0x2d
 8002379:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800237a:	f7ff fb89 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800237e:	6863      	ldr	r3, [r4, #4]
 8002380:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002382:	18c0      	adds	r0, r0, r3
 8002384:	6861      	ldr	r1, [r4, #4]
 8002386:	e00b      	b.n	80023a0 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002388:	f7ff fb92 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 800238c:	e7f7      	b.n	800237e <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800238e:	2510      	movs	r5, #16
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	6861      	ldr	r1, [r4, #4]
 8002394:	4015      	ands	r5, r2
 8002396:	0848      	lsrs	r0, r1, #1
 8002398:	2d00      	cmp	r5, #0
 800239a:	d00d      	beq.n	80023b8 <UART_SetConfig+0x1c4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <UART_SetConfig+0x228>)
 800239e:	18c0      	adds	r0, r0, r3
 80023a0:	f7fd fec4 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80023a4:	2500      	movs	r5, #0
 80023a6:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023a8:	0019      	movs	r1, r3
 80023aa:	481b      	ldr	r0, [pc, #108]	; (8002418 <UART_SetConfig+0x224>)
 80023ac:	3910      	subs	r1, #16
 80023ae:	4281      	cmp	r1, r0
 80023b0:	d900      	bls.n	80023b4 <UART_SetConfig+0x1c0>
 80023b2:	e766      	b.n	8002282 <UART_SetConfig+0x8e>
      huart->Instance->BRR = usartdiv;
 80023b4:	6821      	ldr	r1, [r4, #0]
 80023b6:	e7ca      	b.n	800234e <UART_SetConfig+0x15a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <UART_SetConfig+0x210>)
 80023ba:	18c0      	adds	r0, r0, r3
 80023bc:	f7fd feb6 	bl	800012c <__udivsi3>
 80023c0:	b283      	uxth	r3, r0
 80023c2:	e7f1      	b.n	80023a8 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023c4:	f7ff f81a 	bl	80013fc <HAL_RCC_GetSysClockFreq>
 80023c8:	e7d9      	b.n	800237e <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023ca:	6863      	ldr	r3, [r4, #4]
 80023cc:	0858      	lsrs	r0, r3, #1
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	e7d6      	b.n	8002382 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	4299      	cmp	r1, r3
 80023da:	d0c2      	beq.n	8002362 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 80023dc:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80023de:	2300      	movs	r3, #0
 80023e0:	e7e2      	b.n	80023a8 <UART_SetConfig+0x1b4>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	efff69f3 	.word	0xefff69f3
 80023e8:	ffffcfff 	.word	0xffffcfff
 80023ec:	40004800 	.word	0x40004800
 80023f0:	fffff4ff 	.word	0xfffff4ff
 80023f4:	40004400 	.word	0x40004400
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08003064 	.word	0x08003064
 8002400:	ff48e500 	.word	0xff48e500
 8002404:	00f42400 	.word	0x00f42400
 8002408:	fffffd00 	.word	0xfffffd00
 800240c:	000ffcff 	.word	0x000ffcff
 8002410:	007a1200 	.word	0x007a1200
 8002414:	01e84800 	.word	0x01e84800
 8002418:	0000ffef 	.word	0x0000ffef
 800241c:	003d0900 	.word	0x003d0900

08002420 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002420:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002422:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002424:	07da      	lsls	r2, r3, #31
 8002426:	d506      	bpl.n	8002436 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002428:	6801      	ldr	r1, [r0, #0]
 800242a:	4c28      	ldr	r4, [pc, #160]	; (80024cc <UART_AdvFeatureConfig+0xac>)
 800242c:	684a      	ldr	r2, [r1, #4]
 800242e:	4022      	ands	r2, r4
 8002430:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002432:	4322      	orrs	r2, r4
 8002434:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002436:	079a      	lsls	r2, r3, #30
 8002438:	d506      	bpl.n	8002448 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800243a:	6801      	ldr	r1, [r0, #0]
 800243c:	4c24      	ldr	r4, [pc, #144]	; (80024d0 <UART_AdvFeatureConfig+0xb0>)
 800243e:	684a      	ldr	r2, [r1, #4]
 8002440:	4022      	ands	r2, r4
 8002442:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002444:	4322      	orrs	r2, r4
 8002446:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002448:	075a      	lsls	r2, r3, #29
 800244a:	d506      	bpl.n	800245a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800244c:	6801      	ldr	r1, [r0, #0]
 800244e:	4c21      	ldr	r4, [pc, #132]	; (80024d4 <UART_AdvFeatureConfig+0xb4>)
 8002450:	684a      	ldr	r2, [r1, #4]
 8002452:	4022      	ands	r2, r4
 8002454:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002456:	4322      	orrs	r2, r4
 8002458:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800245a:	071a      	lsls	r2, r3, #28
 800245c:	d506      	bpl.n	800246c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800245e:	6801      	ldr	r1, [r0, #0]
 8002460:	4c1d      	ldr	r4, [pc, #116]	; (80024d8 <UART_AdvFeatureConfig+0xb8>)
 8002462:	684a      	ldr	r2, [r1, #4]
 8002464:	4022      	ands	r2, r4
 8002466:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002468:	4322      	orrs	r2, r4
 800246a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800246c:	06da      	lsls	r2, r3, #27
 800246e:	d506      	bpl.n	800247e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002470:	6801      	ldr	r1, [r0, #0]
 8002472:	4c1a      	ldr	r4, [pc, #104]	; (80024dc <UART_AdvFeatureConfig+0xbc>)
 8002474:	688a      	ldr	r2, [r1, #8]
 8002476:	4022      	ands	r2, r4
 8002478:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800247a:	4322      	orrs	r2, r4
 800247c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800247e:	069a      	lsls	r2, r3, #26
 8002480:	d506      	bpl.n	8002490 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002482:	6801      	ldr	r1, [r0, #0]
 8002484:	4c16      	ldr	r4, [pc, #88]	; (80024e0 <UART_AdvFeatureConfig+0xc0>)
 8002486:	688a      	ldr	r2, [r1, #8]
 8002488:	4022      	ands	r2, r4
 800248a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800248c:	4322      	orrs	r2, r4
 800248e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002490:	065a      	lsls	r2, r3, #25
 8002492:	d510      	bpl.n	80024b6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002494:	6801      	ldr	r1, [r0, #0]
 8002496:	4d13      	ldr	r5, [pc, #76]	; (80024e4 <UART_AdvFeatureConfig+0xc4>)
 8002498:	684a      	ldr	r2, [r1, #4]
 800249a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800249c:	402a      	ands	r2, r5
 800249e:	4322      	orrs	r2, r4
 80024a0:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	0352      	lsls	r2, r2, #13
 80024a6:	4294      	cmp	r4, r2
 80024a8:	d105      	bne.n	80024b6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024aa:	684a      	ldr	r2, [r1, #4]
 80024ac:	4c0e      	ldr	r4, [pc, #56]	; (80024e8 <UART_AdvFeatureConfig+0xc8>)
 80024ae:	4022      	ands	r2, r4
 80024b0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024b2:	4322      	orrs	r2, r4
 80024b4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	d506      	bpl.n	80024c8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024ba:	6802      	ldr	r2, [r0, #0]
 80024bc:	490b      	ldr	r1, [pc, #44]	; (80024ec <UART_AdvFeatureConfig+0xcc>)
 80024be:	6853      	ldr	r3, [r2, #4]
 80024c0:	400b      	ands	r3, r1
 80024c2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80024c4:	430b      	orrs	r3, r1
 80024c6:	6053      	str	r3, [r2, #4]
  }
}
 80024c8:	bd30      	pop	{r4, r5, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	fffdffff 	.word	0xfffdffff
 80024d0:	fffeffff 	.word	0xfffeffff
 80024d4:	fffbffff 	.word	0xfffbffff
 80024d8:	ffff7fff 	.word	0xffff7fff
 80024dc:	ffffefff 	.word	0xffffefff
 80024e0:	ffffdfff 	.word	0xffffdfff
 80024e4:	ffefffff 	.word	0xffefffff
 80024e8:	ff9fffff 	.word	0xff9fffff
 80024ec:	fff7ffff 	.word	0xfff7ffff

080024f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	0004      	movs	r4, r0
 80024f4:	000e      	movs	r6, r1
 80024f6:	0015      	movs	r5, r2
 80024f8:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024fa:	6822      	ldr	r2, [r4, #0]
 80024fc:	69d3      	ldr	r3, [r2, #28]
 80024fe:	4033      	ands	r3, r6
 8002500:	1b9b      	subs	r3, r3, r6
 8002502:	4259      	negs	r1, r3
 8002504:	414b      	adcs	r3, r1
 8002506:	42ab      	cmp	r3, r5
 8002508:	d001      	beq.n	800250e <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800250a:	2000      	movs	r0, #0
 800250c:	e01b      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800250e:	9b06      	ldr	r3, [sp, #24]
 8002510:	3301      	adds	r3, #1
 8002512:	d0f3      	beq.n	80024fc <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002514:	f7fe fbcc 	bl	8000cb0 <HAL_GetTick>
 8002518:	9b06      	ldr	r3, [sp, #24]
 800251a:	1bc0      	subs	r0, r0, r7
 800251c:	4298      	cmp	r0, r3
 800251e:	d801      	bhi.n	8002524 <UART_WaitOnFlagUntilTimeout+0x34>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ea      	bne.n	80024fa <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <UART_WaitOnFlagUntilTimeout+0x58>)
 8002528:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800252a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800252c:	400a      	ands	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	31a3      	adds	r1, #163	; 0xa3
 8002534:	31ff      	adds	r1, #255	; 0xff
 8002536:	438a      	bics	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800253a:	2320      	movs	r3, #32
 800253c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800253e:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002540:	2300      	movs	r3, #0
 8002542:	3470      	adds	r4, #112	; 0x70
 8002544:	7023      	strb	r3, [r4, #0]
}
 8002546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002548:	fffffe5f 	.word	0xfffffe5f

0800254c <HAL_UART_Transmit>:
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b087      	sub	sp, #28
 8002550:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002552:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002554:	0004      	movs	r4, r0
 8002556:	000d      	movs	r5, r1
 8002558:	0017      	movs	r7, r2
    return HAL_BUSY;
 800255a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800255c:	2b20      	cmp	r3, #32
 800255e:	d149      	bne.n	80025f4 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002560:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002562:	2900      	cmp	r1, #0
 8002564:	d046      	beq.n	80025f4 <HAL_UART_Transmit+0xa8>
 8002566:	2a00      	cmp	r2, #0
 8002568:	d044      	beq.n	80025f4 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	68a2      	ldr	r2, [r4, #8]
 800256e:	015b      	lsls	r3, r3, #5
 8002570:	429a      	cmp	r2, r3
 8002572:	d104      	bne.n	800257e <HAL_UART_Transmit+0x32>
 8002574:	6923      	ldr	r3, [r4, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 800257a:	4201      	tst	r1, r0
 800257c:	d13a      	bne.n	80025f4 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800257e:	0023      	movs	r3, r4
 8002580:	3370      	adds	r3, #112	; 0x70
 8002582:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002584:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002586:	2a01      	cmp	r2, #1
 8002588:	d034      	beq.n	80025f4 <HAL_UART_Transmit+0xa8>
 800258a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800258e:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002590:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002592:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002594:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002596:	f7fe fb8b 	bl	8000cb0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800259a:	0023      	movs	r3, r4
 800259c:	3350      	adds	r3, #80	; 0x50
 800259e:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80025a0:	3302      	adds	r3, #2
 80025a2:	9303      	str	r3, [sp, #12]
 80025a4:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80025aa:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	015b      	lsls	r3, r3, #5
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d104      	bne.n	80025bc <HAL_UART_Transmit+0x70>
 80025b2:	6923      	ldr	r3, [r4, #16]
 80025b4:	42b3      	cmp	r3, r6
 80025b6:	d101      	bne.n	80025bc <HAL_UART_Transmit+0x70>
 80025b8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80025ba:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80025bc:	0023      	movs	r3, r4
 80025be:	3352      	adds	r3, #82	; 0x52
 80025c0:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80025c4:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	d10a      	bne.n	80025e4 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ce:	2140      	movs	r1, #64	; 0x40
 80025d0:	0020      	movs	r0, r4
 80025d2:	f7ff ff8d 	bl	80024f0 <UART_WaitOnFlagUntilTimeout>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d10b      	bne.n	80025f2 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80025da:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80025dc:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80025de:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80025e0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80025e2:	e007      	b.n	80025f4 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025e4:	2200      	movs	r2, #0
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	0020      	movs	r0, r4
 80025ea:	f7ff ff81 	bl	80024f0 <UART_WaitOnFlagUntilTimeout>
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80025f2:	2003      	movs	r0, #3
}
 80025f4:	b007      	add	sp, #28
 80025f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80025fa:	2d00      	cmp	r5, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fe:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002600:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002602:	05db      	lsls	r3, r3, #23
 8002604:	0ddb      	lsrs	r3, r3, #23
 8002606:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002608:	9b03      	ldr	r3, [sp, #12]
 800260a:	9a03      	ldr	r2, [sp, #12]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	b29b      	uxth	r3, r3
 8002612:	8013      	strh	r3, [r2, #0]
 8002614:	e7d2      	b.n	80025bc <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002616:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002618:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800261a:	6293      	str	r3, [r2, #40]	; 0x28
 800261c:	e7f4      	b.n	8002608 <HAL_UART_Transmit+0xbc>
	...

08002620 <UART_CheckIdleState>:
{
 8002620:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	2600      	movs	r6, #0
{
 8002624:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002626:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002628:	f7fe fb42 	bl	8000cb0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800262c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800262e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	071b      	lsls	r3, r3, #28
 8002634:	d415      	bmi.n	8002662 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	075b      	lsls	r3, r3, #29
 800263c:	d50a      	bpl.n	8002654 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <UART_CheckIdleState+0x5c>)
 8002642:	2200      	movs	r2, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	03c9      	lsls	r1, r1, #15
 8002648:	002b      	movs	r3, r5
 800264a:	0020      	movs	r0, r4
 800264c:	f7ff ff50 	bl	80024f0 <UART_WaitOnFlagUntilTimeout>
 8002650:	2800      	cmp	r0, #0
 8002652:	d111      	bne.n	8002678 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002654:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002656:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002658:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800265a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800265c:	3470      	adds	r4, #112	; 0x70
 800265e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002660:	e00b      	b.n	800267a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <UART_CheckIdleState+0x5c>)
 8002666:	0032      	movs	r2, r6
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	0389      	lsls	r1, r1, #14
 800266c:	0003      	movs	r3, r0
 800266e:	0020      	movs	r0, r4
 8002670:	f7ff ff3e 	bl	80024f0 <UART_WaitOnFlagUntilTimeout>
 8002674:	2800      	cmp	r0, #0
 8002676:	d0de      	beq.n	8002636 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002678:	2003      	movs	r0, #3
}
 800267a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800267c:	01ffffff 	.word	0x01ffffff

08002680 <HAL_UART_Init>:
{
 8002680:	b510      	push	{r4, lr}
 8002682:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002684:	d101      	bne.n	800268a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002686:	2001      	movs	r0, #1
}
 8002688:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800268a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002690:	0002      	movs	r2, r0
 8002692:	3270      	adds	r2, #112	; 0x70
 8002694:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002696:	f7fe f9d1 	bl	8000a3c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800269a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800269c:	2101      	movs	r1, #1
 800269e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026a0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80026a2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026a4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80026a6:	438b      	bics	r3, r1
 80026a8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026aa:	f7ff fda3 	bl	80021f4 <UART_SetConfig>
 80026ae:	2801      	cmp	r0, #1
 80026b0:	d0e9      	beq.n	8002686 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80026b8:	0020      	movs	r0, r4
 80026ba:	f7ff feb1 	bl	8002420 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <HAL_UART_Init+0x60>)
 80026c2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80026c4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	438a      	bics	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026d2:	2201      	movs	r2, #1
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80026da:	f7ff ffa1 	bl	8002620 <UART_CheckIdleState>
 80026de:	e7d3      	b.n	8002688 <HAL_UART_Init+0x8>
 80026e0:	ffffb7ff 	.word	0xffffb7ff

080026e4 <__errno>:
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <__errno+0x8>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	4770      	bx	lr
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000010 	.word	0x20000010

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2600      	movs	r6, #0
 80026f4:	4d0c      	ldr	r5, [pc, #48]	; (8002728 <__libc_init_array+0x38>)
 80026f6:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f8:	1b64      	subs	r4, r4, r5
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	42a6      	cmp	r6, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	2600      	movs	r6, #0
 8002702:	f000 fc7f 	bl	8003004 <_init>
 8002706:	4d0a      	ldr	r5, [pc, #40]	; (8002730 <__libc_init_array+0x40>)
 8002708:	4c0a      	ldr	r4, [pc, #40]	; (8002734 <__libc_init_array+0x44>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	42a6      	cmp	r6, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	00b3      	lsls	r3, r6, #2
 8002716:	58eb      	ldr	r3, [r5, r3]
 8002718:	4798      	blx	r3
 800271a:	3601      	adds	r6, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	00b3      	lsls	r3, r6, #2
 8002720:	58eb      	ldr	r3, [r5, r3]
 8002722:	4798      	blx	r3
 8002724:	3601      	adds	r6, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	080030d4 	.word	0x080030d4
 800272c:	080030d4 	.word	0x080030d4
 8002730:	080030d4 	.word	0x080030d4
 8002734:	080030d8 	.word	0x080030d8

08002738 <__itoa>:
 8002738:	1e93      	subs	r3, r2, #2
 800273a:	b510      	push	{r4, lr}
 800273c:	000c      	movs	r4, r1
 800273e:	2b22      	cmp	r3, #34	; 0x22
 8002740:	d904      	bls.n	800274c <__itoa+0x14>
 8002742:	2300      	movs	r3, #0
 8002744:	001c      	movs	r4, r3
 8002746:	700b      	strb	r3, [r1, #0]
 8002748:	0020      	movs	r0, r4
 800274a:	bd10      	pop	{r4, pc}
 800274c:	2a0a      	cmp	r2, #10
 800274e:	d109      	bne.n	8002764 <__itoa+0x2c>
 8002750:	2800      	cmp	r0, #0
 8002752:	da07      	bge.n	8002764 <__itoa+0x2c>
 8002754:	232d      	movs	r3, #45	; 0x2d
 8002756:	700b      	strb	r3, [r1, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	4240      	negs	r0, r0
 800275c:	1861      	adds	r1, r4, r1
 800275e:	f000 f837 	bl	80027d0 <__utoa>
 8002762:	e7f1      	b.n	8002748 <__itoa+0x10>
 8002764:	2100      	movs	r1, #0
 8002766:	e7f9      	b.n	800275c <__itoa+0x24>

08002768 <itoa>:
 8002768:	b510      	push	{r4, lr}
 800276a:	f7ff ffe5 	bl	8002738 <__itoa>
 800276e:	bd10      	pop	{r4, pc}

08002770 <memset>:
 8002770:	0003      	movs	r3, r0
 8002772:	1812      	adds	r2, r2, r0
 8002774:	4293      	cmp	r3, r2
 8002776:	d100      	bne.n	800277a <memset+0xa>
 8002778:	4770      	bx	lr
 800277a:	7019      	strb	r1, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	e7f9      	b.n	8002774 <memset+0x4>

08002780 <siprintf>:
 8002780:	b40e      	push	{r1, r2, r3}
 8002782:	b500      	push	{lr}
 8002784:	490b      	ldr	r1, [pc, #44]	; (80027b4 <siprintf+0x34>)
 8002786:	b09c      	sub	sp, #112	; 0x70
 8002788:	ab1d      	add	r3, sp, #116	; 0x74
 800278a:	9002      	str	r0, [sp, #8]
 800278c:	9006      	str	r0, [sp, #24]
 800278e:	9107      	str	r1, [sp, #28]
 8002790:	9104      	str	r1, [sp, #16]
 8002792:	4809      	ldr	r0, [pc, #36]	; (80027b8 <siprintf+0x38>)
 8002794:	4909      	ldr	r1, [pc, #36]	; (80027bc <siprintf+0x3c>)
 8002796:	cb04      	ldmia	r3!, {r2}
 8002798:	9105      	str	r1, [sp, #20]
 800279a:	6800      	ldr	r0, [r0, #0]
 800279c:	a902      	add	r1, sp, #8
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	f000 f8b4 	bl	800290c <_svfiprintf_r>
 80027a4:	2300      	movs	r3, #0
 80027a6:	9a02      	ldr	r2, [sp, #8]
 80027a8:	7013      	strb	r3, [r2, #0]
 80027aa:	b01c      	add	sp, #112	; 0x70
 80027ac:	bc08      	pop	{r3}
 80027ae:	b003      	add	sp, #12
 80027b0:	4718      	bx	r3
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	7fffffff 	.word	0x7fffffff
 80027b8:	20000010 	.word	0x20000010
 80027bc:	ffff0208 	.word	0xffff0208

080027c0 <strcpy>:
 80027c0:	0003      	movs	r3, r0
 80027c2:	780a      	ldrb	r2, [r1, #0]
 80027c4:	3101      	adds	r1, #1
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	d1f9      	bne.n	80027c2 <strcpy+0x2>
 80027ce:	4770      	bx	lr

080027d0 <__utoa>:
 80027d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d2:	0017      	movs	r7, r2
 80027d4:	b08d      	sub	sp, #52	; 0x34
 80027d6:	2225      	movs	r2, #37	; 0x25
 80027d8:	0006      	movs	r6, r0
 80027da:	000d      	movs	r5, r1
 80027dc:	a802      	add	r0, sp, #8
 80027de:	4914      	ldr	r1, [pc, #80]	; (8002830 <__utoa+0x60>)
 80027e0:	f000 f828 	bl	8002834 <memcpy>
 80027e4:	aa02      	add	r2, sp, #8
 80027e6:	1ebb      	subs	r3, r7, #2
 80027e8:	2400      	movs	r4, #0
 80027ea:	9201      	str	r2, [sp, #4]
 80027ec:	2b22      	cmp	r3, #34	; 0x22
 80027ee:	d905      	bls.n	80027fc <__utoa+0x2c>
 80027f0:	702c      	strb	r4, [r5, #0]
 80027f2:	0025      	movs	r5, r4
 80027f4:	0028      	movs	r0, r5
 80027f6:	b00d      	add	sp, #52	; 0x34
 80027f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fa:	0014      	movs	r4, r2
 80027fc:	0030      	movs	r0, r6
 80027fe:	0039      	movs	r1, r7
 8002800:	f7fd fd1a 	bl	8000238 <__aeabi_uidivmod>
 8002804:	4684      	mov	ip, r0
 8002806:	9801      	ldr	r0, [sp, #4]
 8002808:	1c62      	adds	r2, r4, #1
 800280a:	18ab      	adds	r3, r5, r2
 800280c:	5c41      	ldrb	r1, [r0, r1]
 800280e:	1e5e      	subs	r6, r3, #1
 8002810:	7031      	strb	r1, [r6, #0]
 8002812:	4666      	mov	r6, ip
 8002814:	2e00      	cmp	r6, #0
 8002816:	d1f0      	bne.n	80027fa <__utoa+0x2a>
 8002818:	701e      	strb	r6, [r3, #0]
 800281a:	002b      	movs	r3, r5
 800281c:	1b5a      	subs	r2, r3, r5
 800281e:	4294      	cmp	r4, r2
 8002820:	dde8      	ble.n	80027f4 <__utoa+0x24>
 8002822:	781a      	ldrb	r2, [r3, #0]
 8002824:	5d29      	ldrb	r1, [r5, r4]
 8002826:	7019      	strb	r1, [r3, #0]
 8002828:	552a      	strb	r2, [r5, r4]
 800282a:	3301      	adds	r3, #1
 800282c:	3c01      	subs	r4, #1
 800282e:	e7f5      	b.n	800281c <__utoa+0x4c>
 8002830:	08003071 	.word	0x08003071

08002834 <memcpy>:
 8002834:	2300      	movs	r3, #0
 8002836:	b510      	push	{r4, lr}
 8002838:	429a      	cmp	r2, r3
 800283a:	d100      	bne.n	800283e <memcpy+0xa>
 800283c:	bd10      	pop	{r4, pc}
 800283e:	5ccc      	ldrb	r4, [r1, r3]
 8002840:	54c4      	strb	r4, [r0, r3]
 8002842:	3301      	adds	r3, #1
 8002844:	e7f8      	b.n	8002838 <memcpy+0x4>
	...

08002848 <__ssputs_r>:
 8002848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284a:	688e      	ldr	r6, [r1, #8]
 800284c:	b085      	sub	sp, #20
 800284e:	0007      	movs	r7, r0
 8002850:	000c      	movs	r4, r1
 8002852:	9203      	str	r2, [sp, #12]
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	429e      	cmp	r6, r3
 8002858:	d83c      	bhi.n	80028d4 <__ssputs_r+0x8c>
 800285a:	2390      	movs	r3, #144	; 0x90
 800285c:	898a      	ldrh	r2, [r1, #12]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	421a      	tst	r2, r3
 8002862:	d034      	beq.n	80028ce <__ssputs_r+0x86>
 8002864:	2503      	movs	r5, #3
 8002866:	6909      	ldr	r1, [r1, #16]
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	1a5b      	subs	r3, r3, r1
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	6963      	ldr	r3, [r4, #20]
 8002870:	9802      	ldr	r0, [sp, #8]
 8002872:	435d      	muls	r5, r3
 8002874:	0feb      	lsrs	r3, r5, #31
 8002876:	195d      	adds	r5, r3, r5
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	106d      	asrs	r5, r5, #1
 800287c:	3301      	adds	r3, #1
 800287e:	181b      	adds	r3, r3, r0
 8002880:	42ab      	cmp	r3, r5
 8002882:	d900      	bls.n	8002886 <__ssputs_r+0x3e>
 8002884:	001d      	movs	r5, r3
 8002886:	0553      	lsls	r3, r2, #21
 8002888:	d532      	bpl.n	80028f0 <__ssputs_r+0xa8>
 800288a:	0029      	movs	r1, r5
 800288c:	0038      	movs	r0, r7
 800288e:	f000 fb19 	bl	8002ec4 <_malloc_r>
 8002892:	1e06      	subs	r6, r0, #0
 8002894:	d109      	bne.n	80028aa <__ssputs_r+0x62>
 8002896:	230c      	movs	r3, #12
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	2340      	movs	r3, #64	; 0x40
 800289c:	2001      	movs	r0, #1
 800289e:	89a2      	ldrh	r2, [r4, #12]
 80028a0:	4240      	negs	r0, r0
 80028a2:	4313      	orrs	r3, r2
 80028a4:	81a3      	strh	r3, [r4, #12]
 80028a6:	b005      	add	sp, #20
 80028a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028aa:	9a02      	ldr	r2, [sp, #8]
 80028ac:	6921      	ldr	r1, [r4, #16]
 80028ae:	f7ff ffc1 	bl	8002834 <memcpy>
 80028b2:	89a3      	ldrh	r3, [r4, #12]
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <__ssputs_r+0xc0>)
 80028b6:	401a      	ands	r2, r3
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	4313      	orrs	r3, r2
 80028bc:	81a3      	strh	r3, [r4, #12]
 80028be:	9b02      	ldr	r3, [sp, #8]
 80028c0:	6126      	str	r6, [r4, #16]
 80028c2:	18f6      	adds	r6, r6, r3
 80028c4:	6026      	str	r6, [r4, #0]
 80028c6:	6165      	str	r5, [r4, #20]
 80028c8:	9e01      	ldr	r6, [sp, #4]
 80028ca:	1aed      	subs	r5, r5, r3
 80028cc:	60a5      	str	r5, [r4, #8]
 80028ce:	9b01      	ldr	r3, [sp, #4]
 80028d0:	429e      	cmp	r6, r3
 80028d2:	d900      	bls.n	80028d6 <__ssputs_r+0x8e>
 80028d4:	9e01      	ldr	r6, [sp, #4]
 80028d6:	0032      	movs	r2, r6
 80028d8:	9903      	ldr	r1, [sp, #12]
 80028da:	6820      	ldr	r0, [r4, #0]
 80028dc:	f000 fa95 	bl	8002e0a <memmove>
 80028e0:	68a3      	ldr	r3, [r4, #8]
 80028e2:	2000      	movs	r0, #0
 80028e4:	1b9b      	subs	r3, r3, r6
 80028e6:	60a3      	str	r3, [r4, #8]
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	199e      	adds	r6, r3, r6
 80028ec:	6026      	str	r6, [r4, #0]
 80028ee:	e7da      	b.n	80028a6 <__ssputs_r+0x5e>
 80028f0:	002a      	movs	r2, r5
 80028f2:	0038      	movs	r0, r7
 80028f4:	f000 fb44 	bl	8002f80 <_realloc_r>
 80028f8:	1e06      	subs	r6, r0, #0
 80028fa:	d1e0      	bne.n	80028be <__ssputs_r+0x76>
 80028fc:	6921      	ldr	r1, [r4, #16]
 80028fe:	0038      	movs	r0, r7
 8002900:	f000 fa96 	bl	8002e30 <_free_r>
 8002904:	e7c7      	b.n	8002896 <__ssputs_r+0x4e>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	fffffb7f 	.word	0xfffffb7f

0800290c <_svfiprintf_r>:
 800290c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290e:	b0a1      	sub	sp, #132	; 0x84
 8002910:	9003      	str	r0, [sp, #12]
 8002912:	001d      	movs	r5, r3
 8002914:	898b      	ldrh	r3, [r1, #12]
 8002916:	000f      	movs	r7, r1
 8002918:	0016      	movs	r6, r2
 800291a:	061b      	lsls	r3, r3, #24
 800291c:	d511      	bpl.n	8002942 <_svfiprintf_r+0x36>
 800291e:	690b      	ldr	r3, [r1, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10e      	bne.n	8002942 <_svfiprintf_r+0x36>
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	f000 facd 	bl	8002ec4 <_malloc_r>
 800292a:	6038      	str	r0, [r7, #0]
 800292c:	6138      	str	r0, [r7, #16]
 800292e:	2800      	cmp	r0, #0
 8002930:	d105      	bne.n	800293e <_svfiprintf_r+0x32>
 8002932:	230c      	movs	r3, #12
 8002934:	9a03      	ldr	r2, [sp, #12]
 8002936:	3801      	subs	r0, #1
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	b021      	add	sp, #132	; 0x84
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	2300      	movs	r3, #0
 8002944:	ac08      	add	r4, sp, #32
 8002946:	6163      	str	r3, [r4, #20]
 8002948:	3320      	adds	r3, #32
 800294a:	7663      	strb	r3, [r4, #25]
 800294c:	3310      	adds	r3, #16
 800294e:	76a3      	strb	r3, [r4, #26]
 8002950:	9507      	str	r5, [sp, #28]
 8002952:	0035      	movs	r5, r6
 8002954:	782b      	ldrb	r3, [r5, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <_svfiprintf_r+0x52>
 800295a:	2b25      	cmp	r3, #37	; 0x25
 800295c:	d146      	bne.n	80029ec <_svfiprintf_r+0xe0>
 800295e:	1bab      	subs	r3, r5, r6
 8002960:	9305      	str	r3, [sp, #20]
 8002962:	d00c      	beq.n	800297e <_svfiprintf_r+0x72>
 8002964:	0032      	movs	r2, r6
 8002966:	0039      	movs	r1, r7
 8002968:	9803      	ldr	r0, [sp, #12]
 800296a:	f7ff ff6d 	bl	8002848 <__ssputs_r>
 800296e:	1c43      	adds	r3, r0, #1
 8002970:	d100      	bne.n	8002974 <_svfiprintf_r+0x68>
 8002972:	e0ae      	b.n	8002ad2 <_svfiprintf_r+0x1c6>
 8002974:	6962      	ldr	r2, [r4, #20]
 8002976:	9b05      	ldr	r3, [sp, #20]
 8002978:	4694      	mov	ip, r2
 800297a:	4463      	add	r3, ip
 800297c:	6163      	str	r3, [r4, #20]
 800297e:	782b      	ldrb	r3, [r5, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d100      	bne.n	8002986 <_svfiprintf_r+0x7a>
 8002984:	e0a5      	b.n	8002ad2 <_svfiprintf_r+0x1c6>
 8002986:	2201      	movs	r2, #1
 8002988:	2300      	movs	r3, #0
 800298a:	4252      	negs	r2, r2
 800298c:	6062      	str	r2, [r4, #4]
 800298e:	a904      	add	r1, sp, #16
 8002990:	3254      	adds	r2, #84	; 0x54
 8002992:	1852      	adds	r2, r2, r1
 8002994:	1c6e      	adds	r6, r5, #1
 8002996:	6023      	str	r3, [r4, #0]
 8002998:	60e3      	str	r3, [r4, #12]
 800299a:	60a3      	str	r3, [r4, #8]
 800299c:	7013      	strb	r3, [r2, #0]
 800299e:	65a3      	str	r3, [r4, #88]	; 0x58
 80029a0:	7831      	ldrb	r1, [r6, #0]
 80029a2:	2205      	movs	r2, #5
 80029a4:	4853      	ldr	r0, [pc, #332]	; (8002af4 <_svfiprintf_r+0x1e8>)
 80029a6:	f000 fa25 	bl	8002df4 <memchr>
 80029aa:	1c75      	adds	r5, r6, #1
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d11f      	bne.n	80029f0 <_svfiprintf_r+0xe4>
 80029b0:	6822      	ldr	r2, [r4, #0]
 80029b2:	06d3      	lsls	r3, r2, #27
 80029b4:	d504      	bpl.n	80029c0 <_svfiprintf_r+0xb4>
 80029b6:	2353      	movs	r3, #83	; 0x53
 80029b8:	a904      	add	r1, sp, #16
 80029ba:	185b      	adds	r3, r3, r1
 80029bc:	2120      	movs	r1, #32
 80029be:	7019      	strb	r1, [r3, #0]
 80029c0:	0713      	lsls	r3, r2, #28
 80029c2:	d504      	bpl.n	80029ce <_svfiprintf_r+0xc2>
 80029c4:	2353      	movs	r3, #83	; 0x53
 80029c6:	a904      	add	r1, sp, #16
 80029c8:	185b      	adds	r3, r3, r1
 80029ca:	212b      	movs	r1, #43	; 0x2b
 80029cc:	7019      	strb	r1, [r3, #0]
 80029ce:	7833      	ldrb	r3, [r6, #0]
 80029d0:	2b2a      	cmp	r3, #42	; 0x2a
 80029d2:	d016      	beq.n	8002a02 <_svfiprintf_r+0xf6>
 80029d4:	0035      	movs	r5, r6
 80029d6:	2100      	movs	r1, #0
 80029d8:	200a      	movs	r0, #10
 80029da:	68e3      	ldr	r3, [r4, #12]
 80029dc:	782a      	ldrb	r2, [r5, #0]
 80029de:	1c6e      	adds	r6, r5, #1
 80029e0:	3a30      	subs	r2, #48	; 0x30
 80029e2:	2a09      	cmp	r2, #9
 80029e4:	d94e      	bls.n	8002a84 <_svfiprintf_r+0x178>
 80029e6:	2900      	cmp	r1, #0
 80029e8:	d018      	beq.n	8002a1c <_svfiprintf_r+0x110>
 80029ea:	e010      	b.n	8002a0e <_svfiprintf_r+0x102>
 80029ec:	3501      	adds	r5, #1
 80029ee:	e7b1      	b.n	8002954 <_svfiprintf_r+0x48>
 80029f0:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <_svfiprintf_r+0x1e8>)
 80029f2:	6822      	ldr	r2, [r4, #0]
 80029f4:	1ac0      	subs	r0, r0, r3
 80029f6:	2301      	movs	r3, #1
 80029f8:	4083      	lsls	r3, r0
 80029fa:	4313      	orrs	r3, r2
 80029fc:	6023      	str	r3, [r4, #0]
 80029fe:	002e      	movs	r6, r5
 8002a00:	e7ce      	b.n	80029a0 <_svfiprintf_r+0x94>
 8002a02:	9b07      	ldr	r3, [sp, #28]
 8002a04:	1d19      	adds	r1, r3, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	9107      	str	r1, [sp, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db01      	blt.n	8002a12 <_svfiprintf_r+0x106>
 8002a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a10:	e004      	b.n	8002a1c <_svfiprintf_r+0x110>
 8002a12:	425b      	negs	r3, r3
 8002a14:	60e3      	str	r3, [r4, #12]
 8002a16:	2302      	movs	r3, #2
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	6023      	str	r3, [r4, #0]
 8002a1c:	782b      	ldrb	r3, [r5, #0]
 8002a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a20:	d10a      	bne.n	8002a38 <_svfiprintf_r+0x12c>
 8002a22:	786b      	ldrb	r3, [r5, #1]
 8002a24:	2b2a      	cmp	r3, #42	; 0x2a
 8002a26:	d135      	bne.n	8002a94 <_svfiprintf_r+0x188>
 8002a28:	9b07      	ldr	r3, [sp, #28]
 8002a2a:	3502      	adds	r5, #2
 8002a2c:	1d1a      	adds	r2, r3, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	9207      	str	r2, [sp, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	db2b      	blt.n	8002a8e <_svfiprintf_r+0x182>
 8002a36:	9309      	str	r3, [sp, #36]	; 0x24
 8002a38:	4e2f      	ldr	r6, [pc, #188]	; (8002af8 <_svfiprintf_r+0x1ec>)
 8002a3a:	7829      	ldrb	r1, [r5, #0]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	0030      	movs	r0, r6
 8002a40:	f000 f9d8 	bl	8002df4 <memchr>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d006      	beq.n	8002a56 <_svfiprintf_r+0x14a>
 8002a48:	2340      	movs	r3, #64	; 0x40
 8002a4a:	1b80      	subs	r0, r0, r6
 8002a4c:	4083      	lsls	r3, r0
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	3501      	adds	r5, #1
 8002a52:	4313      	orrs	r3, r2
 8002a54:	6023      	str	r3, [r4, #0]
 8002a56:	7829      	ldrb	r1, [r5, #0]
 8002a58:	2206      	movs	r2, #6
 8002a5a:	4828      	ldr	r0, [pc, #160]	; (8002afc <_svfiprintf_r+0x1f0>)
 8002a5c:	1c6e      	adds	r6, r5, #1
 8002a5e:	7621      	strb	r1, [r4, #24]
 8002a60:	f000 f9c8 	bl	8002df4 <memchr>
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d03c      	beq.n	8002ae2 <_svfiprintf_r+0x1d6>
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <_svfiprintf_r+0x1f4>)
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d125      	bne.n	8002aba <_svfiprintf_r+0x1ae>
 8002a6e:	2207      	movs	r2, #7
 8002a70:	9b07      	ldr	r3, [sp, #28]
 8002a72:	3307      	adds	r3, #7
 8002a74:	4393      	bics	r3, r2
 8002a76:	3308      	adds	r3, #8
 8002a78:	9307      	str	r3, [sp, #28]
 8002a7a:	6963      	ldr	r3, [r4, #20]
 8002a7c:	9a04      	ldr	r2, [sp, #16]
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	6163      	str	r3, [r4, #20]
 8002a82:	e766      	b.n	8002952 <_svfiprintf_r+0x46>
 8002a84:	4343      	muls	r3, r0
 8002a86:	2101      	movs	r1, #1
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	0035      	movs	r5, r6
 8002a8c:	e7a6      	b.n	80029dc <_svfiprintf_r+0xd0>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	425b      	negs	r3, r3
 8002a92:	e7d0      	b.n	8002a36 <_svfiprintf_r+0x12a>
 8002a94:	2300      	movs	r3, #0
 8002a96:	200a      	movs	r0, #10
 8002a98:	001a      	movs	r2, r3
 8002a9a:	3501      	adds	r5, #1
 8002a9c:	6063      	str	r3, [r4, #4]
 8002a9e:	7829      	ldrb	r1, [r5, #0]
 8002aa0:	1c6e      	adds	r6, r5, #1
 8002aa2:	3930      	subs	r1, #48	; 0x30
 8002aa4:	2909      	cmp	r1, #9
 8002aa6:	d903      	bls.n	8002ab0 <_svfiprintf_r+0x1a4>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0c5      	beq.n	8002a38 <_svfiprintf_r+0x12c>
 8002aac:	9209      	str	r2, [sp, #36]	; 0x24
 8002aae:	e7c3      	b.n	8002a38 <_svfiprintf_r+0x12c>
 8002ab0:	4342      	muls	r2, r0
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	1852      	adds	r2, r2, r1
 8002ab6:	0035      	movs	r5, r6
 8002ab8:	e7f1      	b.n	8002a9e <_svfiprintf_r+0x192>
 8002aba:	ab07      	add	r3, sp, #28
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	003a      	movs	r2, r7
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <_svfiprintf_r+0x1f8>)
 8002ac2:	0021      	movs	r1, r4
 8002ac4:	9803      	ldr	r0, [sp, #12]
 8002ac6:	e000      	b.n	8002aca <_svfiprintf_r+0x1be>
 8002ac8:	bf00      	nop
 8002aca:	9004      	str	r0, [sp, #16]
 8002acc:	9b04      	ldr	r3, [sp, #16]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	d1d3      	bne.n	8002a7a <_svfiprintf_r+0x16e>
 8002ad2:	89bb      	ldrh	r3, [r7, #12]
 8002ad4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ad6:	065b      	lsls	r3, r3, #25
 8002ad8:	d400      	bmi.n	8002adc <_svfiprintf_r+0x1d0>
 8002ada:	e72e      	b.n	800293a <_svfiprintf_r+0x2e>
 8002adc:	2001      	movs	r0, #1
 8002ade:	4240      	negs	r0, r0
 8002ae0:	e72b      	b.n	800293a <_svfiprintf_r+0x2e>
 8002ae2:	ab07      	add	r3, sp, #28
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	003a      	movs	r2, r7
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <_svfiprintf_r+0x1f8>)
 8002aea:	0021      	movs	r1, r4
 8002aec:	9803      	ldr	r0, [sp, #12]
 8002aee:	f000 f879 	bl	8002be4 <_printf_i>
 8002af2:	e7ea      	b.n	8002aca <_svfiprintf_r+0x1be>
 8002af4:	08003096 	.word	0x08003096
 8002af8:	0800309c 	.word	0x0800309c
 8002afc:	080030a0 	.word	0x080030a0
 8002b00:	00000000 	.word	0x00000000
 8002b04:	08002849 	.word	0x08002849

08002b08 <_printf_common>:
 8002b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b0a:	0015      	movs	r5, r2
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	688a      	ldr	r2, [r1, #8]
 8002b10:	690b      	ldr	r3, [r1, #16]
 8002b12:	9000      	str	r0, [sp, #0]
 8002b14:	000c      	movs	r4, r1
 8002b16:	4293      	cmp	r3, r2
 8002b18:	da00      	bge.n	8002b1c <_printf_common+0x14>
 8002b1a:	0013      	movs	r3, r2
 8002b1c:	0022      	movs	r2, r4
 8002b1e:	602b      	str	r3, [r5, #0]
 8002b20:	3243      	adds	r2, #67	; 0x43
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d001      	beq.n	8002b2c <_printf_common+0x24>
 8002b28:	3301      	adds	r3, #1
 8002b2a:	602b      	str	r3, [r5, #0]
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	069b      	lsls	r3, r3, #26
 8002b30:	d502      	bpl.n	8002b38 <_printf_common+0x30>
 8002b32:	682b      	ldr	r3, [r5, #0]
 8002b34:	3302      	adds	r3, #2
 8002b36:	602b      	str	r3, [r5, #0]
 8002b38:	2706      	movs	r7, #6
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	401f      	ands	r7, r3
 8002b3e:	d027      	beq.n	8002b90 <_printf_common+0x88>
 8002b40:	0023      	movs	r3, r4
 8002b42:	3343      	adds	r3, #67	; 0x43
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	1e5a      	subs	r2, r3, #1
 8002b48:	4193      	sbcs	r3, r2
 8002b4a:	6822      	ldr	r2, [r4, #0]
 8002b4c:	0692      	lsls	r2, r2, #26
 8002b4e:	d430      	bmi.n	8002bb2 <_printf_common+0xaa>
 8002b50:	0022      	movs	r2, r4
 8002b52:	9901      	ldr	r1, [sp, #4]
 8002b54:	3243      	adds	r2, #67	; 0x43
 8002b56:	9800      	ldr	r0, [sp, #0]
 8002b58:	9e08      	ldr	r6, [sp, #32]
 8002b5a:	47b0      	blx	r6
 8002b5c:	1c43      	adds	r3, r0, #1
 8002b5e:	d025      	beq.n	8002bac <_printf_common+0xa4>
 8002b60:	2306      	movs	r3, #6
 8002b62:	6820      	ldr	r0, [r4, #0]
 8002b64:	682a      	ldr	r2, [r5, #0]
 8002b66:	68e1      	ldr	r1, [r4, #12]
 8002b68:	4003      	ands	r3, r0
 8002b6a:	2500      	movs	r5, #0
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d103      	bne.n	8002b78 <_printf_common+0x70>
 8002b70:	1a8d      	subs	r5, r1, r2
 8002b72:	43eb      	mvns	r3, r5
 8002b74:	17db      	asrs	r3, r3, #31
 8002b76:	401d      	ands	r5, r3
 8002b78:	68a3      	ldr	r3, [r4, #8]
 8002b7a:	6922      	ldr	r2, [r4, #16]
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	dd01      	ble.n	8002b84 <_printf_common+0x7c>
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	18ed      	adds	r5, r5, r3
 8002b84:	2700      	movs	r7, #0
 8002b86:	42bd      	cmp	r5, r7
 8002b88:	d120      	bne.n	8002bcc <_printf_common+0xc4>
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	e010      	b.n	8002bb0 <_printf_common+0xa8>
 8002b8e:	3701      	adds	r7, #1
 8002b90:	68e3      	ldr	r3, [r4, #12]
 8002b92:	682a      	ldr	r2, [r5, #0]
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	42bb      	cmp	r3, r7
 8002b98:	ddd2      	ble.n	8002b40 <_printf_common+0x38>
 8002b9a:	0022      	movs	r2, r4
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	3219      	adds	r2, #25
 8002ba0:	9901      	ldr	r1, [sp, #4]
 8002ba2:	9800      	ldr	r0, [sp, #0]
 8002ba4:	9e08      	ldr	r6, [sp, #32]
 8002ba6:	47b0      	blx	r6
 8002ba8:	1c43      	adds	r3, r0, #1
 8002baa:	d1f0      	bne.n	8002b8e <_printf_common+0x86>
 8002bac:	2001      	movs	r0, #1
 8002bae:	4240      	negs	r0, r0
 8002bb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bb2:	2030      	movs	r0, #48	; 0x30
 8002bb4:	18e1      	adds	r1, r4, r3
 8002bb6:	3143      	adds	r1, #67	; 0x43
 8002bb8:	7008      	strb	r0, [r1, #0]
 8002bba:	0021      	movs	r1, r4
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	3145      	adds	r1, #69	; 0x45
 8002bc0:	7809      	ldrb	r1, [r1, #0]
 8002bc2:	18a2      	adds	r2, r4, r2
 8002bc4:	3243      	adds	r2, #67	; 0x43
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	7011      	strb	r1, [r2, #0]
 8002bca:	e7c1      	b.n	8002b50 <_printf_common+0x48>
 8002bcc:	0022      	movs	r2, r4
 8002bce:	2301      	movs	r3, #1
 8002bd0:	321a      	adds	r2, #26
 8002bd2:	9901      	ldr	r1, [sp, #4]
 8002bd4:	9800      	ldr	r0, [sp, #0]
 8002bd6:	9e08      	ldr	r6, [sp, #32]
 8002bd8:	47b0      	blx	r6
 8002bda:	1c43      	adds	r3, r0, #1
 8002bdc:	d0e6      	beq.n	8002bac <_printf_common+0xa4>
 8002bde:	3701      	adds	r7, #1
 8002be0:	e7d1      	b.n	8002b86 <_printf_common+0x7e>
	...

08002be4 <_printf_i>:
 8002be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	9204      	str	r2, [sp, #16]
 8002bea:	000a      	movs	r2, r1
 8002bec:	3243      	adds	r2, #67	; 0x43
 8002bee:	9305      	str	r3, [sp, #20]
 8002bf0:	9003      	str	r0, [sp, #12]
 8002bf2:	9202      	str	r2, [sp, #8]
 8002bf4:	7e0a      	ldrb	r2, [r1, #24]
 8002bf6:	000c      	movs	r4, r1
 8002bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bfa:	2a6e      	cmp	r2, #110	; 0x6e
 8002bfc:	d100      	bne.n	8002c00 <_printf_i+0x1c>
 8002bfe:	e086      	b.n	8002d0e <_printf_i+0x12a>
 8002c00:	d81f      	bhi.n	8002c42 <_printf_i+0x5e>
 8002c02:	2a63      	cmp	r2, #99	; 0x63
 8002c04:	d033      	beq.n	8002c6e <_printf_i+0x8a>
 8002c06:	d808      	bhi.n	8002c1a <_printf_i+0x36>
 8002c08:	2a00      	cmp	r2, #0
 8002c0a:	d100      	bne.n	8002c0e <_printf_i+0x2a>
 8002c0c:	e08c      	b.n	8002d28 <_printf_i+0x144>
 8002c0e:	2a58      	cmp	r2, #88	; 0x58
 8002c10:	d04d      	beq.n	8002cae <_printf_i+0xca>
 8002c12:	0025      	movs	r5, r4
 8002c14:	3542      	adds	r5, #66	; 0x42
 8002c16:	702a      	strb	r2, [r5, #0]
 8002c18:	e030      	b.n	8002c7c <_printf_i+0x98>
 8002c1a:	2a64      	cmp	r2, #100	; 0x64
 8002c1c:	d001      	beq.n	8002c22 <_printf_i+0x3e>
 8002c1e:	2a69      	cmp	r2, #105	; 0x69
 8002c20:	d1f7      	bne.n	8002c12 <_printf_i+0x2e>
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	6825      	ldr	r5, [r4, #0]
 8002c26:	1d0a      	adds	r2, r1, #4
 8002c28:	0628      	lsls	r0, r5, #24
 8002c2a:	d529      	bpl.n	8002c80 <_printf_i+0x9c>
 8002c2c:	6808      	ldr	r0, [r1, #0]
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	2800      	cmp	r0, #0
 8002c32:	da03      	bge.n	8002c3c <_printf_i+0x58>
 8002c34:	232d      	movs	r3, #45	; 0x2d
 8002c36:	9a02      	ldr	r2, [sp, #8]
 8002c38:	4240      	negs	r0, r0
 8002c3a:	7013      	strb	r3, [r2, #0]
 8002c3c:	4e6b      	ldr	r6, [pc, #428]	; (8002dec <_printf_i+0x208>)
 8002c3e:	270a      	movs	r7, #10
 8002c40:	e04f      	b.n	8002ce2 <_printf_i+0xfe>
 8002c42:	2a73      	cmp	r2, #115	; 0x73
 8002c44:	d074      	beq.n	8002d30 <_printf_i+0x14c>
 8002c46:	d808      	bhi.n	8002c5a <_printf_i+0x76>
 8002c48:	2a6f      	cmp	r2, #111	; 0x6f
 8002c4a:	d01f      	beq.n	8002c8c <_printf_i+0xa8>
 8002c4c:	2a70      	cmp	r2, #112	; 0x70
 8002c4e:	d1e0      	bne.n	8002c12 <_printf_i+0x2e>
 8002c50:	2220      	movs	r2, #32
 8002c52:	6809      	ldr	r1, [r1, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	6022      	str	r2, [r4, #0]
 8002c58:	e003      	b.n	8002c62 <_printf_i+0x7e>
 8002c5a:	2a75      	cmp	r2, #117	; 0x75
 8002c5c:	d016      	beq.n	8002c8c <_printf_i+0xa8>
 8002c5e:	2a78      	cmp	r2, #120	; 0x78
 8002c60:	d1d7      	bne.n	8002c12 <_printf_i+0x2e>
 8002c62:	0022      	movs	r2, r4
 8002c64:	2178      	movs	r1, #120	; 0x78
 8002c66:	3245      	adds	r2, #69	; 0x45
 8002c68:	7011      	strb	r1, [r2, #0]
 8002c6a:	4e61      	ldr	r6, [pc, #388]	; (8002df0 <_printf_i+0x20c>)
 8002c6c:	e022      	b.n	8002cb4 <_printf_i+0xd0>
 8002c6e:	0025      	movs	r5, r4
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	3542      	adds	r5, #66	; 0x42
 8002c74:	1d11      	adds	r1, r2, #4
 8002c76:	6019      	str	r1, [r3, #0]
 8002c78:	6813      	ldr	r3, [r2, #0]
 8002c7a:	702b      	strb	r3, [r5, #0]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e065      	b.n	8002d4c <_printf_i+0x168>
 8002c80:	6808      	ldr	r0, [r1, #0]
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	0669      	lsls	r1, r5, #25
 8002c86:	d5d3      	bpl.n	8002c30 <_printf_i+0x4c>
 8002c88:	b200      	sxth	r0, r0
 8002c8a:	e7d1      	b.n	8002c30 <_printf_i+0x4c>
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	6825      	ldr	r5, [r4, #0]
 8002c90:	1d08      	adds	r0, r1, #4
 8002c92:	6018      	str	r0, [r3, #0]
 8002c94:	6808      	ldr	r0, [r1, #0]
 8002c96:	062e      	lsls	r6, r5, #24
 8002c98:	d505      	bpl.n	8002ca6 <_printf_i+0xc2>
 8002c9a:	4e54      	ldr	r6, [pc, #336]	; (8002dec <_printf_i+0x208>)
 8002c9c:	2708      	movs	r7, #8
 8002c9e:	2a6f      	cmp	r2, #111	; 0x6f
 8002ca0:	d01b      	beq.n	8002cda <_printf_i+0xf6>
 8002ca2:	270a      	movs	r7, #10
 8002ca4:	e019      	b.n	8002cda <_printf_i+0xf6>
 8002ca6:	066d      	lsls	r5, r5, #25
 8002ca8:	d5f7      	bpl.n	8002c9a <_printf_i+0xb6>
 8002caa:	b280      	uxth	r0, r0
 8002cac:	e7f5      	b.n	8002c9a <_printf_i+0xb6>
 8002cae:	3145      	adds	r1, #69	; 0x45
 8002cb0:	4e4e      	ldr	r6, [pc, #312]	; (8002dec <_printf_i+0x208>)
 8002cb2:	700a      	strb	r2, [r1, #0]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	1d01      	adds	r1, r0, #4
 8002cba:	6800      	ldr	r0, [r0, #0]
 8002cbc:	6019      	str	r1, [r3, #0]
 8002cbe:	0615      	lsls	r5, r2, #24
 8002cc0:	d521      	bpl.n	8002d06 <_printf_i+0x122>
 8002cc2:	07d3      	lsls	r3, r2, #31
 8002cc4:	d502      	bpl.n	8002ccc <_printf_i+0xe8>
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	6022      	str	r2, [r4, #0]
 8002ccc:	2710      	movs	r7, #16
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d103      	bne.n	8002cda <_printf_i+0xf6>
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	439a      	bics	r2, r3
 8002cd8:	6022      	str	r2, [r4, #0]
 8002cda:	0023      	movs	r3, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	3343      	adds	r3, #67	; 0x43
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	6863      	ldr	r3, [r4, #4]
 8002ce4:	60a3      	str	r3, [r4, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	db58      	blt.n	8002d9c <_printf_i+0x1b8>
 8002cea:	2204      	movs	r2, #4
 8002cec:	6821      	ldr	r1, [r4, #0]
 8002cee:	4391      	bics	r1, r2
 8002cf0:	6021      	str	r1, [r4, #0]
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d154      	bne.n	8002da0 <_printf_i+0x1bc>
 8002cf6:	9d02      	ldr	r5, [sp, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05a      	beq.n	8002db2 <_printf_i+0x1ce>
 8002cfc:	0025      	movs	r5, r4
 8002cfe:	7833      	ldrb	r3, [r6, #0]
 8002d00:	3542      	adds	r5, #66	; 0x42
 8002d02:	702b      	strb	r3, [r5, #0]
 8002d04:	e055      	b.n	8002db2 <_printf_i+0x1ce>
 8002d06:	0655      	lsls	r5, r2, #25
 8002d08:	d5db      	bpl.n	8002cc2 <_printf_i+0xde>
 8002d0a:	b280      	uxth	r0, r0
 8002d0c:	e7d9      	b.n	8002cc2 <_printf_i+0xde>
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	680d      	ldr	r5, [r1, #0]
 8002d12:	1d10      	adds	r0, r2, #4
 8002d14:	6949      	ldr	r1, [r1, #20]
 8002d16:	6018      	str	r0, [r3, #0]
 8002d18:	6813      	ldr	r3, [r2, #0]
 8002d1a:	062e      	lsls	r6, r5, #24
 8002d1c:	d501      	bpl.n	8002d22 <_printf_i+0x13e>
 8002d1e:	6019      	str	r1, [r3, #0]
 8002d20:	e002      	b.n	8002d28 <_printf_i+0x144>
 8002d22:	066d      	lsls	r5, r5, #25
 8002d24:	d5fb      	bpl.n	8002d1e <_printf_i+0x13a>
 8002d26:	8019      	strh	r1, [r3, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9d02      	ldr	r5, [sp, #8]
 8002d2c:	6123      	str	r3, [r4, #16]
 8002d2e:	e04f      	b.n	8002dd0 <_printf_i+0x1ec>
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	1d11      	adds	r1, r2, #4
 8002d34:	6019      	str	r1, [r3, #0]
 8002d36:	6815      	ldr	r5, [r2, #0]
 8002d38:	2100      	movs	r1, #0
 8002d3a:	6862      	ldr	r2, [r4, #4]
 8002d3c:	0028      	movs	r0, r5
 8002d3e:	f000 f859 	bl	8002df4 <memchr>
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d001      	beq.n	8002d4a <_printf_i+0x166>
 8002d46:	1b40      	subs	r0, r0, r5
 8002d48:	6060      	str	r0, [r4, #4]
 8002d4a:	6863      	ldr	r3, [r4, #4]
 8002d4c:	6123      	str	r3, [r4, #16]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9a02      	ldr	r2, [sp, #8]
 8002d52:	7013      	strb	r3, [r2, #0]
 8002d54:	e03c      	b.n	8002dd0 <_printf_i+0x1ec>
 8002d56:	6923      	ldr	r3, [r4, #16]
 8002d58:	002a      	movs	r2, r5
 8002d5a:	9904      	ldr	r1, [sp, #16]
 8002d5c:	9803      	ldr	r0, [sp, #12]
 8002d5e:	9d05      	ldr	r5, [sp, #20]
 8002d60:	47a8      	blx	r5
 8002d62:	1c43      	adds	r3, r0, #1
 8002d64:	d03e      	beq.n	8002de4 <_printf_i+0x200>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	079b      	lsls	r3, r3, #30
 8002d6a:	d415      	bmi.n	8002d98 <_printf_i+0x1b4>
 8002d6c:	9b07      	ldr	r3, [sp, #28]
 8002d6e:	68e0      	ldr	r0, [r4, #12]
 8002d70:	4298      	cmp	r0, r3
 8002d72:	da39      	bge.n	8002de8 <_printf_i+0x204>
 8002d74:	0018      	movs	r0, r3
 8002d76:	e037      	b.n	8002de8 <_printf_i+0x204>
 8002d78:	0022      	movs	r2, r4
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	3219      	adds	r2, #25
 8002d7e:	9904      	ldr	r1, [sp, #16]
 8002d80:	9803      	ldr	r0, [sp, #12]
 8002d82:	9e05      	ldr	r6, [sp, #20]
 8002d84:	47b0      	blx	r6
 8002d86:	1c43      	adds	r3, r0, #1
 8002d88:	d02c      	beq.n	8002de4 <_printf_i+0x200>
 8002d8a:	3501      	adds	r5, #1
 8002d8c:	68e3      	ldr	r3, [r4, #12]
 8002d8e:	9a07      	ldr	r2, [sp, #28]
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	42ab      	cmp	r3, r5
 8002d94:	dcf0      	bgt.n	8002d78 <_printf_i+0x194>
 8002d96:	e7e9      	b.n	8002d6c <_printf_i+0x188>
 8002d98:	2500      	movs	r5, #0
 8002d9a:	e7f7      	b.n	8002d8c <_printf_i+0x1a8>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d0ad      	beq.n	8002cfc <_printf_i+0x118>
 8002da0:	9d02      	ldr	r5, [sp, #8]
 8002da2:	0039      	movs	r1, r7
 8002da4:	f7fd fa48 	bl	8000238 <__aeabi_uidivmod>
 8002da8:	5c73      	ldrb	r3, [r6, r1]
 8002daa:	3d01      	subs	r5, #1
 8002dac:	702b      	strb	r3, [r5, #0]
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d1f7      	bne.n	8002da2 <_printf_i+0x1be>
 8002db2:	2f08      	cmp	r7, #8
 8002db4:	d109      	bne.n	8002dca <_printf_i+0x1e6>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	07db      	lsls	r3, r3, #31
 8002dba:	d506      	bpl.n	8002dca <_printf_i+0x1e6>
 8002dbc:	6863      	ldr	r3, [r4, #4]
 8002dbe:	6922      	ldr	r2, [r4, #16]
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	dc02      	bgt.n	8002dca <_printf_i+0x1e6>
 8002dc4:	2330      	movs	r3, #48	; 0x30
 8002dc6:	3d01      	subs	r5, #1
 8002dc8:	702b      	strb	r3, [r5, #0]
 8002dca:	9b02      	ldr	r3, [sp, #8]
 8002dcc:	1b5b      	subs	r3, r3, r5
 8002dce:	6123      	str	r3, [r4, #16]
 8002dd0:	9b05      	ldr	r3, [sp, #20]
 8002dd2:	aa07      	add	r2, sp, #28
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	0021      	movs	r1, r4
 8002dd8:	9b04      	ldr	r3, [sp, #16]
 8002dda:	9803      	ldr	r0, [sp, #12]
 8002ddc:	f7ff fe94 	bl	8002b08 <_printf_common>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d1b8      	bne.n	8002d56 <_printf_i+0x172>
 8002de4:	2001      	movs	r0, #1
 8002de6:	4240      	negs	r0, r0
 8002de8:	b009      	add	sp, #36	; 0x24
 8002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dec:	080030a7 	.word	0x080030a7
 8002df0:	080030b8 	.word	0x080030b8

08002df4 <memchr>:
 8002df4:	b2c9      	uxtb	r1, r1
 8002df6:	1882      	adds	r2, r0, r2
 8002df8:	4290      	cmp	r0, r2
 8002dfa:	d101      	bne.n	8002e00 <memchr+0xc>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	4770      	bx	lr
 8002e00:	7803      	ldrb	r3, [r0, #0]
 8002e02:	428b      	cmp	r3, r1
 8002e04:	d0fb      	beq.n	8002dfe <memchr+0xa>
 8002e06:	3001      	adds	r0, #1
 8002e08:	e7f6      	b.n	8002df8 <memchr+0x4>

08002e0a <memmove>:
 8002e0a:	b510      	push	{r4, lr}
 8002e0c:	4288      	cmp	r0, r1
 8002e0e:	d902      	bls.n	8002e16 <memmove+0xc>
 8002e10:	188b      	adds	r3, r1, r2
 8002e12:	4298      	cmp	r0, r3
 8002e14:	d303      	bcc.n	8002e1e <memmove+0x14>
 8002e16:	2300      	movs	r3, #0
 8002e18:	e007      	b.n	8002e2a <memmove+0x20>
 8002e1a:	5c8b      	ldrb	r3, [r1, r2]
 8002e1c:	5483      	strb	r3, [r0, r2]
 8002e1e:	3a01      	subs	r2, #1
 8002e20:	d2fb      	bcs.n	8002e1a <memmove+0x10>
 8002e22:	bd10      	pop	{r4, pc}
 8002e24:	5ccc      	ldrb	r4, [r1, r3]
 8002e26:	54c4      	strb	r4, [r0, r3]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d1fa      	bne.n	8002e24 <memmove+0x1a>
 8002e2e:	e7f8      	b.n	8002e22 <memmove+0x18>

08002e30 <_free_r>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	0005      	movs	r5, r0
 8002e34:	2900      	cmp	r1, #0
 8002e36:	d010      	beq.n	8002e5a <_free_r+0x2a>
 8002e38:	1f0c      	subs	r4, r1, #4
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	da00      	bge.n	8002e42 <_free_r+0x12>
 8002e40:	18e4      	adds	r4, r4, r3
 8002e42:	0028      	movs	r0, r5
 8002e44:	f000 f8d4 	bl	8002ff0 <__malloc_lock>
 8002e48:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <_free_r+0x90>)
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <_free_r+0x2c>
 8002e50:	6063      	str	r3, [r4, #4]
 8002e52:	6014      	str	r4, [r2, #0]
 8002e54:	0028      	movs	r0, r5
 8002e56:	f000 f8cc 	bl	8002ff2 <__malloc_unlock>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	42a3      	cmp	r3, r4
 8002e5e:	d909      	bls.n	8002e74 <_free_r+0x44>
 8002e60:	6821      	ldr	r1, [r4, #0]
 8002e62:	1860      	adds	r0, r4, r1
 8002e64:	4283      	cmp	r3, r0
 8002e66:	d1f3      	bne.n	8002e50 <_free_r+0x20>
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	1841      	adds	r1, r0, r1
 8002e6e:	6021      	str	r1, [r4, #0]
 8002e70:	e7ee      	b.n	8002e50 <_free_r+0x20>
 8002e72:	0013      	movs	r3, r2
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	d001      	beq.n	8002e7e <_free_r+0x4e>
 8002e7a:	42a2      	cmp	r2, r4
 8002e7c:	d9f9      	bls.n	8002e72 <_free_r+0x42>
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	1858      	adds	r0, r3, r1
 8002e82:	42a0      	cmp	r0, r4
 8002e84:	d10b      	bne.n	8002e9e <_free_r+0x6e>
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	1809      	adds	r1, r1, r0
 8002e8a:	1858      	adds	r0, r3, r1
 8002e8c:	6019      	str	r1, [r3, #0]
 8002e8e:	4282      	cmp	r2, r0
 8002e90:	d1e0      	bne.n	8002e54 <_free_r+0x24>
 8002e92:	6810      	ldr	r0, [r2, #0]
 8002e94:	6852      	ldr	r2, [r2, #4]
 8002e96:	1841      	adds	r1, r0, r1
 8002e98:	6019      	str	r1, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	e7da      	b.n	8002e54 <_free_r+0x24>
 8002e9e:	42a0      	cmp	r0, r4
 8002ea0:	d902      	bls.n	8002ea8 <_free_r+0x78>
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	602b      	str	r3, [r5, #0]
 8002ea6:	e7d5      	b.n	8002e54 <_free_r+0x24>
 8002ea8:	6821      	ldr	r1, [r4, #0]
 8002eaa:	1860      	adds	r0, r4, r1
 8002eac:	4282      	cmp	r2, r0
 8002eae:	d103      	bne.n	8002eb8 <_free_r+0x88>
 8002eb0:	6810      	ldr	r0, [r2, #0]
 8002eb2:	6852      	ldr	r2, [r2, #4]
 8002eb4:	1841      	adds	r1, r0, r1
 8002eb6:	6021      	str	r1, [r4, #0]
 8002eb8:	6062      	str	r2, [r4, #4]
 8002eba:	605c      	str	r4, [r3, #4]
 8002ebc:	e7ca      	b.n	8002e54 <_free_r+0x24>
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	20000094 	.word	0x20000094

08002ec4 <_malloc_r>:
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	b570      	push	{r4, r5, r6, lr}
 8002ec8:	1ccd      	adds	r5, r1, #3
 8002eca:	439d      	bics	r5, r3
 8002ecc:	3508      	adds	r5, #8
 8002ece:	0006      	movs	r6, r0
 8002ed0:	2d0c      	cmp	r5, #12
 8002ed2:	d21e      	bcs.n	8002f12 <_malloc_r+0x4e>
 8002ed4:	250c      	movs	r5, #12
 8002ed6:	42a9      	cmp	r1, r5
 8002ed8:	d81d      	bhi.n	8002f16 <_malloc_r+0x52>
 8002eda:	0030      	movs	r0, r6
 8002edc:	f000 f888 	bl	8002ff0 <__malloc_lock>
 8002ee0:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <_malloc_r+0xb4>)
 8002ee2:	6814      	ldr	r4, [r2, #0]
 8002ee4:	0021      	movs	r1, r4
 8002ee6:	2900      	cmp	r1, #0
 8002ee8:	d119      	bne.n	8002f1e <_malloc_r+0x5a>
 8002eea:	4c24      	ldr	r4, [pc, #144]	; (8002f7c <_malloc_r+0xb8>)
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d103      	bne.n	8002efa <_malloc_r+0x36>
 8002ef2:	0030      	movs	r0, r6
 8002ef4:	f000 f86a 	bl	8002fcc <_sbrk_r>
 8002ef8:	6020      	str	r0, [r4, #0]
 8002efa:	0029      	movs	r1, r5
 8002efc:	0030      	movs	r0, r6
 8002efe:	f000 f865 	bl	8002fcc <_sbrk_r>
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	d12b      	bne.n	8002f5e <_malloc_r+0x9a>
 8002f06:	230c      	movs	r3, #12
 8002f08:	0030      	movs	r0, r6
 8002f0a:	6033      	str	r3, [r6, #0]
 8002f0c:	f000 f871 	bl	8002ff2 <__malloc_unlock>
 8002f10:	e003      	b.n	8002f1a <_malloc_r+0x56>
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	dadf      	bge.n	8002ed6 <_malloc_r+0x12>
 8002f16:	230c      	movs	r3, #12
 8002f18:	6033      	str	r3, [r6, #0]
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	680b      	ldr	r3, [r1, #0]
 8002f20:	1b5b      	subs	r3, r3, r5
 8002f22:	d419      	bmi.n	8002f58 <_malloc_r+0x94>
 8002f24:	2b0b      	cmp	r3, #11
 8002f26:	d903      	bls.n	8002f30 <_malloc_r+0x6c>
 8002f28:	600b      	str	r3, [r1, #0]
 8002f2a:	18cc      	adds	r4, r1, r3
 8002f2c:	6025      	str	r5, [r4, #0]
 8002f2e:	e003      	b.n	8002f38 <_malloc_r+0x74>
 8002f30:	684b      	ldr	r3, [r1, #4]
 8002f32:	428c      	cmp	r4, r1
 8002f34:	d10d      	bne.n	8002f52 <_malloc_r+0x8e>
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	0030      	movs	r0, r6
 8002f3a:	f000 f85a 	bl	8002ff2 <__malloc_unlock>
 8002f3e:	0020      	movs	r0, r4
 8002f40:	2207      	movs	r2, #7
 8002f42:	300b      	adds	r0, #11
 8002f44:	1d23      	adds	r3, r4, #4
 8002f46:	4390      	bics	r0, r2
 8002f48:	1ac3      	subs	r3, r0, r3
 8002f4a:	d0e7      	beq.n	8002f1c <_malloc_r+0x58>
 8002f4c:	425a      	negs	r2, r3
 8002f4e:	50e2      	str	r2, [r4, r3]
 8002f50:	e7e4      	b.n	8002f1c <_malloc_r+0x58>
 8002f52:	6063      	str	r3, [r4, #4]
 8002f54:	000c      	movs	r4, r1
 8002f56:	e7ef      	b.n	8002f38 <_malloc_r+0x74>
 8002f58:	000c      	movs	r4, r1
 8002f5a:	6849      	ldr	r1, [r1, #4]
 8002f5c:	e7c3      	b.n	8002ee6 <_malloc_r+0x22>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	1cc4      	adds	r4, r0, #3
 8002f62:	439c      	bics	r4, r3
 8002f64:	42a0      	cmp	r0, r4
 8002f66:	d0e1      	beq.n	8002f2c <_malloc_r+0x68>
 8002f68:	1a21      	subs	r1, r4, r0
 8002f6a:	0030      	movs	r0, r6
 8002f6c:	f000 f82e 	bl	8002fcc <_sbrk_r>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d1db      	bne.n	8002f2c <_malloc_r+0x68>
 8002f74:	e7c7      	b.n	8002f06 <_malloc_r+0x42>
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	20000094 	.word	0x20000094
 8002f7c:	20000098 	.word	0x20000098

08002f80 <_realloc_r>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	0007      	movs	r7, r0
 8002f84:	000d      	movs	r5, r1
 8002f86:	0016      	movs	r6, r2
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	d105      	bne.n	8002f98 <_realloc_r+0x18>
 8002f8c:	0011      	movs	r1, r2
 8002f8e:	f7ff ff99 	bl	8002ec4 <_malloc_r>
 8002f92:	0004      	movs	r4, r0
 8002f94:	0020      	movs	r0, r4
 8002f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	d103      	bne.n	8002fa4 <_realloc_r+0x24>
 8002f9c:	f7ff ff48 	bl	8002e30 <_free_r>
 8002fa0:	0034      	movs	r4, r6
 8002fa2:	e7f7      	b.n	8002f94 <_realloc_r+0x14>
 8002fa4:	f000 f826 	bl	8002ff4 <_malloc_usable_size_r>
 8002fa8:	002c      	movs	r4, r5
 8002faa:	42b0      	cmp	r0, r6
 8002fac:	d2f2      	bcs.n	8002f94 <_realloc_r+0x14>
 8002fae:	0031      	movs	r1, r6
 8002fb0:	0038      	movs	r0, r7
 8002fb2:	f7ff ff87 	bl	8002ec4 <_malloc_r>
 8002fb6:	1e04      	subs	r4, r0, #0
 8002fb8:	d0ec      	beq.n	8002f94 <_realloc_r+0x14>
 8002fba:	0029      	movs	r1, r5
 8002fbc:	0032      	movs	r2, r6
 8002fbe:	f7ff fc39 	bl	8002834 <memcpy>
 8002fc2:	0029      	movs	r1, r5
 8002fc4:	0038      	movs	r0, r7
 8002fc6:	f7ff ff33 	bl	8002e30 <_free_r>
 8002fca:	e7e3      	b.n	8002f94 <_realloc_r+0x14>

08002fcc <_sbrk_r>:
 8002fcc:	2300      	movs	r3, #0
 8002fce:	b570      	push	{r4, r5, r6, lr}
 8002fd0:	4c06      	ldr	r4, [pc, #24]	; (8002fec <_sbrk_r+0x20>)
 8002fd2:	0005      	movs	r5, r0
 8002fd4:	0008      	movs	r0, r1
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	f7fd fdac 	bl	8000b34 <_sbrk>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d103      	bne.n	8002fe8 <_sbrk_r+0x1c>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d000      	beq.n	8002fe8 <_sbrk_r+0x1c>
 8002fe6:	602b      	str	r3, [r5, #0]
 8002fe8:	bd70      	pop	{r4, r5, r6, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	200001a8 	.word	0x200001a8

08002ff0 <__malloc_lock>:
 8002ff0:	4770      	bx	lr

08002ff2 <__malloc_unlock>:
 8002ff2:	4770      	bx	lr

08002ff4 <_malloc_usable_size_r>:
 8002ff4:	1f0b      	subs	r3, r1, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1f18      	subs	r0, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da01      	bge.n	8003002 <_malloc_usable_size_r+0xe>
 8002ffe:	580b      	ldr	r3, [r1, r0]
 8003000:	18c0      	adds	r0, r0, r3
 8003002:	4770      	bx	lr

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
