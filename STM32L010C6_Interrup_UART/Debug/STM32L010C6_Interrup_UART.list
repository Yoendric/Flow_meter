
STM32L010C6_Interrup_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ecc  08004ecc  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed4  08004ed4  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed8  08004ed8  00014ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08004edc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000240  08005118  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08005118  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013438  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f07  00000000  00000000  0003369c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000098a2  00000000  00000000  000365a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d78  00000000  00000000  0003fe48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000fc0  00000000  00000000  00040bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00012fcb  00000000  00000000  00041b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e1cd  00000000  00000000  00054b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006f51b  00000000  00000000  00062d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d2233  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003298  00000000  00000000  000d22b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000240 	.word	0x20000240
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c10 	.word	0x08004c10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000244 	.word	0x20000244
 8000104:	08004c10 	.word	0x08004c10

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_ldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d115      	bne.n	800045c <__aeabi_ldivmod+0x30>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d113      	bne.n	800045c <__aeabi_ldivmod+0x30>
 8000434:	2900      	cmp	r1, #0
 8000436:	db06      	blt.n	8000446 <__aeabi_ldivmod+0x1a>
 8000438:	dc01      	bgt.n	800043e <__aeabi_ldivmod+0x12>
 800043a:	2800      	cmp	r0, #0
 800043c:	d006      	beq.n	800044c <__aeabi_ldivmod+0x20>
 800043e:	2000      	movs	r0, #0
 8000440:	43c0      	mvns	r0, r0
 8000442:	0841      	lsrs	r1, r0, #1
 8000444:	e002      	b.n	800044c <__aeabi_ldivmod+0x20>
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	0609      	lsls	r1, r1, #24
 800044a:	2000      	movs	r0, #0
 800044c:	b407      	push	{r0, r1, r2}
 800044e:	4802      	ldr	r0, [pc, #8]	; (8000458 <__aeabi_ldivmod+0x2c>)
 8000450:	a101      	add	r1, pc, #4	; (adr r1, 8000458 <__aeabi_ldivmod+0x2c>)
 8000452:	1840      	adds	r0, r0, r1
 8000454:	9002      	str	r0, [sp, #8]
 8000456:	bd03      	pop	{r0, r1, pc}
 8000458:	ffffffd1 	.word	0xffffffd1
 800045c:	b403      	push	{r0, r1}
 800045e:	4668      	mov	r0, sp
 8000460:	b501      	push	{r0, lr}
 8000462:	9802      	ldr	r0, [sp, #8]
 8000464:	f000 f8e8 	bl	8000638 <__gnu_ldivmod_helper>
 8000468:	9b01      	ldr	r3, [sp, #4]
 800046a:	469e      	mov	lr, r3
 800046c:	b002      	add	sp, #8
 800046e:	bc0c      	pop	{r2, r3}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_uldivmod>:
 8000474:	2b00      	cmp	r3, #0
 8000476:	d111      	bne.n	800049c <__aeabi_uldivmod+0x28>
 8000478:	2a00      	cmp	r2, #0
 800047a:	d10f      	bne.n	800049c <__aeabi_uldivmod+0x28>
 800047c:	2900      	cmp	r1, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_uldivmod+0xe>
 8000480:	2800      	cmp	r0, #0
 8000482:	d002      	beq.n	800048a <__aeabi_uldivmod+0x16>
 8000484:	2100      	movs	r1, #0
 8000486:	43c9      	mvns	r1, r1
 8000488:	1c08      	adds	r0, r1, #0
 800048a:	b407      	push	{r0, r1, r2}
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <__aeabi_uldivmod+0x24>)
 800048e:	a102      	add	r1, pc, #8	; (adr r1, 8000498 <__aeabi_uldivmod+0x24>)
 8000490:	1840      	adds	r0, r0, r1
 8000492:	9002      	str	r0, [sp, #8]
 8000494:	bd03      	pop	{r0, r1, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	ffffff91 	.word	0xffffff91
 800049c:	b403      	push	{r0, r1}
 800049e:	4668      	mov	r0, sp
 80004a0:	b501      	push	{r0, lr}
 80004a2:	9802      	ldr	r0, [sp, #8]
 80004a4:	f000 f806 	bl	80004b4 <__udivmoddi4>
 80004a8:	9b01      	ldr	r3, [sp, #4]
 80004aa:	469e      	mov	lr, r3
 80004ac:	b002      	add	sp, #8
 80004ae:	bc0c      	pop	{r2, r3}
 80004b0:	4770      	bx	lr
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	464f      	mov	r7, r9
 80004b8:	4646      	mov	r6, r8
 80004ba:	46d6      	mov	lr, sl
 80004bc:	b5c0      	push	{r6, r7, lr}
 80004be:	0004      	movs	r4, r0
 80004c0:	b082      	sub	sp, #8
 80004c2:	000d      	movs	r5, r1
 80004c4:	4691      	mov	r9, r2
 80004c6:	4698      	mov	r8, r3
 80004c8:	428b      	cmp	r3, r1
 80004ca:	d82f      	bhi.n	800052c <__udivmoddi4+0x78>
 80004cc:	d02c      	beq.n	8000528 <__udivmoddi4+0x74>
 80004ce:	4641      	mov	r1, r8
 80004d0:	4648      	mov	r0, r9
 80004d2:	f000 f8cd 	bl	8000670 <__clzdi2>
 80004d6:	0029      	movs	r1, r5
 80004d8:	0006      	movs	r6, r0
 80004da:	0020      	movs	r0, r4
 80004dc:	f000 f8c8 	bl	8000670 <__clzdi2>
 80004e0:	1a33      	subs	r3, r6, r0
 80004e2:	469c      	mov	ip, r3
 80004e4:	3b20      	subs	r3, #32
 80004e6:	469a      	mov	sl, r3
 80004e8:	d500      	bpl.n	80004ec <__udivmoddi4+0x38>
 80004ea:	e076      	b.n	80005da <__udivmoddi4+0x126>
 80004ec:	464b      	mov	r3, r9
 80004ee:	4652      	mov	r2, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001f      	movs	r7, r3
 80004f4:	464b      	mov	r3, r9
 80004f6:	4662      	mov	r2, ip
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d828      	bhi.n	8000552 <__udivmoddi4+0x9e>
 8000500:	d025      	beq.n	800054e <__udivmoddi4+0x9a>
 8000502:	4653      	mov	r3, sl
 8000504:	1ba4      	subs	r4, r4, r6
 8000506:	41bd      	sbcs	r5, r7
 8000508:	2b00      	cmp	r3, #0
 800050a:	da00      	bge.n	800050e <__udivmoddi4+0x5a>
 800050c:	e07b      	b.n	8000606 <__udivmoddi4+0x152>
 800050e:	2200      	movs	r2, #0
 8000510:	2300      	movs	r3, #0
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4652      	mov	r2, sl
 800051a:	4093      	lsls	r3, r2
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2301      	movs	r3, #1
 8000520:	4662      	mov	r2, ip
 8000522:	4093      	lsls	r3, r2
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	e018      	b.n	800055a <__udivmoddi4+0xa6>
 8000528:	4282      	cmp	r2, r0
 800052a:	d9d0      	bls.n	80004ce <__udivmoddi4+0x1a>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <__udivmoddi4+0x8a>
 800053a:	601c      	str	r4, [r3, #0]
 800053c:	605d      	str	r5, [r3, #4]
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	b002      	add	sp, #8
 8000544:	bc1c      	pop	{r2, r3, r4}
 8000546:	4690      	mov	r8, r2
 8000548:	4699      	mov	r9, r3
 800054a:	46a2      	mov	sl, r4
 800054c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054e:	42a3      	cmp	r3, r4
 8000550:	d9d7      	bls.n	8000502 <__udivmoddi4+0x4e>
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4663      	mov	r3, ip
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0e9      	beq.n	8000534 <__udivmoddi4+0x80>
 8000560:	07fb      	lsls	r3, r7, #31
 8000562:	4698      	mov	r8, r3
 8000564:	4641      	mov	r1, r8
 8000566:	0872      	lsrs	r2, r6, #1
 8000568:	430a      	orrs	r2, r1
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	4666      	mov	r6, ip
 800056e:	e00e      	b.n	800058e <__udivmoddi4+0xda>
 8000570:	42ab      	cmp	r3, r5
 8000572:	d101      	bne.n	8000578 <__udivmoddi4+0xc4>
 8000574:	42a2      	cmp	r2, r4
 8000576:	d80c      	bhi.n	8000592 <__udivmoddi4+0xde>
 8000578:	1aa4      	subs	r4, r4, r2
 800057a:	419d      	sbcs	r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	1924      	adds	r4, r4, r4
 8000580:	416d      	adcs	r5, r5
 8000582:	2100      	movs	r1, #0
 8000584:	3e01      	subs	r6, #1
 8000586:	1824      	adds	r4, r4, r0
 8000588:	414d      	adcs	r5, r1
 800058a:	2e00      	cmp	r6, #0
 800058c:	d006      	beq.n	800059c <__udivmoddi4+0xe8>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d9ee      	bls.n	8000570 <__udivmoddi4+0xbc>
 8000592:	3e01      	subs	r6, #1
 8000594:	1924      	adds	r4, r4, r4
 8000596:	416d      	adcs	r5, r5
 8000598:	2e00      	cmp	r6, #0
 800059a:	d1f8      	bne.n	800058e <__udivmoddi4+0xda>
 800059c:	9800      	ldr	r0, [sp, #0]
 800059e:	9901      	ldr	r1, [sp, #4]
 80005a0:	4653      	mov	r3, sl
 80005a2:	1900      	adds	r0, r0, r4
 80005a4:	4169      	adcs	r1, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db23      	blt.n	80005f2 <__udivmoddi4+0x13e>
 80005aa:	002b      	movs	r3, r5
 80005ac:	4652      	mov	r2, sl
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	4664      	mov	r4, ip
 80005b4:	40e2      	lsrs	r2, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	0015      	movs	r5, r2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db2d      	blt.n	800061c <__udivmoddi4+0x168>
 80005c0:	0026      	movs	r6, r4
 80005c2:	4657      	mov	r7, sl
 80005c4:	40be      	lsls	r6, r7
 80005c6:	0033      	movs	r3, r6
 80005c8:	0026      	movs	r6, r4
 80005ca:	4667      	mov	r7, ip
 80005cc:	40be      	lsls	r6, r7
 80005ce:	0032      	movs	r2, r6
 80005d0:	1a80      	subs	r0, r0, r2
 80005d2:	4199      	sbcs	r1, r3
 80005d4:	9000      	str	r0, [sp, #0]
 80005d6:	9101      	str	r1, [sp, #4]
 80005d8:	e7ac      	b.n	8000534 <__udivmoddi4+0x80>
 80005da:	4662      	mov	r2, ip
 80005dc:	2320      	movs	r3, #32
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	464a      	mov	r2, r9
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	4661      	mov	r1, ip
 80005e6:	0013      	movs	r3, r2
 80005e8:	4642      	mov	r2, r8
 80005ea:	408a      	lsls	r2, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	431f      	orrs	r7, r3
 80005f0:	e780      	b.n	80004f4 <__udivmoddi4+0x40>
 80005f2:	4662      	mov	r2, ip
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4666      	mov	r6, ip
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4313      	orrs	r3, r2
 8000604:	e7d4      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000606:	4662      	mov	r2, ip
 8000608:	2320      	movs	r3, #32
 800060a:	2100      	movs	r1, #0
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	2200      	movs	r2, #0
 8000610:	9100      	str	r1, [sp, #0]
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	2201      	movs	r2, #1
 8000616:	40da      	lsrs	r2, r3
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	e780      	b.n	800051e <__udivmoddi4+0x6a>
 800061c:	2320      	movs	r3, #32
 800061e:	4662      	mov	r2, ip
 8000620:	0026      	movs	r6, r4
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	40de      	lsrs	r6, r3
 8000626:	002f      	movs	r7, r5
 8000628:	46b0      	mov	r8, r6
 800062a:	4666      	mov	r6, ip
 800062c:	40b7      	lsls	r7, r6
 800062e:	4646      	mov	r6, r8
 8000630:	003b      	movs	r3, r7
 8000632:	4333      	orrs	r3, r6
 8000634:	e7c8      	b.n	80005c8 <__udivmoddi4+0x114>
 8000636:	46c0      	nop			; (mov r8, r8)

08000638 <__gnu_ldivmod_helper>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	b083      	sub	sp, #12
 800063c:	0016      	movs	r6, r2
 800063e:	001f      	movs	r7, r3
 8000640:	9000      	str	r0, [sp, #0]
 8000642:	9101      	str	r1, [sp, #4]
 8000644:	f000 f84a 	bl	80006dc <__divdi3>
 8000648:	0004      	movs	r4, r0
 800064a:	000d      	movs	r5, r1
 800064c:	0002      	movs	r2, r0
 800064e:	000b      	movs	r3, r1
 8000650:	0030      	movs	r0, r6
 8000652:	0039      	movs	r1, r7
 8000654:	f000 f818 	bl	8000688 <__aeabi_lmul>
 8000658:	9a00      	ldr	r2, [sp, #0]
 800065a:	9b01      	ldr	r3, [sp, #4]
 800065c:	1a12      	subs	r2, r2, r0
 800065e:	418b      	sbcs	r3, r1
 8000660:	9908      	ldr	r1, [sp, #32]
 8000662:	0020      	movs	r0, r4
 8000664:	600a      	str	r2, [r1, #0]
 8000666:	604b      	str	r3, [r1, #4]
 8000668:	0029      	movs	r1, r5
 800066a:	b003      	add	sp, #12
 800066c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)

08000670 <__clzdi2>:
 8000670:	b510      	push	{r4, lr}
 8000672:	2900      	cmp	r1, #0
 8000674:	d103      	bne.n	800067e <__clzdi2+0xe>
 8000676:	f000 f909 	bl	800088c <__clzsi2>
 800067a:	3020      	adds	r0, #32
 800067c:	e002      	b.n	8000684 <__clzdi2+0x14>
 800067e:	1c08      	adds	r0, r1, #0
 8000680:	f000 f904 	bl	800088c <__clzsi2>
 8000684:	bd10      	pop	{r4, pc}
 8000686:	46c0      	nop			; (mov r8, r8)

08000688 <__aeabi_lmul>:
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	46ce      	mov	lr, r9
 800068c:	4647      	mov	r7, r8
 800068e:	0415      	lsls	r5, r2, #16
 8000690:	0c2d      	lsrs	r5, r5, #16
 8000692:	002e      	movs	r6, r5
 8000694:	b580      	push	{r7, lr}
 8000696:	0407      	lsls	r7, r0, #16
 8000698:	0c14      	lsrs	r4, r2, #16
 800069a:	0c3f      	lsrs	r7, r7, #16
 800069c:	4699      	mov	r9, r3
 800069e:	0c03      	lsrs	r3, r0, #16
 80006a0:	437e      	muls	r6, r7
 80006a2:	435d      	muls	r5, r3
 80006a4:	4367      	muls	r7, r4
 80006a6:	4363      	muls	r3, r4
 80006a8:	197f      	adds	r7, r7, r5
 80006aa:	0c34      	lsrs	r4, r6, #16
 80006ac:	19e4      	adds	r4, r4, r7
 80006ae:	469c      	mov	ip, r3
 80006b0:	42a5      	cmp	r5, r4
 80006b2:	d903      	bls.n	80006bc <__aeabi_lmul+0x34>
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	025b      	lsls	r3, r3, #9
 80006b8:	4698      	mov	r8, r3
 80006ba:	44c4      	add	ip, r8
 80006bc:	464b      	mov	r3, r9
 80006be:	4343      	muls	r3, r0
 80006c0:	4351      	muls	r1, r2
 80006c2:	0c25      	lsrs	r5, r4, #16
 80006c4:	0436      	lsls	r6, r6, #16
 80006c6:	4465      	add	r5, ip
 80006c8:	0c36      	lsrs	r6, r6, #16
 80006ca:	0424      	lsls	r4, r4, #16
 80006cc:	19a4      	adds	r4, r4, r6
 80006ce:	195b      	adds	r3, r3, r5
 80006d0:	1859      	adds	r1, r3, r1
 80006d2:	0020      	movs	r0, r4
 80006d4:	bc0c      	pop	{r2, r3}
 80006d6:	4690      	mov	r8, r2
 80006d8:	4699      	mov	r9, r3
 80006da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006dc <__divdi3>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464e      	mov	r6, r9
 80006e0:	4657      	mov	r7, sl
 80006e2:	46de      	mov	lr, fp
 80006e4:	4645      	mov	r5, r8
 80006e6:	b5e0      	push	{r5, r6, r7, lr}
 80006e8:	000f      	movs	r7, r1
 80006ea:	2100      	movs	r1, #0
 80006ec:	b083      	sub	sp, #12
 80006ee:	0006      	movs	r6, r0
 80006f0:	4689      	mov	r9, r1
 80006f2:	2f00      	cmp	r7, #0
 80006f4:	da06      	bge.n	8000704 <__divdi3+0x28>
 80006f6:	0039      	movs	r1, r7
 80006f8:	2700      	movs	r7, #0
 80006fa:	4246      	negs	r6, r0
 80006fc:	418f      	sbcs	r7, r1
 80006fe:	2101      	movs	r1, #1
 8000700:	4249      	negs	r1, r1
 8000702:	4689      	mov	r9, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	da07      	bge.n	8000718 <__divdi3+0x3c>
 8000708:	4649      	mov	r1, r9
 800070a:	43c9      	mvns	r1, r1
 800070c:	0010      	movs	r0, r2
 800070e:	4689      	mov	r9, r1
 8000710:	0019      	movs	r1, r3
 8000712:	2300      	movs	r3, #0
 8000714:	4242      	negs	r2, r0
 8000716:	418b      	sbcs	r3, r1
 8000718:	0034      	movs	r4, r6
 800071a:	003d      	movs	r5, r7
 800071c:	4692      	mov	sl, r2
 800071e:	4698      	mov	r8, r3
 8000720:	42bb      	cmp	r3, r7
 8000722:	d869      	bhi.n	80007f8 <__divdi3+0x11c>
 8000724:	d066      	beq.n	80007f4 <__divdi3+0x118>
 8000726:	4641      	mov	r1, r8
 8000728:	4650      	mov	r0, sl
 800072a:	f7ff ffa1 	bl	8000670 <__clzdi2>
 800072e:	4683      	mov	fp, r0
 8000730:	0039      	movs	r1, r7
 8000732:	0030      	movs	r0, r6
 8000734:	f7ff ff9c 	bl	8000670 <__clzdi2>
 8000738:	465b      	mov	r3, fp
 800073a:	1a1b      	subs	r3, r3, r0
 800073c:	469c      	mov	ip, r3
 800073e:	3b20      	subs	r3, #32
 8000740:	469b      	mov	fp, r3
 8000742:	d500      	bpl.n	8000746 <__divdi3+0x6a>
 8000744:	e075      	b.n	8000832 <__divdi3+0x156>
 8000746:	4651      	mov	r1, sl
 8000748:	4658      	mov	r0, fp
 800074a:	4081      	lsls	r1, r0
 800074c:	000b      	movs	r3, r1
 800074e:	4651      	mov	r1, sl
 8000750:	4660      	mov	r0, ip
 8000752:	4081      	lsls	r1, r0
 8000754:	000a      	movs	r2, r1
 8000756:	42bb      	cmp	r3, r7
 8000758:	d861      	bhi.n	800081e <__divdi3+0x142>
 800075a:	d05e      	beq.n	800081a <__divdi3+0x13e>
 800075c:	0034      	movs	r4, r6
 800075e:	003d      	movs	r5, r7
 8000760:	4659      	mov	r1, fp
 8000762:	1aa4      	subs	r4, r4, r2
 8000764:	419d      	sbcs	r5, r3
 8000766:	2900      	cmp	r1, #0
 8000768:	da00      	bge.n	800076c <__divdi3+0x90>
 800076a:	e07a      	b.n	8000862 <__divdi3+0x186>
 800076c:	2100      	movs	r1, #0
 800076e:	2000      	movs	r0, #0
 8000770:	2601      	movs	r6, #1
 8000772:	9000      	str	r0, [sp, #0]
 8000774:	9101      	str	r1, [sp, #4]
 8000776:	4659      	mov	r1, fp
 8000778:	408e      	lsls	r6, r1
 800077a:	9601      	str	r6, [sp, #4]
 800077c:	4661      	mov	r1, ip
 800077e:	2601      	movs	r6, #1
 8000780:	408e      	lsls	r6, r1
 8000782:	4661      	mov	r1, ip
 8000784:	9600      	str	r6, [sp, #0]
 8000786:	2900      	cmp	r1, #0
 8000788:	d050      	beq.n	800082c <__divdi3+0x150>
 800078a:	07d9      	lsls	r1, r3, #31
 800078c:	0856      	lsrs	r6, r2, #1
 800078e:	085f      	lsrs	r7, r3, #1
 8000790:	430e      	orrs	r6, r1
 8000792:	4663      	mov	r3, ip
 8000794:	e00e      	b.n	80007b4 <__divdi3+0xd8>
 8000796:	42af      	cmp	r7, r5
 8000798:	d101      	bne.n	800079e <__divdi3+0xc2>
 800079a:	42a6      	cmp	r6, r4
 800079c:	d80c      	bhi.n	80007b8 <__divdi3+0xdc>
 800079e:	1ba4      	subs	r4, r4, r6
 80007a0:	41bd      	sbcs	r5, r7
 80007a2:	2101      	movs	r1, #1
 80007a4:	1924      	adds	r4, r4, r4
 80007a6:	416d      	adcs	r5, r5
 80007a8:	2200      	movs	r2, #0
 80007aa:	3b01      	subs	r3, #1
 80007ac:	1864      	adds	r4, r4, r1
 80007ae:	4155      	adcs	r5, r2
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d006      	beq.n	80007c2 <__divdi3+0xe6>
 80007b4:	42af      	cmp	r7, r5
 80007b6:	d9ee      	bls.n	8000796 <__divdi3+0xba>
 80007b8:	3b01      	subs	r3, #1
 80007ba:	1924      	adds	r4, r4, r4
 80007bc:	416d      	adcs	r5, r5
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f8      	bne.n	80007b4 <__divdi3+0xd8>
 80007c2:	9800      	ldr	r0, [sp, #0]
 80007c4:	9901      	ldr	r1, [sp, #4]
 80007c6:	465b      	mov	r3, fp
 80007c8:	1900      	adds	r0, r0, r4
 80007ca:	4169      	adcs	r1, r5
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db3d      	blt.n	800084c <__divdi3+0x170>
 80007d0:	002e      	movs	r6, r5
 80007d2:	40de      	lsrs	r6, r3
 80007d4:	4663      	mov	r3, ip
 80007d6:	002c      	movs	r4, r5
 80007d8:	40dc      	lsrs	r4, r3
 80007da:	465b      	mov	r3, fp
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db4b      	blt.n	8000878 <__divdi3+0x19c>
 80007e0:	0034      	movs	r4, r6
 80007e2:	465d      	mov	r5, fp
 80007e4:	40ac      	lsls	r4, r5
 80007e6:	0023      	movs	r3, r4
 80007e8:	4664      	mov	r4, ip
 80007ea:	40a6      	lsls	r6, r4
 80007ec:	0032      	movs	r2, r6
 80007ee:	1a80      	subs	r0, r0, r2
 80007f0:	4199      	sbcs	r1, r3
 80007f2:	e003      	b.n	80007fc <__divdi3+0x120>
 80007f4:	42b2      	cmp	r2, r6
 80007f6:	d996      	bls.n	8000726 <__divdi3+0x4a>
 80007f8:	2000      	movs	r0, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	464b      	mov	r3, r9
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <__divdi3+0x130>
 8000802:	0003      	movs	r3, r0
 8000804:	000c      	movs	r4, r1
 8000806:	2100      	movs	r1, #0
 8000808:	4258      	negs	r0, r3
 800080a:	41a1      	sbcs	r1, r4
 800080c:	b003      	add	sp, #12
 800080e:	bc3c      	pop	{r2, r3, r4, r5}
 8000810:	4690      	mov	r8, r2
 8000812:	4699      	mov	r9, r3
 8000814:	46a2      	mov	sl, r4
 8000816:	46ab      	mov	fp, r5
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	42b1      	cmp	r1, r6
 800081c:	d99e      	bls.n	800075c <__divdi3+0x80>
 800081e:	2100      	movs	r1, #0
 8000820:	2000      	movs	r0, #0
 8000822:	9000      	str	r0, [sp, #0]
 8000824:	9101      	str	r1, [sp, #4]
 8000826:	4661      	mov	r1, ip
 8000828:	2900      	cmp	r1, #0
 800082a:	d1ae      	bne.n	800078a <__divdi3+0xae>
 800082c:	9800      	ldr	r0, [sp, #0]
 800082e:	9901      	ldr	r1, [sp, #4]
 8000830:	e7e4      	b.n	80007fc <__divdi3+0x120>
 8000832:	2320      	movs	r3, #32
 8000834:	4662      	mov	r2, ip
 8000836:	4651      	mov	r1, sl
 8000838:	1a9b      	subs	r3, r3, r2
 800083a:	40d9      	lsrs	r1, r3
 800083c:	4640      	mov	r0, r8
 800083e:	9100      	str	r1, [sp, #0]
 8000840:	4661      	mov	r1, ip
 8000842:	4088      	lsls	r0, r1
 8000844:	0003      	movs	r3, r0
 8000846:	9900      	ldr	r1, [sp, #0]
 8000848:	430b      	orrs	r3, r1
 800084a:	e780      	b.n	800074e <__divdi3+0x72>
 800084c:	4662      	mov	r2, ip
 800084e:	2320      	movs	r3, #32
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	002a      	movs	r2, r5
 8000854:	409a      	lsls	r2, r3
 8000856:	0026      	movs	r6, r4
 8000858:	0013      	movs	r3, r2
 800085a:	4662      	mov	r2, ip
 800085c:	40d6      	lsrs	r6, r2
 800085e:	431e      	orrs	r6, r3
 8000860:	e7b8      	b.n	80007d4 <__divdi3+0xf8>
 8000862:	4661      	mov	r1, ip
 8000864:	2620      	movs	r6, #32
 8000866:	2701      	movs	r7, #1
 8000868:	1a76      	subs	r6, r6, r1
 800086a:	2000      	movs	r0, #0
 800086c:	2100      	movs	r1, #0
 800086e:	40f7      	lsrs	r7, r6
 8000870:	9000      	str	r0, [sp, #0]
 8000872:	9101      	str	r1, [sp, #4]
 8000874:	9701      	str	r7, [sp, #4]
 8000876:	e781      	b.n	800077c <__divdi3+0xa0>
 8000878:	4667      	mov	r7, ip
 800087a:	2320      	movs	r3, #32
 800087c:	4662      	mov	r2, ip
 800087e:	0035      	movs	r5, r6
 8000880:	40bc      	lsls	r4, r7
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	40dd      	lsrs	r5, r3
 8000886:	0023      	movs	r3, r4
 8000888:	432b      	orrs	r3, r5
 800088a:	e7ad      	b.n	80007e8 <__divdi3+0x10c>

0800088c <__clzsi2>:
 800088c:	211c      	movs	r1, #28
 800088e:	2301      	movs	r3, #1
 8000890:	041b      	lsls	r3, r3, #16
 8000892:	4298      	cmp	r0, r3
 8000894:	d301      	bcc.n	800089a <__clzsi2+0xe>
 8000896:	0c00      	lsrs	r0, r0, #16
 8000898:	3910      	subs	r1, #16
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	4298      	cmp	r0, r3
 800089e:	d301      	bcc.n	80008a4 <__clzsi2+0x18>
 80008a0:	0a00      	lsrs	r0, r0, #8
 80008a2:	3908      	subs	r1, #8
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	4298      	cmp	r0, r3
 80008a8:	d301      	bcc.n	80008ae <__clzsi2+0x22>
 80008aa:	0900      	lsrs	r0, r0, #4
 80008ac:	3904      	subs	r1, #4
 80008ae:	a202      	add	r2, pc, #8	; (adr r2, 80008b8 <__clzsi2+0x2c>)
 80008b0:	5c10      	ldrb	r0, [r2, r0]
 80008b2:	1840      	adds	r0, r0, r1
 80008b4:	4770      	bx	lr
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	02020304 	.word	0x02020304
 80008bc:	01010101 	.word	0x01010101
	...

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	2214      	movs	r2, #20
 80008ce:	2100      	movs	r1, #0
 80008d0:	a803      	add	r0, sp, #12
 80008d2:	f002 ffb5 	bl	8003840 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	2401      	movs	r4, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3_Pin, GPIO_PIN_RESET);
 80008da:	25a0      	movs	r5, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_GPIO_Init+0x74>)
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3_Pin, GPIO_PIN_RESET);
 80008de:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pins : EN_BAT_MEAS_Pin EN_VCC3V3s_Pin */
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2600      	movs	r6, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	4301      	orrs	r1, r0
 80008e6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80008e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3_Pin, GPIO_PIN_RESET);
 80008ea:	2190      	movs	r1, #144	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	4002      	ands	r2, r0
 80008ee:	9201      	str	r2, [sp, #4]
 80008f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3_Pin, GPIO_PIN_RESET);
 80008f4:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4322      	orrs	r2, r4
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4023      	ands	r3, r4
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3_Pin, GPIO_PIN_RESET);
 8000904:	f001 f9d4 	bl	8001cb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, WAKE_DS_WISOL_Pin|RST_WISOL_Pin, GPIO_PIN_SET);
 8000908:	0022      	movs	r2, r4
 800090a:	0028      	movs	r0, r5
 800090c:	2160      	movs	r1, #96	; 0x60
 800090e:	f001 f9cf 	bl	8001cb0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3_Pin;
 8000912:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	a903      	add	r1, sp, #12
 8000916:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3_Pin;
 8000918:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f001 f91a 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_DS_WISOL_Pin RST_WISOL_Pin */
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 8000924:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	a903      	add	r1, sp, #12
 8000928:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 800092a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f001 f911 	bl	8001b58 <HAL_GPIO_Init>
}
 8000936:	b008      	add	sp, #32
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40021000 	.word	0x40021000

08000940 <MX_ADC_Init>:
{
 8000940:	b513      	push	{r0, r1, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	2208      	movs	r2, #8
 8000944:	2100      	movs	r1, #0
 8000946:	4668      	mov	r0, sp
 8000948:	f002 ff7a 	bl	8003840 <memset>
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800094c:	2280      	movs	r2, #128	; 0x80
  hadc.Instance = ADC1;
 800094e:	4c18      	ldr	r4, [pc, #96]	; (80009b0 <MX_ADC_Init+0x70>)
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_ADC_Init+0x74>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000952:	05d2      	lsls	r2, r2, #23
 8000954:	6062      	str	r2, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000956:	2201      	movs	r2, #1
  hadc.Instance = ADC1;
 8000958:	6023      	str	r3, [r4, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800095a:	2300      	movs	r3, #0
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800095c:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = DISABLE;
 800095e:	18a2      	adds	r2, r4, r2
 8000960:	77d3      	strb	r3, [r2, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000962:	1ca2      	adds	r2, r4, #2
 8000964:	77d3      	strb	r3, [r2, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000966:	22c2      	movs	r2, #194	; 0xc2
 8000968:	32ff      	adds	r2, #255	; 0xff
 800096a:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800096c:	0022      	movs	r2, r4
 800096e:	322c      	adds	r2, #44	; 0x2c
 8000970:	7013      	strb	r3, [r2, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000972:	2204      	movs	r2, #4
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000974:	0020      	movs	r0, r4
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000976:	6162      	str	r2, [r4, #20]
  hadc.Init.OversamplingMode = DISABLE;
 8000978:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800097a:	60a3      	str	r3, [r4, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800097c:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097e:	60e3      	str	r3, [r4, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000980:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000982:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000984:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000986:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000988:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800098a:	f000 feaf 	bl	80016ec <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_1;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_ADC_Init+0x78>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000990:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_1;
 8000992:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000994:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000996:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000998:	015b      	lsls	r3, r3, #5
 800099a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800099c:	f001 f82a 	bl	80019f4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_ADC_Init+0x7c>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009a2:	4669      	mov	r1, sp
 80009a4:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80009a6:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009a8:	f001 f824 	bl	80019f4 <HAL_ADC_ConfigChannel>
}
 80009ac:	bd13      	pop	{r0, r1, r4, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	200003fc 	.word	0x200003fc
 80009b4:	40012400 	.word	0x40012400
 80009b8:	04000002 	.word	0x04000002
 80009bc:	0c000008 	.word	0x0c000008

080009c0 <MX_LPUART1_UART_Init>:
  hlpuart1.Instance = LPUART1;
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_LPUART1_UART_Init+0x28>)
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_LPUART1_UART_Init+0x2c>)
{
 80009c4:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 80009c6:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 80009c8:	2396      	movs	r3, #150	; 0x96
 80009ca:	019b      	lsls	r3, r3, #6
 80009cc:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009ce:	220c      	movs	r2, #12
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d0:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009d2:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d4:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009d6:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009d8:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009dc:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009de:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e0:	f002 fd44 	bl	800346c <HAL_UART_Init>
}
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20000350 	.word	0x20000350
 80009ec:	40004800 	.word	0x40004800

080009f0 <stm32l_lowPowerSetup>:
	__HAL_RCC_PWR_CLK_ENABLE(); // Enable Power Control clock
 80009f0:	2380      	movs	r3, #128	; 0x80
{
 80009f2:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	2601      	movs	r6, #1
	__HAL_RCC_PWR_CLK_ENABLE(); // Enable Power Control clock
 80009f6:	4c1e      	ldr	r4, [pc, #120]	; (8000a70 <stm32l_lowPowerSetup+0x80>)
 80009f8:	055b      	lsls	r3, r3, #21
 80009fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
{
 80009fc:	b088      	sub	sp, #32
	__HAL_RCC_PWR_CLK_ENABLE(); // Enable Power Control clock
 80009fe:	4313      	orrs	r3, r2
 8000a00:	63a3      	str	r3, [r4, #56]	; 0x38
	HAL_PWR_EnableBkUpAccess (); //Enable access to the backup domain (RTC registers, RTC backup data registers).
 8000a02:	f001 fa07 	bl	8001e14 <HAL_PWR_EnableBkUpAccess>
	HAL_PWREx_EnableUltraLowPower(); // Ultra low power mode
 8000a06:	f001 fa35 	bl	8001e74 <HAL_PWREx_EnableUltraLowPower>
	HAL_PWREx_EnableFastWakeUp(); // Fast wake-up for ultra low power mode
 8000a0a:	f001 fa29 	bl	8001e60 <HAL_PWREx_EnableFastWakeUp>
	GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000a0e:	220c      	movs	r2, #12
 8000a10:	2100      	movs	r1, #0
 8000a12:	a805      	add	r0, sp, #20
 8000a14:	f002 ff14 	bl	8003840 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	2102      	movs	r1, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2504      	movs	r5, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a1e:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4333      	orrs	r3, r6
 8000a22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a26:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4033      	ands	r3, r6
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a30:	430a      	orrs	r2, r1
 8000a32:	62e2      	str	r2, [r4, #44]	; 0x2c
 8000a34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a36:	400b      	ands	r3, r1
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a3e:	a903      	add	r1, sp, #12
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a40:	432b      	orrs	r3, r5
 8000a42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a46:	402b      	ands	r3, r5
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStructure.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_13|GPIO_PIN_14;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <stm32l_lowPowerSetup+0x84>)
 8000a4e:	9303      	str	r3, [sp, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8000a50:	2303      	movs	r3, #3
 8000a52:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a54:	f001 f880 	bl	8001b58 <HAL_GPIO_Init>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <stm32l_lowPowerSetup+0x88>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4315      	orrs	r5, r2
 8000a5e:	601d      	str	r5, [r3, #0]
	HAL_SuspendTick();
 8000a60:	f000 fd8e 	bl	8001580 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000a64:	0031      	movs	r1, r6
 8000a66:	0030      	movs	r0, r6
 8000a68:	f001 f9de 	bl	8001e28 <HAL_PWR_EnterSTOPMode>
}
 8000a6c:	b008      	add	sp, #32
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	000060f0 	.word	0x000060f0
 8000a78:	40007000 	.word	0x40007000

08000a7c <UPDATE_FREQUENCY_MESSAGE>:
void UPDATE_FREQUENCY_MESSAGE(void){
 8000a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	hora_ref[0] = RX_UART_BUFFER[22];
 8000a7e:	4669      	mov	r1, sp
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <UPDATE_FREQUENCY_MESSAGE+0x50>)
	frequency_msg[0] = RX_UART_BUFFER[23];
 8000a82:	a801      	add	r0, sp, #4
	hora_ref[0] = RX_UART_BUFFER[22];
 8000a84:	7d9a      	ldrb	r2, [r3, #22]
 8000a86:	700a      	strb	r2, [r1, #0]
	frequency_msg[0] = RX_UART_BUFFER[23];
 8000a88:	7dda      	ldrb	r2, [r3, #23]
	freq = (int)strtol(frequency_msg, NULL, 16);
 8000a8a:	2100      	movs	r1, #0
	frequency_msg[0] = RX_UART_BUFFER[23];
 8000a8c:	7002      	strb	r2, [r0, #0]
	frequency_msg[1] = RX_UART_BUFFER[25];
 8000a8e:	7e5b      	ldrb	r3, [r3, #25]
	freq = (int)strtol(frequency_msg, NULL, 16);
 8000a90:	2210      	movs	r2, #16
	frequency_msg[1] = RX_UART_BUFFER[25];
 8000a92:	7043      	strb	r3, [r0, #1]
	freq = (int)strtol(frequency_msg, NULL, 16);
 8000a94:	f003 f830 	bl	8003af8 <strtol>
	HORA = (int)strtol(hora_ref, NULL, 16);
 8000a98:	2210      	movs	r2, #16
	freq = (int)strtol(frequency_msg, NULL, 16);
 8000a9a:	0004      	movs	r4, r0
	HORA = (int)strtol(hora_ref, NULL, 16);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4668      	mov	r0, sp
 8000aa0:	f003 f82a 	bl	8003af8 <strtol>
	if ((freq > 0) & (freq <= 24)){
 8000aa4:	1e62      	subs	r2, r4, #1
	HORA = (int)strtol(hora_ref, NULL, 16);
 8000aa6:	0003      	movs	r3, r0
	if ((freq > 0) & (freq <= 24)){
 8000aa8:	2a17      	cmp	r2, #23
 8000aaa:	d80c      	bhi.n	8000ac6 <UPDATE_FREQUENCY_MESSAGE+0x4a>
		HOUR_EVERY_MSG = freq;
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <UPDATE_FREQUENCY_MESSAGE+0x54>)
 8000aae:	4d09      	ldr	r5, [pc, #36]	; (8000ad4 <UPDATE_FREQUENCY_MESSAGE+0x58>)
 8000ab0:	6014      	str	r4, [r2, #0]
		if (ts.tm_hour >= HORA){
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <UPDATE_FREQUENCY_MESSAGE+0x5c>)
 8000ab4:	6892      	ldr	r2, [r2, #8]
 8000ab6:	1a10      	subs	r0, r2, r0
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	db05      	blt.n	8000ac8 <UPDATE_FREQUENCY_MESSAGE+0x4c>
			SUM_HOUR = (ts.tm_hour - HORA + 24) % HOUR_EVERY_MSG;
 8000abc:	0021      	movs	r1, r4
 8000abe:	f7ff fcaf 	bl	8000420 <__aeabi_idivmod>
 8000ac2:	b2c9      	uxtb	r1, r1
 8000ac4:	7029      	strb	r1, [r5, #0]
}
 8000ac6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
			SUM_HOUR = (ts.tm_hour - HORA + 24) % HOUR_EVERY_MSG;
 8000ac8:	3018      	adds	r0, #24
 8000aca:	e7f7      	b.n	8000abc <UPDATE_FREQUENCY_MESSAGE+0x40>
 8000acc:	20000308 	.word	0x20000308
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	200003d1 	.word	0x200003d1
 8000ad8:	20000328 	.word	0x20000328

08000adc <UPDATE_UTC>:
void UPDATE_UTC(void){
 8000adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	utc[0] = RX_UART_BUFFER[20];
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <UPDATE_UTC+0x44>)
 8000ae0:	a801      	add	r0, sp, #4
 8000ae2:	7d1a      	ldrb	r2, [r3, #20]
 8000ae4:	4c0f      	ldr	r4, [pc, #60]	; (8000b24 <UPDATE_UTC+0x48>)
 8000ae6:	7002      	strb	r2, [r0, #0]
		if (RX_UART_BUFFER[19] == '0'){
 8000ae8:	7cdb      	ldrb	r3, [r3, #19]
 8000aea:	2b30      	cmp	r3, #48	; 0x30
 8000aec:	d10c      	bne.n	8000b08 <UPDATE_UTC+0x2c>
			ts.tm_hour += (int)strtol(utc, NULL, 16);
 8000aee:	2210      	movs	r2, #16
 8000af0:	2100      	movs	r1, #0
 8000af2:	f003 f801 	bl	8003af8 <strtol>
 8000af6:	68a3      	ldr	r3, [r4, #8]
 8000af8:	1818      	adds	r0, r3, r0
 8000afa:	60a0      	str	r0, [r4, #8]
		ts.tm_hour = ts.tm_hour % 24;
 8000afc:	68a0      	ldr	r0, [r4, #8]
 8000afe:	2118      	movs	r1, #24
 8000b00:	f7ff fc8e 	bl	8000420 <__aeabi_idivmod>
 8000b04:	60a1      	str	r1, [r4, #8]
}
 8000b06:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		}else if (RX_UART_BUFFER[19] == '1'){
 8000b08:	2b31      	cmp	r3, #49	; 0x31
 8000b0a:	d1f7      	bne.n	8000afc <UPDATE_UTC+0x20>
			ts.tm_hour =ts.tm_hour - (int)strtol(utc, NULL, 16) + 24;
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	2100      	movs	r1, #0
 8000b10:	68a5      	ldr	r5, [r4, #8]
 8000b12:	f002 fff1 	bl	8003af8 <strtol>
 8000b16:	1a2d      	subs	r5, r5, r0
 8000b18:	3518      	adds	r5, #24
 8000b1a:	60a5      	str	r5, [r4, #8]
 8000b1c:	e7ee      	b.n	8000afc <UPDATE_UTC+0x20>
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000308 	.word	0x20000308
 8000b24:	20000328 	.word	0x20000328

08000b28 <UPDATE_RTC_TIME>:
void UPDATE_RTC_TIME(void){
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sTime.Hours = ts.tm_hour + (int)(ts.tm_hour/10)*6;
 8000b2a:	4e12      	ldr	r6, [pc, #72]	; (8000b74 <UPDATE_RTC_TIME+0x4c>)
 8000b2c:	210a      	movs	r1, #10
 8000b2e:	68b7      	ldr	r7, [r6, #8]
 8000b30:	2406      	movs	r4, #6
 8000b32:	0038      	movs	r0, r7
 8000b34:	f7ff fb8e 	bl	8000254 <__divsi3>
 8000b38:	4360      	muls	r0, r4
 8000b3a:	4d0f      	ldr	r5, [pc, #60]	; (8000b78 <UPDATE_RTC_TIME+0x50>)
 8000b3c:	19c0      	adds	r0, r0, r7
    sTime.Minutes = ts.tm_min + (int)(ts.tm_min/10)*6;
 8000b3e:	6877      	ldr	r7, [r6, #4]
    sTime.Hours = ts.tm_hour + (int)(ts.tm_hour/10)*6;
 8000b40:	7028      	strb	r0, [r5, #0]
    sTime.Minutes = ts.tm_min + (int)(ts.tm_min/10)*6;
 8000b42:	210a      	movs	r1, #10
 8000b44:	0038      	movs	r0, r7
 8000b46:	f7ff fb85 	bl	8000254 <__divsi3>
 8000b4a:	4360      	muls	r0, r4
    sTime.Seconds = ts.tm_sec + (int)(ts.tm_sec/10)*6;
 8000b4c:	6836      	ldr	r6, [r6, #0]
    sTime.Minutes = ts.tm_min + (int)(ts.tm_min/10)*6;
 8000b4e:	19c0      	adds	r0, r0, r7
 8000b50:	7068      	strb	r0, [r5, #1]
    sTime.Seconds = ts.tm_sec + (int)(ts.tm_sec/10)*6;
 8000b52:	210a      	movs	r1, #10
 8000b54:	0030      	movs	r0, r6
 8000b56:	f7ff fb7d 	bl	8000254 <__divsi3>
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b5a:	2300      	movs	r3, #0
    sTime.Seconds = ts.tm_sec + (int)(ts.tm_sec/10)*6;
 8000b5c:	4344      	muls	r4, r0
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b5e:	0029      	movs	r1, r5
    sTime.Seconds = ts.tm_sec + (int)(ts.tm_sec/10)*6;
 8000b60:	19a4      	adds	r4, r4, r6
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b62:	2201      	movs	r2, #1
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <UPDATE_RTC_TIME+0x54>)
    sTime.Seconds = ts.tm_sec + (int)(ts.tm_sec/10)*6;
 8000b66:	70ac      	strb	r4, [r5, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b68:	60eb      	str	r3, [r5, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b6a:	612b      	str	r3, [r5, #16]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b6c:	f001 fe7e 	bl	800286c <HAL_RTC_SetTime>
}
 8000b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000328 	.word	0x20000328
 8000b78:	200002f4 	.word	0x200002f4
 8000b7c:	200003d4 	.word	0x200003d4

08000b80 <CHECK_RECEPTION_OK>:
    FLAG_T UART_OK = TRUE;
 8000b80:	2001      	movs	r0, #1
    for (i=29;i>=7;i-=3){
 8000b82:	231d      	movs	r3, #29
        if ((RX_UART_BUFFER[i] < '0') | (RX_UART_BUFFER[i] > 'F')){
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <CHECK_RECEPTION_OK+0x24>)
 8000b86:	5cca      	ldrb	r2, [r1, r3]
 8000b88:	3a30      	subs	r2, #48	; 0x30
 8000b8a:	2a16      	cmp	r2, #22
 8000b8c:	d900      	bls.n	8000b90 <CHECK_RECEPTION_OK+0x10>
            UART_OK = FALSE;
 8000b8e:	2000      	movs	r0, #0
        if ((RX_UART_BUFFER[i-1] < '0') | (RX_UART_BUFFER[i-1] > 'F')){
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	5c8a      	ldrb	r2, [r1, r2]
 8000b94:	3a30      	subs	r2, #48	; 0x30
 8000b96:	2a16      	cmp	r2, #22
 8000b98:	d900      	bls.n	8000b9c <CHECK_RECEPTION_OK+0x1c>
            UART_OK = FALSE;
 8000b9a:	2000      	movs	r0, #0
    for (i=29;i>=7;i-=3){
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	d1f1      	bne.n	8000b86 <CHECK_RECEPTION_OK+0x6>
}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000308 	.word	0x20000308

08000ba8 <DECODED_TIME>:
void DECODED_TIME(void){
 8000ba8:	b510      	push	{r4, lr}
	  timeraw[0] = RX_UART_BUFFER[7];
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <DECODED_TIME+0x50>)
 8000bac:	4813      	ldr	r0, [pc, #76]	; (8000bfc <DECODED_TIME+0x54>)
 8000bae:	79da      	ldrb	r2, [r3, #7]
	  number = (time_t)strtol(timeraw, NULL, 16);
 8000bb0:	2100      	movs	r1, #0
	  timeraw[0] = RX_UART_BUFFER[7];
 8000bb2:	7002      	strb	r2, [r0, #0]
	  timeraw[1] = RX_UART_BUFFER[8];
 8000bb4:	7a1a      	ldrb	r2, [r3, #8]
 8000bb6:	7042      	strb	r2, [r0, #1]
	  timeraw[2] = RX_UART_BUFFER[10];
 8000bb8:	7a9a      	ldrb	r2, [r3, #10]
 8000bba:	7082      	strb	r2, [r0, #2]
	  timeraw[3] = RX_UART_BUFFER[11];
 8000bbc:	7ada      	ldrb	r2, [r3, #11]
 8000bbe:	70c2      	strb	r2, [r0, #3]
	  timeraw[4] = RX_UART_BUFFER[13];
 8000bc0:	7b5a      	ldrb	r2, [r3, #13]
 8000bc2:	7102      	strb	r2, [r0, #4]
	  timeraw[5] = RX_UART_BUFFER[14];
 8000bc4:	7b9a      	ldrb	r2, [r3, #14]
 8000bc6:	7142      	strb	r2, [r0, #5]
	  timeraw[6] = RX_UART_BUFFER[16];
 8000bc8:	7c1a      	ldrb	r2, [r3, #16]
 8000bca:	7182      	strb	r2, [r0, #6]
	  timeraw[7] = RX_UART_BUFFER[17];
 8000bcc:	7c5b      	ldrb	r3, [r3, #17]
	  number = (time_t)strtol(timeraw, NULL, 16);
 8000bce:	2210      	movs	r2, #16
	  timeraw[7] = RX_UART_BUFFER[17];
 8000bd0:	71c3      	strb	r3, [r0, #7]
	  number = (time_t)strtol(timeraw, NULL, 16);
 8000bd2:	f002 ff91 	bl	8003af8 <strtol>
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <DECODED_TIME+0x58>)
 8000bd8:	6010      	str	r0, [r2, #0]
 8000bda:	17c0      	asrs	r0, r0, #31
 8000bdc:	6050      	str	r0, [r2, #4]
	  ts = *localtime(&number);
 8000bde:	0010      	movs	r0, r2
 8000be0:	f002 fd12 	bl	8003608 <localtime>
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <DECODED_TIME+0x5c>)
 8000be6:	0013      	movs	r3, r2
 8000be8:	c816      	ldmia	r0!, {r1, r2, r4}
 8000bea:	c316      	stmia	r3!, {r1, r2, r4}
 8000bec:	c816      	ldmia	r0!, {r1, r2, r4}
 8000bee:	c316      	stmia	r3!, {r1, r2, r4}
 8000bf0:	c816      	ldmia	r0!, {r1, r2, r4}
 8000bf2:	c316      	stmia	r3!, {r1, r2, r4}
}
 8000bf4:	bd10      	pop	{r4, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000308 	.word	0x20000308
 8000bfc:	2000029c 	.word	0x2000029c
 8000c00:	20000260 	.word	0x20000260
 8000c04:	20000328 	.word	0x20000328

08000c08 <HAL_RTC_AlarmAEventCallback>:
  if (SUM_HOUR == HOUR_EVERY_MSG - 1){
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_RTC_AlarmAEventCallback+0x24>)
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_RTC_AlarmAEventCallback+0x28>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	7811      	ldrb	r1, [r2, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d105      	bne.n	8000c22 <HAL_RTC_AlarmAEventCallback+0x1a>
	 time_flag = TRUE;
 8000c16:	2101      	movs	r1, #1
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8000c1a:	7019      	strb	r1, [r3, #0]
	 SUM_HOUR = 0;
 8000c1c:	2300      	movs	r3, #0
	 SUM_HOUR++;
 8000c1e:	7013      	strb	r3, [r2, #0]
}
 8000c20:	4770      	bx	lr
	 SUM_HOUR++;
 8000c22:	7813      	ldrb	r3, [r2, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	e7f9      	b.n	8000c1e <HAL_RTC_AlarmAEventCallback+0x16>
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	200003d1 	.word	0x200003d1
 8000c34:	200003d0 	.word	0x200003d0

08000c38 <HAL_UART_RxCpltCallback>:
	UART_OK = TRUE;
 8000c38:	2301      	movs	r3, #1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c3a:	b570      	push	{r4, r5, r6, lr}
	UART_OK = TRUE;
 8000c3c:	2100      	movs	r1, #0
	for (i=29;i>=7;i-=3){
 8000c3e:	221d      	movs	r2, #29
 8000c40:	001e      	movs	r6, r3
	UART_OK = TRUE;
 8000c42:	4c11      	ldr	r4, [pc, #68]	; (8000c88 <HAL_UART_RxCpltCallback+0x50>)
	     if ((RX_UART_BUFFER[i] < '0') | (RX_UART_BUFFER[i] > 'F')){
 8000c44:	4d11      	ldr	r5, [pc, #68]	; (8000c8c <HAL_UART_RxCpltCallback+0x54>)
	UART_OK = TRUE;
 8000c46:	7023      	strb	r3, [r4, #0]
	     if ((RX_UART_BUFFER[i] < '0') | (RX_UART_BUFFER[i] > 'F')){
 8000c48:	5ca8      	ldrb	r0, [r5, r2]
 8000c4a:	3830      	subs	r0, #48	; 0x30
 8000c4c:	2816      	cmp	r0, #22
 8000c4e:	d901      	bls.n	8000c54 <HAL_UART_RxCpltCallback+0x1c>
 8000c50:	0031      	movs	r1, r6
	         UART_OK = FALSE;
 8000c52:	2300      	movs	r3, #0
	     if ((RX_UART_BUFFER[i-1] < '0') | (RX_UART_BUFFER[i-1] > 'F')){
 8000c54:	1e50      	subs	r0, r2, #1
 8000c56:	5c28      	ldrb	r0, [r5, r0]
 8000c58:	3830      	subs	r0, #48	; 0x30
 8000c5a:	2816      	cmp	r0, #22
 8000c5c:	d901      	bls.n	8000c62 <HAL_UART_RxCpltCallback+0x2a>
 8000c5e:	0031      	movs	r1, r6
	         UART_OK = FALSE;
 8000c60:	2300      	movs	r3, #0
	for (i=29;i>=7;i-=3){
 8000c62:	3a03      	subs	r2, #3
 8000c64:	2a05      	cmp	r2, #5
 8000c66:	d1ef      	bne.n	8000c48 <HAL_UART_RxCpltCallback+0x10>
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	d000      	beq.n	8000c6e <HAL_UART_RxCpltCallback+0x36>
 8000c6c:	7023      	strb	r3, [r4, #0]
	if (CHECK_RECEPTION_OK() == TRUE){
 8000c6e:	f7ff ff87 	bl	8000b80 <CHECK_RECEPTION_OK>
 8000c72:	2801      	cmp	r0, #1
 8000c74:	d107      	bne.n	8000c86 <HAL_UART_RxCpltCallback+0x4e>
	     DECODED_TIME();
 8000c76:	f7ff ff97 	bl	8000ba8 <DECODED_TIME>
	     UPDATE_UTC();
 8000c7a:	f7ff ff2f 	bl	8000adc <UPDATE_UTC>
	     UPDATE_RTC_TIME();
 8000c7e:	f7ff ff53 	bl	8000b28 <UPDATE_RTC_TIME>
	     UPDATE_FREQUENCY_MESSAGE();
 8000c82:	f7ff fefb 	bl	8000a7c <UPDATE_FREQUENCY_MESSAGE>
}
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	200003f8 	.word	0x200003f8
 8000c8c:	20000308 	.word	0x20000308

08000c90 <COUNTER_CONSUMER>:
	SUM_DEC++;
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <COUNTER_CONSUMER+0x18>)
 8000c92:	7813      	ldrb	r3, [r2, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	7013      	strb	r3, [r2, #0]
	SUM_COUNTER--;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <COUNTER_CONSUMER+0x1c>)
 8000c9c:	7813      	ldrb	r3, [r2, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	7013      	strb	r3, [r2, #0]
}
 8000ca4:	4770      	bx	lr
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	200002a4 	.word	0x200002a4
 8000cac:	2000034c 	.word	0x2000034c

08000cb0 <HAL_GPIO_EXTI_Callback>:
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0x14>)
{
 8000cb4:	b510      	push	{r4, lr}
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000cb6:	6811      	ldr	r1, [r2, #0]
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6013      	str	r3, [r2, #0]
  COUNTER_CONSUMER();
 8000cbc:	f7ff ffe8 	bl	8000c90 <COUNTER_CONSUMER>
}
 8000cc0:	bd10      	pop	{r4, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <TRANSMIT_WSSFM10R2AT>:
void TRANSMIT_WSSFM10R2AT(char * buff, int ArrayLength){
 8000cc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000cca:	0006      	movs	r6, r0
 8000ccc:	000d      	movs	r5, r1
	sprintf(AT_COMANDO,"AT$RC\r\n");
 8000cce:	a801      	add	r0, sp, #4
 8000cd0:	4919      	ldr	r1, [pc, #100]	; (8000d38 <TRANSMIT_WSSFM10R2AT+0x70>)
 8000cd2:	f002 fe77 	bl	80039c4 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 8000cd6:	a801      	add	r0, sp, #4
 8000cd8:	f7ff fa16 	bl	8000108 <strlen>
 8000cdc:	4c17      	ldr	r4, [pc, #92]	; (8000d3c <TRANSMIT_WSSFM10R2AT+0x74>)
 8000cde:	b282      	uxth	r2, r0
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	a901      	add	r1, sp, #4
 8000ce4:	0020      	movs	r0, r4
 8000ce6:	f002 faa3 	bl	8003230 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f000 fc38 	bl	8001560 <HAL_Delay>
	sprintf(AT_COMANDO,"AT$SF=");
 8000cf0:	4913      	ldr	r1, [pc, #76]	; (8000d40 <TRANSMIT_WSSFM10R2AT+0x78>)
 8000cf2:	a801      	add	r0, sp, #4
 8000cf4:	f002 fe66 	bl	80039c4 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 8000cf8:	a801      	add	r0, sp, #4
 8000cfa:	f7ff fa05 	bl	8000108 <strlen>
 8000cfe:	a901      	add	r1, sp, #4
 8000d00:	b282      	uxth	r2, r0
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	0020      	movs	r0, r4
 8000d06:	f002 fa93 	bl	8003230 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)buff,(uint16_t)ArrayLength,(uint32_t)100);
 8000d0a:	b2aa      	uxth	r2, r5
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	0031      	movs	r1, r6
 8000d10:	0020      	movs	r0, r4
 8000d12:	f002 fa8d 	bl	8003230 <HAL_UART_Transmit>
    sprintf(AT_COMANDO,"\r\n");
 8000d16:	490b      	ldr	r1, [pc, #44]	; (8000d44 <TRANSMIT_WSSFM10R2AT+0x7c>)
 8000d18:	a801      	add	r0, sp, #4
 8000d1a:	f002 fe53 	bl	80039c4 <strcpy>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 8000d1e:	a801      	add	r0, sp, #4
 8000d20:	f7ff f9f2 	bl	8000108 <strlen>
 8000d24:	2364      	movs	r3, #100	; 0x64
 8000d26:	b282      	uxth	r2, r0
 8000d28:	a901      	add	r1, sp, #4
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	f002 fa80 	bl	8003230 <HAL_UART_Transmit>
    HAL_Delay(100);
 8000d30:	2064      	movs	r0, #100	; 0x64
 8000d32:	f000 fc15 	bl	8001560 <HAL_Delay>
}
 8000d36:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000d38:	08004c3d 	.word	0x08004c3d
 8000d3c:	20000350 	.word	0x20000350
 8000d40:	08004c45 	.word	0x08004c45
 8000d44:	08004c4e 	.word	0x08004c4e

08000d48 <TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK>:
{
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	0007      	movs	r7, r0
 8000d4e:	000e      	movs	r6, r1
	sprintf(AT,"AT$RC\r\n");
 8000d50:	a802      	add	r0, sp, #8
 8000d52:	4929      	ldr	r1, [pc, #164]	; (8000df8 <TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK+0xb0>)
 8000d54:	f002 fe36 	bl	80039c4 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT,(uint16_t)strlen(AT),(uint32_t)100);
 8000d58:	a802      	add	r0, sp, #8
 8000d5a:	f7ff f9d5 	bl	8000108 <strlen>
 8000d5e:	4c27      	ldr	r4, [pc, #156]	; (8000dfc <TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK+0xb4>)
 8000d60:	b282      	uxth	r2, r0
 8000d62:	a902      	add	r1, sp, #8
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	0020      	movs	r0, r4
 8000d68:	f002 fa62 	bl	8003230 <HAL_UART_Transmit>
	HAL_UART_Receive(&hlpuart1, RX_UART_BUFFER, 20, 1000);
 8000d6c:	23fa      	movs	r3, #250	; 0xfa
 8000d6e:	4d24      	ldr	r5, [pc, #144]	; (8000e00 <TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK+0xb8>)
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	2214      	movs	r2, #20
 8000d74:	0029      	movs	r1, r5
 8000d76:	0020      	movs	r0, r4
 8000d78:	f002 fac4 	bl	8003304 <HAL_UART_Receive>
	HAL_Delay(100);
 8000d7c:	2064      	movs	r0, #100	; 0x64
 8000d7e:	f000 fbef 	bl	8001560 <HAL_Delay>
	sprintf(AT,"AT$SF=");
 8000d82:	4920      	ldr	r1, [pc, #128]	; (8000e04 <TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK+0xbc>)
 8000d84:	a802      	add	r0, sp, #8
 8000d86:	f002 fe1d 	bl	80039c4 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT,(uint16_t)strlen(AT),(uint32_t)100);
 8000d8a:	a802      	add	r0, sp, #8
 8000d8c:	f7ff f9bc 	bl	8000108 <strlen>
 8000d90:	a902      	add	r1, sp, #8
 8000d92:	b282      	uxth	r2, r0
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	0020      	movs	r0, r4
 8000d98:	f002 fa4a 	bl	8003230 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)buff,(uint16_t)ArrayLength,(uint32_t)100);
 8000d9c:	b2b2      	uxth	r2, r6
 8000d9e:	2364      	movs	r3, #100	; 0x64
 8000da0:	0039      	movs	r1, r7
 8000da2:	0020      	movs	r0, r4
 8000da4:	f002 fa44 	bl	8003230 <HAL_UART_Transmit>
    sprintf(AT,",1\r\n");
 8000da8:	4917      	ldr	r1, [pc, #92]	; (8000e08 <TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK+0xc0>)
 8000daa:	a802      	add	r0, sp, #8
 8000dac:	f002 fe0a 	bl	80039c4 <strcpy>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT,(uint16_t)strlen(AT),(uint32_t)100);
 8000db0:	a802      	add	r0, sp, #8
 8000db2:	f7ff f9a9 	bl	8000108 <strlen>
 8000db6:	2364      	movs	r3, #100	; 0x64
 8000db8:	b282      	uxth	r2, r0
 8000dba:	a902      	add	r1, sp, #8
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	f002 fa37 	bl	8003230 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&hlpuart1, RX_UART_BUFFER, 32);
 8000dc2:	0029      	movs	r1, r5
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f001 ff18 	bl	8002bfc <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8000dcc:	2064      	movs	r0, #100	; 0x64
 8000dce:	f000 fbc7 	bl	8001560 <HAL_Delay>
	wakeup.WakeUpEvent=UART_WAKEUP_ON_STARTBIT; // UART_WAKEUP_ON_READDATA_NONEMPTY
 8000dd2:	2180      	movs	r1, #128	; 0x80
	HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1,wakeup);
 8000dd4:	9a01      	ldr	r2, [sp, #4]
	wakeup.WakeUpEvent=UART_WAKEUP_ON_STARTBIT; // UART_WAKEUP_ON_READDATA_NONEMPTY
 8000dd6:	0389      	lsls	r1, r1, #14
	HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1,wakeup);
 8000dd8:	0020      	movs	r0, r4
	wakeup.WakeUpEvent=UART_WAKEUP_ON_STARTBIT; // UART_WAKEUP_ON_READDATA_NONEMPTY
 8000dda:	9100      	str	r1, [sp, #0]
	HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1,wakeup);
 8000ddc:	f002 fb7a 	bl	80034d4 <HAL_UARTEx_StopModeWakeUpSourceConfig>
	__HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	6822      	ldr	r2, [r4, #0]
 8000de4:	03db      	lsls	r3, r3, #15
 8000de6:	6891      	ldr	r1, [r2, #8]
	HAL_UARTEx_EnableStopMode(&hlpuart1);
 8000de8:	0020      	movs	r0, r4
	__HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8000dea:	430b      	orrs	r3, r1
 8000dec:	6093      	str	r3, [r2, #8]
	HAL_UARTEx_EnableStopMode(&hlpuart1);
 8000dee:	f002 fbb5 	bl	800355c <HAL_UARTEx_EnableStopMode>
}
 8000df2:	b009      	add	sp, #36	; 0x24
 8000df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	08004c3d 	.word	0x08004c3d
 8000dfc:	20000350 	.word	0x20000350
 8000e00:	20000308 	.word	0x20000308
 8000e04:	08004c45 	.word	0x08004c45
 8000e08:	08004c4c 	.word	0x08004c4c

08000e0c <CONFIG_CHANNEL_ADC>:
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e0c:	2380      	movs	r3, #128	; 0x80
uint32_t CONFIG_CHANNEL_ADC(uint32_t channel){
 8000e0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e10:	4c0e      	ldr	r4, [pc, #56]	; (8000e4c <CONFIG_CHANNEL_ADC+0x40>)
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e12:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e14:	4669      	mov	r1, sp
	sConfig.Channel = channel;
 8000e16:	9000      	str	r0, [sp, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e18:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e1a:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e1c:	f000 fdea 	bl	80019f4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 8000e20:	0020      	movs	r0, r4
 8000e22:	f000 fd3b 	bl	800189c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8000e26:	2164      	movs	r1, #100	; 0x64
 8000e28:	0020      	movs	r0, r4
 8000e2a:	f000 fd81 	bl	8001930 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc);
 8000e2e:	0020      	movs	r0, r4
 8000e30:	f000 fddc 	bl	80019ec <HAL_ADC_GetValue>
 8000e34:	0005      	movs	r5, r0
	HAL_ADC_Stop(&hadc);
 8000e36:	0020      	movs	r0, r4
 8000e38:	f000 fd5c 	bl	80018f4 <HAL_ADC_Stop>
	sConfig.Rank = ADC_RANK_NONE;
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <CONFIG_CHANNEL_ADC+0x44>)
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e3e:	4669      	mov	r1, sp
 8000e40:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 8000e42:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e44:	f000 fdd6 	bl	80019f4 <HAL_ADC_ConfigChannel>
}
 8000e48:	0028      	movs	r0, r5
 8000e4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000e4c:	200003fc 	.word	0x200003fc
 8000e50:	00001001 	.word	0x00001001

08000e54 <GET_MEAS_BAT>:
uint32_t GET_MEAS_BAT(void){
 8000e54:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin, GPIO_PIN_SET);
 8000e56:	24a0      	movs	r4, #160	; 0xa0
 8000e58:	05e4      	lsls	r4, r4, #23
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f000 ff26 	bl	8001cb0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e64:	2032      	movs	r0, #50	; 0x32
 8000e66:	f000 fb7b 	bl	8001560 <HAL_Delay>
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6200/4095;
 8000e6a:	4807      	ldr	r0, [pc, #28]	; (8000e88 <GET_MEAS_BAT+0x34>)
 8000e6c:	f7ff ffce 	bl	8000e0c <CONFIG_CHANNEL_ADC>
 8000e70:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	0020      	movs	r0, r4
 8000e76:	2110      	movs	r1, #16
 8000e78:	f000 ff1a 	bl	8001cb0 <HAL_GPIO_WritePin>
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6200/4095;
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <GET_MEAS_BAT+0x38>)
 8000e7e:	4904      	ldr	r1, [pc, #16]	; (8000e90 <GET_MEAS_BAT+0x3c>)
 8000e80:	4368      	muls	r0, r5
 8000e82:	f7ff f95d 	bl	8000140 <__udivsi3>
}
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	04000002 	.word	0x04000002
 8000e8c:	00001838 	.word	0x00001838
 8000e90:	00000fff 	.word	0x00000fff

08000e94 <WAKE_WSSFM10R2AT>:
{
 8000e94:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_RESET);
 8000e96:	24a0      	movs	r4, #160	; 0xa0
 8000e98:	05e4      	lsls	r4, r4, #23
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	0020      	movs	r0, r4
 8000ea0:	f000 ff06 	bl	8001cb0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ea4:	2064      	movs	r0, #100	; 0x64
 8000ea6:	f000 fb5b 	bl	8001560 <HAL_Delay>
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2120      	movs	r1, #32
 8000eae:	0020      	movs	r0, r4
 8000eb0:	f000 fefe 	bl	8001cb0 <HAL_GPIO_WritePin>
	HAL_Delay(500);  // Wait for the wisol to be prepared
 8000eb4:	20fa      	movs	r0, #250	; 0xfa
 8000eb6:	0040      	lsls	r0, r0, #1
 8000eb8:	f000 fb52 	bl	8001560 <HAL_Delay>
}
 8000ebc:	bd10      	pop	{r4, pc}
	...

08000ec0 <DEEP_SLEEP_WSSFM10R2AT>:
{
 8000ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sprintf(AT,"AT$P=2\r\n");
 8000ec2:	4909      	ldr	r1, [pc, #36]	; (8000ee8 <DEEP_SLEEP_WSSFM10R2AT+0x28>)
 8000ec4:	a801      	add	r0, sp, #4
 8000ec6:	f002 fd7d 	bl	80039c4 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT,(uint16_t)strlen(AT),(uint32_t)100);
 8000eca:	a801      	add	r0, sp, #4
 8000ecc:	f7ff f91c 	bl	8000108 <strlen>
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	b282      	uxth	r2, r0
 8000ed4:	a901      	add	r1, sp, #4
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <DEEP_SLEEP_WSSFM10R2AT+0x2c>)
 8000ed8:	f002 f9aa 	bl	8003230 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000edc:	2064      	movs	r0, #100	; 0x64
 8000ede:	f000 fb3f 	bl	8001560 <HAL_Delay>
}
 8000ee2:	b005      	add	sp, #20
 8000ee4:	bd00      	pop	{pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	08004c34 	.word	0x08004c34
 8000eec:	20000350 	.word	0x20000350

08000ef0 <DATA_ASSIGMENT>:
{
 8000ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ef2:	001f      	movs	r7, r3
 8000ef4:	000e      	movs	r6, r1
 8000ef6:	0005      	movs	r5, r0
	memset(conversion_buff,'\0',5);
 8000ef8:	2100      	movs	r1, #0
{
 8000efa:	0014      	movs	r4, r2
	memset(conversion_buff,'\0',5);
 8000efc:	4668      	mov	r0, sp
 8000efe:	2205      	movs	r2, #5
 8000f00:	f002 fc9e 	bl	8003840 <memset>
	itoa(s,conversion_buff,t);//Convert int S to String in HEX
 8000f04:	003a      	movs	r2, r7
 8000f06:	4669      	mov	r1, sp
 8000f08:	0030      	movs	r0, r6
 8000f0a:	f002 fb79 	bl	8003600 <itoa>
	uint8_t dig_count=0;//Digit Counter
 8000f0e:	2300      	movs	r3, #0
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 8000f10:	466a      	mov	r2, sp
 8000f12:	5cd2      	ldrb	r2, [r2, r3]
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d108      	bne.n	8000f2a <DATA_ASSIGMENT+0x3a>
	for (i = (loc-dig_count)+1; j < dig_count; ++i)//Data arrangement in output buffer
 8000f18:	3401      	adds	r4, #1
 8000f1a:	1ae4      	subs	r4, r4, r3
 8000f1c:	b2e4      	uxtb	r4, r4
 8000f1e:	b2d0      	uxtb	r0, r2
 8000f20:	1821      	adds	r1, r4, r0
 8000f22:	b2c9      	uxtb	r1, r1
 8000f24:	4283      	cmp	r3, r0
 8000f26:	d803      	bhi.n	8000f30 <DATA_ASSIGMENT+0x40>
}
 8000f28:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	e7ef      	b.n	8000f10 <DATA_ASSIGMENT+0x20>
		 buff[i] = conversion_buff[j];
 8000f30:	4668      	mov	r0, sp
 8000f32:	5c80      	ldrb	r0, [r0, r2]
 8000f34:	3201      	adds	r2, #1
 8000f36:	5468      	strb	r0, [r5, r1]
 8000f38:	e7f1      	b.n	8000f1e <DATA_ASSIGMENT+0x2e>
	...

08000f3c <BUILD_DATA_TO_SEND>:
{
 8000f3c:	b510      	push	{r4, lr}
	memset(buff,'0',10); //Clear memory variable
 8000f3e:	220a      	movs	r2, #10
 8000f40:	2130      	movs	r1, #48	; 0x30
{
 8000f42:	0004      	movs	r4, r0
	memset(buff,'0',10); //Clear memory variable
 8000f44:	f002 fc7c 	bl	8003840 <memset>
	DATA_ASSIGMENT(buff,GET_MEAS_BAT(),VOLT_LOCA,16);
 8000f48:	f7ff ff84 	bl	8000e54 <GET_MEAS_BAT>
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	b281      	uxth	r1, r0
 8000f50:	2209      	movs	r2, #9
 8000f52:	0020      	movs	r0, r4
 8000f54:	f7ff ffcc 	bl	8000ef0 <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,SUM_DEC,DATA_LOCA,16);
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <BUILD_DATA_TO_SEND+0x38>)
 8000f5a:	0020      	movs	r0, r4
 8000f5c:	7819      	ldrb	r1, [r3, #0]
 8000f5e:	2205      	movs	r2, #5
 8000f60:	2310      	movs	r3, #16
 8000f62:	f7ff ffc5 	bl	8000ef0 <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,version,VERSION_LOCA,16);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2310      	movs	r3, #16
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0020      	movs	r0, r4
 8000f6e:	f7ff ffbf 	bl	8000ef0 <DATA_ASSIGMENT>
}
 8000f72:	bd10      	pop	{r4, pc}
 8000f74:	200002a4 	.word	0x200002a4

08000f78 <CASES_CHOICE>:
{
 8000f78:	b570      	push	{r4, r5, r6, lr}
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 8000f7a:	4c1c      	ldr	r4, [pc, #112]	; (8000fec <CASES_CHOICE+0x74>)
{
 8000f7c:	0005      	movs	r5, r0
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 8000f7e:	7823      	ldrb	r3, [r4, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <CASES_CHOICE+0x1a>
 8000f84:	7823      	ldrb	r3, [r4, #0]
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d803      	bhi.n	8000f92 <CASES_CHOICE+0x1a>
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <CASES_CHOICE+0x78>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d124      	bne.n	8000fdc <CASES_CHOICE+0x64>
			MX_GPIO_Init();
 8000f92:	f7ff fc99 	bl	80008c8 <MX_GPIO_Init>
			MX_ADC_Init();
 8000f96:	f7ff fcd3 	bl	8000940 <MX_ADC_Init>
			MX_LPUART1_UART_Init();
 8000f9a:	f7ff fd11 	bl	80009c0 <MX_LPUART1_UART_Init>
			HAL_Delay(30);
 8000f9e:	201e      	movs	r0, #30
 8000fa0:	f000 fade 	bl	8001560 <HAL_Delay>
			if ((SUM_COUNTER==0) || (SUM_COUNTER > SUM_THRD)){
 8000fa4:	7823      	ldrb	r3, [r4, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <CASES_CHOICE+0x38>
 8000faa:	7823      	ldrb	r3, [r4, #0]
 8000fac:	2b0a      	cmp	r3, #10
 8000fae:	d916      	bls.n	8000fde <CASES_CHOICE+0x66>
			   SUM_COUNTER = SUM_THRD;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	7023      	strb	r3, [r4, #0]
			BUILD_DATA_TO_SEND(buff);
 8000fb4:	0028      	movs	r0, r5
 8000fb6:	f7ff ffc1 	bl	8000f3c <BUILD_DATA_TO_SEND>
			SUM_DEC=0;
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <CASES_CHOICE+0x7c>)
 8000fbe:	701a      	strb	r2, [r3, #0]
			WAKE_WSSFM10R2AT();
 8000fc0:	f7ff ff68 	bl	8000e94 <WAKE_WSSFM10R2AT>
			if (RTC_UPDATE_STATUS == FALSE){
 8000fc4:	4c0c      	ldr	r4, [pc, #48]	; (8000ff8 <CASES_CHOICE+0x80>)
				TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK(buff,10);
 8000fc6:	210a      	movs	r1, #10
			if (RTC_UPDATE_STATUS == FALSE){
 8000fc8:	7823      	ldrb	r3, [r4, #0]
				TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK(buff,10);
 8000fca:	0028      	movs	r0, r5
			if (RTC_UPDATE_STATUS == FALSE){
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10a      	bne.n	8000fe6 <CASES_CHOICE+0x6e>
				TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK(buff,10);
 8000fd0:	f7ff feba 	bl	8000d48 <TRANSMIT_WSSFM10R2AT_WITH_DOWNLINK>
				RTC_UPDATE_STATUS = TRUE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	7023      	strb	r3, [r4, #0]
			DEEP_SLEEP_WSSFM10R2AT();
 8000fd8:	f7ff ff72 	bl	8000ec0 <DEEP_SLEEP_WSSFM10R2AT>
}
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
			   time_flag = FALSE;
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <CASES_CHOICE+0x78>)
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e7e6      	b.n	8000fb4 <CASES_CHOICE+0x3c>
				TRANSMIT_WSSFM10R2AT(buff,10);
 8000fe6:	f7ff fe6f 	bl	8000cc8 <TRANSMIT_WSSFM10R2AT>
 8000fea:	e7f5      	b.n	8000fd8 <CASES_CHOICE+0x60>
 8000fec:	2000034c 	.word	0x2000034c
 8000ff0:	200003d0 	.word	0x200003d0
 8000ff4:	200002a4 	.word	0x200002a4
 8000ff8:	200002a5 	.word	0x200002a5

08000ffc <SystemClock_Config>:
{
 8000ffc:	b530      	push	{r4, r5, lr}
 8000ffe:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001000:	2234      	movs	r2, #52	; 0x34
 8001002:	2100      	movs	r1, #0
 8001004:	a80b      	add	r0, sp, #44	; 0x2c
 8001006:	f002 fc1b 	bl	8003840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100a:	2214      	movs	r2, #20
 800100c:	2100      	movs	r1, #0
 800100e:	4668      	mov	r0, sp
 8001010:	f002 fc16 	bl	8003840 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	2218      	movs	r2, #24
 8001016:	2100      	movs	r1, #0
 8001018:	a805      	add	r0, sp, #20
 800101a:	f002 fc11 	bl	8003840 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	4919      	ldr	r1, [pc, #100]	; (8001088 <SystemClock_Config+0x8c>)
 8001022:	4c1a      	ldr	r4, [pc, #104]	; (800108c <SystemClock_Config+0x90>)
 8001024:	680a      	ldr	r2, [r1, #0]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4022      	ands	r2, r4
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
  HAL_PWR_EnableBkUpAccess();
 800102e:	f000 fef1 	bl	8001e14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2501      	movs	r5, #1
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001036:	6d13      	ldr	r3, [r2, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800103a:	4023      	ands	r3, r4
 800103c:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800103e:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001040:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001042:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001044:	33fa      	adds	r3, #250	; 0xfa
 8001046:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	3bf0      	subs	r3, #240	; 0xf0
 800104a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800104e:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f000 ff5a 	bl	8001f08 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001056:	0021      	movs	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800105c:	3371      	adds	r3, #113	; 0x71
 800105e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001060:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001062:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001066:	f001 f9a1 	bl	80023ac <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 800106a:	232c      	movs	r3, #44	; 0x2c
 800106c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800106e:	23c0      	movs	r3, #192	; 0xc0
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	9308      	str	r3, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001074:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001078:	025b      	lsls	r3, r3, #9
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800107a:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800107c:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f001 fa6d 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
}
 8001082:	b019      	add	sp, #100	; 0x64
 8001084:	bd30      	pop	{r4, r5, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	40007000 	.word	0x40007000
 800108c:	ffffe7ff 	.word	0xffffe7ff
 8001090:	40021000 	.word	0x40021000

08001094 <stm32l_lowPowerResume>:
void stm32l_lowPowerResume(void){
 8001094:	b510      	push	{r4, lr}
	HAL_ResumeTick();
 8001096:	f000 fa7b 	bl	8001590 <HAL_ResumeTick>
	SystemClock_Config();
 800109a:	f7ff ffaf 	bl	8000ffc <SystemClock_Config>
}
 800109e:	bd10      	pop	{r4, pc}

080010a0 <main>:
{
 80010a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  SUM_DEC=0;
 80010a2:	2400      	movs	r4, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a4:	2701      	movs	r7, #1
  SUM_DEC=0;
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <main+0x138>)
{
 80010a8:	b091      	sub	sp, #68	; 0x44
  SUM_DEC=0;
 80010aa:	701c      	strb	r4, [r3, #0]
  SUM_HOUR=0;
 80010ac:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <main+0x13c>)
 80010ae:	701c      	strb	r4, [r3, #0]
  HAL_Init();
 80010b0:	f000 fa34 	bl	800151c <HAL_Init>
  SystemClock_Config();
 80010b4:	f7ff ffa2 	bl	8000ffc <SystemClock_Config>
  MX_GPIO_Init();
 80010b8:	f7ff fc06 	bl	80008c8 <MX_GPIO_Init>
  MX_ADC_Init();
 80010bc:	f7ff fc40 	bl	8000940 <MX_ADC_Init>
  hi2c1.Instance = I2C1;
 80010c0:	4d47      	ldr	r5, [pc, #284]	; (80011e0 <main+0x140>)
 80010c2:	4b48      	ldr	r3, [pc, #288]	; (80011e4 <main+0x144>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c4:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 80010c6:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010c8:	4b47      	ldr	r3, [pc, #284]	; (80011e8 <main+0x148>)
  hi2c1.Init.OwnAddress1 = 0;
 80010ca:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x2000090E;
 80010cc:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ce:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d4:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d6:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d8:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010da:	f000 fdfb 	bl	8001cd4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010de:	0028      	movs	r0, r5
 80010e0:	0021      	movs	r1, r4
 80010e2:	f000 fe4d 	bl	8001d80 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e6:	0028      	movs	r0, r5
 80010e8:	0021      	movs	r1, r4
  RTC_AlarmTypeDef sAlarm = {0};
 80010ea:	ad06      	add	r5, sp, #24
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010ec:	f000 fe6e 	bl	8001dcc <HAL_I2CEx_ConfigDigitalFilter>
  MX_LPUART1_UART_Init();
 80010f0:	f7ff fc66 	bl	80009c0 <MX_LPUART1_UART_Init>
  RTC_TimeTypeDef sTime = {0};
 80010f4:	2214      	movs	r2, #20
 80010f6:	0021      	movs	r1, r4
 80010f8:	a801      	add	r0, sp, #4
 80010fa:	f002 fba1 	bl	8003840 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80010fe:	2228      	movs	r2, #40	; 0x28
 8001100:	0021      	movs	r1, r4
 8001102:	0028      	movs	r0, r5
  RTC_DateTypeDef sDate = {0};
 8001104:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001106:	f002 fb9b 	bl	8003840 <memset>
  hrtc.Instance = RTC;
 800110a:	4e38      	ldr	r6, [pc, #224]	; (80011ec <main+0x14c>)
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <main+0x150>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800110e:	0030      	movs	r0, r6
  hrtc.Instance = RTC;
 8001110:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 127;
 8001112:	237f      	movs	r3, #127	; 0x7f
 8001114:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 255;
 8001116:	3380      	adds	r3, #128	; 0x80
 8001118:	60f3      	str	r3, [r6, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800111a:	6074      	str	r4, [r6, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800111c:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800111e:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001120:	61b4      	str	r4, [r6, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001122:	61f4      	str	r4, [r6, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001124:	f001 fb3a 	bl	800279c <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8001128:	466b      	mov	r3, sp
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800112a:	003a      	movs	r2, r7
  sTime.Hours = 0x0;
 800112c:	809c      	strh	r4, [r3, #4]
  sTime.Minutes = 0x0;
 800112e:	719c      	strb	r4, [r3, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001130:	a901      	add	r1, sp, #4
 8001132:	0030      	movs	r0, r6
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001134:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001136:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001138:	f001 fb98 	bl	800286c <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <main+0x154>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800113e:	003a      	movs	r2, r7
 8001140:	4669      	mov	r1, sp
 8001142:	0030      	movs	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001144:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001146:	f001 fc11 	bl	800296c <HAL_RTC_SetDate>
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <main+0x158>)
  sAlarm.AlarmTime.Hours = 0x0;
 800114c:	802c      	strh	r4, [r5, #0]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 800114e:	616b      	str	r3, [r5, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001150:	2319      	movs	r3, #25
 8001152:	446b      	add	r3, sp
  sAlarm.AlarmTime.Minutes = 0x0;
 8001154:	70ac      	strb	r4, [r5, #2]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001156:	77df      	strb	r7, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8001158:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800115a:	003a      	movs	r2, r7
  sAlarm.Alarm = RTC_ALARM_A;
 800115c:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800115e:	0029      	movs	r1, r5
 8001160:	0030      	movs	r0, r6
  sAlarm.Alarm = RTC_ALARM_A;
 8001162:	626b      	str	r3, [r5, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001164:	606c      	str	r4, [r5, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001166:	60ec      	str	r4, [r5, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001168:	612c      	str	r4, [r5, #16]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800116a:	61ac      	str	r4, [r5, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800116c:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800116e:	f001 fc69 	bl	8002a44 <HAL_RTC_SetAlarm_IT>
  SUM_COUNTER=0;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <main+0x15c>)

static void EXT_Interrup_Init(void){
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	2208      	movs	r2, #8
  SUM_COUNTER=0;
 8001176:	701c      	strb	r4, [r3, #0]
  RTC_UPDATE_STATUS = FALSE;
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <main+0x160>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	0021      	movs	r1, r4
 800117c:	a809      	add	r0, sp, #36	; 0x24
  RTC_UPDATE_STATUS = FALSE;
 800117e:	701c      	strb	r4, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f002 fb5e 	bl	8003840 <memset>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;

    __HAL_RCC_GPIOA_CLK_ENABLE();

    HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001184:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <main+0x164>)
    GPIO_InitStruct.Pin = HALL_SENS_IRQ_Pin;
 8001188:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118a:	606b      	str	r3, [r5, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <main+0x168>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	60af      	str	r7, [r5, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001192:	0029      	movs	r1, r5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	433a      	orrs	r2, r7
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 800119a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	403b      	ands	r3, r7
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f000 fcd9 	bl	8001b58 <HAL_GPIO_Init>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <main+0x16c>)
    HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80011a8:	0022      	movs	r2, r4
    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80011aa:	615f      	str	r7, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80011ac:	0021      	movs	r1, r4
 80011ae:	2005      	movs	r0, #5
 80011b0:	f000 fc5e 	bl	8001a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80011b4:	2005      	movs	r0, #5
 80011b6:	f000 fc85 	bl	8001ac4 <HAL_NVIC_EnableIRQ>
  HAL_Delay(2000);
 80011ba:	20fa      	movs	r0, #250	; 0xfa
 80011bc:	00c0      	lsls	r0, r0, #3
 80011be:	f000 f9cf 	bl	8001560 <HAL_Delay>
    CASES_CHOICE(data_buff);
 80011c2:	0028      	movs	r0, r5
 80011c4:	f7ff fed8 	bl	8000f78 <CASES_CHOICE>
    HAL_Delay(50);
 80011c8:	2032      	movs	r0, #50	; 0x32
 80011ca:	f000 f9c9 	bl	8001560 <HAL_Delay>
	stm32l_lowPowerSetup();
 80011ce:	f7ff fc0f 	bl	80009f0 <stm32l_lowPowerSetup>
	stm32l_lowPowerResume();
 80011d2:	f7ff ff5f 	bl	8001094 <stm32l_lowPowerResume>
 80011d6:	e7f4      	b.n	80011c2 <main+0x122>
 80011d8:	200002a4 	.word	0x200002a4
 80011dc:	200003d1 	.word	0x200003d1
 80011e0:	200002a8 	.word	0x200002a8
 80011e4:	40005400 	.word	0x40005400
 80011e8:	2000090e 	.word	0x2000090e
 80011ec:	200003d4 	.word	0x200003d4
 80011f0:	40002800 	.word	0x40002800
 80011f4:	00010101 	.word	0x00010101
 80011f8:	80800000 	.word	0x80800000
 80011fc:	2000034c 	.word	0x2000034c
 8001200:	200002a5 	.word	0x200002a5
 8001204:	10110000 	.word	0x10110000
 8001208:	40021000 	.word	0x40021000
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001210:	2201      	movs	r2, #1
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_MspInit+0x18>)
 8001214:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001216:	430a      	orrs	r2, r1
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800121e:	0552      	lsls	r2, r2, #21
 8001220:	430a      	orrs	r2, r1
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001224:	4770      	bx	lr
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800122c:	b510      	push	{r4, lr}
 800122e:	0004      	movs	r4, r0
 8001230:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	2214      	movs	r2, #20
 8001234:	2100      	movs	r1, #0
 8001236:	a801      	add	r0, sp, #4
 8001238:	f002 fb02 	bl	8003840 <memset>
  if(hadc->Instance==ADC1)
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_ADC_MspInit+0x4c>)
 800123e:	6822      	ldr	r2, [r4, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d116      	bne.n	8001272 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_ADC_MspInit+0x50>)
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001252:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	430a      	orrs	r2, r1
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
 800125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125e:	400b      	ands	r3, r1
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8001264:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8001268:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	3b07      	subs	r3, #7
 800126c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f000 fc73 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001272:	b006      	add	sp, #24
 8001274:	bd10      	pop	{r4, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	40012400 	.word	0x40012400
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b510      	push	{r4, lr}
 8001282:	0004      	movs	r4, r0
 8001284:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	2214      	movs	r2, #20
 8001288:	2100      	movs	r1, #0
 800128a:	a801      	add	r0, sp, #4
 800128c:	f002 fad8 	bl	8003840 <memset>
  if(hi2c->Instance==I2C1)
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_I2C_MspInit+0x54>)
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d11b      	bne.n	80012d0 <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	2301      	movs	r3, #1
 800129a:	4c0f      	ldr	r4, [pc, #60]	; (80012d8 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	431a      	orrs	r2, r3
 80012a4:	62e2      	str	r2, [r4, #44]	; 0x2c
 80012a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	401a      	ands	r2, r3
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012b0:	22c0      	movs	r2, #192	; 0xc0
 80012b2:	00d2      	lsls	r2, r2, #3
 80012b4:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b6:	2212      	movs	r2, #18
 80012b8:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	3a0f      	subs	r2, #15
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80012c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f000 fc49 	bl	8001b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012ca:	039b      	lsls	r3, r3, #14
 80012cc:	4313      	orrs	r3, r2
 80012ce:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012d0:	b006      	add	sp, #24
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	40005400 	.word	0x40005400
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	0004      	movs	r4, r0
 80012e0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	2214      	movs	r2, #20
 80012e4:	2100      	movs	r1, #0
 80012e6:	a803      	add	r0, sp, #12
 80012e8:	f002 faaa 	bl	8003840 <memset>
  if(huart->Instance==LPUART1)
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_UART_MspInit+0x84>)
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d133      	bne.n	800135c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012f4:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2404      	movs	r4, #4
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_UART_MspInit+0x88>)
 80012fa:	02d2      	lsls	r2, r2, #11
 80012fc:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2702      	movs	r7, #2
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001300:	430a      	orrs	r2, r1
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2603      	movs	r6, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	4322      	orrs	r2, r4
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
 800130c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800130e:	2506      	movs	r5, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	4022      	ands	r2, r4
 8001312:	9201      	str	r2, [sp, #4]
 8001314:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2201      	movs	r2, #1
 8001318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4311      	orrs	r1, r2
 800131e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4013      	ands	r3, r2
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800132a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001330:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	f000 fc11 	bl	8001b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001338:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	a903      	add	r1, sp, #12
 800133e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001346:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f000 fc06 	bl	8001b58 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800134c:	201d      	movs	r0, #29
 800134e:	0022      	movs	r2, r4
 8001350:	0021      	movs	r1, r4
 8001352:	f000 fb8d 	bl	8001a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001356:	201d      	movs	r0, #29
 8001358:	f000 fbb4 	bl	8001ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800135c:	b009      	add	sp, #36	; 0x24
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001360:	40004800 	.word	0x40004800
 8001364:	40021000 	.word	0x40021000
 8001368:	50000800 	.word	0x50000800

0800136c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RTC_MspInit+0x28>)
 800136e:	6802      	ldr	r2, [r0, #0]
{
 8001370:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8001372:	429a      	cmp	r2, r3
 8001374:	d10d      	bne.n	8001392 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_RTC_MspInit+0x2c>)
 800137a:	02db      	lsls	r3, r3, #11
 800137c:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800137e:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8001380:	430b      	orrs	r3, r1
 8001382:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	0011      	movs	r1, r2
 8001388:	f000 fb72 	bl	8001a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800138c:	2002      	movs	r0, #2
 800138e:	f000 fb99 	bl	8001ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001392:	bd10      	pop	{r4, pc}
 8001394:	40002800 	.word	0x40002800
 8001398:	40021000 	.word	0x40021000

0800139c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800139c:	4770      	bx	lr

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	e7fe      	b.n	800139e <HardFault_Handler>

080013a0 <SVC_Handler>:
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 f8cd 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bd10      	pop	{r4, pc}

080013ac <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80013ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80013ae:	4802      	ldr	r0, [pc, #8]	; (80013b8 <RTC_IRQHandler+0xc>)
 80013b0:	f001 f98e 	bl	80026d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	200003d4 	.word	0x200003d4

080013bc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80013bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 fc7c 	bl	8001cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80013c4:	bd10      	pop	{r4, pc}
	...

080013c8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80013c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80013ca:	4802      	ldr	r0, [pc, #8]	; (80013d4 <LPUART1_IRQHandler+0xc>)
 80013cc:	f001 fcdc 	bl	8002d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80013d0:	bd10      	pop	{r4, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	20000350 	.word	0x20000350

080013d8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <_sbrk+0x2c>)
{
 80013da:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80013dc:	6819      	ldr	r1, [r3, #0]
{
 80013de:	0002      	movs	r2, r0
	if (heap_end == 0)
 80013e0:	2900      	cmp	r1, #0
 80013e2:	d101      	bne.n	80013e8 <_sbrk+0x10>
		heap_end = &end;
 80013e4:	4908      	ldr	r1, [pc, #32]	; (8001408 <_sbrk+0x30>)
 80013e6:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80013e8:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80013ea:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80013ec:	1882      	adds	r2, r0, r2
 80013ee:	428a      	cmp	r2, r1
 80013f0:	d906      	bls.n	8001400 <_sbrk+0x28>
	{
		errno = ENOMEM;
 80013f2:	f002 f8c3 	bl	800357c <__errno>
 80013f6:	230c      	movs	r3, #12
 80013f8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80013fa:	2001      	movs	r0, #1
 80013fc:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80013fe:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001400:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001402:	e7fc      	b.n	80013fe <_sbrk+0x26>
 8001404:	2000026c 	.word	0x2000026c
 8001408:	20000460 	.word	0x20000460

0800140c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <SystemInit+0x44>)
 8001410:	0052      	lsls	r2, r2, #1
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	490e      	ldr	r1, [pc, #56]	; (8001454 <SystemInit+0x48>)
 800141c:	400a      	ands	r2, r1
 800141e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	490d      	ldr	r1, [pc, #52]	; (8001458 <SystemInit+0x4c>)
 8001424:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001426:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001428:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	438a      	bics	r2, r1
 800142e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <SystemInit+0x50>)
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4909      	ldr	r1, [pc, #36]	; (8001460 <SystemInit+0x54>)
 800143c:	400a      	ands	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <SystemInit+0x58>)
 8001448:	0512      	lsls	r2, r2, #20
 800144a:	609a      	str	r2, [r3, #8]
#endif
}
 800144c:	4770      	bx	lr
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40021000 	.word	0x40021000
 8001454:	88ff400c 	.word	0x88ff400c
 8001458:	fef6fff6 	.word	0xfef6fff6
 800145c:	fffbffff 	.word	0xfffbffff
 8001460:	ff02ffff 	.word	0xff02ffff
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001468:	4813      	ldr	r0, [pc, #76]	; (80014b8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800146a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <LoopForever+0x6>)
    LDR R1, [R0]
 800146e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001470:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <LoopForever+0xa>)
    CMP R1, R2
 8001474:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001476:	d105      	bne.n	8001484 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001478:	4812      	ldr	r0, [pc, #72]	; (80014c4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800147a:	4913      	ldr	r1, [pc, #76]	; (80014c8 <LoopForever+0x12>)
    STR R1, [R0]
 800147c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800147e:	4813      	ldr	r0, [pc, #76]	; (80014cc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001480:	4913      	ldr	r1, [pc, #76]	; (80014d0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001482:	6001      	str	r1, [r0, #0]

08001484 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001484:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001486:	e003      	b.n	8001490 <LoopCopyDataInit>

08001488 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 800148a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800148c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800148e:	3104      	adds	r1, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <LoopForever+0x22>)
  ldr  r3, =_edata
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <LoopForever+0x26>)
  adds  r2, r0, r1
 8001494:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001496:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001498:	d3f6      	bcc.n	8001488 <CopyDataInit>
  ldr  r2, =_sbss
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <LoopForever+0x2a>)
  b  LoopFillZerobss
 800149c:	e002      	b.n	80014a4 <LoopFillZerobss>

0800149e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800149e:	2300      	movs	r3, #0
  str  r3, [r2]
 80014a0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a2:	3204      	adds	r2, #4

080014a4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <LoopForever+0x2e>)
  cmp  r2, r3
 80014a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014a8:	d3f9      	bcc.n	800149e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014aa:	f7ff ffaf 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f002 f86b 	bl	8003588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff fdf5 	bl	80010a0 <main>

080014b6 <LoopForever>:

LoopForever:
    b LoopForever
 80014b6:	e7fe      	b.n	80014b6 <LoopForever>
   ldr   r0, =_estack
 80014b8:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80014bc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80014c0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80014c4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80014c8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80014cc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80014d0:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 80014d4:	08004edc 	.word	0x08004edc
  ldr  r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014dc:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 80014e0:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 80014e4:	20000460 	.word	0x20000460

080014e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_IRQHandler>
	...

080014ec <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80014ec:	21fa      	movs	r1, #250	; 0xfa
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_InitTick+0x2c>)
{
 80014f0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80014f2:	0089      	lsls	r1, r1, #2
{
 80014f4:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	f7fe fe22 	bl	8000140 <__udivsi3>
 80014fc:	f000 faec 	bl	8001ad8 <HAL_SYSTICK_Config>
 8001500:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8001502:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001504:	2c00      	cmp	r4, #0
 8001506:	d105      	bne.n	8001514 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001508:	3802      	subs	r0, #2
 800150a:	0022      	movs	r2, r4
 800150c:	0029      	movs	r1, r5
 800150e:	f000 faaf 	bl	8001a70 <HAL_NVIC_SetPriority>
 8001512:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8001514:	bd70      	pop	{r4, r5, r6, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	20000008 	.word	0x20000008

0800151c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800151c:	2340      	movs	r3, #64	; 0x40
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_Init+0x24>)
{
 8001520:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001522:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001524:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001526:	430b      	orrs	r3, r1
 8001528:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	f7ff ffdf 	bl	80014ec <HAL_InitTick>
 800152e:	1e04      	subs	r4, r0, #0
 8001530:	d103      	bne.n	800153a <HAL_Init+0x1e>
    HAL_MspInit();
 8001532:	f7ff fe6d 	bl	8001210 <HAL_MspInit>
}
 8001536:	0020      	movs	r0, r4
 8001538:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800153a:	2401      	movs	r4, #1
 800153c:	e7fb      	b.n	8001536 <HAL_Init+0x1a>
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001544:	4a02      	ldr	r2, [pc, #8]	; (8001550 <HAL_IncTick+0xc>)
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	4770      	bx	lr
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	20000458 	.word	0x20000458

08001554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001554:	4b01      	ldr	r3, [pc, #4]	; (800155c <HAL_GetTick+0x8>)
 8001556:	6818      	ldr	r0, [r3, #0]
}
 8001558:	4770      	bx	lr
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	20000458 	.word	0x20000458

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff fff6 	bl	8001554 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8001568:	1c63      	adds	r3, r4, #1
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 800156e:	0005      	movs	r5, r0
    wait++;
 8001570:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001572:	f7ff ffef 	bl	8001554 <HAL_GetTick>
 8001576:	1b40      	subs	r0, r0, r5
 8001578:	42a0      	cmp	r0, r4
 800157a:	d3fa      	bcc.n	8001572 <HAL_Delay+0x12>
  {
  }
}
 800157c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001580 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001580:	2102      	movs	r1, #2
 8001582:	4a02      	ldr	r2, [pc, #8]	; (800158c <HAL_SuspendTick+0xc>)
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	438b      	bics	r3, r1
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	4770      	bx	lr
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001590:	2302      	movs	r3, #2
 8001592:	4a02      	ldr	r2, [pc, #8]	; (800159c <HAL_ResumeTick+0xc>)
 8001594:	6811      	ldr	r1, [r2, #0]
 8001596:	430b      	orrs	r3, r1
 8001598:	6013      	str	r3, [r2, #0]
}
 800159a:	4770      	bx	lr
 800159c:	e000e010 	.word	0xe000e010

080015a0 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015a0:	2103      	movs	r1, #3
 80015a2:	6803      	ldr	r3, [r0, #0]
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015a8:	6898      	ldr	r0, [r3, #8]
 80015aa:	4008      	ands	r0, r1
 80015ac:	2801      	cmp	r0, #1
 80015ae:	d001      	beq.n	80015b4 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015b0:	2000      	movs	r0, #0
}
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4202      	tst	r2, r0
 80015b8:	d0fa      	beq.n	80015b0 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80015ba:	2205      	movs	r2, #5
 80015bc:	689d      	ldr	r5, [r3, #8]
 80015be:	4015      	ands	r5, r2
 80015c0:	2d01      	cmp	r5, #1
 80015c2:	d119      	bne.n	80015f8 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 80015c4:	6898      	ldr	r0, [r3, #8]
 80015c6:	3a03      	subs	r2, #3
 80015c8:	4302      	orrs	r2, r0
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80015ce:	f7ff ffc1 	bl	8001554 <HAL_GetTick>
 80015d2:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	422b      	tst	r3, r5
 80015da:	d0e9      	beq.n	80015b0 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015dc:	f7ff ffba 	bl	8001554 <HAL_GetTick>
 80015e0:	1b80      	subs	r0, r0, r6
 80015e2:	280a      	cmp	r0, #10
 80015e4:	d9f6      	bls.n	80015d4 <ADC_Disable+0x34>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e6:	2310      	movs	r3, #16
 80015e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ea:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ec:	4313      	orrs	r3, r2
 80015ee:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015f2:	431d      	orrs	r5, r3
 80015f4:	65a5      	str	r5, [r4, #88]	; 0x58
 80015f6:	e7dc      	b.n	80015b2 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f8:	2310      	movs	r3, #16
 80015fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015fc:	4313      	orrs	r3, r2
 80015fe:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001602:	4303      	orrs	r3, r0
 8001604:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8001606:	e7d4      	b.n	80015b2 <ADC_Disable+0x12>

08001608 <ADC_Enable>:
{
 8001608:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800160a:	2103      	movs	r1, #3
 800160c:	6803      	ldr	r3, [r0, #0]
{
 800160e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	400a      	ands	r2, r1
 8001614:	2a01      	cmp	r2, #1
 8001616:	d104      	bne.n	8001622 <ADC_Enable+0x1a>
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	4211      	tst	r1, r2
 800161c:	d001      	beq.n	8001622 <ADC_Enable+0x1a>
  return HAL_OK;
 800161e:	2000      	movs	r0, #0
}
 8001620:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001622:	6899      	ldr	r1, [r3, #8]
 8001624:	4a19      	ldr	r2, [pc, #100]	; (800168c <ADC_Enable+0x84>)
 8001626:	4211      	tst	r1, r2
 8001628:	d008      	beq.n	800163c <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001630:	4313      	orrs	r3, r2
 8001632:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001636:	4303      	orrs	r3, r0
 8001638:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800163a:	e7f1      	b.n	8001620 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800163c:	2201      	movs	r2, #1
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	430a      	orrs	r2, r1
 8001642:	609a      	str	r2, [r3, #8]
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <ADC_Enable+0x88>)
 8001646:	4913      	ldr	r1, [pc, #76]	; (8001694 <ADC_Enable+0x8c>)
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	f7fe fd79 	bl	8000140 <__udivsi3>
 800164e:	9001      	str	r0, [sp, #4]

  while(waitLoopIndex != 0U)
 8001650:	9b01      	ldr	r3, [sp, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d115      	bne.n	8001682 <ADC_Enable+0x7a>
    tickstart = HAL_GetTick();
 8001656:	f7ff ff7d 	bl	8001554 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800165a:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800165c:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	422b      	tst	r3, r5
 8001664:	d1db      	bne.n	800161e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001666:	f7ff ff75 	bl	8001554 <HAL_GetTick>
 800166a:	1b80      	subs	r0, r0, r6
 800166c:	280a      	cmp	r0, #10
 800166e:	d9f6      	bls.n	800165e <ADC_Enable+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001670:	2310      	movs	r3, #16
 8001672:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001676:	4313      	orrs	r3, r2
 8001678:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800167c:	432b      	orrs	r3, r5
 800167e:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001680:	e7ce      	b.n	8001620 <ADC_Enable+0x18>
  {
    waitLoopIndex--;
 8001682:	9b01      	ldr	r3, [sp, #4]
 8001684:	3b01      	subs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	e7e2      	b.n	8001650 <ADC_Enable+0x48>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	80000017 	.word	0x80000017
 8001690:	20000008 	.word	0x20000008
 8001694:	000f4240 	.word	0x000f4240

08001698 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001698:	2204      	movs	r2, #4
 800169a:	6803      	ldr	r3, [r0, #0]
{
 800169c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800169e:	6899      	ldr	r1, [r3, #8]
{
 80016a0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80016a2:	4211      	tst	r1, r2
 80016a4:	d101      	bne.n	80016aa <ADC_ConversionStop+0x12>
  return HAL_OK;
 80016a6:	2000      	movs	r0, #0
}
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	4211      	tst	r1, r2
 80016ae:	d006      	beq.n	80016be <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80016b0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80016b2:	0792      	lsls	r2, r2, #30
 80016b4:	d403      	bmi.n	80016be <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80016b6:	2210      	movs	r2, #16
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80016be:	f7ff ff49 	bl	8001554 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80016c2:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80016c4:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	422b      	tst	r3, r5
 80016cc:	d0eb      	beq.n	80016a6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80016ce:	f7ff ff41 	bl	8001554 <HAL_GetTick>
 80016d2:	1b80      	subs	r0, r0, r6
 80016d4:	280a      	cmp	r0, #10
 80016d6:	d9f6      	bls.n	80016c6 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016de:	4313      	orrs	r3, r2
 80016e0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016e4:	4303      	orrs	r3, r0
 80016e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80016e8:	e7de      	b.n	80016a8 <ADC_ConversionStop+0x10>
	...

080016ec <HAL_ADC_Init>:
{
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	0004      	movs	r4, r0
    return HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
  if(hadc == NULL)
 80016f2:	2c00      	cmp	r4, #0
 80016f4:	d019      	beq.n	800172a <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d106      	bne.n	800170a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80016fc:	0022      	movs	r2, r4
 80016fe:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8001700:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8001702:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001704:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001706:	f7ff fd91 	bl	800122c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800170a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800170c:	06db      	lsls	r3, r3, #27
 800170e:	d404      	bmi.n	800171a <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001710:	2204      	movs	r2, #4
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	6898      	ldr	r0, [r3, #8]
 8001716:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001718:	d008      	beq.n	800172c <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171a:	2310      	movs	r3, #16
 800171c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001720:	4313      	orrs	r3, r2
 8001722:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001724:	2300      	movs	r3, #0
 8001726:	3450      	adds	r4, #80	; 0x50
 8001728:	7023      	strb	r3, [r4, #0]
}
 800172a:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800172c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800172e:	4955      	ldr	r1, [pc, #340]	; (8001884 <HAL_ADC_Init+0x198>)
 8001730:	4011      	ands	r1, r2
 8001732:	2202      	movs	r2, #2
 8001734:	430a      	orrs	r2, r1
 8001736:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001738:	2203      	movs	r2, #3
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	4011      	ands	r1, r2
 800173e:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_ADC_Init+0x19c>)
 8001740:	2901      	cmp	r1, #1
 8001742:	d102      	bne.n	800174a <HAL_ADC_Init+0x5e>
 8001744:	681d      	ldr	r5, [r3, #0]
 8001746:	420d      	tst	r5, r1
 8001748:	d119      	bne.n	800177e <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800174a:	2680      	movs	r6, #128	; 0x80
 800174c:	6861      	ldr	r1, [r4, #4]
 800174e:	05f6      	lsls	r6, r6, #23
 8001750:	004d      	lsls	r5, r1, #1
 8001752:	086d      	lsrs	r5, r5, #1
 8001754:	42b5      	cmp	r5, r6
 8001756:	d003      	beq.n	8001760 <HAL_ADC_Init+0x74>
 8001758:	2580      	movs	r5, #128	; 0x80
 800175a:	062d      	lsls	r5, r5, #24
 800175c:	42a9      	cmp	r1, r5
 800175e:	d176      	bne.n	800184e <HAL_ADC_Init+0x162>
 8001760:	691d      	ldr	r5, [r3, #16]
 8001762:	00ad      	lsls	r5, r5, #2
 8001764:	08ad      	lsrs	r5, r5, #2
 8001766:	611d      	str	r5, [r3, #16]
 8001768:	691d      	ldr	r5, [r3, #16]
 800176a:	4329      	orrs	r1, r5
 800176c:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800176e:	2518      	movs	r5, #24
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	43a9      	bics	r1, r5
 8001774:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001776:	68d9      	ldr	r1, [r3, #12]
 8001778:	68a5      	ldr	r5, [r4, #8]
 800177a:	4329      	orrs	r1, r5
 800177c:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800177e:	6811      	ldr	r1, [r2, #0]
 8001780:	4d42      	ldr	r5, [pc, #264]	; (800188c <HAL_ADC_Init+0x1a0>)
 8001782:	4029      	ands	r1, r5
 8001784:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001788:	6815      	ldr	r5, [r2, #0]
 800178a:	0649      	lsls	r1, r1, #25
 800178c:	4329      	orrs	r1, r5
 800178e:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	0552      	lsls	r2, r2, #21
 8001796:	4211      	tst	r1, r2
 8001798:	d102      	bne.n	80017a0 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800179a:	6899      	ldr	r1, [r3, #8]
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	493b      	ldr	r1, [pc, #236]	; (8001890 <HAL_ADC_Init+0x1a4>)
 80017a4:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80017a6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80017a8:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017aa:	68dd      	ldr	r5, [r3, #12]
 80017ac:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80017ae:	2902      	cmp	r1, #2
 80017b0:	d100      	bne.n	80017b4 <HAL_ADC_Init+0xc8>
 80017b2:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017b4:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017b6:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017b8:	4332      	orrs	r2, r6
 80017ba:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80017bc:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017be:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80017c0:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017c2:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80017c4:	69e5      	ldr	r5, [r4, #28]
 80017c6:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017c8:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017ca:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017cc:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80017ce:	0025      	movs	r5, r4
 80017d0:	352c      	adds	r5, #44	; 0x2c
 80017d2:	782d      	ldrb	r5, [r5, #0]
 80017d4:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017d6:	432a      	orrs	r2, r5
 80017d8:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017da:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017dc:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017e0:	30ff      	adds	r0, #255	; 0xff
 80017e2:	4282      	cmp	r2, r0
 80017e4:	d004      	beq.n	80017f0 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80017e6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80017e8:	68d8      	ldr	r0, [r3, #12]
 80017ea:	432a      	orrs	r2, r5
 80017ec:	4302      	orrs	r2, r0
 80017ee:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f0:	1ca2      	adds	r2, r4, #2
 80017f2:	7fd2      	ldrb	r2, [r2, #31]
 80017f4:	2a01      	cmp	r2, #1
 80017f6:	d106      	bne.n	8001806 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f8:	2900      	cmp	r1, #0
 80017fa:	d134      	bne.n	8001866 <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	68d9      	ldr	r1, [r3, #12]
 8001800:	0252      	lsls	r2, r2, #9
 8001802:	430a      	orrs	r2, r1
 8001804:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8001806:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001808:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800180a:	2901      	cmp	r1, #1
 800180c:	d133      	bne.n	8001876 <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800180e:	4821      	ldr	r0, [pc, #132]	; (8001894 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001810:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001812:	4002      	ands	r2, r0
 8001814:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001816:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001818:	6918      	ldr	r0, [r3, #16]
 800181a:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 800181c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800181e:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001820:	4302      	orrs	r2, r0
 8001822:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	4311      	orrs	r1, r2
 8001828:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800182a:	2107      	movs	r1, #7
 800182c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800182e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001830:	438a      	bics	r2, r1
 8001832:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001838:	430a      	orrs	r2, r1
 800183a:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800183c:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800183e:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8001840:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001842:	4393      	bics	r3, r2
 8001844:	001a      	movs	r2, r3
 8001846:	2301      	movs	r3, #1
 8001848:	4313      	orrs	r3, r2
 800184a:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800184c:	e76d      	b.n	800172a <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800184e:	691d      	ldr	r5, [r3, #16]
 8001850:	4e11      	ldr	r6, [pc, #68]	; (8001898 <HAL_ADC_Init+0x1ac>)
 8001852:	00ad      	lsls	r5, r5, #2
 8001854:	08ad      	lsrs	r5, r5, #2
 8001856:	611d      	str	r5, [r3, #16]
 8001858:	6815      	ldr	r5, [r2, #0]
 800185a:	4035      	ands	r5, r6
 800185c:	6015      	str	r5, [r2, #0]
 800185e:	6815      	ldr	r5, [r2, #0]
 8001860:	4329      	orrs	r1, r5
 8001862:	6011      	str	r1, [r2, #0]
 8001864:	e783      	b.n	800176e <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001866:	2120      	movs	r1, #32
 8001868:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800186a:	4301      	orrs	r1, r0
 800186c:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001870:	430a      	orrs	r2, r1
 8001872:	65a2      	str	r2, [r4, #88]	; 0x58
 8001874:	e7c7      	b.n	8001806 <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001876:	2101      	movs	r1, #1
 8001878:	420a      	tst	r2, r1
 800187a:	d0d6      	beq.n	800182a <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	438a      	bics	r2, r1
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	e7d2      	b.n	800182a <HAL_ADC_Init+0x13e>
 8001884:	fffffefd 	.word	0xfffffefd
 8001888:	40012708 	.word	0x40012708
 800188c:	fdffffff 	.word	0xfdffffff
 8001890:	fffe0219 	.word	0xfffe0219
 8001894:	fffffc03 	.word	0xfffffc03
 8001898:	ffc3ffff 	.word	0xffc3ffff

0800189c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189c:	6803      	ldr	r3, [r0, #0]
{
 800189e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018a0:	689b      	ldr	r3, [r3, #8]
{
 80018a2:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80018a4:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018a6:	075b      	lsls	r3, r3, #29
 80018a8:	d41a      	bmi.n	80018e0 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80018aa:	0025      	movs	r5, r4
 80018ac:	3550      	adds	r5, #80	; 0x50
 80018ae:	782b      	ldrb	r3, [r5, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d015      	beq.n	80018e0 <HAL_ADC_Start+0x44>
 80018b4:	2301      	movs	r3, #1
 80018b6:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018b8:	69e3      	ldr	r3, [r4, #28]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d111      	bne.n	80018e2 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80018be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018c0:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80018c2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80018c4:	401a      	ands	r2, r3
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018cc:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80018ce:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018d0:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80018d2:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80018d4:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018d6:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	3a18      	subs	r2, #24
 80018dc:	430a      	orrs	r2, r1
 80018de:	609a      	str	r2, [r3, #8]
}
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80018e2:	0020      	movs	r0, r4
 80018e4:	f7ff fe90 	bl	8001608 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d0e8      	beq.n	80018be <HAL_ADC_Start+0x22>
 80018ec:	e7f8      	b.n	80018e0 <HAL_ADC_Start+0x44>
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	fffff0fe 	.word	0xfffff0fe

080018f4 <HAL_ADC_Stop>:
{
 80018f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80018f6:	0006      	movs	r6, r0
 80018f8:	3650      	adds	r6, #80	; 0x50
 80018fa:	7833      	ldrb	r3, [r6, #0]
{
 80018fc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80018fe:	2002      	movs	r0, #2
 8001900:	2b01      	cmp	r3, #1
 8001902:	d012      	beq.n	800192a <HAL_ADC_Stop+0x36>
 8001904:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001906:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8001908:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800190a:	f7ff fec5 	bl	8001698 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800190e:	2800      	cmp	r0, #0
 8001910:	d109      	bne.n	8001926 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001912:	0020      	movs	r0, r4
 8001914:	f7ff fe44 	bl	80015a0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001918:	2800      	cmp	r0, #0
 800191a:	d104      	bne.n	8001926 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800191c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800191e:	4a03      	ldr	r2, [pc, #12]	; (800192c <HAL_ADC_Stop+0x38>)
 8001920:	4013      	ands	r3, r2
 8001922:	431d      	orrs	r5, r3
 8001924:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8001926:	2300      	movs	r3, #0
 8001928:	7033      	strb	r3, [r6, #0]
}
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	fffffefe 	.word	0xfffffefe

08001930 <HAL_ADC_PollForConversion>:
{
 8001930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001932:	6945      	ldr	r5, [r0, #20]
{
 8001934:	0004      	movs	r4, r0
 8001936:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001938:	2d08      	cmp	r5, #8
 800193a:	d00d      	beq.n	8001958 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800193c:	6803      	ldr	r3, [r0, #0]
 800193e:	2001      	movs	r0, #1
 8001940:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001942:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001944:	4203      	tst	r3, r0
 8001946:	d007      	beq.n	8001958 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001948:	2320      	movs	r3, #32
 800194a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 800194c:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194e:	4313      	orrs	r3, r2
 8001950:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8001952:	2300      	movs	r3, #0
 8001954:	7023      	strb	r3, [r4, #0]
}
 8001956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001958:	f7ff fdfc 	bl	8001554 <HAL_GetTick>
 800195c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4215      	tst	r5, r2
 8001964:	d024      	beq.n	80019b0 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	430a      	orrs	r2, r1
 800196e:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001970:	22c0      	movs	r2, #192	; 0xc0
 8001972:	68d9      	ldr	r1, [r3, #12]
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	4211      	tst	r1, r2
 8001978:	d113      	bne.n	80019a2 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800197a:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800197c:	7fd2      	ldrb	r2, [r2, #31]
 800197e:	2a00      	cmp	r2, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	0712      	lsls	r2, r2, #28
 8001986:	d50c      	bpl.n	80019a2 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	0752      	lsls	r2, r2, #29
 800198c:	d423      	bmi.n	80019d6 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800198e:	210c      	movs	r1, #12
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	438a      	bics	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001996:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001998:	4913      	ldr	r1, [pc, #76]	; (80019e8 <HAL_ADC_PollForConversion+0xb8>)
 800199a:	4011      	ands	r1, r2
 800199c:	2201      	movs	r2, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80019a2:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80019a4:	69a2      	ldr	r2, [r4, #24]
 80019a6:	4282      	cmp	r2, r0
 80019a8:	d1d5      	bne.n	8001956 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019aa:	220c      	movs	r2, #12
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e7d2      	b.n	8001956 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80019b0:	1c72      	adds	r2, r6, #1
 80019b2:	d0d5      	beq.n	8001960 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80019b4:	2e00      	cmp	r6, #0
 80019b6:	d108      	bne.n	80019ca <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019b8:	2304      	movs	r3, #4
 80019ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80019bc:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019be:	4313      	orrs	r3, r2
 80019c0:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80019c2:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80019c4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80019c6:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80019c8:	e7c5      	b.n	8001956 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80019ca:	f7ff fdc3 	bl	8001554 <HAL_GetTick>
 80019ce:	1bc0      	subs	r0, r0, r7
 80019d0:	42b0      	cmp	r0, r6
 80019d2:	d9c4      	bls.n	800195e <HAL_ADC_PollForConversion+0x2e>
 80019d4:	e7f0      	b.n	80019b8 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d6:	2220      	movs	r2, #32
 80019d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80019da:	430a      	orrs	r2, r1
 80019dc:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	2201      	movs	r2, #1
 80019e0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80019e2:	430a      	orrs	r2, r1
 80019e4:	65a2      	str	r2, [r4, #88]	; 0x58
 80019e6:	e7dc      	b.n	80019a2 <HAL_ADC_PollForConversion+0x72>
 80019e8:	fffffefe 	.word	0xfffffefe

080019ec <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80019ec:	6803      	ldr	r3, [r0, #0]
 80019ee:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_ADC_ConfigChannel>:
{
 80019f4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 80019f6:	0004      	movs	r4, r0
 80019f8:	3450      	adds	r4, #80	; 0x50
 80019fa:	7823      	ldrb	r3, [r4, #0]
{
 80019fc:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80019fe:	2002      	movs	r0, #2
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d00c      	beq.n	8001a1e <HAL_ADC_ConfigChannel+0x2a>
 8001a04:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001a06:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 8001a08:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001a0a:	6890      	ldr	r0, [r2, #8]
 8001a0c:	0740      	lsls	r0, r0, #29
 8001a0e:	d507      	bpl.n	8001a20 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a10:	2220      	movs	r2, #32
 8001a12:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_ERROR;
 8001a14:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a16:	430a      	orrs	r2, r1
 8001a18:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	7022      	strb	r2, [r4, #0]
}
 8001a1e:	bd30      	pop	{r4, r5, pc}
 8001a20:	2580      	movs	r5, #128	; 0x80
 8001a22:	6808      	ldr	r0, [r1, #0]
 8001a24:	02ad      	lsls	r5, r5, #10
 8001a26:	0343      	lsls	r3, r0, #13
  if (sConfig->Rank != ADC_RANK_NONE)
 8001a28:	6849      	ldr	r1, [r1, #4]
 8001a2a:	4028      	ands	r0, r5
 8001a2c:	4d0d      	ldr	r5, [pc, #52]	; (8001a64 <HAL_ADC_ConfigChannel+0x70>)
 8001a2e:	0b5b      	lsrs	r3, r3, #13
 8001a30:	42a9      	cmp	r1, r5
 8001a32:	d00d      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0x5c>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001a34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a36:	430b      	orrs	r3, r1
 8001a38:	6293      	str	r3, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_ADC_ConfigChannel+0x56>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_ADC_ConfigChannel+0x74>)
 8001a42:	03db      	lsls	r3, r3, #15
 8001a44:	6811      	ldr	r1, [r2, #0]
 8001a46:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001a48:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001a4e:	e7e6      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001a50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a52:	4399      	bics	r1, r3
 8001a54:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d0f7      	beq.n	8001a4a <HAL_ADC_ConfigChannel+0x56>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001a5a:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <HAL_ADC_ConfigChannel+0x74>)
 8001a5c:	4903      	ldr	r1, [pc, #12]	; (8001a6c <HAL_ADC_ConfigChannel+0x78>)
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	400b      	ands	r3, r1
 8001a62:	e7f1      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x54>
 8001a64:	00001001 	.word	0x00001001
 8001a68:	40012708 	.word	0x40012708
 8001a6c:	ffbfffff 	.word	0xffbfffff

08001a70 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a70:	b530      	push	{r4, r5, lr}
 8001a72:	25ff      	movs	r5, #255	; 0xff
 8001a74:	2403      	movs	r4, #3
 8001a76:	002a      	movs	r2, r5
 8001a78:	b2c3      	uxtb	r3, r0
 8001a7a:	401c      	ands	r4, r3
 8001a7c:	00e4      	lsls	r4, r4, #3
 8001a7e:	40a2      	lsls	r2, r4
 8001a80:	0189      	lsls	r1, r1, #6
 8001a82:	4029      	ands	r1, r5
 8001a84:	43d2      	mvns	r2, r2
 8001a86:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	da0b      	bge.n	8001aa4 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a8c:	200f      	movs	r0, #15
 8001a8e:	4003      	ands	r3, r0
 8001a90:	3b08      	subs	r3, #8
 8001a92:	480a      	ldr	r0, [pc, #40]	; (8001abc <HAL_NVIC_SetPriority+0x4c>)
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	181b      	adds	r3, r3, r0
 8001a9a:	69d8      	ldr	r0, [r3, #28]
 8001a9c:	4002      	ands	r2, r0
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001aa2:	bd30      	pop	{r4, r5, pc}
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa6:	0880      	lsrs	r0, r0, #2
 8001aa8:	0080      	lsls	r0, r0, #2
 8001aaa:	18c0      	adds	r0, r0, r3
 8001aac:	23c0      	movs	r3, #192	; 0xc0
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	58c4      	ldr	r4, [r0, r3]
 8001ab2:	4022      	ands	r2, r4
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	50c1      	str	r1, [r0, r3]
 8001ab8:	e7f3      	b.n	8001aa2 <HAL_NVIC_SetPriority+0x32>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001ac4:	231f      	movs	r3, #31
 8001ac6:	4018      	ands	r0, r3
 8001ac8:	3b1e      	subs	r3, #30
 8001aca:	4083      	lsls	r3, r0
 8001acc:	4a01      	ldr	r2, [pc, #4]	; (8001ad4 <HAL_NVIC_EnableIRQ+0x10>)
 8001ace:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ad0:	4770      	bx	lr
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_SYSTICK_Config+0x28>)
 8001ada:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001adc:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d80d      	bhi.n	8001afe <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae2:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aea:	6a03      	ldr	r3, [r0, #32]
 8001aec:	0609      	lsls	r1, r1, #24
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	430b      	orrs	r3, r1
 8001af4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af8:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afa:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afc:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001afe:	4770      	bx	lr
 8001b00:	00ffffff 	.word	0x00ffffff
 8001b04:	e000e010 	.word	0xe000e010
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b0e:	1d84      	adds	r4, r0, #6
 8001b10:	7fe3      	ldrb	r3, [r4, #31]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b16:	2304      	movs	r3, #4
 8001b18:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001b1a:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b20:	210e      	movs	r1, #14
 8001b22:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b24:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	438a      	bics	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	4391      	bics	r1, r2
 8001b32:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b34:	231c      	movs	r3, #28
 8001b36:	402b      	ands	r3, r5
 8001b38:	0015      	movs	r5, r2
 8001b3a:	409d      	lsls	r5, r3
 8001b3c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8001b3e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b40:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b42:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001b44:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8001b46:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001b48:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001b4c:	42a2      	cmp	r2, r4
 8001b4e:	d0e5      	beq.n	8001b1c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001b50:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	0023      	movs	r3, r4
 8001b54:	e7e2      	b.n	8001b1c <HAL_DMA_Abort_IT+0x10>
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b5a:	4a4f      	ldr	r2, [pc, #316]	; (8001c98 <HAL_GPIO_Init+0x140>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b5c:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b5e:	1882      	adds	r2, r0, r2
 8001b60:	1e54      	subs	r4, r2, #1
 8001b62:	41a2      	sbcs	r2, r4
{
 8001b64:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b66:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8001b68:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b6a:	3205      	adds	r2, #5
 8001b6c:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b6e:	9a03      	ldr	r2, [sp, #12]
 8001b70:	40da      	lsrs	r2, r3
 8001b72:	d101      	bne.n	8001b78 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8001b74:	b007      	add	sp, #28
 8001b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b78:	2501      	movs	r5, #1
 8001b7a:	409d      	lsls	r5, r3
 8001b7c:	9a03      	ldr	r2, [sp, #12]
 8001b7e:	402a      	ands	r2, r5
 8001b80:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8001b82:	d100      	bne.n	8001b86 <HAL_GPIO_Init+0x2e>
 8001b84:	e086      	b.n	8001c94 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001b86:	684a      	ldr	r2, [r1, #4]
 8001b88:	9201      	str	r2, [sp, #4]
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	9e01      	ldr	r6, [sp, #4]
 8001b8e:	4396      	bics	r6, r2
 8001b90:	2e02      	cmp	r6, #2
 8001b92:	d10f      	bne.n	8001bb4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001b98:	2407      	movs	r4, #7
 8001b9a:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8001b9c:	6a17      	ldr	r7, [r2, #32]
 8001b9e:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	401c      	ands	r4, r3
 8001ba4:	00a4      	lsls	r4, r4, #2
 8001ba6:	40a2      	lsls	r2, r4
 8001ba8:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001baa:	690a      	ldr	r2, [r1, #16]
 8001bac:	40a2      	lsls	r2, r4
 8001bae:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8001bb0:	9a04      	ldr	r2, [sp, #16]
 8001bb2:	6217      	str	r7, [r2, #32]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	005f      	lsls	r7, r3, #1
 8001bb8:	40ba      	lsls	r2, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bba:	3e01      	subs	r6, #1
 8001bbc:	43d2      	mvns	r2, r2
 8001bbe:	2e01      	cmp	r6, #1
 8001bc0:	d80e      	bhi.n	8001be0 <HAL_GPIO_Init+0x88>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc2:	68cc      	ldr	r4, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8001bc4:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	40bc      	lsls	r4, r7
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bc8:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001bcc:	6084      	str	r4, [r0, #8]
        temp= GPIOx->OTYPER;
 8001bce:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd0:	43ac      	bics	r4, r5
 8001bd2:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bd4:	9c01      	ldr	r4, [sp, #4]
 8001bd6:	06e4      	lsls	r4, r4, #27
 8001bd8:	0fe4      	lsrs	r4, r4, #31
 8001bda:	409c      	lsls	r4, r3
 8001bdc:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001bde:	6044      	str	r4, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be0:	2403      	movs	r4, #3
 8001be2:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8001be4:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be6:	4025      	ands	r5, r4
 8001be8:	40bd      	lsls	r5, r7
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bea:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8001bee:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 8001bf0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf2:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001bf4:	688d      	ldr	r5, [r1, #8]
 8001bf6:	40bd      	lsls	r5, r7
 8001bf8:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8001bfa:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001bfc:	9a01      	ldr	r2, [sp, #4]
 8001bfe:	00d2      	lsls	r2, r2, #3
 8001c00:	d548      	bpl.n	8001c94 <HAL_GPIO_Init+0x13c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2701      	movs	r7, #1
 8001c04:	4d25      	ldr	r5, [pc, #148]	; (8001c9c <HAL_GPIO_Init+0x144>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001c06:	401c      	ands	r4, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c08:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001c0a:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0c:	433a      	orrs	r2, r7
 8001c0e:	636a      	str	r2, [r5, #52]	; 0x34
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_GPIO_Init+0x148>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	089d      	lsrs	r5, r3, #2
 8001c14:	00ad      	lsls	r5, r5, #2
 8001c16:	18ad      	adds	r5, r5, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001c18:	220f      	movs	r2, #15
 8001c1a:	40a2      	lsls	r2, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1c:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001c1e:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c20:	22a0      	movs	r2, #160	; 0xa0
 8001c22:	05d2      	lsls	r2, r2, #23
 8001c24:	4694      	mov	ip, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	4560      	cmp	r0, ip
 8001c2a:	d009      	beq.n	8001c40 <HAL_GPIO_Init+0xe8>
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_GPIO_Init+0x14c>)
 8001c2e:	4694      	mov	ip, r2
 8001c30:	003a      	movs	r2, r7
 8001c32:	4560      	cmp	r0, ip
 8001c34:	d004      	beq.n	8001c40 <HAL_GPIO_Init+0xe8>
 8001c36:	4f1c      	ldr	r7, [pc, #112]	; (8001ca8 <HAL_GPIO_Init+0x150>)
 8001c38:	1892      	adds	r2, r2, r2
 8001c3a:	42b8      	cmp	r0, r7
 8001c3c:	d000      	beq.n	8001c40 <HAL_GPIO_Init+0xe8>
 8001c3e:	9a05      	ldr	r2, [sp, #20]
 8001c40:	40a2      	lsls	r2, r4
 8001c42:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c44:	60aa      	str	r2, [r5, #8]
        temp = EXTI->IMR;
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_GPIO_Init+0x154>)
        temp &= ~((uint32_t)iocurrent);
 8001c48:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8001c4a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001c4c:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c4e:	9f01      	ldr	r7, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001c52:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c54:	03ff      	lsls	r7, r7, #15
 8001c56:	d401      	bmi.n	8001c5c <HAL_GPIO_Init+0x104>
        temp &= ~((uint32_t)iocurrent);
 8001c58:	0035      	movs	r5, r6
 8001c5a:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8001c5c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001c5e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001c60:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c62:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001c64:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c66:	03bf      	lsls	r7, r7, #14
 8001c68:	d401      	bmi.n	8001c6e <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	0035      	movs	r5, r6
 8001c6c:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001c6e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001c70:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001c72:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c74:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001c76:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c78:	02ff      	lsls	r7, r7, #11
 8001c7a:	d401      	bmi.n	8001c80 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	0035      	movs	r5, r6
 8001c7e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8001c80:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001c82:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8001c84:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c86:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001c88:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c8a:	02bf      	lsls	r7, r7, #10
 8001c8c:	d401      	bmi.n	8001c92 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	4025      	ands	r5, r4
 8001c90:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8001c92:	60d6      	str	r6, [r2, #12]
    position++;
 8001c94:	3301      	adds	r3, #1
 8001c96:	e76a      	b.n	8001b6e <HAL_GPIO_Init+0x16>
 8001c98:	afffe400 	.word	0xafffe400
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	50000400 	.word	0x50000400
 8001ca8:	50000800 	.word	0x50000800
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001cb0:	2a00      	cmp	r2, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001cb6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001cb8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001cba:	e7fc      	b.n	8001cb6 <HAL_GPIO_WritePin+0x6>

08001cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001cbe:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	4210      	tst	r0, r2
 8001cc4:	d002      	beq.n	8001ccc <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc8:	f7fe fff2 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ccc:	bd10      	pop	{r4, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001cda:	2c00      	cmp	r4, #0
 8001cdc:	d03f      	beq.n	8001d5e <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cde:	0025      	movs	r5, r4
 8001ce0:	3541      	adds	r5, #65	; 0x41
 8001ce2:	782b      	ldrb	r3, [r5, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cea:	0022      	movs	r2, r4
 8001cec:	3240      	adds	r2, #64	; 0x40
 8001cee:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	f7ff fac5 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf6:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfa:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001cfc:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cfe:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68a6      	ldr	r6, [r4, #8]
 8001d04:	438a      	bics	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d08:	6861      	ldr	r1, [r4, #4]
 8001d0a:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_I2C_Init+0xa0>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d10:	6899      	ldr	r1, [r3, #8]
 8001d12:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_I2C_Init+0xa4>)
 8001d14:	4011      	ands	r1, r2
 8001d16:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d18:	2801      	cmp	r0, #1
 8001d1a:	d121      	bne.n	8001d60 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0209      	lsls	r1, r1, #8
 8001d20:	4331      	orrs	r1, r6
 8001d22:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d24:	6858      	ldr	r0, [r3, #4]
 8001d26:	4915      	ldr	r1, [pc, #84]	; (8001d7c <HAL_I2C_Init+0xa8>)
 8001d28:	4301      	orrs	r1, r0
 8001d2a:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d2c:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d30:	400a      	ands	r2, r1
 8001d32:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d34:	6961      	ldr	r1, [r4, #20]
 8001d36:	6922      	ldr	r2, [r4, #16]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	69a1      	ldr	r1, [r4, #24]
 8001d3c:	0209      	lsls	r1, r1, #8
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d42:	6a21      	ldr	r1, [r4, #32]
 8001d44:	69e2      	ldr	r2, [r4, #28]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d54:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d58:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	3442      	adds	r4, #66	; 0x42
 8001d5c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d60:	2184      	movs	r1, #132	; 0x84
 8001d62:	0209      	lsls	r1, r1, #8
 8001d64:	4331      	orrs	r1, r6
 8001d66:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d68:	2802      	cmp	r0, #2
 8001d6a:	d1db      	bne.n	8001d24 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	0109      	lsls	r1, r1, #4
 8001d70:	6059      	str	r1, [r3, #4]
 8001d72:	e7d7      	b.n	8001d24 <HAL_I2C_Init+0x50>
 8001d74:	f0ffffff 	.word	0xf0ffffff
 8001d78:	ffff7fff 	.word	0xffff7fff
 8001d7c:	02008000 	.word	0x02008000

08001d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d82:	0004      	movs	r4, r0
 8001d84:	3441      	adds	r4, #65	; 0x41
 8001d86:	7822      	ldrb	r2, [r4, #0]
{
 8001d88:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001d8c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d118      	bne.n	8001dc4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8001d92:	001d      	movs	r5, r3
 8001d94:	3540      	adds	r5, #64	; 0x40
 8001d96:	782e      	ldrb	r6, [r5, #0]
 8001d98:	2e01      	cmp	r6, #1
 8001d9a:	d013      	beq.n	8001dc4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001d9c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d9e:	3022      	adds	r0, #34	; 0x22
 8001da0:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001da2:	681e      	ldr	r6, [r3, #0]
 8001da4:	3823      	subs	r0, #35	; 0x23
 8001da6:	4386      	bics	r6, r0
 8001da8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001daa:	681e      	ldr	r6, [r3, #0]
 8001dac:	4f06      	ldr	r7, [pc, #24]	; (8001dc8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8001dae:	403e      	ands	r6, r7
 8001db0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001db2:	681e      	ldr	r6, [r3, #0]
 8001db4:	4331      	orrs	r1, r6
 8001db6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	4308      	orrs	r0, r1
 8001dbc:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001dbe:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001dc0:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001dc2:	7028      	strb	r0, [r5, #0]
  }
}
 8001dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	ffffefff 	.word	0xffffefff

08001dcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dcc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dce:	0005      	movs	r5, r0
 8001dd0:	3541      	adds	r5, #65	; 0x41
 8001dd2:	782a      	ldrb	r2, [r5, #0]
{
 8001dd4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dda:	2a20      	cmp	r2, #32
 8001ddc:	d117      	bne.n	8001e0e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001dde:	001c      	movs	r4, r3
 8001de0:	3440      	adds	r4, #64	; 0x40
 8001de2:	7826      	ldrb	r6, [r4, #0]
 8001de4:	2e01      	cmp	r6, #1
 8001de6:	d012      	beq.n	8001e0e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8001de8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dea:	3022      	adds	r0, #34	; 0x22
 8001dec:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001dee:	681e      	ldr	r6, [r3, #0]
 8001df0:	3823      	subs	r0, #35	; 0x23
 8001df2:	4386      	bics	r6, r0
 8001df4:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001df6:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001df8:	4f05      	ldr	r7, [pc, #20]	; (8001e10 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001dfa:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001dfc:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001dfe:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001e00:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	4308      	orrs	r0, r1
 8001e06:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001e08:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001e0c:	7020      	strb	r0, [r4, #0]
  }
}
 8001e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e10:	fffff0ff 	.word	0xfffff0ff

08001e14 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_PWR_EnableBkUpAccess+0x10>)
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	6811      	ldr	r1, [r2, #0]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	4770      	bx	lr
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40007000 	.word	0x40007000

08001e28 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001e28:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001e2a:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_PWR_EnterSTOPMode+0x30>)
 8001e2e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001e30:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001e32:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8001e34:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001e36:	2204      	movs	r2, #4
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_PWR_EnterSTOPMode+0x34>)
 8001e3a:	6918      	ldr	r0, [r3, #16]
 8001e3c:	4302      	orrs	r2, r0
 8001e3e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001e40:	2901      	cmp	r1, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_PWR_EnterSTOPMode+0x28>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001e44:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001e46:	2104      	movs	r1, #4
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	438a      	bics	r2, r1
 8001e4c:	611a      	str	r2, [r3, #16]

}
 8001e4e:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8001e50:	bf40      	sev
  __ASM volatile ("wfe");
 8001e52:	bf20      	wfe
 8001e54:	bf20      	wfe
 8001e56:	e7f6      	b.n	8001e46 <HAL_PWR_EnterSTOPMode+0x1e>
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	6811      	ldr	r1, [r2, #0]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	4770      	bx	lr
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40007000 	.word	0x40007000

08001e74 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	6811      	ldr	r1, [r2, #0]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	4770      	bx	lr
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	40007000 	.word	0x40007000

08001e88 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e88:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001e8c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001e8e:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001e90:	400a      	ands	r2, r1
 8001e92:	2a08      	cmp	r2, #8
 8001e94:	d029      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x62>
 8001e96:	2a0c      	cmp	r2, #12
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x26>
 8001e9a:	2a04      	cmp	r2, #4
 8001e9c:	d11d      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e9e:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ea2:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8001ea4:	17c0      	asrs	r0, r0, #31
 8001ea6:	4018      	ands	r0, r3
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x70>)
 8001eaa:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001eac:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001eae:	028a      	lsls	r2, r1, #10
 8001eb0:	4812      	ldr	r0, [pc, #72]	; (8001efc <HAL_RCC_GetSysClockFreq+0x74>)
 8001eb2:	0f12      	lsrs	r2, r2, #28
 8001eb4:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001eb6:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb8:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001eba:	0f89      	lsrs	r1, r1, #30
 8001ebc:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ebe:	03c0      	lsls	r0, r0, #15
 8001ec0:	d504      	bpl.n	8001ecc <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001ec2:	480f      	ldr	r0, [pc, #60]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8001ec4:	4350      	muls	r0, r2
 8001ec6:	f7fe f93b 	bl	8000140 <__udivsi3>
 8001eca:	e7ef      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	06db      	lsls	r3, r3, #27
 8001ed0:	d501      	bpl.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001ed2:	480c      	ldr	r0, [pc, #48]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001ed4:	e7f6      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001ed6:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x70>)
 8001ed8:	e7f4      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001eda:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001edc:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ede:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4098      	lsls	r0, r3
 8001ee8:	e7e0      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x78>)
 8001eec:	e7de      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x24>
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	ff48e500 	.word	0xff48e500
 8001ef8:	00f42400 	.word	0x00f42400
 8001efc:	08004c69 	.word	0x08004c69
 8001f00:	007a1200 	.word	0x007a1200
 8001f04:	003d0900 	.word	0x003d0900

08001f08 <HAL_RCC_OscConfig>:
{
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	0005      	movs	r5, r0
 8001f0c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001f12:	2001      	movs	r0, #1
}
 8001f14:	b007      	add	sp, #28
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f18:	230c      	movs	r3, #12
 8001f1a:	4cc0      	ldr	r4, [pc, #768]	; (800221c <HAL_RCC_OscConfig+0x314>)
 8001f1c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f20:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	025b      	lsls	r3, r3, #9
 8001f26:	401a      	ands	r2, r3
 8001f28:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	6802      	ldr	r2, [r0, #0]
 8001f2c:	07d2      	lsls	r2, r2, #31
 8001f2e:	d43d      	bmi.n	8001fac <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f30:	682b      	ldr	r3, [r5, #0]
 8001f32:	079b      	lsls	r3, r3, #30
 8001f34:	d500      	bpl.n	8001f38 <HAL_RCC_OscConfig+0x30>
 8001f36:	e083      	b.n	8002040 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f38:	682b      	ldr	r3, [r5, #0]
 8001f3a:	06db      	lsls	r3, r3, #27
 8001f3c:	d528      	bpl.n	8001f90 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001f3e:	2e00      	cmp	r6, #0
 8001f40:	d000      	beq.n	8001f44 <HAL_RCC_OscConfig+0x3c>
 8001f42:	e0dd      	b.n	8002100 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	059b      	lsls	r3, r3, #22
 8001f48:	d502      	bpl.n	8001f50 <HAL_RCC_OscConfig+0x48>
 8001f4a:	69ab      	ldr	r3, [r5, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0e0      	beq.n	8001f12 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f50:	6862      	ldr	r2, [r4, #4]
 8001f52:	49b3      	ldr	r1, [pc, #716]	; (8002220 <HAL_RCC_OscConfig+0x318>)
 8001f54:	6a2b      	ldr	r3, [r5, #32]
 8001f56:	400a      	ands	r2, r1
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5c:	6861      	ldr	r1, [r4, #4]
 8001f5e:	69ea      	ldr	r2, [r5, #28]
 8001f60:	0209      	lsls	r1, r1, #8
 8001f62:	0a09      	lsrs	r1, r1, #8
 8001f64:	0612      	lsls	r2, r2, #24
 8001f66:	430a      	orrs	r2, r1
 8001f68:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	0b5b      	lsrs	r3, r3, #13
 8001f6e:	3301      	adds	r3, #1
 8001f70:	0212      	lsls	r2, r2, #8
 8001f72:	409a      	lsls	r2, r3
 8001f74:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f76:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001f78:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f7a:	060a      	lsls	r2, r1, #24
 8001f7c:	49a9      	ldr	r1, [pc, #676]	; (8002224 <HAL_RCC_OscConfig+0x31c>)
 8001f7e:	0f12      	lsrs	r2, r2, #28
 8001f80:	5c8a      	ldrb	r2, [r1, r2]
 8001f82:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f84:	4aa8      	ldr	r2, [pc, #672]	; (8002228 <HAL_RCC_OscConfig+0x320>)
 8001f86:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001f88:	f7ff fab0 	bl	80014ec <HAL_InitTick>
        if(status != HAL_OK)
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d1c1      	bne.n	8001f14 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	071b      	lsls	r3, r3, #28
 8001f94:	d500      	bpl.n	8001f98 <HAL_RCC_OscConfig+0x90>
 8001f96:	e0ea      	b.n	800216e <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	075b      	lsls	r3, r3, #29
 8001f9c:	d500      	bpl.n	8001fa0 <HAL_RCC_OscConfig+0x98>
 8001f9e:	e10c      	b.n	80021ba <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d000      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xa0>
 8001fa6:	e191      	b.n	80022cc <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 8001fa8:	2000      	movs	r0, #0
 8001faa:	e7b3      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fac:	2e08      	cmp	r6, #8
 8001fae:	d004      	beq.n	8001fba <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fb0:	2e0c      	cmp	r6, #12
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xc0>
 8001fb4:	9a01      	ldr	r2, [sp, #4]
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	d006      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	039b      	lsls	r3, r3, #14
 8001fbe:	d5b7      	bpl.n	8001f30 <HAL_RCC_OscConfig+0x28>
 8001fc0:	686b      	ldr	r3, [r5, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1b4      	bne.n	8001f30 <HAL_RCC_OscConfig+0x28>
 8001fc6:	e7a4      	b.n	8001f12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc8:	686a      	ldr	r2, [r5, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d111      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xea>
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fabe 	bl	8001554 <HAL_GetTick>
 8001fd8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	0292      	lsls	r2, r2, #10
 8001fe0:	4213      	tst	r3, r2
 8001fe2:	d1a5      	bne.n	8001f30 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fab6 	bl	8001554 <HAL_GetTick>
 8001fe8:	1bc0      	subs	r0, r0, r7
 8001fea:	2864      	cmp	r0, #100	; 0x64
 8001fec:	d9f5      	bls.n	8001fda <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8001fee:	2003      	movs	r0, #3
 8001ff0:	e790      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	21a0      	movs	r1, #160	; 0xa0
 8001ff4:	02c9      	lsls	r1, r1, #11
 8001ff6:	428a      	cmp	r2, r1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0xfe>
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	6821      	ldr	r1, [r4, #0]
 8001ffe:	02d2      	lsls	r2, r2, #11
 8002000:	430a      	orrs	r2, r1
 8002002:	6022      	str	r2, [r4, #0]
 8002004:	e7e3      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
 8002006:	6821      	ldr	r1, [r4, #0]
 8002008:	4888      	ldr	r0, [pc, #544]	; (800222c <HAL_RCC_OscConfig+0x324>)
 800200a:	4001      	ands	r1, r0
 800200c:	6021      	str	r1, [r4, #0]
 800200e:	6821      	ldr	r1, [r4, #0]
 8002010:	400b      	ands	r3, r1
 8002012:	9305      	str	r3, [sp, #20]
 8002014:	9b05      	ldr	r3, [sp, #20]
 8002016:	4986      	ldr	r1, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x328>)
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	400b      	ands	r3, r1
 800201c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201e:	2a00      	cmp	r2, #0
 8002020:	d1d8      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8002022:	f7ff fa97 	bl	8001554 <HAL_GetTick>
 8002026:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	0292      	lsls	r2, r2, #10
 800202e:	4213      	tst	r3, r2
 8002030:	d100      	bne.n	8002034 <HAL_RCC_OscConfig+0x12c>
 8002032:	e77d      	b.n	8001f30 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fa8e 	bl	8001554 <HAL_GetTick>
 8002038:	1bc0      	subs	r0, r0, r7
 800203a:	2864      	cmp	r0, #100	; 0x64
 800203c:	d9f4      	bls.n	8002028 <HAL_RCC_OscConfig+0x120>
 800203e:	e7d6      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002040:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8002042:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002044:	4213      	tst	r3, r2
 8002046:	d003      	beq.n	8002050 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002048:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800204a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800204c:	4311      	orrs	r1, r2
 800204e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002050:	2e04      	cmp	r6, #4
 8002052:	d004      	beq.n	800205e <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002054:	2e0c      	cmp	r6, #12
 8002056:	d125      	bne.n	80020a4 <HAL_RCC_OscConfig+0x19c>
 8002058:	9a01      	ldr	r2, [sp, #4]
 800205a:	2a00      	cmp	r2, #0
 800205c:	d122      	bne.n	80020a4 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	0752      	lsls	r2, r2, #29
 8002062:	d502      	bpl.n	800206a <HAL_RCC_OscConfig+0x162>
 8002064:	2b00      	cmp	r3, #0
 8002066:	d100      	bne.n	800206a <HAL_RCC_OscConfig+0x162>
 8002068:	e753      	b.n	8001f12 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	6861      	ldr	r1, [r4, #4]
 800206c:	692a      	ldr	r2, [r5, #16]
 800206e:	4871      	ldr	r0, [pc, #452]	; (8002234 <HAL_RCC_OscConfig+0x32c>)
 8002070:	0212      	lsls	r2, r2, #8
 8002072:	4001      	ands	r1, r0
 8002074:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002076:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800207a:	6822      	ldr	r2, [r4, #0]
 800207c:	438a      	bics	r2, r1
 800207e:	4313      	orrs	r3, r2
 8002080:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002082:	f7ff ff01 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8002086:	68e3      	ldr	r3, [r4, #12]
 8002088:	4a66      	ldr	r2, [pc, #408]	; (8002224 <HAL_RCC_OscConfig+0x31c>)
 800208a:	061b      	lsls	r3, r3, #24
 800208c:	0f1b      	lsrs	r3, r3, #28
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	40d8      	lsrs	r0, r3
 8002092:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_RCC_OscConfig+0x320>)
 8002094:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff fa28 	bl	80014ec <HAL_InitTick>
      if(status != HAL_OK)
 800209c:	2800      	cmp	r0, #0
 800209e:	d100      	bne.n	80020a2 <HAL_RCC_OscConfig+0x19a>
 80020a0:	e74a      	b.n	8001f38 <HAL_RCC_OscConfig+0x30>
 80020a2:	e737      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d019      	beq.n	80020dc <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020a8:	2109      	movs	r1, #9
 80020aa:	6822      	ldr	r2, [r4, #0]
 80020ac:	438a      	bics	r2, r1
 80020ae:	4313      	orrs	r3, r2
 80020b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020b2:	f7ff fa4f 	bl	8001554 <HAL_GetTick>
 80020b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b8:	2204      	movs	r2, #4
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	4213      	tst	r3, r2
 80020be:	d007      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	6862      	ldr	r2, [r4, #4]
 80020c2:	692b      	ldr	r3, [r5, #16]
 80020c4:	495b      	ldr	r1, [pc, #364]	; (8002234 <HAL_RCC_OscConfig+0x32c>)
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	400a      	ands	r2, r1
 80020ca:	4313      	orrs	r3, r2
 80020cc:	6063      	str	r3, [r4, #4]
 80020ce:	e733      	b.n	8001f38 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7ff fa40 	bl	8001554 <HAL_GetTick>
 80020d4:	1bc0      	subs	r0, r0, r7
 80020d6:	2802      	cmp	r0, #2
 80020d8:	d9ee      	bls.n	80020b8 <HAL_RCC_OscConfig+0x1b0>
 80020da:	e788      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 80020dc:	2201      	movs	r2, #1
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	4393      	bics	r3, r2
 80020e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020e4:	f7ff fa36 	bl	8001554 <HAL_GetTick>
 80020e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020ea:	2204      	movs	r2, #4
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	4213      	tst	r3, r2
 80020f0:	d100      	bne.n	80020f4 <HAL_RCC_OscConfig+0x1ec>
 80020f2:	e721      	b.n	8001f38 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff fa2e 	bl	8001554 <HAL_GetTick>
 80020f8:	1bc0      	subs	r0, r0, r7
 80020fa:	2802      	cmp	r0, #2
 80020fc:	d9f5      	bls.n	80020ea <HAL_RCC_OscConfig+0x1e2>
 80020fe:	e776      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002100:	69ab      	ldr	r3, [r5, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d020      	beq.n	8002148 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4313      	orrs	r3, r2
 800210e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002110:	f7ff fa20 	bl	8001554 <HAL_GetTick>
 8002114:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4213      	tst	r3, r2
 800211e:	d00d      	beq.n	800213c <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002120:	6863      	ldr	r3, [r4, #4]
 8002122:	4a3f      	ldr	r2, [pc, #252]	; (8002220 <HAL_RCC_OscConfig+0x318>)
 8002124:	4013      	ands	r3, r2
 8002126:	6a2a      	ldr	r2, [r5, #32]
 8002128:	4313      	orrs	r3, r2
 800212a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212c:	6862      	ldr	r2, [r4, #4]
 800212e:	69eb      	ldr	r3, [r5, #28]
 8002130:	0212      	lsls	r2, r2, #8
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	0a12      	lsrs	r2, r2, #8
 8002136:	4313      	orrs	r3, r2
 8002138:	6063      	str	r3, [r4, #4]
 800213a:	e729      	b.n	8001f90 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800213c:	f7ff fa0a 	bl	8001554 <HAL_GetTick>
 8002140:	1bc0      	subs	r0, r0, r7
 8002142:	2802      	cmp	r0, #2
 8002144:	d9e7      	bls.n	8002116 <HAL_RCC_OscConfig+0x20e>
 8002146:	e752      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <HAL_RCC_OscConfig+0x330>)
 800214c:	4013      	ands	r3, r2
 800214e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002150:	f7ff fa00 	bl	8001554 <HAL_GetTick>
 8002154:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	4213      	tst	r3, r2
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x25a>
 8002160:	e716      	b.n	8001f90 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002162:	f7ff f9f7 	bl	8001554 <HAL_GetTick>
 8002166:	1bc0      	subs	r0, r0, r7
 8002168:	2802      	cmp	r0, #2
 800216a:	d9f4      	bls.n	8002156 <HAL_RCC_OscConfig+0x24e>
 800216c:	e73f      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216e:	696a      	ldr	r2, [r5, #20]
 8002170:	2301      	movs	r3, #1
 8002172:	2a00      	cmp	r2, #0
 8002174:	d010      	beq.n	8002198 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 8002176:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002178:	4313      	orrs	r3, r2
 800217a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800217c:	f7ff f9ea 	bl	8001554 <HAL_GetTick>
 8002180:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002182:	2202      	movs	r2, #2
 8002184:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002186:	4213      	tst	r3, r2
 8002188:	d000      	beq.n	800218c <HAL_RCC_OscConfig+0x284>
 800218a:	e705      	b.n	8001f98 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218c:	f7ff f9e2 	bl	8001554 <HAL_GetTick>
 8002190:	1bc0      	subs	r0, r0, r7
 8002192:	2802      	cmp	r0, #2
 8002194:	d9f5      	bls.n	8002182 <HAL_RCC_OscConfig+0x27a>
 8002196:	e72a      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 8002198:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800219a:	439a      	bics	r2, r3
 800219c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800219e:	f7ff f9d9 	bl	8001554 <HAL_GetTick>
 80021a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021a4:	2202      	movs	r2, #2
 80021a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80021a8:	4213      	tst	r3, r2
 80021aa:	d100      	bne.n	80021ae <HAL_RCC_OscConfig+0x2a6>
 80021ac:	e6f4      	b.n	8001f98 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ae:	f7ff f9d1 	bl	8001554 <HAL_GetTick>
 80021b2:	1bc0      	subs	r0, r0, r7
 80021b4:	2802      	cmp	r0, #2
 80021b6:	d9f5      	bls.n	80021a4 <HAL_RCC_OscConfig+0x29c>
 80021b8:	e719      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ba:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80021bc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80021c0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c4:	421a      	tst	r2, r3
 80021c6:	d104      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80021ca:	4313      	orrs	r3, r2
 80021cc:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80021ce:	2301      	movs	r3, #1
 80021d0:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	4f19      	ldr	r7, [pc, #100]	; (800223c <HAL_RCC_OscConfig+0x334>)
 80021d6:	0052      	lsls	r2, r2, #1
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4213      	tst	r3, r2
 80021dc:	d008      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	68ab      	ldr	r3, [r5, #8]
 80021e2:	0052      	lsls	r2, r2, #1
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d12b      	bne.n	8002240 <HAL_RCC_OscConfig+0x338>
 80021e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80021ea:	4313      	orrs	r3, r2
 80021ec:	6523      	str	r3, [r4, #80]	; 0x50
 80021ee:	e04c      	b.n	800228a <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	0052      	lsls	r2, r2, #1
 80021f6:	4313      	orrs	r3, r2
 80021f8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80021fa:	f7ff f9ab 	bl	8001554 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8002202:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	9303      	str	r3, [sp, #12]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	9a03      	ldr	r2, [sp, #12]
 800220a:	4213      	tst	r3, r2
 800220c:	d1e7      	bne.n	80021de <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220e:	f7ff f9a1 	bl	8001554 <HAL_GetTick>
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	1ac0      	subs	r0, r0, r3
 8002216:	2864      	cmp	r0, #100	; 0x64
 8002218:	d9f5      	bls.n	8002206 <HAL_RCC_OscConfig+0x2fe>
 800221a:	e6e8      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
 800221c:	40021000 	.word	0x40021000
 8002220:	ffff1fff 	.word	0xffff1fff
 8002224:	08004c51 	.word	0x08004c51
 8002228:	20000008 	.word	0x20000008
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	fffbffff 	.word	0xfffbffff
 8002234:	ffffe0ff 	.word	0xffffe0ff
 8002238:	fffffeff 	.word	0xfffffeff
 800223c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002240:	2b00      	cmp	r3, #0
 8002242:	d116      	bne.n	8002272 <HAL_RCC_OscConfig+0x36a>
 8002244:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002246:	4a53      	ldr	r2, [pc, #332]	; (8002394 <HAL_RCC_OscConfig+0x48c>)
 8002248:	4013      	ands	r3, r2
 800224a:	6523      	str	r3, [r4, #80]	; 0x50
 800224c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800224e:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_RCC_OscConfig+0x490>)
 8002250:	4013      	ands	r3, r2
 8002252:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002254:	f7ff f97e 	bl	8001554 <HAL_GetTick>
 8002258:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4213      	tst	r3, r2
 8002262:	d02a      	beq.n	80022ba <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7ff f976 	bl	8001554 <HAL_GetTick>
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCC_OscConfig+0x494>)
 800226a:	1bc0      	subs	r0, r0, r7
 800226c:	4298      	cmp	r0, r3
 800226e:	d9f4      	bls.n	800225a <HAL_RCC_OscConfig+0x352>
 8002270:	e6bd      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002272:	21a0      	movs	r1, #160	; 0xa0
 8002274:	00c9      	lsls	r1, r1, #3
 8002276:	428b      	cmp	r3, r1
 8002278:	d10b      	bne.n	8002292 <HAL_RCC_OscConfig+0x38a>
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	430b      	orrs	r3, r1
 8002282:	6523      	str	r3, [r4, #80]	; 0x50
 8002284:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002286:	431a      	orrs	r2, r3
 8002288:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800228a:	f7ff f963 	bl	8001554 <HAL_GetTick>
 800228e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002290:	e00e      	b.n	80022b0 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002294:	4a3f      	ldr	r2, [pc, #252]	; (8002394 <HAL_RCC_OscConfig+0x48c>)
 8002296:	4013      	ands	r3, r2
 8002298:	6523      	str	r3, [r4, #80]	; 0x50
 800229a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800229c:	4a3e      	ldr	r2, [pc, #248]	; (8002398 <HAL_RCC_OscConfig+0x490>)
 800229e:	4013      	ands	r3, r2
 80022a0:	e7a4      	b.n	80021ec <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7ff f957 	bl	8001554 <HAL_GetTick>
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_RCC_OscConfig+0x494>)
 80022a8:	1bc0      	subs	r0, r0, r7
 80022aa:	4298      	cmp	r0, r3
 80022ac:	d900      	bls.n	80022b0 <HAL_RCC_OscConfig+0x3a8>
 80022ae:	e69e      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	4213      	tst	r3, r2
 80022b8:	d0f3      	beq.n	80022a2 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 80022ba:	9b01      	ldr	r3, [sp, #4]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d000      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3ba>
 80022c0:	e66e      	b.n	8001fa0 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022c4:	4a36      	ldr	r2, [pc, #216]	; (80023a0 <HAL_RCC_OscConfig+0x498>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80022ca:	e669      	b.n	8001fa0 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022cc:	2e0c      	cmp	r6, #12
 80022ce:	d043      	beq.n	8002358 <HAL_RCC_OscConfig+0x450>
 80022d0:	4a34      	ldr	r2, [pc, #208]	; (80023a4 <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d12e      	bne.n	8002334 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 80022d6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022d8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80022da:	4013      	ands	r3, r2
 80022dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022de:	f7ff f939 	bl	8001554 <HAL_GetTick>
 80022e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022e4:	04b6      	lsls	r6, r6, #18
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	4233      	tst	r3, r6
 80022ea:	d11d      	bne.n	8002328 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80022ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80022f0:	68e2      	ldr	r2, [r4, #12]
 80022f2:	430b      	orrs	r3, r1
 80022f4:	492c      	ldr	r1, [pc, #176]	; (80023a8 <HAL_RCC_OscConfig+0x4a0>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	4313      	orrs	r3, r2
 80022fa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022fc:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fe:	4313      	orrs	r3, r2
 8002300:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	045b      	lsls	r3, r3, #17
 8002308:	4313      	orrs	r3, r2
 800230a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800230c:	f7ff f922 	bl	8001554 <HAL_GetTick>
 8002310:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002312:	04ad      	lsls	r5, r5, #18
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	422b      	tst	r3, r5
 8002318:	d000      	beq.n	800231c <HAL_RCC_OscConfig+0x414>
 800231a:	e645      	b.n	8001fa8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff f91a 	bl	8001554 <HAL_GetTick>
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	2802      	cmp	r0, #2
 8002324:	d9f6      	bls.n	8002314 <HAL_RCC_OscConfig+0x40c>
 8002326:	e662      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff f914 	bl	8001554 <HAL_GetTick>
 800232c:	1bc0      	subs	r0, r0, r7
 800232e:	2802      	cmp	r0, #2
 8002330:	d9d9      	bls.n	80022e6 <HAL_RCC_OscConfig+0x3de>
 8002332:	e65c      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 8002334:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002336:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002338:	4013      	ands	r3, r2
 800233a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800233c:	f7ff f90a 	bl	8001554 <HAL_GetTick>
 8002340:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002342:	04ad      	lsls	r5, r5, #18
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	422b      	tst	r3, r5
 8002348:	d100      	bne.n	800234c <HAL_RCC_OscConfig+0x444>
 800234a:	e62d      	b.n	8001fa8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7ff f902 	bl	8001554 <HAL_GetTick>
 8002350:	1b80      	subs	r0, r0, r6
 8002352:	2802      	cmp	r0, #2
 8002354:	d9f6      	bls.n	8002344 <HAL_RCC_OscConfig+0x43c>
 8002356:	e64a      	b.n	8001fee <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 8002358:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235a:	2b01      	cmp	r3, #1
 800235c:	d100      	bne.n	8002360 <HAL_RCC_OscConfig+0x458>
 800235e:	e5d9      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002360:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002362:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002366:	0252      	lsls	r2, r2, #9
 8002368:	401a      	ands	r2, r3
        return HAL_ERROR;
 800236a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236c:	428a      	cmp	r2, r1
 800236e:	d000      	beq.n	8002372 <HAL_RCC_OscConfig+0x46a>
 8002370:	e5d0      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002372:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002376:	0392      	lsls	r2, r2, #14
 8002378:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	428a      	cmp	r2, r1
 800237c:	d000      	beq.n	8002380 <HAL_RCC_OscConfig+0x478>
 800237e:	e5c9      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002380:	20c0      	movs	r0, #192	; 0xc0
 8002382:	0400      	lsls	r0, r0, #16
 8002384:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002386:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002388:	1a18      	subs	r0, r3, r0
 800238a:	1e43      	subs	r3, r0, #1
 800238c:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800238e:	b2c0      	uxtb	r0, r0
 8002390:	e5c0      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	fffffeff 	.word	0xfffffeff
 8002398:	fffffbff 	.word	0xfffffbff
 800239c:	00001388 	.word	0x00001388
 80023a0:	efffffff 	.word	0xefffffff
 80023a4:	feffffff 	.word	0xfeffffff
 80023a8:	ff02ffff 	.word	0xff02ffff

080023ac <HAL_RCC_ClockConfig>:
{
 80023ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023ae:	1e06      	subs	r6, r0, #0
 80023b0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80023b4:	2001      	movs	r0, #1
}
 80023b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	2201      	movs	r2, #1
 80023ba:	4c51      	ldr	r4, [pc, #324]	; (8002500 <HAL_RCC_ClockConfig+0x154>)
 80023bc:	9901      	ldr	r1, [sp, #4]
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	4013      	ands	r3, r2
 80023c2:	428b      	cmp	r3, r1
 80023c4:	d327      	bcc.n	8002416 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c6:	6832      	ldr	r2, [r6, #0]
 80023c8:	0793      	lsls	r3, r2, #30
 80023ca:	d42f      	bmi.n	800242c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023cc:	07d3      	lsls	r3, r2, #31
 80023ce:	d435      	bmi.n	800243c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	2301      	movs	r3, #1
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	9901      	ldr	r1, [sp, #4]
 80023d6:	401a      	ands	r2, r3
 80023d8:	428a      	cmp	r2, r1
 80023da:	d900      	bls.n	80023de <HAL_RCC_ClockConfig+0x32>
 80023dc:	e081      	b.n	80024e2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023de:	6832      	ldr	r2, [r6, #0]
 80023e0:	4c48      	ldr	r4, [pc, #288]	; (8002504 <HAL_RCC_ClockConfig+0x158>)
 80023e2:	0753      	lsls	r3, r2, #29
 80023e4:	d500      	bpl.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
 80023e6:	e084      	b.n	80024f2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	0713      	lsls	r3, r2, #28
 80023ea:	d506      	bpl.n	80023fa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ec:	68e2      	ldr	r2, [r4, #12]
 80023ee:	6933      	ldr	r3, [r6, #16]
 80023f0:	4945      	ldr	r1, [pc, #276]	; (8002508 <HAL_RCC_ClockConfig+0x15c>)
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	400a      	ands	r2, r1
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fa:	f7ff fd45 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 80023fe:	68e3      	ldr	r3, [r4, #12]
 8002400:	4a42      	ldr	r2, [pc, #264]	; (800250c <HAL_RCC_ClockConfig+0x160>)
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	0f1b      	lsrs	r3, r3, #28
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	40d8      	lsrs	r0, r3
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCC_ClockConfig+0x164>)
 800240c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff f86c 	bl	80014ec <HAL_InitTick>
 8002414:	e7cf      	b.n	80023b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	9901      	ldr	r1, [sp, #4]
 800241a:	4393      	bics	r3, r2
 800241c:	430b      	orrs	r3, r1
 800241e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	4013      	ands	r3, r2
 8002424:	9a01      	ldr	r2, [sp, #4]
 8002426:	4293      	cmp	r3, r2
 8002428:	d1c4      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x8>
 800242a:	e7cc      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	20f0      	movs	r0, #240	; 0xf0
 800242e:	4935      	ldr	r1, [pc, #212]	; (8002504 <HAL_RCC_ClockConfig+0x158>)
 8002430:	68cb      	ldr	r3, [r1, #12]
 8002432:	4383      	bics	r3, r0
 8002434:	68b0      	ldr	r0, [r6, #8]
 8002436:	4303      	orrs	r3, r0
 8002438:	60cb      	str	r3, [r1, #12]
 800243a:	e7c7      	b.n	80023cc <HAL_RCC_ClockConfig+0x20>
 800243c:	4d31      	ldr	r5, [pc, #196]	; (8002504 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002440:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	2a02      	cmp	r2, #2
 8002444:	d119      	bne.n	800247a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002446:	039b      	lsls	r3, r3, #14
 8002448:	d5b4      	bpl.n	80023b4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244a:	2103      	movs	r1, #3
 800244c:	68eb      	ldr	r3, [r5, #12]
 800244e:	438b      	bics	r3, r1
 8002450:	4313      	orrs	r3, r2
 8002452:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002454:	f7ff f87e 	bl	8001554 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002458:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800245a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245c:	2b02      	cmp	r3, #2
 800245e:	d119      	bne.n	8002494 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002460:	220c      	movs	r2, #12
 8002462:	68eb      	ldr	r3, [r5, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	2b08      	cmp	r3, #8
 8002468:	d0b2      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246a:	f7ff f873 	bl	8001554 <HAL_GetTick>
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_ClockConfig+0x168>)
 8002470:	1bc0      	subs	r0, r0, r7
 8002472:	4298      	cmp	r0, r3
 8002474:	d9f4      	bls.n	8002460 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8002476:	2003      	movs	r0, #3
 8002478:	e79d      	b.n	80023b6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	2a03      	cmp	r2, #3
 800247c:	d102      	bne.n	8002484 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800247e:	019b      	lsls	r3, r3, #6
 8002480:	d4e3      	bmi.n	800244a <HAL_RCC_ClockConfig+0x9e>
 8002482:	e797      	b.n	80023b4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002484:	2a01      	cmp	r2, #1
 8002486:	d102      	bne.n	800248e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002488:	075b      	lsls	r3, r3, #29
 800248a:	d4de      	bmi.n	800244a <HAL_RCC_ClockConfig+0x9e>
 800248c:	e792      	b.n	80023b4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800248e:	059b      	lsls	r3, r3, #22
 8002490:	d4db      	bmi.n	800244a <HAL_RCC_ClockConfig+0x9e>
 8002492:	e78f      	b.n	80023b4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002494:	2b03      	cmp	r3, #3
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	220c      	movs	r2, #12
 800249a:	68eb      	ldr	r3, [r5, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	4293      	cmp	r3, r2
 80024a0:	d096      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a2:	f7ff f857 	bl	8001554 <HAL_GetTick>
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_ClockConfig+0x168>)
 80024a8:	1bc0      	subs	r0, r0, r7
 80024aa:	4298      	cmp	r0, r3
 80024ac:	d9f4      	bls.n	8002498 <HAL_RCC_ClockConfig+0xec>
 80024ae:	e7e2      	b.n	8002476 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d010      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024b4:	220c      	movs	r2, #12
 80024b6:	68eb      	ldr	r3, [r5, #12]
 80024b8:	4213      	tst	r3, r2
 80024ba:	d089      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7ff f84a 	bl	8001554 <HAL_GetTick>
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_RCC_ClockConfig+0x168>)
 80024c2:	1bc0      	subs	r0, r0, r7
 80024c4:	4298      	cmp	r0, r3
 80024c6:	d9f5      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x108>
 80024c8:	e7d5      	b.n	8002476 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ca:	f7ff f843 	bl	8001554 <HAL_GetTick>
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_RCC_ClockConfig+0x168>)
 80024d0:	1bc0      	subs	r0, r0, r7
 80024d2:	4298      	cmp	r0, r3
 80024d4:	d8cf      	bhi.n	8002476 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d6:	220c      	movs	r2, #12
 80024d8:	68eb      	ldr	r3, [r5, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d1f4      	bne.n	80024ca <HAL_RCC_ClockConfig+0x11e>
 80024e0:	e776      	b.n	80023d0 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	439a      	bics	r2, r3
 80024e6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e8:	6822      	ldr	r2, [r4, #0]
 80024ea:	421a      	tst	r2, r3
 80024ec:	d100      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x144>
 80024ee:	e776      	b.n	80023de <HAL_RCC_ClockConfig+0x32>
 80024f0:	e760      	b.n	80023b4 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f2:	68e3      	ldr	r3, [r4, #12]
 80024f4:	4908      	ldr	r1, [pc, #32]	; (8002518 <HAL_RCC_ClockConfig+0x16c>)
 80024f6:	400b      	ands	r3, r1
 80024f8:	68f1      	ldr	r1, [r6, #12]
 80024fa:	430b      	orrs	r3, r1
 80024fc:	60e3      	str	r3, [r4, #12]
 80024fe:	e773      	b.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
 8002508:	ffffc7ff 	.word	0xffffc7ff
 800250c:	08004c51 	.word	0x08004c51
 8002510:	20000008 	.word	0x20000008
 8002514:	00001388 	.word	0x00001388
 8002518:	fffff8ff 	.word	0xfffff8ff

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x14>)
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	055b      	lsls	r3, r3, #21
 8002524:	0f5b      	lsrs	r3, r3, #29
 8002526:	5cd3      	ldrb	r3, [r2, r3]
 8002528:	4a03      	ldr	r2, [pc, #12]	; (8002538 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800252a:	6810      	ldr	r0, [r2, #0]
 800252c:	40d8      	lsrs	r0, r3
}
 800252e:	4770      	bx	lr
 8002530:	40021000 	.word	0x40021000
 8002534:	08004c61 	.word	0x08004c61
 8002538:	20000008 	.word	0x20000008

0800253c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_RCC_GetPCLK2Freq+0x14>)
 800253e:	4a05      	ldr	r2, [pc, #20]	; (8002554 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	049b      	lsls	r3, r3, #18
 8002544:	0f5b      	lsrs	r3, r3, #29
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	4a03      	ldr	r2, [pc, #12]	; (8002558 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800254a:	6810      	ldr	r0, [r2, #0]
 800254c:	40d8      	lsrs	r0, r3
}
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	08004c61 	.word	0x08004c61
 8002558:	20000008 	.word	0x20000008

0800255c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800255c:	6803      	ldr	r3, [r0, #0]
{
 800255e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002560:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002562:	069b      	lsls	r3, r3, #26
 8002564:	d53b      	bpl.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002568:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256a:	4c4f      	ldr	r4, [pc, #316]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800256c:	055b      	lsls	r3, r3, #21
 800256e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8002570:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002572:	421a      	tst	r2, r3
 8002574:	d104      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002578:	4313      	orrs	r3, r2
 800257a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800257c:	2301      	movs	r3, #1
 800257e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	2780      	movs	r7, #128	; 0x80
 8002582:	4e4a      	ldr	r6, [pc, #296]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002584:	007f      	lsls	r7, r7, #1
 8002586:	6833      	ldr	r3, [r6, #0]
 8002588:	423b      	tst	r3, r7
 800258a:	d04f      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800258c:	6868      	ldr	r0, [r5, #4]
 800258e:	23c0      	movs	r3, #192	; 0xc0
 8002590:	26c0      	movs	r6, #192	; 0xc0
 8002592:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002594:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002596:	03b6      	lsls	r6, r6, #14
 8002598:	029b      	lsls	r3, r3, #10
 800259a:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800259c:	4032      	ands	r2, r6
 800259e:	4019      	ands	r1, r3
 80025a0:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80025a2:	4290      	cmp	r0, r2
 80025a4:	d153      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80025a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80025a8:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80025aa:	d157      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ac:	6869      	ldr	r1, [r5, #4]
 80025ae:	23c0      	movs	r3, #192	; 0xc0
 80025b0:	000a      	movs	r2, r1
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	401a      	ands	r2, r3
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d107      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	483c      	ldr	r0, [pc, #240]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80025be:	4003      	ands	r3, r0
 80025c0:	20c0      	movs	r0, #192	; 0xc0
 80025c2:	0380      	lsls	r0, r0, #14
 80025c4:	4001      	ands	r1, r0
 80025c6:	430b      	orrs	r3, r1
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80025cc:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ce:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d0:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d103      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025d8:	4a36      	ldr	r2, [pc, #216]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80025da:	4013      	ands	r3, r2
 80025dc:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025de:	682a      	ldr	r2, [r5, #0]
 80025e0:	0793      	lsls	r3, r2, #30
 80025e2:	d506      	bpl.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e4:	200c      	movs	r0, #12
 80025e6:	4930      	ldr	r1, [pc, #192]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025e8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80025ea:	4383      	bics	r3, r0
 80025ec:	68a8      	ldr	r0, [r5, #8]
 80025ee:	4303      	orrs	r3, r0
 80025f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025f2:	0753      	lsls	r3, r2, #29
 80025f4:	d506      	bpl.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f6:	492c      	ldr	r1, [pc, #176]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025f8:	482f      	ldr	r0, [pc, #188]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025fa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80025fc:	4003      	ands	r3, r0
 80025fe:	68e8      	ldr	r0, [r5, #12]
 8002600:	4303      	orrs	r3, r0
 8002602:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002604:	0713      	lsls	r3, r2, #28
 8002606:	d506      	bpl.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002608:	4927      	ldr	r1, [pc, #156]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800260a:	482c      	ldr	r0, [pc, #176]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800260e:	4003      	ands	r3, r0
 8002610:	6928      	ldr	r0, [r5, #16]
 8002612:	4303      	orrs	r3, r0
 8002614:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002616:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002618:	0613      	lsls	r3, r2, #24
 800261a:	d517      	bpl.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800261c:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800261e:	4928      	ldr	r1, [pc, #160]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002620:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002622:	400b      	ands	r3, r1
 8002624:	6969      	ldr	r1, [r5, #20]
 8002626:	430b      	orrs	r3, r1
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	e00f      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262c:	6833      	ldr	r3, [r6, #0]
 800262e:	433b      	orrs	r3, r7
 8002630:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002632:	f7fe ff8f 	bl	8001554 <HAL_GetTick>
 8002636:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	6833      	ldr	r3, [r6, #0]
 800263a:	423b      	tst	r3, r7
 800263c:	d1a6      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7fe ff89 	bl	8001554 <HAL_GetTick>
 8002642:	9b01      	ldr	r3, [sp, #4]
 8002644:	1ac0      	subs	r0, r0, r3
 8002646:	2864      	cmp	r0, #100	; 0x64
 8002648:	d9f6      	bls.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 800264a:	2003      	movs	r0, #3
}
 800264c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800264e:	4299      	cmp	r1, r3
 8002650:	d1a9      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002652:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8002654:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002656:	039b      	lsls	r3, r3, #14
 8002658:	d5a5      	bpl.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800265a:	e7f7      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800265c:	428b      	cmp	r3, r1
 800265e:	d0a5      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	069b      	lsls	r3, r3, #26
 8002664:	d5a2      	bpl.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002666:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002668:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800266a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800266c:	0312      	lsls	r2, r2, #12
 800266e:	4302      	orrs	r2, r0
 8002670:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002672:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002676:	4814      	ldr	r0, [pc, #80]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002678:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800267a:	4002      	ands	r2, r0
 800267c:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800267e:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002680:	05cb      	lsls	r3, r1, #23
 8002682:	d400      	bmi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8002684:	e792      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8002686:	f7fe ff65 	bl	8001554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800268a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800268c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800268e:	00bf      	lsls	r7, r7, #2
 8002690:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002692:	423b      	tst	r3, r7
 8002694:	d000      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002696:	e789      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7fe ff5c 	bl	8001554 <HAL_GetTick>
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800269e:	1b80      	subs	r0, r0, r6
 80026a0:	4298      	cmp	r0, r3
 80026a2:	d9f5      	bls.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80026a4:	e7d1      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xee>
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
 80026b0:	ffcfffff 	.word	0xffcfffff
 80026b4:	efffffff 	.word	0xefffffff
 80026b8:	fffff3ff 	.word	0xfffff3ff
 80026bc:	ffffcfff 	.word	0xffffcfff
 80026c0:	fff3ffff 	.word	0xfff3ffff
 80026c4:	fffcffff 	.word	0xfffcffff
 80026c8:	fff7ffff 	.word	0xfff7ffff
 80026cc:	00001388 	.word	0x00001388

080026d0 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80026d0:	6803      	ldr	r3, [r0, #0]
{
 80026d2:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80026d4:	689a      	ldr	r2, [r3, #8]
{
 80026d6:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80026d8:	04d2      	lsls	r2, r2, #19
 80026da:	d50a      	bpl.n	80026f2 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	05db      	lsls	r3, r3, #23
 80026e0:	d507      	bpl.n	80026f2 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80026e2:	f7fe fa91 	bl	8000c08 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80026e6:	6821      	ldr	r1, [r4, #0]
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_RTC_AlarmIRQHandler+0x54>)
 80026ea:	68ca      	ldr	r2, [r1, #12]
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	0492      	lsls	r2, r2, #18
 80026f8:	d50b      	bpl.n	8002712 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	059b      	lsls	r3, r3, #22
 80026fe:	d508      	bpl.n	8002712 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002700:	0020      	movs	r0, r4
 8002702:	f000 fa67 	bl	8002bd4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002706:	6821      	ldr	r1, [r4, #0]
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RTC_AlarmIRQHandler+0x58>)
 800270a:	68ca      	ldr	r2, [r1, #12]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	4313      	orrs	r3, r2
 8002710:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RTC_AlarmIRQHandler+0x5c>)
 8002716:	0292      	lsls	r2, r2, #10
 8002718:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800271a:	2301      	movs	r3, #1
 800271c:	3402      	adds	r4, #2
 800271e:	77e3      	strb	r3, [r4, #31]
}
 8002720:	bd10      	pop	{r4, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	fffffe7f 	.word	0xfffffe7f
 8002728:	fffffd7f 	.word	0xfffffd7f
 800272c:	40010400 	.word	0x40010400

08002730 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002730:	21a0      	movs	r1, #160	; 0xa0
 8002732:	6802      	ldr	r2, [r0, #0]
{
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002736:	68d3      	ldr	r3, [r2, #12]
{
 8002738:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800273a:	438b      	bics	r3, r1
 800273c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800273e:	f7fe ff09 	bl	8001554 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002742:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8002744:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002746:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002748:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	422b      	tst	r3, r5
 8002750:	d001      	beq.n	8002756 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002752:	2000      	movs	r0, #0
}
 8002754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002756:	f7fe fefd 	bl	8001554 <HAL_GetTick>
 800275a:	1b80      	subs	r0, r0, r6
 800275c:	42b8      	cmp	r0, r7
 800275e:	d9f4      	bls.n	800274a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8002760:	2003      	movs	r0, #3
 8002762:	e7f7      	b.n	8002754 <HAL_RTC_WaitForSynchro+0x24>

08002764 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002766:	2440      	movs	r4, #64	; 0x40
 8002768:	6803      	ldr	r3, [r0, #0]
{
 800276a:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4222      	tst	r2, r4
 8002770:	d001      	beq.n	8002776 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002772:	2000      	movs	r0, #0
}
 8002774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002776:	2201      	movs	r2, #1
 8002778:	4252      	negs	r2, r2
 800277a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800277c:	f7fe feea 	bl	8001554 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002780:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8002782:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002784:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002786:	682b      	ldr	r3, [r5, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4223      	tst	r3, r4
 800278c:	d1f1      	bne.n	8002772 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800278e:	f7fe fee1 	bl	8001554 <HAL_GetTick>
 8002792:	1b80      	subs	r0, r0, r6
 8002794:	42b8      	cmp	r0, r7
 8002796:	d9f6      	bls.n	8002786 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8002798:	2003      	movs	r0, #3
 800279a:	e7eb      	b.n	8002774 <RTC_EnterInitMode+0x10>

0800279c <HAL_RTC_Init>:
{
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	0004      	movs	r4, r0
    return HAL_ERROR;
 80027a0:	2501      	movs	r5, #1
  if (hrtc == NULL)
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d01a      	beq.n	80027dc <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80027a6:	1c86      	adds	r6, r0, #2
 80027a8:	7ff3      	ldrb	r3, [r6, #31]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 80027b0:	1942      	adds	r2, r0, r5
 80027b2:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 80027b4:	f7fe fdda 	bl	800136c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027b8:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027ba:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027bc:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027be:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80027c0:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
 80027c4:	3a77      	subs	r2, #119	; 0x77
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80027c8:	f7ff ffcc 	bl	8002764 <RTC_EnterInitMode>
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	1e05      	subs	r5, r0, #0
 80027d0:	d006      	beq.n	80027e0 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027d6:	2304      	movs	r3, #4
 80027d8:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 80027da:	2501      	movs	r5, #1
}
 80027dc:	0028      	movs	r0, r5
 80027de:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	491b      	ldr	r1, [pc, #108]	; (8002850 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027e4:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027e6:	400a      	ands	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027ea:	6862      	ldr	r2, [r4, #4]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	4302      	orrs	r2, r0
 80027f0:	69a0      	ldr	r0, [r4, #24]
 80027f2:	4302      	orrs	r2, r0
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027f8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80027fa:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80027fe:	68a2      	ldr	r2, [r4, #8]
 8002800:	6919      	ldr	r1, [r3, #16]
 8002802:	0412      	lsls	r2, r2, #16
 8002804:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002806:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002808:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	438a      	bics	r2, r1
 800280e:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002812:	397d      	subs	r1, #125	; 0x7d
 8002814:	438a      	bics	r2, r1
 8002816:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002818:	69e2      	ldr	r2, [r4, #28]
 800281a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800281c:	4302      	orrs	r2, r0
 800281e:	430a      	orrs	r2, r1
 8002820:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	069b      	lsls	r3, r3, #26
 8002826:	d40c      	bmi.n	8002842 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002828:	0020      	movs	r0, r4
 800282a:	f7ff ff81 	bl	8002730 <HAL_RTC_WaitForSynchro>
 800282e:	2800      	cmp	r0, #0
 8002830:	d007      	beq.n	8002842 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8002836:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800283a:	2304      	movs	r3, #4
 800283c:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800283e:	77e5      	strb	r5, [r4, #31]
 8002840:	e7cb      	b.n	80027da <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002848:	2301      	movs	r3, #1
 800284a:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 800284c:	e7c6      	b.n	80027dc <HAL_RTC_Init+0x40>
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	ff8fffbf 	.word	0xff8fffbf

08002854 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002854:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8002856:	2809      	cmp	r0, #9
 8002858:	d803      	bhi.n	8002862 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	4318      	orrs	r0, r3
 800285e:	b2c0      	uxtb	r0, r0
}
 8002860:	4770      	bx	lr
    Param -= 10U;
 8002862:	380a      	subs	r0, #10
    bcdhigh++;
 8002864:	3301      	adds	r3, #1
    Param -= 10U;
 8002866:	b2c0      	uxtb	r0, r0
 8002868:	e7f5      	b.n	8002856 <RTC_ByteToBcd2+0x2>
	...

0800286c <HAL_RTC_SetTime>:
{
 800286c:	2302      	movs	r3, #2
 800286e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002870:	1c47      	adds	r7, r0, #1
{
 8002872:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8002874:	7ff9      	ldrb	r1, [r7, #31]
{
 8002876:	b085      	sub	sp, #20
 8002878:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800287a:	001e      	movs	r6, r3
 800287c:	2901      	cmp	r1, #1
 800287e:	d037      	beq.n	80028f0 <HAL_RTC_SetTime+0x84>
 8002880:	2101      	movs	r1, #1
 8002882:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002884:	18c1      	adds	r1, r0, r3
 8002886:	77cb      	strb	r3, [r1, #31]
 8002888:	9101      	str	r1, [sp, #4]
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	6806      	ldr	r6, [r0, #0]
 800288e:	7863      	ldrb	r3, [r4, #1]
 8002890:	7820      	ldrb	r0, [r4, #0]
 8002892:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002894:	68b3      	ldr	r3, [r6, #8]
 8002896:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8002898:	2a00      	cmp	r2, #0
 800289a:	d12c      	bne.n	80028f6 <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800289c:	2b00      	cmp	r3, #0
 800289e:	d100      	bne.n	80028a2 <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 80028a0:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028a2:	f7ff ffd7 	bl	8002854 <RTC_ByteToBcd2>
 80028a6:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80028a8:	9802      	ldr	r0, [sp, #8]
 80028aa:	f7ff ffd3 	bl	8002854 <RTC_ByteToBcd2>
 80028ae:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80028b0:	78a0      	ldrb	r0, [r4, #2]
 80028b2:	f7ff ffcf 	bl	8002854 <RTC_ByteToBcd2>
 80028b6:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80028b8:	78e0      	ldrb	r0, [r4, #3]
 80028ba:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028bc:	4318      	orrs	r0, r3
 80028be:	9b03      	ldr	r3, [sp, #12]
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80028c4:	9b02      	ldr	r3, [sp, #8]
 80028c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80028c8:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028ca:	23ca      	movs	r3, #202	; 0xca
 80028cc:	6273      	str	r3, [r6, #36]	; 0x24
 80028ce:	3b77      	subs	r3, #119	; 0x77
 80028d0:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80028d2:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028d4:	0028      	movs	r0, r5
 80028d6:	f7ff ff45 	bl	8002764 <RTC_EnterInitMode>
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	1e06      	subs	r6, r0, #0
 80028de:	d016      	beq.n	800290e <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028e4:	2304      	movs	r3, #4
 80028e6:	9a01      	ldr	r2, [sp, #4]
 80028e8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80028ea:	2300      	movs	r3, #0
 80028ec:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80028ee:	2601      	movs	r6, #1
}
 80028f0:	0030      	movs	r0, r6
 80028f2:	b005      	add	sp, #20
 80028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d100      	bne.n	80028fc <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 80028fa:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80028fc:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80028fe:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002900:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002902:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 8002904:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002906:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002908:	78e3      	ldrb	r3, [r4, #3]
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	e7dc      	b.n	80028c8 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800290e:	4815      	ldr	r0, [pc, #84]	; (8002964 <HAL_RTC_SetTime+0xf8>)
 8002910:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002912:	4915      	ldr	r1, [pc, #84]	; (8002968 <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002914:	4002      	ands	r2, r0
 8002916:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002918:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800291a:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800291c:	400a      	ands	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002920:	68e2      	ldr	r2, [r4, #12]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	4302      	orrs	r2, r0
 8002926:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002928:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800292a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	438a      	bics	r2, r1
 8002930:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	069b      	lsls	r3, r3, #26
 8002936:	d40c      	bmi.n	8002952 <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002938:	0028      	movs	r0, r5
 800293a:	f7ff fef9 	bl	8002730 <HAL_RTC_WaitForSynchro>
 800293e:	2800      	cmp	r0, #0
 8002940:	d007      	beq.n	8002952 <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002942:	22ff      	movs	r2, #255	; 0xff
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002948:	2304      	movs	r3, #4
 800294a:	9a01      	ldr	r2, [sp, #4]
 800294c:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800294e:	77fe      	strb	r6, [r7, #31]
 8002950:	e7cd      	b.n	80028ee <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002952:	22ff      	movs	r2, #255	; 0xff
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002958:	2301      	movs	r3, #1
 800295a:	9a01      	ldr	r2, [sp, #4]
 800295c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800295e:	2300      	movs	r3, #0
 8002960:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8002962:	e7c5      	b.n	80028f0 <HAL_RTC_SetTime+0x84>
 8002964:	007f7f7f 	.word	0x007f7f7f
 8002968:	fffbffff 	.word	0xfffbffff

0800296c <HAL_RTC_SetDate>:
{
 800296c:	2302      	movs	r3, #2
 800296e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002970:	1c47      	adds	r7, r0, #1
{
 8002972:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8002974:	7ff9      	ldrb	r1, [r7, #31]
{
 8002976:	b085      	sub	sp, #20
 8002978:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800297a:	001d      	movs	r5, r3
 800297c:	2901      	cmp	r1, #1
 800297e:	d036      	beq.n	80029ee <HAL_RTC_SetDate+0x82>
 8002980:	2101      	movs	r1, #1
 8002982:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002984:	18c1      	adds	r1, r0, r3
 8002986:	9101      	str	r1, [sp, #4]
 8002988:	77cb      	strb	r3, [r1, #31]
 800298a:	7831      	ldrb	r1, [r6, #0]
 800298c:	78f0      	ldrb	r0, [r6, #3]
 800298e:	0349      	lsls	r1, r1, #13
 8002990:	7873      	ldrb	r3, [r6, #1]
 8002992:	78b5      	ldrb	r5, [r6, #2]
 8002994:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002996:	2a00      	cmp	r2, #0
 8002998:	d14c      	bne.n	8002a34 <HAL_RTC_SetDate+0xc8>
 800299a:	3210      	adds	r2, #16
 800299c:	4213      	tst	r3, r2
 800299e:	d002      	beq.n	80029a6 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029a0:	4393      	bics	r3, r2
 80029a2:	330a      	adds	r3, #10
 80029a4:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029a6:	f7ff ff55 	bl	8002854 <RTC_ByteToBcd2>
 80029aa:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80029ac:	7870      	ldrb	r0, [r6, #1]
 80029ae:	f7ff ff51 	bl	8002854 <RTC_ByteToBcd2>
 80029b2:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80029b4:	0028      	movs	r0, r5
 80029b6:	f7ff ff4d 	bl	8002854 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029ba:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80029bc:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029be:	041d      	lsls	r5, r3, #16
 80029c0:	9b02      	ldr	r3, [sp, #8]
 80029c2:	4318      	orrs	r0, r3
 80029c4:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029c6:	22ca      	movs	r2, #202	; 0xca
 80029c8:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029ca:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
 80029ce:	3a77      	subs	r2, #119	; 0x77
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029d2:	f7ff fec7 	bl	8002764 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029d6:	432e      	orrs	r6, r5
 80029d8:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029da:	1e05      	subs	r5, r0, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029de:	22ff      	movs	r2, #255	; 0xff
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029e2:	2304      	movs	r3, #4
 80029e4:	9a01      	ldr	r2, [sp, #4]
 80029e6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80029e8:	2300      	movs	r3, #0
 80029ea:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80029ec:	2501      	movs	r5, #1
}
 80029ee:	0028      	movs	r0, r5
 80029f0:	b005      	add	sp, #20
 80029f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80029f4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029f6:	4812      	ldr	r0, [pc, #72]	; (8002a40 <HAL_RTC_SetDate+0xd4>)
 80029f8:	4006      	ands	r6, r0
 80029fa:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	438a      	bics	r2, r1
 8002a00:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	069b      	lsls	r3, r3, #26
 8002a06:	d40c      	bmi.n	8002a22 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a08:	0020      	movs	r0, r4
 8002a0a:	f7ff fe91 	bl	8002730 <HAL_RTC_WaitForSynchro>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a12:	22ff      	movs	r2, #255	; 0xff
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a18:	2304      	movs	r3, #4
 8002a1a:	9a01      	ldr	r2, [sp, #4]
 8002a1c:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8002a1e:	77fd      	strb	r5, [r7, #31]
 8002a20:	e7e4      	b.n	80029ec <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a22:	22ff      	movs	r2, #255	; 0xff
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	9a01      	ldr	r2, [sp, #4]
 8002a2c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8002a32:	e7dc      	b.n	80029ee <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a34:	9a02      	ldr	r2, [sp, #8]
 8002a36:	0400      	lsls	r0, r0, #16
 8002a38:	4310      	orrs	r0, r2
 8002a3a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a3c:	021e      	lsls	r6, r3, #8
 8002a3e:	e7c2      	b.n	80029c6 <HAL_RTC_SetDate+0x5a>
 8002a40:	00ffff3f 	.word	0x00ffff3f

08002a44 <HAL_RTC_SetAlarm_IT>:
{
 8002a44:	2302      	movs	r3, #2
 8002a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a48:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8002a4a:	1c41      	adds	r1, r0, #1
 8002a4c:	7fce      	ldrb	r6, [r1, #31]
{
 8002a4e:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002a50:	0018      	movs	r0, r3
 8002a52:	2e01      	cmp	r6, #1
 8002a54:	d100      	bne.n	8002a58 <HAL_RTC_SetAlarm_IT+0x14>
 8002a56:	e08c      	b.n	8002b72 <HAL_RTC_SetAlarm_IT+0x12e>
 8002a58:	3801      	subs	r0, #1
 8002a5a:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a5c:	18e1      	adds	r1, r4, r3
 8002a5e:	77cb      	strb	r3, [r1, #31]
 8002a60:	2140      	movs	r1, #64	; 0x40
 8002a62:	786b      	ldrb	r3, [r5, #1]
 8002a64:	6826      	ldr	r6, [r4, #0]
 8002a66:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a68:	68b3      	ldr	r3, [r6, #8]
 8002a6a:	7828      	ldrb	r0, [r5, #0]
 8002a6c:	78af      	ldrb	r7, [r5, #2]
 8002a6e:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	d15d      	bne.n	8002b30 <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d100      	bne.n	8002a7a <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a78:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a7a:	f7ff feeb 	bl	8002854 <RTC_ByteToBcd2>
 8002a7e:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a80:	9800      	ldr	r0, [sp, #0]
 8002a82:	f7ff fee7 	bl	8002854 <RTC_ByteToBcd2>
 8002a86:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002a88:	0038      	movs	r0, r7
 8002a8a:	f7ff fee3 	bl	8002854 <RTC_ByteToBcd2>
 8002a8e:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a90:	1c6b      	adds	r3, r5, #1
 8002a92:	7fd8      	ldrb	r0, [r3, #31]
 8002a94:	f7ff fede 	bl	8002854 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a98:	696a      	ldr	r2, [r5, #20]
 8002a9a:	69eb      	ldr	r3, [r5, #28]
 8002a9c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a9e:	78ea      	ldrb	r2, [r5, #3]
 8002aa0:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	431f      	orrs	r7, r3
 8002aa6:	9b01      	ldr	r3, [sp, #4]
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002aac:	9b00      	ldr	r3, [sp, #0]
 8002aae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ab0:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ab2:	69aa      	ldr	r2, [r5, #24]
 8002ab4:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002ab6:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002abc:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002abe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ac0:	6273      	str	r3, [r6, #36]	; 0x24
 8002ac2:	3b77      	subs	r3, #119	; 0x77
 8002ac4:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002ac6:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ac8:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d152      	bne.n	8002b74 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002ace:	68b3      	ldr	r3, [r6, #8]
 8002ad0:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_RTC_SetAlarm_IT+0x17c>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ad6:	68f2      	ldr	r2, [r6, #12]
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_RTC_SetAlarm_IT+0x180>)
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fd38 	bl	8001554 <HAL_GetTick>
 8002ae4:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	68dd      	ldr	r5, [r3, #12]
 8002aec:	4015      	ands	r5, r2
 8002aee:	d031      	beq.n	8002b54 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002af0:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002af2:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	0052      	lsls	r2, r2, #1
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <HAL_RTC_SetAlarm_IT+0x184>)
 8002b0e:	0292      	lsls	r2, r2, #10
 8002b10:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8002b12:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b14:	4311      	orrs	r1, r2
 8002b16:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b1e:	22ff      	movs	r2, #255	; 0xff
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002b24:	3afe      	subs	r2, #254	; 0xfe
 8002b26:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8002b28:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8002b2a:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8002b2c:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8002b2e:	e020      	b.n	8002b72 <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d100      	bne.n	8002b36 <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b34:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b36:	69eb      	ldr	r3, [r5, #28]
 8002b38:	696a      	ldr	r2, [r5, #20]
 8002b3a:	0400      	lsls	r0, r0, #16
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002b40:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b42:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002b44:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b46:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b48:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b4a:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b4c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b4e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b50:	7fd8      	ldrb	r0, [r3, #31]
 8002b52:	e7ae      	b.n	8002ab2 <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b54:	f7fe fcfe 	bl	8001554 <HAL_GetTick>
 8002b58:	23fa      	movs	r3, #250	; 0xfa
 8002b5a:	1b80      	subs	r0, r0, r6
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4298      	cmp	r0, r3
 8002b60:	d9c1      	bls.n	8002ae6 <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b62:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b64:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b6a:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 8002b6c:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b6e:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8002b70:	77e5      	strb	r5, [r4, #31]
}
 8002b72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002b74:	68b3      	ldr	r3, [r6, #8]
 8002b76:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <HAL_RTC_SetAlarm_IT+0x188>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b7c:	68f2      	ldr	r2, [r6, #12]
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_RTC_SetAlarm_IT+0x18c>)
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002b86:	f7fe fce5 	bl	8001554 <HAL_GetTick>
 8002b8a:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	68dd      	ldr	r5, [r3, #12]
 8002b92:	4015      	ands	r5, r2
 8002b94:	d00b      	beq.n	8002bae <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b96:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b98:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b9a:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	6899      	ldr	r1, [r3, #8]
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	0192      	lsls	r2, r2, #6
 8002bac:	e7ab      	b.n	8002b06 <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bae:	f7fe fcd1 	bl	8001554 <HAL_GetTick>
 8002bb2:	23fa      	movs	r3, #250	; 0xfa
 8002bb4:	1b80      	subs	r0, r0, r6
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4298      	cmp	r0, r3
 8002bba:	d9e7      	bls.n	8002b8c <HAL_RTC_SetAlarm_IT+0x148>
 8002bbc:	e7d1      	b.n	8002b62 <HAL_RTC_SetAlarm_IT+0x11e>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	fffffeff 	.word	0xfffffeff
 8002bc4:	fffffe7f 	.word	0xfffffe7f
 8002bc8:	40010400 	.word	0x40010400
 8002bcc:	fffffdff 	.word	0xfffffdff
 8002bd0:	fffffd7f 	.word	0xfffffd7f

08002bd4 <HAL_RTCEx_AlarmBEventCallback>:
 8002bd4:	4770      	bx	lr
	...

08002bd8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd8:	6803      	ldr	r3, [r0, #0]
 8002bda:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <UART_EndRxTransfer+0x20>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	400a      	ands	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	3123      	adds	r1, #35	; 0x23
 8002be6:	31ff      	adds	r1, #255	; 0xff
 8002be8:	438a      	bics	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	2320      	movs	r3, #32
 8002bee:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6603      	str	r3, [r0, #96]	; 0x60
}
 8002bf4:	4770      	bx	lr
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	fffffedf 	.word	0xfffffedf

08002bfc <HAL_UART_Receive_IT>:
{
 8002bfc:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bfe:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8002c00:	0003      	movs	r3, r0
    return HAL_BUSY;
 8002c02:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c04:	2c20      	cmp	r4, #32
 8002c06:	d141      	bne.n	8002c8c <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8002c08:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002c0a:	2900      	cmp	r1, #0
 8002c0c:	d03e      	beq.n	8002c8c <HAL_UART_Receive_IT+0x90>
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d03c      	beq.n	8002c8c <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c12:	2580      	movs	r5, #128	; 0x80
 8002c14:	689c      	ldr	r4, [r3, #8]
 8002c16:	016d      	lsls	r5, r5, #5
 8002c18:	42ac      	cmp	r4, r5
 8002c1a:	d104      	bne.n	8002c26 <HAL_UART_Receive_IT+0x2a>
 8002c1c:	691d      	ldr	r5, [r3, #16]
 8002c1e:	2d00      	cmp	r5, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8002c22:	4201      	tst	r1, r0
 8002c24:	d132      	bne.n	8002c8c <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8002c26:	001d      	movs	r5, r3
 8002c28:	3570      	adds	r5, #112	; 0x70
 8002c2a:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8002c2c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002c2e:	2e01      	cmp	r6, #1
 8002c30:	d02c      	beq.n	8002c8c <HAL_UART_Receive_IT+0x90>
 8002c32:	3801      	subs	r0, #1
 8002c34:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8002c36:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002c38:	0019      	movs	r1, r3
 8002c3a:	3158      	adds	r1, #88	; 0x58
 8002c3c:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8002c3e:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8002c40:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8002c42:	2100      	movs	r1, #0
 8002c44:	001a      	movs	r2, r3
 8002c46:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8002c48:	0140      	lsls	r0, r0, #5
 8002c4a:	325c      	adds	r2, #92	; 0x5c
 8002c4c:	4284      	cmp	r4, r0
 8002c4e:	d120      	bne.n	8002c92 <HAL_UART_Receive_IT+0x96>
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	2900      	cmp	r1, #0
 8002c54:	d11b      	bne.n	8002c8e <HAL_UART_Receive_IT+0x92>
 8002c56:	4918      	ldr	r1, [pc, #96]	; (8002cb8 <HAL_UART_Receive_IT+0xbc>)
 8002c58:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5a:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5c:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c60:	3222      	adds	r2, #34	; 0x22
 8002c62:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	6890      	ldr	r0, [r2, #8]
 8002c68:	4301      	orrs	r1, r0
 8002c6a:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	0149      	lsls	r1, r1, #5
 8002c70:	428c      	cmp	r4, r1
 8002c72:	d11e      	bne.n	8002cb2 <HAL_UART_Receive_IT+0xb6>
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	2900      	cmp	r1, #0
 8002c78:	d11b      	bne.n	8002cb2 <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 8002c7a:	4910      	ldr	r1, [pc, #64]	; (8002cbc <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 8002c7c:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002c7e:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8002c80:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002c82:	6811      	ldr	r1, [r2, #0]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8002c88:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002c8a:	6013      	str	r3, [r2, #0]
}
 8002c8c:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 8002c8e:	21ff      	movs	r1, #255	; 0xff
 8002c90:	e7e2      	b.n	8002c58 <HAL_UART_Receive_IT+0x5c>
 8002c92:	2c00      	cmp	r4, #0
 8002c94:	d104      	bne.n	8002ca0 <HAL_UART_Receive_IT+0xa4>
 8002c96:	6919      	ldr	r1, [r3, #16]
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	d0f8      	beq.n	8002c8e <HAL_UART_Receive_IT+0x92>
 8002c9c:	217f      	movs	r1, #127	; 0x7f
 8002c9e:	e7db      	b.n	8002c58 <HAL_UART_Receive_IT+0x5c>
 8002ca0:	2080      	movs	r0, #128	; 0x80
 8002ca2:	0540      	lsls	r0, r0, #21
 8002ca4:	4284      	cmp	r4, r0
 8002ca6:	d1d7      	bne.n	8002c58 <HAL_UART_Receive_IT+0x5c>
 8002ca8:	6919      	ldr	r1, [r3, #16]
 8002caa:	2900      	cmp	r1, #0
 8002cac:	d0f6      	beq.n	8002c9c <HAL_UART_Receive_IT+0xa0>
 8002cae:	213f      	movs	r1, #63	; 0x3f
 8002cb0:	e7d2      	b.n	8002c58 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8002cb2:	4903      	ldr	r1, [pc, #12]	; (8002cc0 <HAL_UART_Receive_IT+0xc4>)
 8002cb4:	e7e2      	b.n	8002c7c <HAL_UART_Receive_IT+0x80>
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	000001ff 	.word	0x000001ff
 8002cbc:	08002d29 	.word	0x08002d29
 8002cc0:	08002cc9 	.word	0x08002cc9

08002cc4 <HAL_UART_TxCpltCallback>:
 8002cc4:	4770      	bx	lr
	...

08002cc8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cc8:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8002cca:	b510      	push	{r4, lr}
 8002ccc:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cce:	2a22      	cmp	r2, #34	; 0x22
 8002cd0:	d123      	bne.n	8002d1a <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002cd8:	8812      	ldrh	r2, [r2, #0]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002cde:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8002ce0:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8002ce2:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002ce4:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002cea:	8813      	ldrh	r3, [r2, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8002cf2:	8813      	ldrh	r3, [r2, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10e      	bne.n	8002d18 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cfa:	6802      	ldr	r2, [r0, #0]
 8002cfc:	4c09      	ldr	r4, [pc, #36]	; (8002d24 <UART_RxISR_8BIT+0x5c>)
 8002cfe:	6811      	ldr	r1, [r2, #0]
 8002d00:	4021      	ands	r1, r4
 8002d02:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	6891      	ldr	r1, [r2, #8]
 8002d06:	3423      	adds	r4, #35	; 0x23
 8002d08:	34ff      	adds	r4, #255	; 0xff
 8002d0a:	43a1      	bics	r1, r4
 8002d0c:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d10:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8002d12:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d14:	f7fd ff90 	bl	8000c38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d18:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	619a      	str	r2, [r3, #24]
}
 8002d22:	e7f9      	b.n	8002d18 <UART_RxISR_8BIT+0x50>
 8002d24:	fffffedf 	.word	0xfffffedf

08002d28 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d28:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8002d2a:	b510      	push	{r4, lr}
 8002d2c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d2e:	2a22      	cmp	r2, #34	; 0x22
 8002d30:	d121      	bne.n	8002d76 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 8002d32:	0004      	movs	r4, r0
 8002d34:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d36:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d38:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002d3a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d3c:	4021      	ands	r1, r4
 8002d3e:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8002d40:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8002d42:	3202      	adds	r2, #2
 8002d44:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002d46:	315a      	adds	r1, #90	; 0x5a
 8002d48:	880a      	ldrh	r2, [r1, #0]
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	b292      	uxth	r2, r2
 8002d4e:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8002d50:	880a      	ldrh	r2, [r1, #0]
 8002d52:	b292      	uxth	r2, r2
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	d10d      	bne.n	8002d74 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	4c09      	ldr	r4, [pc, #36]	; (8002d80 <UART_RxISR_16BIT+0x58>)
 8002d5c:	4021      	ands	r1, r4
 8002d5e:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	3423      	adds	r4, #35	; 0x23
 8002d64:	34ff      	adds	r4, #255	; 0xff
 8002d66:	43a1      	bics	r1, r4
 8002d68:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d6c:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d70:	f7fd ff62 	bl	8000c38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d74:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d76:	2208      	movs	r2, #8
 8002d78:	6999      	ldr	r1, [r3, #24]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	e7f9      	b.n	8002d74 <UART_RxISR_16BIT+0x4c>
 8002d80:	fffffedf 	.word	0xfffffedf

08002d84 <HAL_UART_ErrorCallback>:
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_UART_IRQHandler>:
{
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d8a:	6803      	ldr	r3, [r0, #0]
{
 8002d8c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d8e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d90:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d92:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8002d94:	0711      	lsls	r1, r2, #28
 8002d96:	d10a      	bne.n	8002dae <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d98:	2120      	movs	r1, #32
 8002d9a:	420a      	tst	r2, r1
 8002d9c:	d100      	bne.n	8002da0 <HAL_UART_IRQHandler+0x18>
 8002d9e:	e06a      	b.n	8002e76 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002da0:	4208      	tst	r0, r1
 8002da2:	d068      	beq.n	8002e76 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8002da4:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8002da6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d15a      	bne.n	8002e62 <HAL_UART_IRQHandler+0xda>
 8002dac:	e05a      	b.n	8002e64 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dae:	2101      	movs	r1, #1
 8002db0:	0035      	movs	r5, r6
 8002db2:	400d      	ands	r5, r1
 8002db4:	d103      	bne.n	8002dbe <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002db6:	2790      	movs	r7, #144	; 0x90
 8002db8:	007f      	lsls	r7, r7, #1
 8002dba:	4238      	tst	r0, r7
 8002dbc:	d05b      	beq.n	8002e76 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dbe:	420a      	tst	r2, r1
 8002dc0:	d005      	beq.n	8002dce <HAL_UART_IRQHandler+0x46>
 8002dc2:	05c6      	lsls	r6, r0, #23
 8002dc4:	d503      	bpl.n	8002dce <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002dc6:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dc8:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002dca:	4331      	orrs	r1, r6
 8002dcc:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dce:	2102      	movs	r1, #2
 8002dd0:	420a      	tst	r2, r1
 8002dd2:	d006      	beq.n	8002de2 <HAL_UART_IRQHandler+0x5a>
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dd8:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dda:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002ddc:	1849      	adds	r1, r1, r1
 8002dde:	4331      	orrs	r1, r6
 8002de0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002de2:	2104      	movs	r1, #4
 8002de4:	420a      	tst	r2, r1
 8002de6:	d006      	beq.n	8002df6 <HAL_UART_IRQHandler+0x6e>
 8002de8:	2d00      	cmp	r5, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dec:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dee:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002df0:	3902      	subs	r1, #2
 8002df2:	4331      	orrs	r1, r6
 8002df4:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002df6:	0711      	lsls	r1, r2, #28
 8002df8:	d508      	bpl.n	8002e0c <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dfa:	0681      	lsls	r1, r0, #26
 8002dfc:	d401      	bmi.n	8002e02 <HAL_UART_IRQHandler+0x7a>
 8002dfe:	2d00      	cmp	r5, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e02:	2108      	movs	r1, #8
 8002e04:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e06:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e0c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d028      	beq.n	8002e64 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e12:	2320      	movs	r3, #32
 8002e14:	421a      	tst	r2, r3
 8002e16:	d006      	beq.n	8002e26 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e18:	4218      	tst	r0, r3
 8002e1a:	d004      	beq.n	8002e26 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8002e1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 8002e22:	0020      	movs	r0, r4
 8002e24:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e26:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8002e28:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e2a:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8002e2c:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e2e:	065b      	lsls	r3, r3, #25
 8002e30:	d402      	bmi.n	8002e38 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002e32:	2308      	movs	r3, #8
 8002e34:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e36:	d01a      	beq.n	8002e6e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002e38:	f7ff fece 	bl	8002bd8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	2140      	movs	r1, #64	; 0x40
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	420a      	tst	r2, r1
 8002e44:	d00f      	beq.n	8002e66 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e46:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002e48:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4a:	438a      	bics	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e52:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_UART_IRQHandler+0x134>)
 8002e54:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e56:	f7fe fe59 	bl	8001b0c <HAL_DMA_Abort_IT>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002e60:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e62:	4798      	blx	r3
}
 8002e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002e66:	0020      	movs	r0, r4
 8002e68:	f7ff ff8c 	bl	8002d84 <HAL_UART_ErrorCallback>
 8002e6c:	e7fa      	b.n	8002e64 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8002e6e:	f7ff ff89 	bl	8002d84 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002e74:	e7f6      	b.n	8002e64 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	0349      	lsls	r1, r1, #13
 8002e7a:	420a      	tst	r2, r1
 8002e7c:	d006      	beq.n	8002e8c <HAL_UART_IRQHandler+0x104>
 8002e7e:	0275      	lsls	r5, r6, #9
 8002e80:	d504      	bpl.n	8002e8c <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e82:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002e84:	0020      	movs	r0, r4
 8002e86:	f000 fb23 	bl	80034d0 <HAL_UARTEx_WakeupCallback>
    return;
 8002e8a:	e7eb      	b.n	8002e64 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	420a      	tst	r2, r1
 8002e90:	d003      	beq.n	8002e9a <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e92:	4208      	tst	r0, r1
 8002e94:	d001      	beq.n	8002e9a <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8002e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e98:	e785      	b.n	8002da6 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e9a:	2140      	movs	r1, #64	; 0x40
 8002e9c:	420a      	tst	r2, r1
 8002e9e:	d0e1      	beq.n	8002e64 <HAL_UART_IRQHandler+0xdc>
 8002ea0:	4208      	tst	r0, r1
 8002ea2:	d0df      	beq.n	8002e64 <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ea4:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8002ea6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ea8:	438a      	bics	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	2320      	movs	r3, #32
 8002eae:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8002eb4:	f7ff ff06 	bl	8002cc4 <HAL_UART_TxCpltCallback>
 8002eb8:	e7d4      	b.n	8002e64 <HAL_UART_IRQHandler+0xdc>
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	08002ec1 	.word	0x08002ec1

08002ec0 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ec0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	0002      	movs	r2, r0
{
 8002ec6:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002ec8:	325a      	adds	r2, #90	; 0x5a
 8002eca:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002ecc:	3a08      	subs	r2, #8
 8002ece:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8002ed0:	f7ff ff58 	bl	8002d84 <HAL_UART_ErrorCallback>
}
 8002ed4:	bd10      	pop	{r4, pc}
	...

08002ed8 <UART_SetConfig>:
{
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002edc:	6925      	ldr	r5, [r4, #16]
 8002ede:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ee0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee2:	432a      	orrs	r2, r5
 8002ee4:	6965      	ldr	r5, [r4, #20]
 8002ee6:	69c1      	ldr	r1, [r0, #28]
 8002ee8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	4d76      	ldr	r5, [pc, #472]	; (80030c8 <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef0:	4028      	ands	r0, r5
 8002ef2:	4302      	orrs	r2, r0
 8002ef4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4874      	ldr	r0, [pc, #464]	; (80030cc <UART_SetConfig+0x1f4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002efa:	4d75      	ldr	r5, [pc, #468]	; (80030d0 <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002efc:	4002      	ands	r2, r0
 8002efe:	68e0      	ldr	r0, [r4, #12]
 8002f00:	4302      	orrs	r2, r0
 8002f02:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f04:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f06:	42ab      	cmp	r3, r5
 8002f08:	d001      	beq.n	8002f0e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002f0a:	6a22      	ldr	r2, [r4, #32]
 8002f0c:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4e70      	ldr	r6, [pc, #448]	; (80030d4 <UART_SetConfig+0x1fc>)
 8002f12:	4032      	ands	r2, r6
 8002f14:	4302      	orrs	r2, r0
 8002f16:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f18:	4a6f      	ldr	r2, [pc, #444]	; (80030d8 <UART_SetConfig+0x200>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d114      	bne.n	8002f48 <UART_SetConfig+0x70>
 8002f1e:	200c      	movs	r0, #12
 8002f20:	4b6e      	ldr	r3, [pc, #440]	; (80030dc <UART_SetConfig+0x204>)
 8002f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f24:	4002      	ands	r2, r0
 8002f26:	486e      	ldr	r0, [pc, #440]	; (80030e0 <UART_SetConfig+0x208>)
 8002f28:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	0212      	lsls	r2, r2, #8
 8002f2e:	4291      	cmp	r1, r2
 8002f30:	d000      	beq.n	8002f34 <UART_SetConfig+0x5c>
 8002f32:	e08b      	b.n	800304c <UART_SetConfig+0x174>
    switch (clocksource)
 8002f34:	2808      	cmp	r0, #8
 8002f36:	d900      	bls.n	8002f3a <UART_SetConfig+0x62>
 8002f38:	e085      	b.n	8003046 <UART_SetConfig+0x16e>
 8002f3a:	f7fd f8f7 	bl	800012c <__gnu_thumb1_case_uqi>
 8002f3e:	5850      	.short	0x5850
 8002f40:	847c845b 	.word	0x847c845b
 8002f44:	8484      	.short	0x8484
 8002f46:	7f          	.byte	0x7f
 8002f47:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f48:	42ab      	cmp	r3, r5
 8002f4a:	d000      	beq.n	8002f4e <UART_SetConfig+0x76>
 8002f4c:	e0b4      	b.n	80030b8 <UART_SetConfig+0x1e0>
 8002f4e:	21c0      	movs	r1, #192	; 0xc0
 8002f50:	2080      	movs	r0, #128	; 0x80
 8002f52:	4a62      	ldr	r2, [pc, #392]	; (80030dc <UART_SetConfig+0x204>)
 8002f54:	0109      	lsls	r1, r1, #4
 8002f56:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002f58:	00c0      	lsls	r0, r0, #3
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	4283      	cmp	r3, r0
 8002f5e:	d03b      	beq.n	8002fd8 <UART_SetConfig+0x100>
 8002f60:	d803      	bhi.n	8002f6a <UART_SetConfig+0x92>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <UART_SetConfig+0xa4>
        ret = HAL_ERROR;
 8002f66:	2501      	movs	r5, #1
 8002f68:	e00d      	b.n	8002f86 <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f6a:	2080      	movs	r0, #128	; 0x80
 8002f6c:	0100      	lsls	r0, r0, #4
 8002f6e:	4283      	cmp	r3, r0
 8002f70:	d00e      	beq.n	8002f90 <UART_SetConfig+0xb8>
 8002f72:	428b      	cmp	r3, r1
 8002f74:	d1f7      	bne.n	8002f66 <UART_SetConfig+0x8e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002f76:	2080      	movs	r0, #128	; 0x80
 8002f78:	0200      	lsls	r0, r0, #8
 8002f7a:	e010      	b.n	8002f9e <UART_SetConfig+0xc6>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f7c:	f7ff face 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8002f80:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8002f82:	42a8      	cmp	r0, r5
 8002f84:	d10b      	bne.n	8002f9e <UART_SetConfig+0xc6>
  huart->RxISR = NULL;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8002f8a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002f8c:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f90:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f92:	4b54      	ldr	r3, [pc, #336]	; (80030e4 <UART_SetConfig+0x20c>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f94:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f96:	17c0      	asrs	r0, r0, #31
 8002f98:	4018      	ands	r0, r3
 8002f9a:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <UART_SetConfig+0x210>)
 8002f9c:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	435a      	muls	r2, r3
 8002fa4:	4282      	cmp	r2, r0
 8002fa6:	d8de      	bhi.n	8002f66 <UART_SetConfig+0x8e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fa8:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002faa:	4282      	cmp	r2, r0
 8002fac:	d3db      	bcc.n	8002f66 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002fae:	2700      	movs	r7, #0
 8002fb0:	0e02      	lsrs	r2, r0, #24
 8002fb2:	0201      	lsls	r1, r0, #8
 8002fb4:	085e      	lsrs	r6, r3, #1
 8002fb6:	1989      	adds	r1, r1, r6
 8002fb8:	417a      	adcs	r2, r7
 8002fba:	0008      	movs	r0, r1
 8002fbc:	0011      	movs	r1, r2
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	003b      	movs	r3, r7
 8002fc2:	f7fd fa57 	bl	8000474 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fc6:	4b49      	ldr	r3, [pc, #292]	; (80030ec <UART_SetConfig+0x214>)
 8002fc8:	18c2      	adds	r2, r0, r3
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <UART_SetConfig+0x218>)
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d8ca      	bhi.n	8002f66 <UART_SetConfig+0x8e>
          huart->Instance->BRR = usartdiv;
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	003d      	movs	r5, r7
 8002fd4:	60d8      	str	r0, [r3, #12]
 8002fd6:	e7d6      	b.n	8002f86 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002fd8:	f7fe ff56 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
        break;
 8002fdc:	e7d0      	b.n	8002f80 <UART_SetConfig+0xa8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fde:	f7ff fa9d 	bl	800251c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fe2:	6863      	ldr	r3, [r4, #4]
 8002fe4:	0040      	lsls	r0, r0, #1
 8002fe6:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fe8:	18c0      	adds	r0, r0, r3
 8002fea:	6861      	ldr	r1, [r4, #4]
 8002fec:	e00b      	b.n	8003006 <UART_SetConfig+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fee:	f7ff faa5 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8002ff2:	e7f6      	b.n	8002fe2 <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ff4:	2510      	movs	r5, #16
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	6861      	ldr	r1, [r4, #4]
 8002ffa:	4015      	ands	r5, r2
 8002ffc:	0848      	lsrs	r0, r1, #1
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	d006      	beq.n	8003010 <UART_SetConfig+0x138>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003002:	4b3c      	ldr	r3, [pc, #240]	; (80030f4 <UART_SetConfig+0x21c>)
 8003004:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003006:	f7fd f89b 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800300a:	2500      	movs	r5, #0
 800300c:	b283      	uxth	r3, r0
        break;
 800300e:	e004      	b.n	800301a <UART_SetConfig+0x142>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003010:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <UART_SetConfig+0x220>)
 8003012:	18c0      	adds	r0, r0, r3
 8003014:	f7fd f894 	bl	8000140 <__udivsi3>
 8003018:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800301a:	0019      	movs	r1, r3
 800301c:	4837      	ldr	r0, [pc, #220]	; (80030fc <UART_SetConfig+0x224>)
 800301e:	3910      	subs	r1, #16
 8003020:	4281      	cmp	r1, r0
 8003022:	d8a0      	bhi.n	8002f66 <UART_SetConfig+0x8e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003024:	210f      	movs	r1, #15
 8003026:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003028:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800302a:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800302c:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800302e:	6821      	ldr	r1, [r4, #0]
 8003030:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8003032:	60cb      	str	r3, [r1, #12]
 8003034:	e7a7      	b.n	8002f86 <UART_SetConfig+0xae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003036:	f7fe ff27 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 800303a:	e7d2      	b.n	8002fe2 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800303c:	6863      	ldr	r3, [r4, #4]
 800303e:	0858      	lsrs	r0, r3, #1
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	025b      	lsls	r3, r3, #9
 8003044:	e7d0      	b.n	8002fe8 <UART_SetConfig+0x110>
        ret = HAL_ERROR;
 8003046:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003048:	2300      	movs	r3, #0
 800304a:	e7e6      	b.n	800301a <UART_SetConfig+0x142>
    switch (clocksource)
 800304c:	2808      	cmp	r0, #8
 800304e:	d837      	bhi.n	80030c0 <UART_SetConfig+0x1e8>
 8003050:	f7fd f86c 	bl	800012c <__gnu_thumb1_case_uqi>
 8003054:	360f0c05 	.word	0x360f0c05
 8003058:	3636362a 	.word	0x3636362a
 800305c:	2d          	.byte	0x2d
 800305d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800305e:	f7ff fa5d 	bl	800251c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003062:	6863      	ldr	r3, [r4, #4]
 8003064:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003066:	18c0      	adds	r0, r0, r3
 8003068:	6861      	ldr	r1, [r4, #4]
 800306a:	e00b      	b.n	8003084 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800306c:	f7ff fa66 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8003070:	e7f7      	b.n	8003062 <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003072:	2510      	movs	r5, #16
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	6861      	ldr	r1, [r4, #4]
 8003078:	4015      	ands	r5, r2
 800307a:	0848      	lsrs	r0, r1, #1
 800307c:	2d00      	cmp	r5, #0
 800307e:	d00d      	beq.n	800309c <UART_SetConfig+0x1c4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <UART_SetConfig+0x228>)
 8003082:	18c0      	adds	r0, r0, r3
 8003084:	f7fd f85c 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003088:	2500      	movs	r5, #0
 800308a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308c:	0019      	movs	r1, r3
 800308e:	481b      	ldr	r0, [pc, #108]	; (80030fc <UART_SetConfig+0x224>)
 8003090:	3910      	subs	r1, #16
 8003092:	4281      	cmp	r1, r0
 8003094:	d900      	bls.n	8003098 <UART_SetConfig+0x1c0>
 8003096:	e766      	b.n	8002f66 <UART_SetConfig+0x8e>
      huart->Instance->BRR = usartdiv;
 8003098:	6821      	ldr	r1, [r4, #0]
 800309a:	e7ca      	b.n	8003032 <UART_SetConfig+0x15a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800309c:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <UART_SetConfig+0x210>)
 800309e:	18c0      	adds	r0, r0, r3
 80030a0:	f7fd f84e 	bl	8000140 <__udivsi3>
 80030a4:	b283      	uxth	r3, r0
 80030a6:	e7f1      	b.n	800308c <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030a8:	f7fe feee 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 80030ac:	e7d9      	b.n	8003062 <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030ae:	6863      	ldr	r3, [r4, #4]
 80030b0:	0858      	lsrs	r0, r3, #1
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	e7d6      	b.n	8003066 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	4299      	cmp	r1, r3
 80030be:	d0c2      	beq.n	8003046 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 80030c0:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e7e2      	b.n	800308c <UART_SetConfig+0x1b4>
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	efff69f3 	.word	0xefff69f3
 80030cc:	ffffcfff 	.word	0xffffcfff
 80030d0:	40004800 	.word	0x40004800
 80030d4:	fffff4ff 	.word	0xfffff4ff
 80030d8:	40004400 	.word	0x40004400
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08004c72 	.word	0x08004c72
 80030e4:	ff48e500 	.word	0xff48e500
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	fffffd00 	.word	0xfffffd00
 80030f0:	000ffcff 	.word	0x000ffcff
 80030f4:	007a1200 	.word	0x007a1200
 80030f8:	01e84800 	.word	0x01e84800
 80030fc:	0000ffef 	.word	0x0000ffef
 8003100:	003d0900 	.word	0x003d0900

08003104 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003104:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003106:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003108:	07da      	lsls	r2, r3, #31
 800310a:	d506      	bpl.n	800311a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800310c:	6801      	ldr	r1, [r0, #0]
 800310e:	4c28      	ldr	r4, [pc, #160]	; (80031b0 <UART_AdvFeatureConfig+0xac>)
 8003110:	684a      	ldr	r2, [r1, #4]
 8003112:	4022      	ands	r2, r4
 8003114:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003116:	4322      	orrs	r2, r4
 8003118:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800311a:	079a      	lsls	r2, r3, #30
 800311c:	d506      	bpl.n	800312c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800311e:	6801      	ldr	r1, [r0, #0]
 8003120:	4c24      	ldr	r4, [pc, #144]	; (80031b4 <UART_AdvFeatureConfig+0xb0>)
 8003122:	684a      	ldr	r2, [r1, #4]
 8003124:	4022      	ands	r2, r4
 8003126:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003128:	4322      	orrs	r2, r4
 800312a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800312c:	075a      	lsls	r2, r3, #29
 800312e:	d506      	bpl.n	800313e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003130:	6801      	ldr	r1, [r0, #0]
 8003132:	4c21      	ldr	r4, [pc, #132]	; (80031b8 <UART_AdvFeatureConfig+0xb4>)
 8003134:	684a      	ldr	r2, [r1, #4]
 8003136:	4022      	ands	r2, r4
 8003138:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800313a:	4322      	orrs	r2, r4
 800313c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800313e:	071a      	lsls	r2, r3, #28
 8003140:	d506      	bpl.n	8003150 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003142:	6801      	ldr	r1, [r0, #0]
 8003144:	4c1d      	ldr	r4, [pc, #116]	; (80031bc <UART_AdvFeatureConfig+0xb8>)
 8003146:	684a      	ldr	r2, [r1, #4]
 8003148:	4022      	ands	r2, r4
 800314a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800314c:	4322      	orrs	r2, r4
 800314e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003150:	06da      	lsls	r2, r3, #27
 8003152:	d506      	bpl.n	8003162 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003154:	6801      	ldr	r1, [r0, #0]
 8003156:	4c1a      	ldr	r4, [pc, #104]	; (80031c0 <UART_AdvFeatureConfig+0xbc>)
 8003158:	688a      	ldr	r2, [r1, #8]
 800315a:	4022      	ands	r2, r4
 800315c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800315e:	4322      	orrs	r2, r4
 8003160:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003162:	069a      	lsls	r2, r3, #26
 8003164:	d506      	bpl.n	8003174 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003166:	6801      	ldr	r1, [r0, #0]
 8003168:	4c16      	ldr	r4, [pc, #88]	; (80031c4 <UART_AdvFeatureConfig+0xc0>)
 800316a:	688a      	ldr	r2, [r1, #8]
 800316c:	4022      	ands	r2, r4
 800316e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003170:	4322      	orrs	r2, r4
 8003172:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003174:	065a      	lsls	r2, r3, #25
 8003176:	d510      	bpl.n	800319a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003178:	6801      	ldr	r1, [r0, #0]
 800317a:	4d13      	ldr	r5, [pc, #76]	; (80031c8 <UART_AdvFeatureConfig+0xc4>)
 800317c:	684a      	ldr	r2, [r1, #4]
 800317e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003180:	402a      	ands	r2, r5
 8003182:	4322      	orrs	r2, r4
 8003184:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	0352      	lsls	r2, r2, #13
 800318a:	4294      	cmp	r4, r2
 800318c:	d105      	bne.n	800319a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800318e:	684a      	ldr	r2, [r1, #4]
 8003190:	4c0e      	ldr	r4, [pc, #56]	; (80031cc <UART_AdvFeatureConfig+0xc8>)
 8003192:	4022      	ands	r2, r4
 8003194:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003196:	4322      	orrs	r2, r4
 8003198:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800319a:	061b      	lsls	r3, r3, #24
 800319c:	d506      	bpl.n	80031ac <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800319e:	6802      	ldr	r2, [r0, #0]
 80031a0:	490b      	ldr	r1, [pc, #44]	; (80031d0 <UART_AdvFeatureConfig+0xcc>)
 80031a2:	6853      	ldr	r3, [r2, #4]
 80031a4:	400b      	ands	r3, r1
 80031a6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6053      	str	r3, [r2, #4]
}
 80031ac:	bd30      	pop	{r4, r5, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	fffdffff 	.word	0xfffdffff
 80031b4:	fffeffff 	.word	0xfffeffff
 80031b8:	fffbffff 	.word	0xfffbffff
 80031bc:	ffff7fff 	.word	0xffff7fff
 80031c0:	ffffefff 	.word	0xffffefff
 80031c4:	ffffdfff 	.word	0xffffdfff
 80031c8:	ffefffff 	.word	0xffefffff
 80031cc:	ff9fffff 	.word	0xff9fffff
 80031d0:	fff7ffff 	.word	0xfff7ffff

080031d4 <UART_WaitOnFlagUntilTimeout>:
{
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	0004      	movs	r4, r0
 80031d8:	000e      	movs	r6, r1
 80031da:	0015      	movs	r5, r2
 80031dc:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	69d3      	ldr	r3, [r2, #28]
 80031e2:	4033      	ands	r3, r6
 80031e4:	1b9b      	subs	r3, r3, r6
 80031e6:	4259      	negs	r1, r3
 80031e8:	414b      	adcs	r3, r1
 80031ea:	42ab      	cmp	r3, r5
 80031ec:	d001      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80031ee:	2000      	movs	r0, #0
 80031f0:	e01b      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	9b06      	ldr	r3, [sp, #24]
 80031f4:	3301      	adds	r3, #1
 80031f6:	d0f3      	beq.n	80031e0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f8:	f7fe f9ac 	bl	8001554 <HAL_GetTick>
 80031fc:	9b06      	ldr	r3, [sp, #24]
 80031fe:	1bc0      	subs	r0, r0, r7
 8003200:	4298      	cmp	r0, r3
 8003202:	d801      	bhi.n	8003208 <UART_WaitOnFlagUntilTimeout+0x34>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ea      	bne.n	80031de <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <UART_WaitOnFlagUntilTimeout+0x58>)
 800320c:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800320e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003210:	400a      	ands	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	31a3      	adds	r1, #163	; 0xa3
 8003218:	31ff      	adds	r1, #255	; 0xff
 800321a:	438a      	bics	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800321e:	2320      	movs	r3, #32
 8003220:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003222:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003224:	2300      	movs	r3, #0
 8003226:	3470      	adds	r4, #112	; 0x70
 8003228:	7023      	strb	r3, [r4, #0]
}
 800322a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322c:	fffffe5f 	.word	0xfffffe5f

08003230 <HAL_UART_Transmit>:
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	b087      	sub	sp, #28
 8003234:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8003236:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8003238:	0004      	movs	r4, r0
 800323a:	000d      	movs	r5, r1
 800323c:	0017      	movs	r7, r2
    return HAL_BUSY;
 800323e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003240:	2b20      	cmp	r3, #32
 8003242:	d149      	bne.n	80032d8 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8003244:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003246:	2900      	cmp	r1, #0
 8003248:	d046      	beq.n	80032d8 <HAL_UART_Transmit+0xa8>
 800324a:	2a00      	cmp	r2, #0
 800324c:	d044      	beq.n	80032d8 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	68a2      	ldr	r2, [r4, #8]
 8003252:	015b      	lsls	r3, r3, #5
 8003254:	429a      	cmp	r2, r3
 8003256:	d104      	bne.n	8003262 <HAL_UART_Transmit+0x32>
 8003258:	6923      	ldr	r3, [r4, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 800325e:	4201      	tst	r1, r0
 8003260:	d13a      	bne.n	80032d8 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8003262:	0023      	movs	r3, r4
 8003264:	3370      	adds	r3, #112	; 0x70
 8003266:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003268:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800326a:	2a01      	cmp	r2, #1
 800326c:	d034      	beq.n	80032d8 <HAL_UART_Transmit+0xa8>
 800326e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8003272:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003274:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003278:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800327a:	f7fe f96b 	bl	8001554 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800327e:	0023      	movs	r3, r4
 8003280:	3350      	adds	r3, #80	; 0x50
 8003282:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8003284:	3302      	adds	r3, #2
 8003286:	9303      	str	r3, [sp, #12]
 8003288:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800328e:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	015b      	lsls	r3, r3, #5
 8003292:	429a      	cmp	r2, r3
 8003294:	d104      	bne.n	80032a0 <HAL_UART_Transmit+0x70>
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	42b3      	cmp	r3, r6
 800329a:	d101      	bne.n	80032a0 <HAL_UART_Transmit+0x70>
 800329c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800329e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80032a0:	0023      	movs	r3, r4
 80032a2:	3352      	adds	r3, #82	; 0x52
 80032a4:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80032a8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80032ae:	2a00      	cmp	r2, #0
 80032b0:	d10a      	bne.n	80032c8 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b2:	2140      	movs	r1, #64	; 0x40
 80032b4:	0020      	movs	r0, r4
 80032b6:	f7ff ff8d 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d10b      	bne.n	80032d6 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80032be:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80032c0:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80032c2:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80032c4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80032c6:	e007      	b.n	80032d8 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	0020      	movs	r0, r4
 80032ce:	f7ff ff81 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d002      	beq.n	80032dc <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80032d6:	2003      	movs	r0, #3
}
 80032d8:	b007      	add	sp, #28
 80032da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032dc:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80032de:	2d00      	cmp	r5, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e2:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80032e4:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e6:	05db      	lsls	r3, r3, #23
 80032e8:	0ddb      	lsrs	r3, r3, #23
 80032ea:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	9a03      	ldr	r2, [sp, #12]
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	8013      	strh	r3, [r2, #0]
 80032f8:	e7d2      	b.n	80032a0 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fa:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80032fc:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fe:	6293      	str	r3, [r2, #40]	; 0x28
 8003300:	e7f4      	b.n	80032ec <HAL_UART_Transmit+0xbc>
	...

08003304 <HAL_UART_Receive>:
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b087      	sub	sp, #28
 8003308:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 800330a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800330c:	0004      	movs	r4, r0
 800330e:	000d      	movs	r5, r1
 8003310:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003312:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003314:	2b20      	cmp	r3, #32
 8003316:	d143      	bne.n	80033a0 <HAL_UART_Receive+0x9c>
      return  HAL_ERROR;
 8003318:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800331a:	2900      	cmp	r1, #0
 800331c:	d040      	beq.n	80033a0 <HAL_UART_Receive+0x9c>
 800331e:	2a00      	cmp	r2, #0
 8003320:	d03e      	beq.n	80033a0 <HAL_UART_Receive+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	68a2      	ldr	r2, [r4, #8]
 8003326:	015b      	lsls	r3, r3, #5
 8003328:	429a      	cmp	r2, r3
 800332a:	d104      	bne.n	8003336 <HAL_UART_Receive+0x32>
 800332c:	6923      	ldr	r3, [r4, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8003332:	4201      	tst	r1, r0
 8003334:	d134      	bne.n	80033a0 <HAL_UART_Receive+0x9c>
    __HAL_LOCK(huart);
 8003336:	0023      	movs	r3, r4
 8003338:	3370      	adds	r3, #112	; 0x70
 800333a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800333c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800333e:	2a01      	cmp	r2, #1
 8003340:	d02e      	beq.n	80033a0 <HAL_UART_Receive+0x9c>
 8003342:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8003346:	701a      	strb	r2, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003348:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334a:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800334c:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 800334e:	f7fe f901 	bl	8001554 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8003352:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8003354:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 8003356:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003358:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 800335a:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 800335c:	3302      	adds	r3, #2
 800335e:	9303      	str	r3, [sp, #12]
 8003360:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003362:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8003364:	0149      	lsls	r1, r1, #5
 8003366:	3302      	adds	r3, #2
 8003368:	428a      	cmp	r2, r1
 800336a:	d11d      	bne.n	80033a8 <HAL_UART_Receive+0xa4>
 800336c:	6921      	ldr	r1, [r4, #16]
 800336e:	42b9      	cmp	r1, r7
 8003370:	d118      	bne.n	80033a4 <HAL_UART_Receive+0xa0>
 8003372:	4925      	ldr	r1, [pc, #148]	; (8003408 <HAL_UART_Receive+0x104>)
 8003374:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8003376:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003378:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 800337a:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337c:	015b      	lsls	r3, r3, #5
 800337e:	429a      	cmp	r2, r3
 8003380:	d104      	bne.n	800338c <HAL_UART_Receive+0x88>
 8003382:	6923      	ldr	r3, [r4, #16]
 8003384:	42b3      	cmp	r3, r6
 8003386:	d101      	bne.n	800338c <HAL_UART_Receive+0x88>
 8003388:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800338a:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 800338c:	0023      	movs	r3, r4
 800338e:	335a      	adds	r3, #90	; 0x5a
 8003390:	8818      	ldrh	r0, [r3, #0]
 8003392:	b280      	uxth	r0, r0
 8003394:	2800      	cmp	r0, #0
 8003396:	d119      	bne.n	80033cc <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 8003398:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800339a:	3470      	adds	r4, #112	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 800339c:	60a3      	str	r3, [r4, #8]
    __HAL_UNLOCK(huart);
 800339e:	7020      	strb	r0, [r4, #0]
}
 80033a0:	b007      	add	sp, #28
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80033a4:	21ff      	movs	r1, #255	; 0xff
 80033a6:	e7e5      	b.n	8003374 <HAL_UART_Receive+0x70>
 80033a8:	2a00      	cmp	r2, #0
 80033aa:	d104      	bne.n	80033b6 <HAL_UART_Receive+0xb2>
 80033ac:	6921      	ldr	r1, [r4, #16]
 80033ae:	2900      	cmp	r1, #0
 80033b0:	d0f8      	beq.n	80033a4 <HAL_UART_Receive+0xa0>
 80033b2:	217f      	movs	r1, #127	; 0x7f
 80033b4:	e7de      	b.n	8003374 <HAL_UART_Receive+0x70>
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0549      	lsls	r1, r1, #21
 80033ba:	428a      	cmp	r2, r1
 80033bc:	d104      	bne.n	80033c8 <HAL_UART_Receive+0xc4>
 80033be:	6921      	ldr	r1, [r4, #16]
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d0f6      	beq.n	80033b2 <HAL_UART_Receive+0xae>
 80033c4:	213f      	movs	r1, #63	; 0x3f
 80033c6:	e7d5      	b.n	8003374 <HAL_UART_Receive+0x70>
 80033c8:	801f      	strh	r7, [r3, #0]
 80033ca:	e7d4      	b.n	8003376 <HAL_UART_Receive+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033cc:	9b05      	ldr	r3, [sp, #20]
 80033ce:	2200      	movs	r2, #0
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2120      	movs	r1, #32
 80033d4:	9b04      	ldr	r3, [sp, #16]
 80033d6:	0020      	movs	r0, r4
 80033d8:	f7ff fefc 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d110      	bne.n	8003402 <HAL_UART_Receive+0xfe>
 80033e0:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80033e6:	2d00      	cmp	r5, #0
 80033e8:	d108      	bne.n	80033fc <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033ea:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 80033ec:	3602      	adds	r6, #2
      huart->RxXferCount--;
 80033ee:	9b03      	ldr	r3, [sp, #12]
 80033f0:	9a03      	ldr	r2, [sp, #12]
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	8013      	strh	r3, [r2, #0]
 80033fa:	e7c7      	b.n	800338c <HAL_UART_Receive+0x88>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033fc:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80033fe:	3501      	adds	r5, #1
 8003400:	e7f5      	b.n	80033ee <HAL_UART_Receive+0xea>
        return HAL_TIMEOUT;
 8003402:	2003      	movs	r0, #3
 8003404:	e7cc      	b.n	80033a0 <HAL_UART_Receive+0x9c>
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	000001ff 	.word	0x000001ff

0800340c <UART_CheckIdleState>:
{
 800340c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	2600      	movs	r6, #0
{
 8003410:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003414:	f7fe f89e 	bl	8001554 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003418:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800341a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	071b      	lsls	r3, r3, #28
 8003420:	d415      	bmi.n	800344e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	075b      	lsls	r3, r3, #29
 8003428:	d50a      	bpl.n	8003440 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342a:	2180      	movs	r1, #128	; 0x80
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <UART_CheckIdleState+0x5c>)
 800342e:	2200      	movs	r2, #0
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	03c9      	lsls	r1, r1, #15
 8003434:	002b      	movs	r3, r5
 8003436:	0020      	movs	r0, r4
 8003438:	f7ff fecc 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 800343c:	2800      	cmp	r0, #0
 800343e:	d111      	bne.n	8003464 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8003440:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003442:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003444:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003446:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003448:	3470      	adds	r4, #112	; 0x70
 800344a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800344c:	e00b      	b.n	8003466 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <UART_CheckIdleState+0x5c>)
 8003452:	0032      	movs	r2, r6
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	0389      	lsls	r1, r1, #14
 8003458:	0003      	movs	r3, r0
 800345a:	0020      	movs	r0, r4
 800345c:	f7ff feba 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 8003460:	2800      	cmp	r0, #0
 8003462:	d0de      	beq.n	8003422 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003464:	2003      	movs	r0, #3
}
 8003466:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003468:	01ffffff 	.word	0x01ffffff

0800346c <HAL_UART_Init>:
{
 800346c:	b510      	push	{r4, lr}
 800346e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003470:	d101      	bne.n	8003476 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003472:	2001      	movs	r0, #1
}
 8003474:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003476:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800347c:	0002      	movs	r2, r0
 800347e:	3270      	adds	r2, #112	; 0x70
 8003480:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003482:	f7fd ff2b 	bl	80012dc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003486:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003488:	2101      	movs	r1, #1
 800348a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800348c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800348e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003490:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003492:	438b      	bics	r3, r1
 8003494:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003496:	f7ff fd1f 	bl	8002ed8 <UART_SetConfig>
 800349a:	2801      	cmp	r0, #1
 800349c:	d0e9      	beq.n	8003472 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800349e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80034a4:	0020      	movs	r0, r4
 80034a6:	f7ff fe2d 	bl	8003104 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	4907      	ldr	r1, [pc, #28]	; (80034cc <HAL_UART_Init+0x60>)
 80034ae:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80034b0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	438a      	bics	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80034be:	2201      	movs	r2, #1
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80034c6:	f7ff ffa1 	bl	800340c <UART_CheckIdleState>
 80034ca:	e7d3      	b.n	8003474 <HAL_UART_Init+0x8>
 80034cc:	ffffb7ff 	.word	0xffffb7ff

080034d0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80034d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034d6:	0005      	movs	r5, r0
{
 80034d8:	9102      	str	r1, [sp, #8]
 80034da:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 80034dc:	3570      	adds	r5, #112	; 0x70
 80034de:	782b      	ldrb	r3, [r5, #0]
{
 80034e0:	0004      	movs	r4, r0
 80034e2:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 80034e4:	2002      	movs	r0, #2
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d030      	beq.n	800354c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80034ea:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80034ec:	3801      	subs	r0, #1
 80034ee:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	6763      	str	r3, [r4, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4382      	bics	r2, r0
 80034f8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	4815      	ldr	r0, [pc, #84]	; (8003554 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>)
 80034fe:	4002      	ands	r2, r0
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8003504:	2900      	cmp	r1, #0
 8003506:	d10c      	bne.n	8003522 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x4e>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8003508:	2210      	movs	r2, #16
 800350a:	6859      	ldr	r1, [r3, #4]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800350c:	79b0      	ldrb	r0, [r6, #6]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800350e:	4391      	bics	r1, r2
 8003510:	88b2      	ldrh	r2, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8003512:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8003514:	4311      	orrs	r1, r2
 8003516:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	0212      	lsls	r2, r2, #8
 800351c:	0a12      	lsrs	r2, r2, #8
 800351e:	4302      	orrs	r2, r0
 8003520:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8003522:	2201      	movs	r2, #1
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800352a:	f7fe f813 	bl	8001554 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
  tickstart = HAL_GetTick();
 8003532:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003534:	9200      	str	r2, [sp, #0]
 8003536:	03c9      	lsls	r1, r1, #15
 8003538:	2200      	movs	r2, #0
 800353a:	0020      	movs	r0, r4
 800353c:	f7ff fe4a 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 8003540:	2800      	cmp	r0, #0
 8003542:	d105      	bne.n	8003550 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8003544:	2320      	movs	r3, #32
 8003546:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8003548:	2300      	movs	r3, #0
 800354a:	702b      	strb	r3, [r5, #0]
}
 800354c:	b004      	add	sp, #16
 800354e:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIMEOUT;
 8003550:	2003      	movs	r0, #3
 8003552:	e7f9      	b.n	8003548 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
 8003554:	ffcfffff 	.word	0xffcfffff
 8003558:	01ffffff 	.word	0x01ffffff

0800355c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800355c:	0002      	movs	r2, r0
 800355e:	2302      	movs	r3, #2
{
 8003560:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8003562:	3270      	adds	r2, #112	; 0x70
 8003564:	7814      	ldrb	r4, [r2, #0]
{
 8003566:	0001      	movs	r1, r0
  __HAL_LOCK(huart);
 8003568:	0018      	movs	r0, r3
 800356a:	2c01      	cmp	r4, #1
 800356c:	d005      	beq.n	800357a <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800356e:	6809      	ldr	r1, [r1, #0]
 8003570:	6808      	ldr	r0, [r1, #0]
 8003572:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8003574:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8003576:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(huart);
 8003578:	7010      	strb	r0, [r2, #0]
}
 800357a:	bd10      	pop	{r4, pc}

0800357c <__errno>:
 800357c:	4b01      	ldr	r3, [pc, #4]	; (8003584 <__errno+0x8>)
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	4770      	bx	lr
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	2000000c 	.word	0x2000000c

08003588 <__libc_init_array>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	2600      	movs	r6, #0
 800358c:	4d0c      	ldr	r5, [pc, #48]	; (80035c0 <__libc_init_array+0x38>)
 800358e:	4c0d      	ldr	r4, [pc, #52]	; (80035c4 <__libc_init_array+0x3c>)
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	42a6      	cmp	r6, r4
 8003596:	d109      	bne.n	80035ac <__libc_init_array+0x24>
 8003598:	2600      	movs	r6, #0
 800359a:	f001 fb39 	bl	8004c10 <_init>
 800359e:	4d0a      	ldr	r5, [pc, #40]	; (80035c8 <__libc_init_array+0x40>)
 80035a0:	4c0a      	ldr	r4, [pc, #40]	; (80035cc <__libc_init_array+0x44>)
 80035a2:	1b64      	subs	r4, r4, r5
 80035a4:	10a4      	asrs	r4, r4, #2
 80035a6:	42a6      	cmp	r6, r4
 80035a8:	d105      	bne.n	80035b6 <__libc_init_array+0x2e>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	00b3      	lsls	r3, r6, #2
 80035ae:	58eb      	ldr	r3, [r5, r3]
 80035b0:	4798      	blx	r3
 80035b2:	3601      	adds	r6, #1
 80035b4:	e7ee      	b.n	8003594 <__libc_init_array+0xc>
 80035b6:	00b3      	lsls	r3, r6, #2
 80035b8:	58eb      	ldr	r3, [r5, r3]
 80035ba:	4798      	blx	r3
 80035bc:	3601      	adds	r6, #1
 80035be:	e7f2      	b.n	80035a6 <__libc_init_array+0x1e>
 80035c0:	08004ed4 	.word	0x08004ed4
 80035c4:	08004ed4 	.word	0x08004ed4
 80035c8:	08004ed4 	.word	0x08004ed4
 80035cc:	08004ed8 	.word	0x08004ed8

080035d0 <__itoa>:
 80035d0:	1e93      	subs	r3, r2, #2
 80035d2:	b510      	push	{r4, lr}
 80035d4:	000c      	movs	r4, r1
 80035d6:	2b22      	cmp	r3, #34	; 0x22
 80035d8:	d904      	bls.n	80035e4 <__itoa+0x14>
 80035da:	2300      	movs	r3, #0
 80035dc:	001c      	movs	r4, r3
 80035de:	700b      	strb	r3, [r1, #0]
 80035e0:	0020      	movs	r0, r4
 80035e2:	bd10      	pop	{r4, pc}
 80035e4:	2a0a      	cmp	r2, #10
 80035e6:	d109      	bne.n	80035fc <__itoa+0x2c>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	da07      	bge.n	80035fc <__itoa+0x2c>
 80035ec:	232d      	movs	r3, #45	; 0x2d
 80035ee:	700b      	strb	r3, [r1, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	4240      	negs	r0, r0
 80035f4:	1861      	adds	r1, r4, r1
 80035f6:	f000 fccb 	bl	8003f90 <__utoa>
 80035fa:	e7f1      	b.n	80035e0 <__itoa+0x10>
 80035fc:	2100      	movs	r1, #0
 80035fe:	e7f9      	b.n	80035f4 <__itoa+0x24>

08003600 <itoa>:
 8003600:	b510      	push	{r4, lr}
 8003602:	f7ff ffe5 	bl	80035d0 <__itoa>
 8003606:	bd10      	pop	{r4, pc}

08003608 <localtime>:
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <localtime+0x20>)
 800360a:	b570      	push	{r4, r5, r6, lr}
 800360c:	681c      	ldr	r4, [r3, #0]
 800360e:	0005      	movs	r5, r0
 8003610:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <localtime+0x16>
 8003616:	2024      	movs	r0, #36	; 0x24
 8003618:	f000 f8fe 	bl	8003818 <malloc>
 800361c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800361e:	0028      	movs	r0, r5
 8003620:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003622:	f000 f803 	bl	800362c <localtime_r>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	2000000c 	.word	0x2000000c

0800362c <localtime_r>:
 800362c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800362e:	000c      	movs	r4, r1
 8003630:	0007      	movs	r7, r0
 8003632:	f000 fd21 	bl	8004078 <__gettzinfo>
 8003636:	0021      	movs	r1, r4
 8003638:	0005      	movs	r5, r0
 800363a:	0038      	movs	r0, r7
 800363c:	f000 fd20 	bl	8004080 <gmtime_r>
 8003640:	4a71      	ldr	r2, [pc, #452]	; (8003808 <localtime_r+0x1dc>)
 8003642:	6943      	ldr	r3, [r0, #20]
 8003644:	0004      	movs	r4, r0
 8003646:	189e      	adds	r6, r3, r2
 8003648:	07b3      	lsls	r3, r6, #30
 800364a:	d106      	bne.n	800365a <localtime_r+0x2e>
 800364c:	2164      	movs	r1, #100	; 0x64
 800364e:	0030      	movs	r0, r6
 8003650:	f7fc fee6 	bl	8000420 <__aeabi_idivmod>
 8003654:	2301      	movs	r3, #1
 8003656:	2900      	cmp	r1, #0
 8003658:	d106      	bne.n	8003668 <localtime_r+0x3c>
 800365a:	21c8      	movs	r1, #200	; 0xc8
 800365c:	0030      	movs	r0, r6
 800365e:	0049      	lsls	r1, r1, #1
 8003660:	f7fc fede 	bl	8000420 <__aeabi_idivmod>
 8003664:	424b      	negs	r3, r1
 8003666:	414b      	adcs	r3, r1
 8003668:	2130      	movs	r1, #48	; 0x30
 800366a:	434b      	muls	r3, r1
 800366c:	4967      	ldr	r1, [pc, #412]	; (800380c <localtime_r+0x1e0>)
 800366e:	185b      	adds	r3, r3, r1
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	f000 fb05 	bl	8003c80 <__tz_lock>
 8003676:	f000 fb05 	bl	8003c84 <_tzset_unlocked>
 800367a:	4b65      	ldr	r3, [pc, #404]	; (8003810 <localtime_r+0x1e4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d025      	beq.n	80036ce <localtime_r+0xa2>
 8003682:	686b      	ldr	r3, [r5, #4]
 8003684:	42b3      	cmp	r3, r6
 8003686:	d10c      	bne.n	80036a2 <localtime_r+0x76>
 8003688:	cf06      	ldmia	r7!, {r1, r2}
 800368a:	682e      	ldr	r6, [r5, #0]
 800368c:	6a28      	ldr	r0, [r5, #32]
 800368e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003690:	2e00      	cmp	r6, #0
 8003692:	d10e      	bne.n	80036b2 <localtime_r+0x86>
 8003694:	4293      	cmp	r3, r2
 8003696:	dc11      	bgt.n	80036bc <localtime_r+0x90>
 8003698:	d101      	bne.n	800369e <localtime_r+0x72>
 800369a:	4288      	cmp	r0, r1
 800369c:	d80e      	bhi.n	80036bc <localtime_r+0x90>
 800369e:	2301      	movs	r3, #1
 80036a0:	e015      	b.n	80036ce <localtime_r+0xa2>
 80036a2:	0030      	movs	r0, r6
 80036a4:	f000 fa3c 	bl	8003b20 <__tzcalc_limits>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d1ed      	bne.n	8003688 <localtime_r+0x5c>
 80036ac:	2301      	movs	r3, #1
 80036ae:	425b      	negs	r3, r3
 80036b0:	e00d      	b.n	80036ce <localtime_r+0xa2>
 80036b2:	4293      	cmp	r3, r2
 80036b4:	dc0a      	bgt.n	80036cc <localtime_r+0xa0>
 80036b6:	d101      	bne.n	80036bc <localtime_r+0x90>
 80036b8:	4288      	cmp	r0, r1
 80036ba:	d807      	bhi.n	80036cc <localtime_r+0xa0>
 80036bc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80036be:	2301      	movs	r3, #1
 80036c0:	4290      	cmp	r0, r2
 80036c2:	dc04      	bgt.n	80036ce <localtime_r+0xa2>
 80036c4:	d102      	bne.n	80036cc <localtime_r+0xa0>
 80036c6:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80036c8:	428a      	cmp	r2, r1
 80036ca:	d800      	bhi.n	80036ce <localtime_r+0xa2>
 80036cc:	2300      	movs	r3, #0
 80036ce:	6223      	str	r3, [r4, #32]
 80036d0:	6a23      	ldr	r3, [r4, #32]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d149      	bne.n	800376a <localtime_r+0x13e>
 80036d6:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80036d8:	21e1      	movs	r1, #225	; 0xe1
 80036da:	0038      	movs	r0, r7
 80036dc:	0109      	lsls	r1, r1, #4
 80036de:	f7fc fe9f 	bl	8000420 <__aeabi_idivmod>
 80036e2:	000e      	movs	r6, r1
 80036e4:	213c      	movs	r1, #60	; 0x3c
 80036e6:	0030      	movs	r0, r6
 80036e8:	f7fc fe9a 	bl	8000420 <__aeabi_idivmod>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	0030      	movs	r0, r6
 80036f0:	1a5d      	subs	r5, r3, r1
 80036f2:	6025      	str	r5, [r4, #0]
 80036f4:	213c      	movs	r1, #60	; 0x3c
 80036f6:	f7fc fdad 	bl	8000254 <__divsi3>
 80036fa:	21e1      	movs	r1, #225	; 0xe1
 80036fc:	6863      	ldr	r3, [r4, #4]
 80036fe:	0109      	lsls	r1, r1, #4
 8003700:	1a1e      	subs	r6, r3, r0
 8003702:	6066      	str	r6, [r4, #4]
 8003704:	0038      	movs	r0, r7
 8003706:	f7fc fda5 	bl	8000254 <__divsi3>
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	1a1b      	subs	r3, r3, r0
 800370e:	60a3      	str	r3, [r4, #8]
 8003710:	2d3b      	cmp	r5, #59	; 0x3b
 8003712:	dd2c      	ble.n	800376e <localtime_r+0x142>
 8003714:	3601      	adds	r6, #1
 8003716:	6066      	str	r6, [r4, #4]
 8003718:	3d3c      	subs	r5, #60	; 0x3c
 800371a:	6025      	str	r5, [r4, #0]
 800371c:	6862      	ldr	r2, [r4, #4]
 800371e:	2a3b      	cmp	r2, #59	; 0x3b
 8003720:	dd2b      	ble.n	800377a <localtime_r+0x14e>
 8003722:	3301      	adds	r3, #1
 8003724:	60a3      	str	r3, [r4, #8]
 8003726:	3a3c      	subs	r2, #60	; 0x3c
 8003728:	6062      	str	r2, [r4, #4]
 800372a:	68a2      	ldr	r2, [r4, #8]
 800372c:	2a17      	cmp	r2, #23
 800372e:	dd33      	ble.n	8003798 <localtime_r+0x16c>
 8003730:	69e3      	ldr	r3, [r4, #28]
 8003732:	3301      	adds	r3, #1
 8003734:	61e3      	str	r3, [r4, #28]
 8003736:	69a3      	ldr	r3, [r4, #24]
 8003738:	3301      	adds	r3, #1
 800373a:	2b06      	cmp	r3, #6
 800373c:	dc23      	bgt.n	8003786 <localtime_r+0x15a>
 800373e:	61a3      	str	r3, [r4, #24]
 8003740:	3a18      	subs	r2, #24
 8003742:	68e3      	ldr	r3, [r4, #12]
 8003744:	60a2      	str	r2, [r4, #8]
 8003746:	6922      	ldr	r2, [r4, #16]
 8003748:	3301      	adds	r3, #1
 800374a:	9801      	ldr	r0, [sp, #4]
 800374c:	60e3      	str	r3, [r4, #12]
 800374e:	0091      	lsls	r1, r2, #2
 8003750:	5809      	ldr	r1, [r1, r0]
 8003752:	428b      	cmp	r3, r1
 8003754:	dd05      	ble.n	8003762 <localtime_r+0x136>
 8003756:	1a5b      	subs	r3, r3, r1
 8003758:	3201      	adds	r2, #1
 800375a:	60e3      	str	r3, [r4, #12]
 800375c:	2a0c      	cmp	r2, #12
 800375e:	d014      	beq.n	800378a <localtime_r+0x15e>
 8003760:	6122      	str	r2, [r4, #16]
 8003762:	f000 fa8e 	bl	8003c82 <__tz_unlock>
 8003766:	0020      	movs	r0, r4
 8003768:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800376a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800376c:	e7b4      	b.n	80036d8 <localtime_r+0xac>
 800376e:	2d00      	cmp	r5, #0
 8003770:	dad4      	bge.n	800371c <localtime_r+0xf0>
 8003772:	3e01      	subs	r6, #1
 8003774:	6066      	str	r6, [r4, #4]
 8003776:	353c      	adds	r5, #60	; 0x3c
 8003778:	e7cf      	b.n	800371a <localtime_r+0xee>
 800377a:	2a00      	cmp	r2, #0
 800377c:	dad5      	bge.n	800372a <localtime_r+0xfe>
 800377e:	3b01      	subs	r3, #1
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	323c      	adds	r2, #60	; 0x3c
 8003784:	e7d0      	b.n	8003728 <localtime_r+0xfc>
 8003786:	2300      	movs	r3, #0
 8003788:	e7d9      	b.n	800373e <localtime_r+0x112>
 800378a:	2200      	movs	r2, #0
 800378c:	6963      	ldr	r3, [r4, #20]
 800378e:	6122      	str	r2, [r4, #16]
 8003790:	3301      	adds	r3, #1
 8003792:	6163      	str	r3, [r4, #20]
 8003794:	61e2      	str	r2, [r4, #28]
 8003796:	e7e4      	b.n	8003762 <localtime_r+0x136>
 8003798:	2a00      	cmp	r2, #0
 800379a:	dae2      	bge.n	8003762 <localtime_r+0x136>
 800379c:	69e3      	ldr	r3, [r4, #28]
 800379e:	3b01      	subs	r3, #1
 80037a0:	61e3      	str	r3, [r4, #28]
 80037a2:	69a3      	ldr	r3, [r4, #24]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	d411      	bmi.n	80037cc <localtime_r+0x1a0>
 80037a8:	61a3      	str	r3, [r4, #24]
 80037aa:	68e3      	ldr	r3, [r4, #12]
 80037ac:	3218      	adds	r2, #24
 80037ae:	1e59      	subs	r1, r3, #1
 80037b0:	60e1      	str	r1, [r4, #12]
 80037b2:	60a2      	str	r2, [r4, #8]
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d1d4      	bne.n	8003762 <localtime_r+0x136>
 80037b8:	6923      	ldr	r3, [r4, #16]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	d408      	bmi.n	80037d0 <localtime_r+0x1a4>
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	6923      	ldr	r3, [r4, #16]
 80037c2:	9a01      	ldr	r2, [sp, #4]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	589b      	ldr	r3, [r3, r2]
 80037c8:	60e3      	str	r3, [r4, #12]
 80037ca:	e7ca      	b.n	8003762 <localtime_r+0x136>
 80037cc:	2306      	movs	r3, #6
 80037ce:	e7eb      	b.n	80037a8 <localtime_r+0x17c>
 80037d0:	230b      	movs	r3, #11
 80037d2:	6965      	ldr	r5, [r4, #20]
 80037d4:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <localtime_r+0x1e8>)
 80037d6:	6123      	str	r3, [r4, #16]
 80037d8:	1e6b      	subs	r3, r5, #1
 80037da:	6163      	str	r3, [r4, #20]
 80037dc:	18ad      	adds	r5, r5, r2
 80037de:	079b      	lsls	r3, r3, #30
 80037e0:	d106      	bne.n	80037f0 <localtime_r+0x1c4>
 80037e2:	2164      	movs	r1, #100	; 0x64
 80037e4:	0028      	movs	r0, r5
 80037e6:	f7fc fe1b 	bl	8000420 <__aeabi_idivmod>
 80037ea:	2301      	movs	r3, #1
 80037ec:	2900      	cmp	r1, #0
 80037ee:	d106      	bne.n	80037fe <localtime_r+0x1d2>
 80037f0:	21c8      	movs	r1, #200	; 0xc8
 80037f2:	0028      	movs	r0, r5
 80037f4:	0049      	lsls	r1, r1, #1
 80037f6:	f7fc fe13 	bl	8000420 <__aeabi_idivmod>
 80037fa:	424b      	negs	r3, r1
 80037fc:	414b      	adcs	r3, r1
 80037fe:	336d      	adds	r3, #109	; 0x6d
 8003800:	33ff      	adds	r3, #255	; 0xff
 8003802:	61e3      	str	r3, [r4, #28]
 8003804:	e7dc      	b.n	80037c0 <localtime_r+0x194>
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	0000076c 	.word	0x0000076c
 800380c:	08004c80 	.word	0x08004c80
 8003810:	20000294 	.word	0x20000294
 8003814:	0000076b 	.word	0x0000076b

08003818 <malloc>:
 8003818:	b510      	push	{r4, lr}
 800381a:	4b03      	ldr	r3, [pc, #12]	; (8003828 <malloc+0x10>)
 800381c:	0001      	movs	r1, r0
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	f000 f860 	bl	80038e4 <_malloc_r>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	2000000c 	.word	0x2000000c

0800382c <free>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4b03      	ldr	r3, [pc, #12]	; (800383c <free+0x10>)
 8003830:	0001      	movs	r1, r0
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	f000 f80c 	bl	8003850 <_free_r>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	2000000c 	.word	0x2000000c

08003840 <memset>:
 8003840:	0003      	movs	r3, r0
 8003842:	1812      	adds	r2, r2, r0
 8003844:	4293      	cmp	r3, r2
 8003846:	d100      	bne.n	800384a <memset+0xa>
 8003848:	4770      	bx	lr
 800384a:	7019      	strb	r1, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	e7f9      	b.n	8003844 <memset+0x4>

08003850 <_free_r>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	0005      	movs	r5, r0
 8003854:	2900      	cmp	r1, #0
 8003856:	d010      	beq.n	800387a <_free_r+0x2a>
 8003858:	1f0c      	subs	r4, r1, #4
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	da00      	bge.n	8003862 <_free_r+0x12>
 8003860:	18e4      	adds	r4, r4, r3
 8003862:	0028      	movs	r0, r5
 8003864:	f000 fd07 	bl	8004276 <__malloc_lock>
 8003868:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <_free_r+0x90>)
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <_free_r+0x2c>
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	6014      	str	r4, [r2, #0]
 8003874:	0028      	movs	r0, r5
 8003876:	f000 fcff 	bl	8004278 <__malloc_unlock>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	42a3      	cmp	r3, r4
 800387e:	d909      	bls.n	8003894 <_free_r+0x44>
 8003880:	6821      	ldr	r1, [r4, #0]
 8003882:	1860      	adds	r0, r4, r1
 8003884:	4283      	cmp	r3, r0
 8003886:	d1f3      	bne.n	8003870 <_free_r+0x20>
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	1841      	adds	r1, r0, r1
 800388e:	6021      	str	r1, [r4, #0]
 8003890:	e7ee      	b.n	8003870 <_free_r+0x20>
 8003892:	0013      	movs	r3, r2
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	2a00      	cmp	r2, #0
 8003898:	d001      	beq.n	800389e <_free_r+0x4e>
 800389a:	42a2      	cmp	r2, r4
 800389c:	d9f9      	bls.n	8003892 <_free_r+0x42>
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	1858      	adds	r0, r3, r1
 80038a2:	42a0      	cmp	r0, r4
 80038a4:	d10b      	bne.n	80038be <_free_r+0x6e>
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	1809      	adds	r1, r1, r0
 80038aa:	1858      	adds	r0, r3, r1
 80038ac:	6019      	str	r1, [r3, #0]
 80038ae:	4282      	cmp	r2, r0
 80038b0:	d1e0      	bne.n	8003874 <_free_r+0x24>
 80038b2:	6810      	ldr	r0, [r2, #0]
 80038b4:	6852      	ldr	r2, [r2, #4]
 80038b6:	1841      	adds	r1, r0, r1
 80038b8:	6019      	str	r1, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	e7da      	b.n	8003874 <_free_r+0x24>
 80038be:	42a0      	cmp	r0, r4
 80038c0:	d902      	bls.n	80038c8 <_free_r+0x78>
 80038c2:	230c      	movs	r3, #12
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	e7d5      	b.n	8003874 <_free_r+0x24>
 80038c8:	6821      	ldr	r1, [r4, #0]
 80038ca:	1860      	adds	r0, r4, r1
 80038cc:	4282      	cmp	r2, r0
 80038ce:	d103      	bne.n	80038d8 <_free_r+0x88>
 80038d0:	6810      	ldr	r0, [r2, #0]
 80038d2:	6852      	ldr	r2, [r2, #4]
 80038d4:	1841      	adds	r1, r0, r1
 80038d6:	6021      	str	r1, [r4, #0]
 80038d8:	6062      	str	r2, [r4, #4]
 80038da:	605c      	str	r4, [r3, #4]
 80038dc:	e7ca      	b.n	8003874 <_free_r+0x24>
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	20000270 	.word	0x20000270

080038e4 <_malloc_r>:
 80038e4:	2303      	movs	r3, #3
 80038e6:	b570      	push	{r4, r5, r6, lr}
 80038e8:	1ccd      	adds	r5, r1, #3
 80038ea:	439d      	bics	r5, r3
 80038ec:	3508      	adds	r5, #8
 80038ee:	0006      	movs	r6, r0
 80038f0:	2d0c      	cmp	r5, #12
 80038f2:	d21e      	bcs.n	8003932 <_malloc_r+0x4e>
 80038f4:	250c      	movs	r5, #12
 80038f6:	42a9      	cmp	r1, r5
 80038f8:	d81d      	bhi.n	8003936 <_malloc_r+0x52>
 80038fa:	0030      	movs	r0, r6
 80038fc:	f000 fcbb 	bl	8004276 <__malloc_lock>
 8003900:	4a25      	ldr	r2, [pc, #148]	; (8003998 <_malloc_r+0xb4>)
 8003902:	6814      	ldr	r4, [r2, #0]
 8003904:	0021      	movs	r1, r4
 8003906:	2900      	cmp	r1, #0
 8003908:	d119      	bne.n	800393e <_malloc_r+0x5a>
 800390a:	4c24      	ldr	r4, [pc, #144]	; (800399c <_malloc_r+0xb8>)
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <_malloc_r+0x36>
 8003912:	0030      	movs	r0, r6
 8003914:	f000 f844 	bl	80039a0 <_sbrk_r>
 8003918:	6020      	str	r0, [r4, #0]
 800391a:	0029      	movs	r1, r5
 800391c:	0030      	movs	r0, r6
 800391e:	f000 f83f 	bl	80039a0 <_sbrk_r>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d12b      	bne.n	800397e <_malloc_r+0x9a>
 8003926:	230c      	movs	r3, #12
 8003928:	0030      	movs	r0, r6
 800392a:	6033      	str	r3, [r6, #0]
 800392c:	f000 fca4 	bl	8004278 <__malloc_unlock>
 8003930:	e003      	b.n	800393a <_malloc_r+0x56>
 8003932:	2d00      	cmp	r5, #0
 8003934:	dadf      	bge.n	80038f6 <_malloc_r+0x12>
 8003936:	230c      	movs	r3, #12
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	2000      	movs	r0, #0
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	680b      	ldr	r3, [r1, #0]
 8003940:	1b5b      	subs	r3, r3, r5
 8003942:	d419      	bmi.n	8003978 <_malloc_r+0x94>
 8003944:	2b0b      	cmp	r3, #11
 8003946:	d903      	bls.n	8003950 <_malloc_r+0x6c>
 8003948:	600b      	str	r3, [r1, #0]
 800394a:	18cc      	adds	r4, r1, r3
 800394c:	6025      	str	r5, [r4, #0]
 800394e:	e003      	b.n	8003958 <_malloc_r+0x74>
 8003950:	684b      	ldr	r3, [r1, #4]
 8003952:	428c      	cmp	r4, r1
 8003954:	d10d      	bne.n	8003972 <_malloc_r+0x8e>
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	0030      	movs	r0, r6
 800395a:	f000 fc8d 	bl	8004278 <__malloc_unlock>
 800395e:	0020      	movs	r0, r4
 8003960:	2207      	movs	r2, #7
 8003962:	300b      	adds	r0, #11
 8003964:	1d23      	adds	r3, r4, #4
 8003966:	4390      	bics	r0, r2
 8003968:	1ac3      	subs	r3, r0, r3
 800396a:	d0e7      	beq.n	800393c <_malloc_r+0x58>
 800396c:	425a      	negs	r2, r3
 800396e:	50e2      	str	r2, [r4, r3]
 8003970:	e7e4      	b.n	800393c <_malloc_r+0x58>
 8003972:	6063      	str	r3, [r4, #4]
 8003974:	000c      	movs	r4, r1
 8003976:	e7ef      	b.n	8003958 <_malloc_r+0x74>
 8003978:	000c      	movs	r4, r1
 800397a:	6849      	ldr	r1, [r1, #4]
 800397c:	e7c3      	b.n	8003906 <_malloc_r+0x22>
 800397e:	2303      	movs	r3, #3
 8003980:	1cc4      	adds	r4, r0, #3
 8003982:	439c      	bics	r4, r3
 8003984:	42a0      	cmp	r0, r4
 8003986:	d0e1      	beq.n	800394c <_malloc_r+0x68>
 8003988:	1a21      	subs	r1, r4, r0
 800398a:	0030      	movs	r0, r6
 800398c:	f000 f808 	bl	80039a0 <_sbrk_r>
 8003990:	1c43      	adds	r3, r0, #1
 8003992:	d1db      	bne.n	800394c <_malloc_r+0x68>
 8003994:	e7c7      	b.n	8003926 <_malloc_r+0x42>
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	20000270 	.word	0x20000270
 800399c:	20000274 	.word	0x20000274

080039a0 <_sbrk_r>:
 80039a0:	2300      	movs	r3, #0
 80039a2:	b570      	push	{r4, r5, r6, lr}
 80039a4:	4c06      	ldr	r4, [pc, #24]	; (80039c0 <_sbrk_r+0x20>)
 80039a6:	0005      	movs	r5, r0
 80039a8:	0008      	movs	r0, r1
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	f7fd fd14 	bl	80013d8 <_sbrk>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d103      	bne.n	80039bc <_sbrk_r+0x1c>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d000      	beq.n	80039bc <_sbrk_r+0x1c>
 80039ba:	602b      	str	r3, [r5, #0]
 80039bc:	bd70      	pop	{r4, r5, r6, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	2000045c 	.word	0x2000045c

080039c4 <strcpy>:
 80039c4:	0003      	movs	r3, r0
 80039c6:	780a      	ldrb	r2, [r1, #0]
 80039c8:	3101      	adds	r1, #1
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	d1f9      	bne.n	80039c6 <strcpy+0x2>
 80039d2:	4770      	bx	lr

080039d4 <_strtol_l.isra.0>:
 80039d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d6:	001f      	movs	r7, r3
 80039d8:	000e      	movs	r6, r1
 80039da:	b087      	sub	sp, #28
 80039dc:	9005      	str	r0, [sp, #20]
 80039de:	9101      	str	r1, [sp, #4]
 80039e0:	9202      	str	r2, [sp, #8]
 80039e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80039e4:	7834      	ldrb	r4, [r6, #0]
 80039e6:	f000 fc19 	bl	800421c <__locale_ctype_ptr_l>
 80039ea:	2208      	movs	r2, #8
 80039ec:	1900      	adds	r0, r0, r4
 80039ee:	7843      	ldrb	r3, [r0, #1]
 80039f0:	1c75      	adds	r5, r6, #1
 80039f2:	4013      	ands	r3, r2
 80039f4:	d136      	bne.n	8003a64 <_strtol_l.isra.0+0x90>
 80039f6:	2c2d      	cmp	r4, #45	; 0x2d
 80039f8:	d136      	bne.n	8003a68 <_strtol_l.isra.0+0x94>
 80039fa:	1cb5      	adds	r5, r6, #2
 80039fc:	7874      	ldrb	r4, [r6, #1]
 80039fe:	2601      	movs	r6, #1
 8003a00:	2f00      	cmp	r7, #0
 8003a02:	d062      	beq.n	8003aca <_strtol_l.isra.0+0xf6>
 8003a04:	2f10      	cmp	r7, #16
 8003a06:	d109      	bne.n	8003a1c <_strtol_l.isra.0+0x48>
 8003a08:	2c30      	cmp	r4, #48	; 0x30
 8003a0a:	d107      	bne.n	8003a1c <_strtol_l.isra.0+0x48>
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	782b      	ldrb	r3, [r5, #0]
 8003a10:	4393      	bics	r3, r2
 8003a12:	2b58      	cmp	r3, #88	; 0x58
 8003a14:	d154      	bne.n	8003ac0 <_strtol_l.isra.0+0xec>
 8003a16:	2710      	movs	r7, #16
 8003a18:	786c      	ldrb	r4, [r5, #1]
 8003a1a:	3502      	adds	r5, #2
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <_strtol_l.isra.0+0x100>)
 8003a1e:	0039      	movs	r1, r7
 8003a20:	18f3      	adds	r3, r6, r3
 8003a22:	0018      	movs	r0, r3
 8003a24:	9303      	str	r3, [sp, #12]
 8003a26:	f7fc fc11 	bl	800024c <__aeabi_uidivmod>
 8003a2a:	9104      	str	r1, [sp, #16]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4249      	negs	r1, r1
 8003a32:	0002      	movs	r2, r0
 8003a34:	468c      	mov	ip, r1
 8003a36:	0018      	movs	r0, r3
 8003a38:	0021      	movs	r1, r4
 8003a3a:	3930      	subs	r1, #48	; 0x30
 8003a3c:	2909      	cmp	r1, #9
 8003a3e:	d81a      	bhi.n	8003a76 <_strtol_l.isra.0+0xa2>
 8003a40:	000c      	movs	r4, r1
 8003a42:	42a7      	cmp	r7, r4
 8003a44:	dd23      	ble.n	8003a8e <_strtol_l.isra.0+0xba>
 8003a46:	1c59      	adds	r1, r3, #1
 8003a48:	d009      	beq.n	8003a5e <_strtol_l.isra.0+0x8a>
 8003a4a:	4663      	mov	r3, ip
 8003a4c:	4282      	cmp	r2, r0
 8003a4e:	d306      	bcc.n	8003a5e <_strtol_l.isra.0+0x8a>
 8003a50:	d102      	bne.n	8003a58 <_strtol_l.isra.0+0x84>
 8003a52:	9904      	ldr	r1, [sp, #16]
 8003a54:	42a1      	cmp	r1, r4
 8003a56:	db02      	blt.n	8003a5e <_strtol_l.isra.0+0x8a>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4378      	muls	r0, r7
 8003a5c:	1820      	adds	r0, r4, r0
 8003a5e:	782c      	ldrb	r4, [r5, #0]
 8003a60:	3501      	adds	r5, #1
 8003a62:	e7e9      	b.n	8003a38 <_strtol_l.isra.0+0x64>
 8003a64:	002e      	movs	r6, r5
 8003a66:	e7bc      	b.n	80039e2 <_strtol_l.isra.0+0xe>
 8003a68:	2c2b      	cmp	r4, #43	; 0x2b
 8003a6a:	d001      	beq.n	8003a70 <_strtol_l.isra.0+0x9c>
 8003a6c:	001e      	movs	r6, r3
 8003a6e:	e7c7      	b.n	8003a00 <_strtol_l.isra.0+0x2c>
 8003a70:	1cb5      	adds	r5, r6, #2
 8003a72:	7874      	ldrb	r4, [r6, #1]
 8003a74:	e7fa      	b.n	8003a6c <_strtol_l.isra.0+0x98>
 8003a76:	0021      	movs	r1, r4
 8003a78:	3941      	subs	r1, #65	; 0x41
 8003a7a:	2919      	cmp	r1, #25
 8003a7c:	d801      	bhi.n	8003a82 <_strtol_l.isra.0+0xae>
 8003a7e:	3c37      	subs	r4, #55	; 0x37
 8003a80:	e7df      	b.n	8003a42 <_strtol_l.isra.0+0x6e>
 8003a82:	0021      	movs	r1, r4
 8003a84:	3961      	subs	r1, #97	; 0x61
 8003a86:	2919      	cmp	r1, #25
 8003a88:	d801      	bhi.n	8003a8e <_strtol_l.isra.0+0xba>
 8003a8a:	3c57      	subs	r4, #87	; 0x57
 8003a8c:	e7d9      	b.n	8003a42 <_strtol_l.isra.0+0x6e>
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	d108      	bne.n	8003aa4 <_strtol_l.isra.0+0xd0>
 8003a92:	9a05      	ldr	r2, [sp, #20]
 8003a94:	3323      	adds	r3, #35	; 0x23
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	9b02      	ldr	r3, [sp, #8]
 8003a9a:	9803      	ldr	r0, [sp, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <_strtol_l.isra.0+0xe0>
 8003aa0:	b007      	add	sp, #28
 8003aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa4:	2e00      	cmp	r6, #0
 8003aa6:	d000      	beq.n	8003aaa <_strtol_l.isra.0+0xd6>
 8003aa8:	4240      	negs	r0, r0
 8003aaa:	9a02      	ldr	r2, [sp, #8]
 8003aac:	2a00      	cmp	r2, #0
 8003aae:	d0f7      	beq.n	8003aa0 <_strtol_l.isra.0+0xcc>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <_strtol_l.isra.0+0xe4>
 8003ab4:	1e6b      	subs	r3, r5, #1
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	9b02      	ldr	r3, [sp, #8]
 8003aba:	9a01      	ldr	r2, [sp, #4]
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e7ef      	b.n	8003aa0 <_strtol_l.isra.0+0xcc>
 8003ac0:	2430      	movs	r4, #48	; 0x30
 8003ac2:	2f00      	cmp	r7, #0
 8003ac4:	d1aa      	bne.n	8003a1c <_strtol_l.isra.0+0x48>
 8003ac6:	2708      	movs	r7, #8
 8003ac8:	e7a8      	b.n	8003a1c <_strtol_l.isra.0+0x48>
 8003aca:	2c30      	cmp	r4, #48	; 0x30
 8003acc:	d09e      	beq.n	8003a0c <_strtol_l.isra.0+0x38>
 8003ace:	270a      	movs	r7, #10
 8003ad0:	e7a4      	b.n	8003a1c <_strtol_l.isra.0+0x48>
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	7fffffff 	.word	0x7fffffff

08003ad8 <_strtol_r>:
 8003ad8:	b513      	push	{r0, r1, r4, lr}
 8003ada:	4c05      	ldr	r4, [pc, #20]	; (8003af0 <_strtol_r+0x18>)
 8003adc:	6824      	ldr	r4, [r4, #0]
 8003ade:	6a24      	ldr	r4, [r4, #32]
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	d100      	bne.n	8003ae6 <_strtol_r+0xe>
 8003ae4:	4c03      	ldr	r4, [pc, #12]	; (8003af4 <_strtol_r+0x1c>)
 8003ae6:	9400      	str	r4, [sp, #0]
 8003ae8:	f7ff ff74 	bl	80039d4 <_strtol_l.isra.0>
 8003aec:	bd16      	pop	{r1, r2, r4, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	2000000c 	.word	0x2000000c
 8003af4:	200000d0 	.word	0x200000d0

08003af8 <strtol>:
 8003af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003afa:	0013      	movs	r3, r2
 8003afc:	4a06      	ldr	r2, [pc, #24]	; (8003b18 <strtol+0x20>)
 8003afe:	0005      	movs	r5, r0
 8003b00:	6810      	ldr	r0, [r2, #0]
 8003b02:	6a04      	ldr	r4, [r0, #32]
 8003b04:	2c00      	cmp	r4, #0
 8003b06:	d100      	bne.n	8003b0a <strtol+0x12>
 8003b08:	4c04      	ldr	r4, [pc, #16]	; (8003b1c <strtol+0x24>)
 8003b0a:	000a      	movs	r2, r1
 8003b0c:	9400      	str	r4, [sp, #0]
 8003b0e:	0029      	movs	r1, r5
 8003b10:	f7ff ff60 	bl	80039d4 <_strtol_l.isra.0>
 8003b14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	2000000c 	.word	0x2000000c
 8003b1c:	200000d0 	.word	0x200000d0

08003b20 <__tzcalc_limits>:
 8003b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	0004      	movs	r4, r0
 8003b26:	f000 faa7 	bl	8004078 <__gettzinfo>
 8003b2a:	4b4e      	ldr	r3, [pc, #312]	; (8003c64 <__tzcalc_limits+0x144>)
 8003b2c:	0006      	movs	r6, r0
 8003b2e:	2000      	movs	r0, #0
 8003b30:	429c      	cmp	r4, r3
 8003b32:	dd5f      	ble.n	8003bf4 <__tzcalc_limits+0xd4>
 8003b34:	256e      	movs	r5, #110	; 0x6e
 8003b36:	2164      	movs	r1, #100	; 0x64
 8003b38:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <__tzcalc_limits+0x148>)
 8003b3a:	35ff      	adds	r5, #255	; 0xff
 8003b3c:	18e0      	adds	r0, r4, r3
 8003b3e:	4345      	muls	r5, r0
 8003b40:	4b4a      	ldr	r3, [pc, #296]	; (8003c6c <__tzcalc_limits+0x14c>)
 8003b42:	6074      	str	r4, [r6, #4]
 8003b44:	18e0      	adds	r0, r4, r3
 8003b46:	4b4a      	ldr	r3, [pc, #296]	; (8003c70 <__tzcalc_limits+0x150>)
 8003b48:	1080      	asrs	r0, r0, #2
 8003b4a:	182d      	adds	r5, r5, r0
 8003b4c:	4249      	negs	r1, r1
 8003b4e:	18e0      	adds	r0, r4, r3
 8003b50:	f7fc fb80 	bl	8000254 <__divsi3>
 8003b54:	21c8      	movs	r1, #200	; 0xc8
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <__tzcalc_limits+0x154>)
 8003b58:	182d      	adds	r5, r5, r0
 8003b5a:	0049      	lsls	r1, r1, #1
 8003b5c:	18e0      	adds	r0, r4, r3
 8003b5e:	f7fc fb79 	bl	8000254 <__divsi3>
 8003b62:	2164      	movs	r1, #100	; 0x64
 8003b64:	182b      	adds	r3, r5, r0
 8003b66:	0020      	movs	r0, r4
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	f7fc fc59 	bl	8000420 <__aeabi_idivmod>
 8003b6e:	9101      	str	r1, [sp, #4]
 8003b70:	21c8      	movs	r1, #200	; 0xc8
 8003b72:	0020      	movs	r0, r4
 8003b74:	0049      	lsls	r1, r1, #1
 8003b76:	f7fc fc53 	bl	8000420 <__aeabi_idivmod>
 8003b7a:	000a      	movs	r2, r1
 8003b7c:	4253      	negs	r3, r2
 8003b7e:	415a      	adcs	r2, r3
 8003b80:	0033      	movs	r3, r6
 8003b82:	3358      	adds	r3, #88	; 0x58
 8003b84:	9307      	str	r3, [sp, #28]
 8003b86:	2303      	movs	r3, #3
 8003b88:	0035      	movs	r5, r6
 8003b8a:	401c      	ands	r4, r3
 8003b8c:	9102      	str	r1, [sp, #8]
 8003b8e:	9204      	str	r2, [sp, #16]
 8003b90:	3508      	adds	r5, #8
 8003b92:	9405      	str	r4, [sp, #20]
 8003b94:	782b      	ldrb	r3, [r5, #0]
 8003b96:	68ef      	ldr	r7, [r5, #12]
 8003b98:	2b4a      	cmp	r3, #74	; 0x4a
 8003b9a:	d12d      	bne.n	8003bf8 <__tzcalc_limits+0xd8>
 8003b9c:	9b00      	ldr	r3, [sp, #0]
 8003b9e:	19dc      	adds	r4, r3, r7
 8003ba0:	9b05      	ldr	r3, [sp, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <__tzcalc_limits+0x8c>
 8003ba6:	9b01      	ldr	r3, [sp, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <__tzcalc_limits+0x94>
 8003bac:	2100      	movs	r1, #0
 8003bae:	9b02      	ldr	r3, [sp, #8]
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	d103      	bne.n	8003bbc <__tzcalc_limits+0x9c>
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	2f3b      	cmp	r7, #59	; 0x3b
 8003bb8:	dc00      	bgt.n	8003bbc <__tzcalc_limits+0x9c>
 8003bba:	2100      	movs	r1, #0
 8003bbc:	1864      	adds	r4, r4, r1
 8003bbe:	3c01      	subs	r4, #1
 8003bc0:	492d      	ldr	r1, [pc, #180]	; (8003c78 <__tzcalc_limits+0x158>)
 8003bc2:	692b      	ldr	r3, [r5, #16]
 8003bc4:	434c      	muls	r4, r1
 8003bc6:	18e4      	adds	r4, r4, r3
 8003bc8:	6a2b      	ldr	r3, [r5, #32]
 8003bca:	18e4      	adds	r4, r4, r3
 8003bcc:	61ac      	str	r4, [r5, #24]
 8003bce:	9b07      	ldr	r3, [sp, #28]
 8003bd0:	17e4      	asrs	r4, r4, #31
 8003bd2:	61ec      	str	r4, [r5, #28]
 8003bd4:	3528      	adds	r5, #40	; 0x28
 8003bd6:	42ab      	cmp	r3, r5
 8003bd8:	d1dc      	bne.n	8003b94 <__tzcalc_limits+0x74>
 8003bda:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
 8003bdc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003bde:	2301      	movs	r3, #1
 8003be0:	4291      	cmp	r1, r2
 8003be2:	dc05      	bgt.n	8003bf0 <__tzcalc_limits+0xd0>
 8003be4:	d103      	bne.n	8003bee <__tzcalc_limits+0xce>
 8003be6:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8003be8:	6a31      	ldr	r1, [r6, #32]
 8003bea:	428a      	cmp	r2, r1
 8003bec:	d800      	bhi.n	8003bf0 <__tzcalc_limits+0xd0>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	6033      	str	r3, [r6, #0]
 8003bf4:	b009      	add	sp, #36	; 0x24
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf8:	2b44      	cmp	r3, #68	; 0x44
 8003bfa:	d102      	bne.n	8003c02 <__tzcalc_limits+0xe2>
 8003bfc:	9b00      	ldr	r3, [sp, #0]
 8003bfe:	19dc      	adds	r4, r3, r7
 8003c00:	e7de      	b.n	8003bc0 <__tzcalc_limits+0xa0>
 8003c02:	9b05      	ldr	r3, [sp, #20]
 8003c04:	9a04      	ldr	r2, [sp, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <__tzcalc_limits+0xf2>
 8003c0a:	9b01      	ldr	r3, [sp, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d000      	beq.n	8003c12 <__tzcalc_limits+0xf2>
 8003c10:	2201      	movs	r2, #1
 8003c12:	2330      	movs	r3, #48	; 0x30
 8003c14:	4353      	muls	r3, r2
 8003c16:	9306      	str	r3, [sp, #24]
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <__tzcalc_limits+0x15c>)
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	469c      	mov	ip, r3
 8003c1e:	6868      	ldr	r0, [r5, #4]
 8003c20:	9c00      	ldr	r4, [sp, #0]
 8003c22:	9a06      	ldr	r2, [sp, #24]
 8003c24:	3101      	adds	r1, #1
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	189b      	adds	r3, r3, r2
 8003c2a:	4662      	mov	r2, ip
 8003c2c:	3b04      	subs	r3, #4
 8003c2e:	58d3      	ldr	r3, [r2, r3]
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	4288      	cmp	r0, r1
 8003c34:	dc10      	bgt.n	8003c58 <__tzcalc_limits+0x138>
 8003c36:	1d20      	adds	r0, r4, #4
 8003c38:	2107      	movs	r1, #7
 8003c3a:	f7fc fbf1 	bl	8000420 <__aeabi_idivmod>
 8003c3e:	1a79      	subs	r1, r7, r1
 8003c40:	d500      	bpl.n	8003c44 <__tzcalc_limits+0x124>
 8003c42:	3107      	adds	r1, #7
 8003c44:	68ab      	ldr	r3, [r5, #8]
 8003c46:	1e5a      	subs	r2, r3, #1
 8003c48:	2307      	movs	r3, #7
 8003c4a:	4353      	muls	r3, r2
 8003c4c:	1859      	adds	r1, r3, r1
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	4299      	cmp	r1, r3
 8003c52:	da04      	bge.n	8003c5e <__tzcalc_limits+0x13e>
 8003c54:	1864      	adds	r4, r4, r1
 8003c56:	e7b3      	b.n	8003bc0 <__tzcalc_limits+0xa0>
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	18e4      	adds	r4, r4, r3
 8003c5c:	e7e1      	b.n	8003c22 <__tzcalc_limits+0x102>
 8003c5e:	3907      	subs	r1, #7
 8003c60:	e7f5      	b.n	8003c4e <__tzcalc_limits+0x12e>
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	000007b1 	.word	0x000007b1
 8003c68:	fffff84e 	.word	0xfffff84e
 8003c6c:	fffff84f 	.word	0xfffff84f
 8003c70:	fffff893 	.word	0xfffff893
 8003c74:	fffff9bf 	.word	0xfffff9bf
 8003c78:	00015180 	.word	0x00015180
 8003c7c:	08004c80 	.word	0x08004c80

08003c80 <__tz_lock>:
 8003c80:	4770      	bx	lr

08003c82 <__tz_unlock>:
 8003c82:	4770      	bx	lr

08003c84 <_tzset_unlocked>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	4b02      	ldr	r3, [pc, #8]	; (8003c90 <_tzset_unlocked+0xc>)
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	f000 f803 	bl	8003c94 <_tzset_unlocked_r>
 8003c8e:	bd10      	pop	{r4, pc}
 8003c90:	2000000c 	.word	0x2000000c

08003c94 <_tzset_unlocked_r>:
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c96:	b08d      	sub	sp, #52	; 0x34
 8003c98:	0007      	movs	r7, r0
 8003c9a:	f000 f9ed 	bl	8004078 <__gettzinfo>
 8003c9e:	49af      	ldr	r1, [pc, #700]	; (8003f5c <_tzset_unlocked_r+0x2c8>)
 8003ca0:	0006      	movs	r6, r0
 8003ca2:	0038      	movs	r0, r7
 8003ca4:	f000 f9e2 	bl	800406c <_getenv_r>
 8003ca8:	4dad      	ldr	r5, [pc, #692]	; (8003f60 <_tzset_unlocked_r+0x2cc>)
 8003caa:	1e04      	subs	r4, r0, #0
 8003cac:	d10d      	bne.n	8003cca <_tzset_unlocked_r+0x36>
 8003cae:	4bad      	ldr	r3, [pc, #692]	; (8003f64 <_tzset_unlocked_r+0x2d0>)
 8003cb0:	4aad      	ldr	r2, [pc, #692]	; (8003f68 <_tzset_unlocked_r+0x2d4>)
 8003cb2:	6018      	str	r0, [r3, #0]
 8003cb4:	4bad      	ldr	r3, [pc, #692]	; (8003f6c <_tzset_unlocked_r+0x2d8>)
 8003cb6:	6018      	str	r0, [r3, #0]
 8003cb8:	4bad      	ldr	r3, [pc, #692]	; (8003f70 <_tzset_unlocked_r+0x2dc>)
 8003cba:	6828      	ldr	r0, [r5, #0]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	f7ff fdb4 	bl	800382c <free>
 8003cc4:	602c      	str	r4, [r5, #0]
 8003cc6:	b00d      	add	sp, #52	; 0x34
 8003cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cca:	6829      	ldr	r1, [r5, #0]
 8003ccc:	2900      	cmp	r1, #0
 8003cce:	d159      	bne.n	8003d84 <_tzset_unlocked_r+0xf0>
 8003cd0:	6828      	ldr	r0, [r5, #0]
 8003cd2:	f7ff fdab 	bl	800382c <free>
 8003cd6:	0020      	movs	r0, r4
 8003cd8:	f7fc fa16 	bl	8000108 <strlen>
 8003cdc:	1c41      	adds	r1, r0, #1
 8003cde:	0038      	movs	r0, r7
 8003ce0:	f7ff fe00 	bl	80038e4 <_malloc_r>
 8003ce4:	6028      	str	r0, [r5, #0]
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d151      	bne.n	8003d8e <_tzset_unlocked_r+0xfa>
 8003cea:	7823      	ldrb	r3, [r4, #0]
 8003cec:	49a1      	ldr	r1, [pc, #644]	; (8003f74 <_tzset_unlocked_r+0x2e0>)
 8003cee:	3b3a      	subs	r3, #58	; 0x3a
 8003cf0:	425a      	negs	r2, r3
 8003cf2:	4153      	adcs	r3, r2
 8003cf4:	18e4      	adds	r4, r4, r3
 8003cf6:	4aa0      	ldr	r2, [pc, #640]	; (8003f78 <_tzset_unlocked_r+0x2e4>)
 8003cf8:	ab0a      	add	r3, sp, #40	; 0x28
 8003cfa:	0020      	movs	r0, r4
 8003cfc:	f000 fabe 	bl	800427c <siscanf>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	dde0      	ble.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d06:	18e4      	adds	r4, r4, r3
 8003d08:	7823      	ldrb	r3, [r4, #0]
 8003d0a:	2b2d      	cmp	r3, #45	; 0x2d
 8003d0c:	d143      	bne.n	8003d96 <_tzset_unlocked_r+0x102>
 8003d0e:	3b2e      	subs	r3, #46	; 0x2e
 8003d10:	3401      	adds	r4, #1
 8003d12:	9304      	str	r3, [sp, #16]
 8003d14:	2716      	movs	r7, #22
 8003d16:	ab02      	add	r3, sp, #8
 8003d18:	18ff      	adds	r7, r7, r3
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	ad08      	add	r5, sp, #32
 8003d1e:	803b      	strh	r3, [r7, #0]
 8003d20:	802b      	strh	r3, [r5, #0]
 8003d22:	ab0a      	add	r3, sp, #40	; 0x28
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	9502      	str	r5, [sp, #8]
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	9700      	str	r7, [sp, #0]
 8003d2c:	aa07      	add	r2, sp, #28
 8003d2e:	4993      	ldr	r1, [pc, #588]	; (8003f7c <_tzset_unlocked_r+0x2e8>)
 8003d30:	0020      	movs	r0, r4
 8003d32:	f000 faa3 	bl	800427c <siscanf>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	ddc5      	ble.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003d3a:	233c      	movs	r3, #60	; 0x3c
 8003d3c:	883a      	ldrh	r2, [r7, #0]
 8003d3e:	4f90      	ldr	r7, [pc, #576]	; (8003f80 <_tzset_unlocked_r+0x2ec>)
 8003d40:	4353      	muls	r3, r2
 8003d42:	882a      	ldrh	r2, [r5, #0]
 8003d44:	4d8a      	ldr	r5, [pc, #552]	; (8003f70 <_tzset_unlocked_r+0x2dc>)
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	aa02      	add	r2, sp, #8
 8003d4a:	8a91      	ldrh	r1, [r2, #20]
 8003d4c:	22e1      	movs	r2, #225	; 0xe1
 8003d4e:	0112      	lsls	r2, r2, #4
 8003d50:	434a      	muls	r2, r1
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	9a04      	ldr	r2, [sp, #16]
 8003d56:	4987      	ldr	r1, [pc, #540]	; (8003f74 <_tzset_unlocked_r+0x2e0>)
 8003d58:	435a      	muls	r2, r3
 8003d5a:	4b87      	ldr	r3, [pc, #540]	; (8003f78 <_tzset_unlocked_r+0x2e4>)
 8003d5c:	62b2      	str	r2, [r6, #40]	; 0x28
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d62:	003a      	movs	r2, r7
 8003d64:	18e4      	adds	r4, r4, r3
 8003d66:	0020      	movs	r0, r4
 8003d68:	ab0a      	add	r3, sp, #40	; 0x28
 8003d6a:	f000 fa87 	bl	800427c <siscanf>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	dc18      	bgt.n	8003da4 <_tzset_unlocked_r+0x110>
 8003d72:	682b      	ldr	r3, [r5, #0]
 8003d74:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003d76:	606b      	str	r3, [r5, #4]
 8003d78:	4b7a      	ldr	r3, [pc, #488]	; (8003f64 <_tzset_unlocked_r+0x2d0>)
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <_tzset_unlocked_r+0x2d8>)
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e7a0      	b.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003d84:	f7fc f9c7 	bl	8000116 <strcmp>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d09c      	beq.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003d8c:	e7a0      	b.n	8003cd0 <_tzset_unlocked_r+0x3c>
 8003d8e:	0021      	movs	r1, r4
 8003d90:	f7ff fe18 	bl	80039c4 <strcpy>
 8003d94:	e7a9      	b.n	8003cea <_tzset_unlocked_r+0x56>
 8003d96:	2201      	movs	r2, #1
 8003d98:	3b2b      	subs	r3, #43	; 0x2b
 8003d9a:	9204      	str	r2, [sp, #16]
 8003d9c:	425a      	negs	r2, r3
 8003d9e:	4153      	adcs	r3, r2
 8003da0:	18e4      	adds	r4, r4, r3
 8003da2:	e7b7      	b.n	8003d14 <_tzset_unlocked_r+0x80>
 8003da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003da6:	606f      	str	r7, [r5, #4]
 8003da8:	18e4      	adds	r4, r4, r3
 8003daa:	7823      	ldrb	r3, [r4, #0]
 8003dac:	2b2d      	cmp	r3, #45	; 0x2d
 8003dae:	d000      	beq.n	8003db2 <_tzset_unlocked_r+0x11e>
 8003db0:	e08d      	b.n	8003ece <_tzset_unlocked_r+0x23a>
 8003db2:	3b2e      	subs	r3, #46	; 0x2e
 8003db4:	3401      	adds	r4, #1
 8003db6:	9304      	str	r3, [sp, #16]
 8003db8:	2716      	movs	r7, #22
 8003dba:	2300      	movs	r3, #0
 8003dbc:	aa02      	add	r2, sp, #8
 8003dbe:	18bf      	adds	r7, r7, r2
 8003dc0:	ad07      	add	r5, sp, #28
 8003dc2:	8313      	strh	r3, [r2, #24]
 8003dc4:	802b      	strh	r3, [r5, #0]
 8003dc6:	803b      	strh	r3, [r7, #0]
 8003dc8:	aa08      	add	r2, sp, #32
 8003dca:	930a      	str	r3, [sp, #40]	; 0x28
 8003dcc:	ab0a      	add	r3, sp, #40	; 0x28
 8003dce:	9202      	str	r2, [sp, #8]
 8003dd0:	9303      	str	r3, [sp, #12]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	9700      	str	r7, [sp, #0]
 8003dd6:	002a      	movs	r2, r5
 8003dd8:	4968      	ldr	r1, [pc, #416]	; (8003f7c <_tzset_unlocked_r+0x2e8>)
 8003dda:	0020      	movs	r0, r4
 8003ddc:	f000 fa4e 	bl	800427c <siscanf>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	dd00      	ble.n	8003de6 <_tzset_unlocked_r+0x152>
 8003de4:	e07a      	b.n	8003edc <_tzset_unlocked_r+0x248>
 8003de6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003de8:	4a66      	ldr	r2, [pc, #408]	; (8003f84 <_tzset_unlocked_r+0x2f0>)
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	6533      	str	r3, [r6, #80]	; 0x50
 8003dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003df0:	0037      	movs	r7, r6
 8003df2:	18e4      	adds	r4, r4, r3
 8003df4:	2300      	movs	r3, #0
 8003df6:	3708      	adds	r7, #8
 8003df8:	9304      	str	r3, [sp, #16]
 8003dfa:	7823      	ldrb	r3, [r4, #0]
 8003dfc:	3b2c      	subs	r3, #44	; 0x2c
 8003dfe:	425a      	negs	r2, r3
 8003e00:	4153      	adcs	r3, r2
 8003e02:	18e4      	adds	r4, r4, r3
 8003e04:	7825      	ldrb	r5, [r4, #0]
 8003e06:	2d4d      	cmp	r5, #77	; 0x4d
 8003e08:	d000      	beq.n	8003e0c <_tzset_unlocked_r+0x178>
 8003e0a:	e078      	b.n	8003efe <_tzset_unlocked_r+0x26a>
 8003e0c:	221e      	movs	r2, #30
 8003e0e:	a902      	add	r1, sp, #8
 8003e10:	1852      	adds	r2, r2, r1
 8003e12:	9202      	str	r2, [sp, #8]
 8003e14:	aa09      	add	r2, sp, #36	; 0x24
 8003e16:	9200      	str	r2, [sp, #0]
 8003e18:	221a      	movs	r2, #26
 8003e1a:	ab0a      	add	r3, sp, #40	; 0x28
 8003e1c:	1852      	adds	r2, r2, r1
 8003e1e:	9303      	str	r3, [sp, #12]
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	4959      	ldr	r1, [pc, #356]	; (8003f88 <_tzset_unlocked_r+0x2f4>)
 8003e24:	0020      	movs	r0, r4
 8003e26:	f000 fa29 	bl	800427c <siscanf>
 8003e2a:	2803      	cmp	r0, #3
 8003e2c:	d000      	beq.n	8003e30 <_tzset_unlocked_r+0x19c>
 8003e2e:	e74a      	b.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003e30:	ab02      	add	r3, sp, #8
 8003e32:	8b59      	ldrh	r1, [r3, #26]
 8003e34:	1e4b      	subs	r3, r1, #1
 8003e36:	2b0b      	cmp	r3, #11
 8003e38:	d900      	bls.n	8003e3c <_tzset_unlocked_r+0x1a8>
 8003e3a:	e744      	b.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003e3c:	ab02      	add	r3, sp, #8
 8003e3e:	8b9a      	ldrh	r2, [r3, #28]
 8003e40:	1e53      	subs	r3, r2, #1
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d900      	bls.n	8003e48 <_tzset_unlocked_r+0x1b4>
 8003e46:	e73e      	b.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003e48:	ab02      	add	r3, sp, #8
 8003e4a:	8bdb      	ldrh	r3, [r3, #30]
 8003e4c:	2b06      	cmp	r3, #6
 8003e4e:	d900      	bls.n	8003e52 <_tzset_unlocked_r+0x1be>
 8003e50:	e739      	b.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003e52:	703d      	strb	r5, [r7, #0]
 8003e54:	6079      	str	r1, [r7, #4]
 8003e56:	60ba      	str	r2, [r7, #8]
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e5c:	18e5      	adds	r5, r4, r3
 8003e5e:	2302      	movs	r3, #2
 8003e60:	aa07      	add	r2, sp, #28
 8003e62:	8013      	strh	r3, [r2, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	a902      	add	r1, sp, #8
 8003e68:	ac08      	add	r4, sp, #32
 8003e6a:	82cb      	strh	r3, [r1, #22]
 8003e6c:	8023      	strh	r3, [r4, #0]
 8003e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e70:	782b      	ldrb	r3, [r5, #0]
 8003e72:	2b2f      	cmp	r3, #47	; 0x2f
 8003e74:	d10b      	bne.n	8003e8e <_tzset_unlocked_r+0x1fa>
 8003e76:	2116      	movs	r1, #22
 8003e78:	a802      	add	r0, sp, #8
 8003e7a:	1809      	adds	r1, r1, r0
 8003e7c:	ab0a      	add	r3, sp, #40	; 0x28
 8003e7e:	9100      	str	r1, [sp, #0]
 8003e80:	9303      	str	r3, [sp, #12]
 8003e82:	9402      	str	r4, [sp, #8]
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	4941      	ldr	r1, [pc, #260]	; (8003f8c <_tzset_unlocked_r+0x2f8>)
 8003e88:	0028      	movs	r0, r5
 8003e8a:	f000 f9f7 	bl	800427c <siscanf>
 8003e8e:	ab02      	add	r3, sp, #8
 8003e90:	8ada      	ldrh	r2, [r3, #22]
 8003e92:	233c      	movs	r3, #60	; 0x3c
 8003e94:	4353      	muls	r3, r2
 8003e96:	8822      	ldrh	r2, [r4, #0]
 8003e98:	189b      	adds	r3, r3, r2
 8003e9a:	aa07      	add	r2, sp, #28
 8003e9c:	8811      	ldrh	r1, [r2, #0]
 8003e9e:	22e1      	movs	r2, #225	; 0xe1
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	434a      	muls	r2, r1
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eaa:	3728      	adds	r7, #40	; 0x28
 8003eac:	18ec      	adds	r4, r5, r3
 8003eae:	9b04      	ldr	r3, [sp, #16]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d122      	bne.n	8003efa <_tzset_unlocked_r+0x266>
 8003eb4:	6870      	ldr	r0, [r6, #4]
 8003eb6:	f7ff fe33 	bl	8003b20 <__tzcalc_limits>
 8003eba:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003ebc:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <_tzset_unlocked_r+0x2d0>)
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	1e5a      	subs	r2, r3, #1
 8003ec6:	4193      	sbcs	r3, r2
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <_tzset_unlocked_r+0x2d8>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	e6fb      	b.n	8003cc6 <_tzset_unlocked_r+0x32>
 8003ece:	2201      	movs	r2, #1
 8003ed0:	3b2b      	subs	r3, #43	; 0x2b
 8003ed2:	9204      	str	r2, [sp, #16]
 8003ed4:	425a      	negs	r2, r3
 8003ed6:	4153      	adcs	r3, r2
 8003ed8:	18e4      	adds	r4, r4, r3
 8003eda:	e76d      	b.n	8003db8 <_tzset_unlocked_r+0x124>
 8003edc:	233c      	movs	r3, #60	; 0x3c
 8003ede:	883a      	ldrh	r2, [r7, #0]
 8003ee0:	8829      	ldrh	r1, [r5, #0]
 8003ee2:	4353      	muls	r3, r2
 8003ee4:	aa02      	add	r2, sp, #8
 8003ee6:	8b12      	ldrh	r2, [r2, #24]
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	22e1      	movs	r2, #225	; 0xe1
 8003eec:	0112      	lsls	r2, r2, #4
 8003eee:	434a      	muls	r2, r1
 8003ef0:	189b      	adds	r3, r3, r2
 8003ef2:	9a04      	ldr	r2, [sp, #16]
 8003ef4:	435a      	muls	r2, r3
 8003ef6:	0013      	movs	r3, r2
 8003ef8:	e778      	b.n	8003dec <_tzset_unlocked_r+0x158>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e77c      	b.n	8003df8 <_tzset_unlocked_r+0x164>
 8003efe:	2344      	movs	r3, #68	; 0x44
 8003f00:	9305      	str	r3, [sp, #20]
 8003f02:	2d4a      	cmp	r5, #74	; 0x4a
 8003f04:	d101      	bne.n	8003f0a <_tzset_unlocked_r+0x276>
 8003f06:	3401      	adds	r4, #1
 8003f08:	9505      	str	r5, [sp, #20]
 8003f0a:	220a      	movs	r2, #10
 8003f0c:	a90b      	add	r1, sp, #44	; 0x2c
 8003f0e:	0020      	movs	r0, r4
 8003f10:	f000 fa82 	bl	8004418 <strtoul>
 8003f14:	231e      	movs	r3, #30
 8003f16:	aa02      	add	r2, sp, #8
 8003f18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003f1a:	189b      	adds	r3, r3, r2
 8003f1c:	8018      	strh	r0, [r3, #0]
 8003f1e:	42a5      	cmp	r5, r4
 8003f20:	d116      	bne.n	8003f50 <_tzset_unlocked_r+0x2bc>
 8003f22:	9b04      	ldr	r3, [sp, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <_tzset_unlocked_r+0x2a6>
 8003f28:	334d      	adds	r3, #77	; 0x4d
 8003f2a:	7233      	strb	r3, [r6, #8]
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	60f3      	str	r3, [r6, #12]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	6133      	str	r3, [r6, #16]
 8003f34:	9b04      	ldr	r3, [sp, #16]
 8003f36:	6173      	str	r3, [r6, #20]
 8003f38:	e791      	b.n	8003e5e <_tzset_unlocked_r+0x1ca>
 8003f3a:	0033      	movs	r3, r6
 8003f3c:	224d      	movs	r2, #77	; 0x4d
 8003f3e:	3330      	adds	r3, #48	; 0x30
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	230b      	movs	r3, #11
 8003f44:	6373      	str	r3, [r6, #52]	; 0x34
 8003f46:	3b0a      	subs	r3, #10
 8003f48:	63b3      	str	r3, [r6, #56]	; 0x38
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	63f3      	str	r3, [r6, #60]	; 0x3c
 8003f4e:	e786      	b.n	8003e5e <_tzset_unlocked_r+0x1ca>
 8003f50:	9b05      	ldr	r3, [sp, #20]
 8003f52:	b280      	uxth	r0, r0
 8003f54:	703b      	strb	r3, [r7, #0]
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	e781      	b.n	8003e5e <_tzset_unlocked_r+0x1ca>
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	08004ce0 	.word	0x08004ce0
 8003f60:	20000290 	.word	0x20000290
 8003f64:	20000298 	.word	0x20000298
 8003f68:	08004ce3 	.word	0x08004ce3
 8003f6c:	20000294 	.word	0x20000294
 8003f70:	20000070 	.word	0x20000070
 8003f74:	08004ce7 	.word	0x08004ce7
 8003f78:	20000283 	.word	0x20000283
 8003f7c:	08004d0a 	.word	0x08004d0a
 8003f80:	20000278 	.word	0x20000278
 8003f84:	fffff1f0 	.word	0xfffff1f0
 8003f88:	08004cf6 	.word	0x08004cf6
 8003f8c:	08004d09 	.word	0x08004d09

08003f90 <__utoa>:
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	0017      	movs	r7, r2
 8003f94:	b08d      	sub	sp, #52	; 0x34
 8003f96:	2225      	movs	r2, #37	; 0x25
 8003f98:	0006      	movs	r6, r0
 8003f9a:	000d      	movs	r5, r1
 8003f9c:	a802      	add	r0, sp, #8
 8003f9e:	4914      	ldr	r1, [pc, #80]	; (8003ff0 <__utoa+0x60>)
 8003fa0:	f000 f960 	bl	8004264 <memcpy>
 8003fa4:	aa02      	add	r2, sp, #8
 8003fa6:	1ebb      	subs	r3, r7, #2
 8003fa8:	2400      	movs	r4, #0
 8003faa:	9201      	str	r2, [sp, #4]
 8003fac:	2b22      	cmp	r3, #34	; 0x22
 8003fae:	d905      	bls.n	8003fbc <__utoa+0x2c>
 8003fb0:	702c      	strb	r4, [r5, #0]
 8003fb2:	0025      	movs	r5, r4
 8003fb4:	0028      	movs	r0, r5
 8003fb6:	b00d      	add	sp, #52	; 0x34
 8003fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fba:	0014      	movs	r4, r2
 8003fbc:	0030      	movs	r0, r6
 8003fbe:	0039      	movs	r1, r7
 8003fc0:	f7fc f944 	bl	800024c <__aeabi_uidivmod>
 8003fc4:	4684      	mov	ip, r0
 8003fc6:	9801      	ldr	r0, [sp, #4]
 8003fc8:	1c62      	adds	r2, r4, #1
 8003fca:	18ab      	adds	r3, r5, r2
 8003fcc:	5c41      	ldrb	r1, [r0, r1]
 8003fce:	1e5e      	subs	r6, r3, #1
 8003fd0:	7031      	strb	r1, [r6, #0]
 8003fd2:	4666      	mov	r6, ip
 8003fd4:	2e00      	cmp	r6, #0
 8003fd6:	d1f0      	bne.n	8003fba <__utoa+0x2a>
 8003fd8:	701e      	strb	r6, [r3, #0]
 8003fda:	002b      	movs	r3, r5
 8003fdc:	1b5a      	subs	r2, r3, r5
 8003fde:	4294      	cmp	r4, r2
 8003fe0:	dde8      	ble.n	8003fb4 <__utoa+0x24>
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	5d29      	ldrb	r1, [r5, r4]
 8003fe6:	7019      	strb	r1, [r3, #0]
 8003fe8:	552a      	strb	r2, [r5, r4]
 8003fea:	3301      	adds	r3, #1
 8003fec:	3c01      	subs	r4, #1
 8003fee:	e7f5      	b.n	8003fdc <__utoa+0x4c>
 8003ff0:	08004d1c 	.word	0x08004d1c

08003ff4 <_findenv_r>:
 8003ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff6:	000e      	movs	r6, r1
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	0007      	movs	r7, r0
 8003ffc:	9203      	str	r2, [sp, #12]
 8003ffe:	f000 fa2b 	bl	8004458 <__env_lock>
 8004002:	4c19      	ldr	r4, [pc, #100]	; (8004068 <_findenv_r+0x74>)
 8004004:	0033      	movs	r3, r6
 8004006:	6825      	ldr	r5, [r4, #0]
 8004008:	2d00      	cmp	r5, #0
 800400a:	d106      	bne.n	800401a <_findenv_r+0x26>
 800400c:	0038      	movs	r0, r7
 800400e:	f000 fa24 	bl	800445a <__env_unlock>
 8004012:	2000      	movs	r0, #0
 8004014:	b005      	add	sp, #20
 8004016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004018:	3301      	adds	r3, #1
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	2a00      	cmp	r2, #0
 800401e:	d01f      	beq.n	8004060 <_findenv_r+0x6c>
 8004020:	2a3d      	cmp	r2, #61	; 0x3d
 8004022:	d1f9      	bne.n	8004018 <_findenv_r+0x24>
 8004024:	e7f2      	b.n	800400c <_findenv_r+0x18>
 8004026:	3504      	adds	r5, #4
 8004028:	6828      	ldr	r0, [r5, #0]
 800402a:	2800      	cmp	r0, #0
 800402c:	d0ee      	beq.n	800400c <_findenv_r+0x18>
 800402e:	9a01      	ldr	r2, [sp, #4]
 8004030:	0031      	movs	r1, r6
 8004032:	f000 f94d 	bl	80042d0 <strncmp>
 8004036:	2800      	cmp	r0, #0
 8004038:	d1f5      	bne.n	8004026 <_findenv_r+0x32>
 800403a:	9a01      	ldr	r2, [sp, #4]
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	4694      	mov	ip, r2
 8004040:	4463      	add	r3, ip
 8004042:	9302      	str	r3, [sp, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b3d      	cmp	r3, #61	; 0x3d
 8004048:	d1ed      	bne.n	8004026 <_findenv_r+0x32>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	0038      	movs	r0, r7
 800404e:	1aed      	subs	r5, r5, r3
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	10ad      	asrs	r5, r5, #2
 8004054:	601d      	str	r5, [r3, #0]
 8004056:	f000 fa00 	bl	800445a <__env_unlock>
 800405a:	9802      	ldr	r0, [sp, #8]
 800405c:	3001      	adds	r0, #1
 800405e:	e7d9      	b.n	8004014 <_findenv_r+0x20>
 8004060:	1b9b      	subs	r3, r3, r6
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	e7e0      	b.n	8004028 <_findenv_r+0x34>
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	20000004 	.word	0x20000004

0800406c <_getenv_r>:
 800406c:	b507      	push	{r0, r1, r2, lr}
 800406e:	aa01      	add	r2, sp, #4
 8004070:	f7ff ffc0 	bl	8003ff4 <_findenv_r>
 8004074:	bd0e      	pop	{r1, r2, r3, pc}
	...

08004078 <__gettzinfo>:
 8004078:	4800      	ldr	r0, [pc, #0]	; (800407c <__gettzinfo+0x4>)
 800407a:	4770      	bx	lr
 800407c:	20000078 	.word	0x20000078

08004080 <gmtime_r>:
 8004080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004082:	6806      	ldr	r6, [r0, #0]
 8004084:	6847      	ldr	r7, [r0, #4]
 8004086:	b085      	sub	sp, #20
 8004088:	4a59      	ldr	r2, [pc, #356]	; (80041f0 <gmtime_r+0x170>)
 800408a:	2300      	movs	r3, #0
 800408c:	0030      	movs	r0, r6
 800408e:	000c      	movs	r4, r1
 8004090:	0039      	movs	r1, r7
 8004092:	f7fc f9cb 	bl	800042c <__aeabi_ldivmod>
 8004096:	4a57      	ldr	r2, [pc, #348]	; (80041f4 <gmtime_r+0x174>)
 8004098:	9001      	str	r0, [sp, #4]
 800409a:	1885      	adds	r5, r0, r2
 800409c:	2300      	movs	r3, #0
 800409e:	0030      	movs	r0, r6
 80040a0:	4a53      	ldr	r2, [pc, #332]	; (80041f0 <gmtime_r+0x170>)
 80040a2:	0039      	movs	r1, r7
 80040a4:	f7fc f9c2 	bl	800042c <__aeabi_ldivmod>
 80040a8:	1e16      	subs	r6, r2, #0
 80040aa:	da06      	bge.n	80040ba <gmtime_r+0x3a>
 80040ac:	4a52      	ldr	r2, [pc, #328]	; (80041f8 <gmtime_r+0x178>)
 80040ae:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <gmtime_r+0x170>)
 80040b0:	4694      	mov	ip, r2
 80040b2:	18f6      	adds	r6, r6, r3
 80040b4:	9b01      	ldr	r3, [sp, #4]
 80040b6:	4463      	add	r3, ip
 80040b8:	001d      	movs	r5, r3
 80040ba:	21e1      	movs	r1, #225	; 0xe1
 80040bc:	0030      	movs	r0, r6
 80040be:	0109      	lsls	r1, r1, #4
 80040c0:	f7fc f8c8 	bl	8000254 <__divsi3>
 80040c4:	21e1      	movs	r1, #225	; 0xe1
 80040c6:	60a0      	str	r0, [r4, #8]
 80040c8:	0109      	lsls	r1, r1, #4
 80040ca:	0030      	movs	r0, r6
 80040cc:	f7fc f9a8 	bl	8000420 <__aeabi_idivmod>
 80040d0:	000e      	movs	r6, r1
 80040d2:	213c      	movs	r1, #60	; 0x3c
 80040d4:	0030      	movs	r0, r6
 80040d6:	f7fc f8bd 	bl	8000254 <__divsi3>
 80040da:	213c      	movs	r1, #60	; 0x3c
 80040dc:	6060      	str	r0, [r4, #4]
 80040de:	0030      	movs	r0, r6
 80040e0:	f7fc f99e 	bl	8000420 <__aeabi_idivmod>
 80040e4:	1ce8      	adds	r0, r5, #3
 80040e6:	6021      	str	r1, [r4, #0]
 80040e8:	2107      	movs	r1, #7
 80040ea:	f7fc f999 	bl	8000420 <__aeabi_idivmod>
 80040ee:	2900      	cmp	r1, #0
 80040f0:	da00      	bge.n	80040f4 <gmtime_r+0x74>
 80040f2:	3107      	adds	r1, #7
 80040f4:	61a1      	str	r1, [r4, #24]
 80040f6:	1e28      	subs	r0, r5, #0
 80040f8:	4940      	ldr	r1, [pc, #256]	; (80041fc <gmtime_r+0x17c>)
 80040fa:	da01      	bge.n	8004100 <gmtime_r+0x80>
 80040fc:	4b40      	ldr	r3, [pc, #256]	; (8004200 <gmtime_r+0x180>)
 80040fe:	18e8      	adds	r0, r5, r3
 8004100:	f7fc f8a8 	bl	8000254 <__divsi3>
 8004104:	0007      	movs	r7, r0
 8004106:	483f      	ldr	r0, [pc, #252]	; (8004204 <gmtime_r+0x184>)
 8004108:	493f      	ldr	r1, [pc, #252]	; (8004208 <gmtime_r+0x188>)
 800410a:	4378      	muls	r0, r7
 800410c:	1945      	adds	r5, r0, r5
 800410e:	0028      	movs	r0, r5
 8004110:	f7fc f816 	bl	8000140 <__udivsi3>
 8004114:	493d      	ldr	r1, [pc, #244]	; (800420c <gmtime_r+0x18c>)
 8004116:	1946      	adds	r6, r0, r5
 8004118:	0028      	movs	r0, r5
 800411a:	f7fc f811 	bl	8000140 <__udivsi3>
 800411e:	493c      	ldr	r1, [pc, #240]	; (8004210 <gmtime_r+0x190>)
 8004120:	1a36      	subs	r6, r6, r0
 8004122:	0028      	movs	r0, r5
 8004124:	f7fc f80c 	bl	8000140 <__udivsi3>
 8004128:	216e      	movs	r1, #110	; 0x6e
 800412a:	1a36      	subs	r6, r6, r0
 800412c:	31ff      	adds	r1, #255	; 0xff
 800412e:	0030      	movs	r0, r6
 8004130:	f7fc f806 	bl	8000140 <__udivsi3>
 8004134:	4937      	ldr	r1, [pc, #220]	; (8004214 <gmtime_r+0x194>)
 8004136:	9001      	str	r0, [sp, #4]
 8004138:	0030      	movs	r0, r6
 800413a:	f7fc f801 	bl	8000140 <__udivsi3>
 800413e:	4933      	ldr	r1, [pc, #204]	; (800420c <gmtime_r+0x18c>)
 8004140:	1945      	adds	r5, r0, r5
 8004142:	0030      	movs	r0, r6
 8004144:	f7fb fffc 	bl	8000140 <__udivsi3>
 8004148:	216e      	movs	r1, #110	; 0x6e
 800414a:	9b01      	ldr	r3, [sp, #4]
 800414c:	31ff      	adds	r1, #255	; 0xff
 800414e:	4359      	muls	r1, r3
 8004150:	1a2d      	subs	r5, r5, r0
 8004152:	1a6b      	subs	r3, r5, r1
 8004154:	2605      	movs	r6, #5
 8004156:	0018      	movs	r0, r3
 8004158:	4370      	muls	r0, r6
 800415a:	2199      	movs	r1, #153	; 0x99
 800415c:	3002      	adds	r0, #2
 800415e:	9302      	str	r3, [sp, #8]
 8004160:	f7fb ffee 	bl	8000140 <__udivsi3>
 8004164:	0005      	movs	r5, r0
 8004166:	2099      	movs	r0, #153	; 0x99
 8004168:	4368      	muls	r0, r5
 800416a:	9b02      	ldr	r3, [sp, #8]
 800416c:	0031      	movs	r1, r6
 800416e:	3301      	adds	r3, #1
 8004170:	3002      	adds	r0, #2
 8004172:	9303      	str	r3, [sp, #12]
 8004174:	f7fb ffe4 	bl	8000140 <__udivsi3>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	3e03      	subs	r6, #3
 800417c:	1a1b      	subs	r3, r3, r0
 800417e:	9303      	str	r3, [sp, #12]
 8004180:	2d09      	cmp	r5, #9
 8004182:	d900      	bls.n	8004186 <gmtime_r+0x106>
 8004184:	3e0c      	subs	r6, #12
 8004186:	23c8      	movs	r3, #200	; 0xc8
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	435f      	muls	r7, r3
 800418c:	9b01      	ldr	r3, [sp, #4]
 800418e:	1976      	adds	r6, r6, r5
 8004190:	18ff      	adds	r7, r7, r3
 8004192:	2501      	movs	r5, #1
 8004194:	2300      	movs	r3, #0
 8004196:	42b5      	cmp	r5, r6
 8004198:	415b      	adcs	r3, r3
 800419a:	18ff      	adds	r7, r7, r3
 800419c:	2332      	movs	r3, #50	; 0x32
 800419e:	9a02      	ldr	r2, [sp, #8]
 80041a0:	33ff      	adds	r3, #255	; 0xff
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d90e      	bls.n	80041c4 <gmtime_r+0x144>
 80041a6:	0015      	movs	r5, r2
 80041a8:	3d33      	subs	r5, #51	; 0x33
 80041aa:	3dff      	subs	r5, #255	; 0xff
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <gmtime_r+0x198>)
 80041ae:	0020      	movs	r0, r4
 80041b0:	18ff      	adds	r7, r7, r3
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	61e5      	str	r5, [r4, #28]
 80041b6:	60e3      	str	r3, [r4, #12]
 80041b8:	2300      	movs	r3, #0
 80041ba:	6167      	str	r7, [r4, #20]
 80041bc:	6126      	str	r6, [r4, #16]
 80041be:	6223      	str	r3, [r4, #32]
 80041c0:	b005      	add	sp, #20
 80041c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c4:	9b01      	ldr	r3, [sp, #4]
 80041c6:	079b      	lsls	r3, r3, #30
 80041c8:	d106      	bne.n	80041d8 <gmtime_r+0x158>
 80041ca:	2164      	movs	r1, #100	; 0x64
 80041cc:	9801      	ldr	r0, [sp, #4]
 80041ce:	f7fc f83d 	bl	800024c <__aeabi_uidivmod>
 80041d2:	0028      	movs	r0, r5
 80041d4:	2900      	cmp	r1, #0
 80041d6:	d106      	bne.n	80041e6 <gmtime_r+0x166>
 80041d8:	21c8      	movs	r1, #200	; 0xc8
 80041da:	9801      	ldr	r0, [sp, #4]
 80041dc:	0049      	lsls	r1, r1, #1
 80041de:	f7fc f835 	bl	800024c <__aeabi_uidivmod>
 80041e2:	4248      	negs	r0, r1
 80041e4:	4148      	adcs	r0, r1
 80041e6:	9d02      	ldr	r5, [sp, #8]
 80041e8:	353b      	adds	r5, #59	; 0x3b
 80041ea:	182d      	adds	r5, r5, r0
 80041ec:	e7de      	b.n	80041ac <gmtime_r+0x12c>
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	00015180 	.word	0x00015180
 80041f4:	000afa6c 	.word	0x000afa6c
 80041f8:	000afa6b 	.word	0x000afa6b
 80041fc:	00023ab1 	.word	0x00023ab1
 8004200:	fffdc550 	.word	0xfffdc550
 8004204:	fffdc54f 	.word	0xfffdc54f
 8004208:	00008eac 	.word	0x00008eac
 800420c:	000005b4 	.word	0x000005b4
 8004210:	00023ab0 	.word	0x00023ab0
 8004214:	00008e94 	.word	0x00008e94
 8004218:	fffff894 	.word	0xfffff894

0800421c <__locale_ctype_ptr_l>:
 800421c:	30ec      	adds	r0, #236	; 0xec
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	4770      	bx	lr
	...

08004224 <__locale_ctype_ptr>:
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <__locale_ctype_ptr+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d100      	bne.n	8004230 <__locale_ctype_ptr+0xc>
 800422e:	4b03      	ldr	r3, [pc, #12]	; (800423c <__locale_ctype_ptr+0x18>)
 8004230:	33ec      	adds	r3, #236	; 0xec
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	4770      	bx	lr
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	2000000c 	.word	0x2000000c
 800423c:	200000d0 	.word	0x200000d0

08004240 <__ascii_mbtowc>:
 8004240:	b082      	sub	sp, #8
 8004242:	2900      	cmp	r1, #0
 8004244:	d100      	bne.n	8004248 <__ascii_mbtowc+0x8>
 8004246:	a901      	add	r1, sp, #4
 8004248:	1e10      	subs	r0, r2, #0
 800424a:	d006      	beq.n	800425a <__ascii_mbtowc+0x1a>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <__ascii_mbtowc+0x1e>
 8004250:	7813      	ldrb	r3, [r2, #0]
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	7810      	ldrb	r0, [r2, #0]
 8004256:	1e43      	subs	r3, r0, #1
 8004258:	4198      	sbcs	r0, r3
 800425a:	b002      	add	sp, #8
 800425c:	4770      	bx	lr
 800425e:	2002      	movs	r0, #2
 8004260:	4240      	negs	r0, r0
 8004262:	e7fa      	b.n	800425a <__ascii_mbtowc+0x1a>

08004264 <memcpy>:
 8004264:	2300      	movs	r3, #0
 8004266:	b510      	push	{r4, lr}
 8004268:	429a      	cmp	r2, r3
 800426a:	d100      	bne.n	800426e <memcpy+0xa>
 800426c:	bd10      	pop	{r4, pc}
 800426e:	5ccc      	ldrb	r4, [r1, r3]
 8004270:	54c4      	strb	r4, [r0, r3]
 8004272:	3301      	adds	r3, #1
 8004274:	e7f8      	b.n	8004268 <memcpy+0x4>

08004276 <__malloc_lock>:
 8004276:	4770      	bx	lr

08004278 <__malloc_unlock>:
 8004278:	4770      	bx	lr
	...

0800427c <siscanf>:
 800427c:	b40e      	push	{r1, r2, r3}
 800427e:	2381      	movs	r3, #129	; 0x81
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	b09d      	sub	sp, #116	; 0x74
 8004284:	ac02      	add	r4, sp, #8
 8004286:	ad21      	add	r5, sp, #132	; 0x84
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	cd40      	ldmia	r5!, {r6}
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	9002      	str	r0, [sp, #8]
 8004290:	9006      	str	r0, [sp, #24]
 8004292:	f7fb ff39 	bl	8000108 <strlen>
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <siscanf+0x48>)
 8004298:	6060      	str	r0, [r4, #4]
 800429a:	6263      	str	r3, [r4, #36]	; 0x24
 800429c:	2300      	movs	r3, #0
 800429e:	6160      	str	r0, [r4, #20]
 80042a0:	4809      	ldr	r0, [pc, #36]	; (80042c8 <siscanf+0x4c>)
 80042a2:	6363      	str	r3, [r4, #52]	; 0x34
 80042a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80042a6:	3b01      	subs	r3, #1
 80042a8:	81e3      	strh	r3, [r4, #14]
 80042aa:	0032      	movs	r2, r6
 80042ac:	002b      	movs	r3, r5
 80042ae:	0021      	movs	r1, r4
 80042b0:	6800      	ldr	r0, [r0, #0]
 80042b2:	9501      	str	r5, [sp, #4]
 80042b4:	f000 f92e 	bl	8004514 <__ssvfiscanf_r>
 80042b8:	b01d      	add	sp, #116	; 0x74
 80042ba:	bc70      	pop	{r4, r5, r6}
 80042bc:	bc08      	pop	{r3}
 80042be:	b003      	add	sp, #12
 80042c0:	4718      	bx	r3
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	080042cd 	.word	0x080042cd
 80042c8:	2000000c 	.word	0x2000000c

080042cc <__seofread>:
 80042cc:	2000      	movs	r0, #0
 80042ce:	4770      	bx	lr

080042d0 <strncmp>:
 80042d0:	2300      	movs	r3, #0
 80042d2:	b530      	push	{r4, r5, lr}
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d00a      	beq.n	80042ee <strncmp+0x1e>
 80042d8:	3a01      	subs	r2, #1
 80042da:	5cc4      	ldrb	r4, [r0, r3]
 80042dc:	5ccd      	ldrb	r5, [r1, r3]
 80042de:	42ac      	cmp	r4, r5
 80042e0:	d104      	bne.n	80042ec <strncmp+0x1c>
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d002      	beq.n	80042ec <strncmp+0x1c>
 80042e6:	3301      	adds	r3, #1
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	d1f6      	bne.n	80042da <strncmp+0xa>
 80042ec:	1b63      	subs	r3, r4, r5
 80042ee:	0018      	movs	r0, r3
 80042f0:	bd30      	pop	{r4, r5, pc}

080042f2 <_strtoul_l.isra.0>:
 80042f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f4:	001f      	movs	r7, r3
 80042f6:	000e      	movs	r6, r1
 80042f8:	b085      	sub	sp, #20
 80042fa:	9003      	str	r0, [sp, #12]
 80042fc:	9101      	str	r1, [sp, #4]
 80042fe:	9202      	str	r2, [sp, #8]
 8004300:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004302:	7834      	ldrb	r4, [r6, #0]
 8004304:	f7ff ff8a 	bl	800421c <__locale_ctype_ptr_l>
 8004308:	2208      	movs	r2, #8
 800430a:	1900      	adds	r0, r0, r4
 800430c:	7843      	ldrb	r3, [r0, #1]
 800430e:	1c75      	adds	r5, r6, #1
 8004310:	4013      	ands	r3, r2
 8004312:	d138      	bne.n	8004386 <_strtoul_l.isra.0+0x94>
 8004314:	2c2d      	cmp	r4, #45	; 0x2d
 8004316:	d138      	bne.n	800438a <_strtoul_l.isra.0+0x98>
 8004318:	7874      	ldrb	r4, [r6, #1]
 800431a:	1cb5      	adds	r5, r6, #2
 800431c:	3301      	adds	r3, #1
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2f00      	cmp	r7, #0
 8004322:	d065      	beq.n	80043f0 <_strtoul_l.isra.0+0xfe>
 8004324:	2f10      	cmp	r7, #16
 8004326:	d109      	bne.n	800433c <_strtoul_l.isra.0+0x4a>
 8004328:	2c30      	cmp	r4, #48	; 0x30
 800432a:	d107      	bne.n	800433c <_strtoul_l.isra.0+0x4a>
 800432c:	2220      	movs	r2, #32
 800432e:	782b      	ldrb	r3, [r5, #0]
 8004330:	4393      	bics	r3, r2
 8004332:	2b58      	cmp	r3, #88	; 0x58
 8004334:	d157      	bne.n	80043e6 <_strtoul_l.isra.0+0xf4>
 8004336:	2710      	movs	r7, #16
 8004338:	786c      	ldrb	r4, [r5, #1]
 800433a:	3502      	adds	r5, #2
 800433c:	2001      	movs	r0, #1
 800433e:	0039      	movs	r1, r7
 8004340:	4240      	negs	r0, r0
 8004342:	f7fb fefd 	bl	8000140 <__udivsi3>
 8004346:	0006      	movs	r6, r0
 8004348:	2001      	movs	r0, #1
 800434a:	0039      	movs	r1, r7
 800434c:	4240      	negs	r0, r0
 800434e:	f7fb ff7d 	bl	800024c <__aeabi_uidivmod>
 8004352:	2300      	movs	r3, #0
 8004354:	2201      	movs	r2, #1
 8004356:	468c      	mov	ip, r1
 8004358:	0018      	movs	r0, r3
 800435a:	4252      	negs	r2, r2
 800435c:	0021      	movs	r1, r4
 800435e:	3930      	subs	r1, #48	; 0x30
 8004360:	2909      	cmp	r1, #9
 8004362:	d817      	bhi.n	8004394 <_strtoul_l.isra.0+0xa2>
 8004364:	000c      	movs	r4, r1
 8004366:	42a7      	cmp	r7, r4
 8004368:	dd22      	ble.n	80043b0 <_strtoul_l.isra.0+0xbe>
 800436a:	2b00      	cmp	r3, #0
 800436c:	db1e      	blt.n	80043ac <_strtoul_l.isra.0+0xba>
 800436e:	0013      	movs	r3, r2
 8004370:	4286      	cmp	r6, r0
 8004372:	d305      	bcc.n	8004380 <_strtoul_l.isra.0+0x8e>
 8004374:	d101      	bne.n	800437a <_strtoul_l.isra.0+0x88>
 8004376:	45a4      	cmp	ip, r4
 8004378:	db02      	blt.n	8004380 <_strtoul_l.isra.0+0x8e>
 800437a:	2301      	movs	r3, #1
 800437c:	4378      	muls	r0, r7
 800437e:	1820      	adds	r0, r4, r0
 8004380:	782c      	ldrb	r4, [r5, #0]
 8004382:	3501      	adds	r5, #1
 8004384:	e7ea      	b.n	800435c <_strtoul_l.isra.0+0x6a>
 8004386:	002e      	movs	r6, r5
 8004388:	e7ba      	b.n	8004300 <_strtoul_l.isra.0+0xe>
 800438a:	2c2b      	cmp	r4, #43	; 0x2b
 800438c:	d1c7      	bne.n	800431e <_strtoul_l.isra.0+0x2c>
 800438e:	1cb5      	adds	r5, r6, #2
 8004390:	7874      	ldrb	r4, [r6, #1]
 8004392:	e7c4      	b.n	800431e <_strtoul_l.isra.0+0x2c>
 8004394:	0021      	movs	r1, r4
 8004396:	3941      	subs	r1, #65	; 0x41
 8004398:	2919      	cmp	r1, #25
 800439a:	d801      	bhi.n	80043a0 <_strtoul_l.isra.0+0xae>
 800439c:	3c37      	subs	r4, #55	; 0x37
 800439e:	e7e2      	b.n	8004366 <_strtoul_l.isra.0+0x74>
 80043a0:	0021      	movs	r1, r4
 80043a2:	3961      	subs	r1, #97	; 0x61
 80043a4:	2919      	cmp	r1, #25
 80043a6:	d803      	bhi.n	80043b0 <_strtoul_l.isra.0+0xbe>
 80043a8:	3c57      	subs	r4, #87	; 0x57
 80043aa:	e7dc      	b.n	8004366 <_strtoul_l.isra.0+0x74>
 80043ac:	0013      	movs	r3, r2
 80043ae:	e7e7      	b.n	8004380 <_strtoul_l.isra.0+0x8e>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da09      	bge.n	80043c8 <_strtoul_l.isra.0+0xd6>
 80043b4:	2322      	movs	r3, #34	; 0x22
 80043b6:	2001      	movs	r0, #1
 80043b8:	9a03      	ldr	r2, [sp, #12]
 80043ba:	4240      	negs	r0, r0
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	9b02      	ldr	r3, [sp, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <_strtoul_l.isra.0+0xe8>
 80043c4:	b005      	add	sp, #20
 80043c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c8:	9a00      	ldr	r2, [sp, #0]
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	d000      	beq.n	80043d0 <_strtoul_l.isra.0+0xde>
 80043ce:	4240      	negs	r0, r0
 80043d0:	9a02      	ldr	r2, [sp, #8]
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	d0f6      	beq.n	80043c4 <_strtoul_l.isra.0+0xd2>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <_strtoul_l.isra.0+0xec>
 80043da:	1e6b      	subs	r3, r5, #1
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	9b02      	ldr	r3, [sp, #8]
 80043e0:	9a01      	ldr	r2, [sp, #4]
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e7ee      	b.n	80043c4 <_strtoul_l.isra.0+0xd2>
 80043e6:	2430      	movs	r4, #48	; 0x30
 80043e8:	2f00      	cmp	r7, #0
 80043ea:	d1a7      	bne.n	800433c <_strtoul_l.isra.0+0x4a>
 80043ec:	2708      	movs	r7, #8
 80043ee:	e7a5      	b.n	800433c <_strtoul_l.isra.0+0x4a>
 80043f0:	2c30      	cmp	r4, #48	; 0x30
 80043f2:	d09b      	beq.n	800432c <_strtoul_l.isra.0+0x3a>
 80043f4:	270a      	movs	r7, #10
 80043f6:	e7a1      	b.n	800433c <_strtoul_l.isra.0+0x4a>

080043f8 <_strtoul_r>:
 80043f8:	b513      	push	{r0, r1, r4, lr}
 80043fa:	4c05      	ldr	r4, [pc, #20]	; (8004410 <_strtoul_r+0x18>)
 80043fc:	6824      	ldr	r4, [r4, #0]
 80043fe:	6a24      	ldr	r4, [r4, #32]
 8004400:	2c00      	cmp	r4, #0
 8004402:	d100      	bne.n	8004406 <_strtoul_r+0xe>
 8004404:	4c03      	ldr	r4, [pc, #12]	; (8004414 <_strtoul_r+0x1c>)
 8004406:	9400      	str	r4, [sp, #0]
 8004408:	f7ff ff73 	bl	80042f2 <_strtoul_l.isra.0>
 800440c:	bd16      	pop	{r1, r2, r4, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	2000000c 	.word	0x2000000c
 8004414:	200000d0 	.word	0x200000d0

08004418 <strtoul>:
 8004418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800441a:	0013      	movs	r3, r2
 800441c:	4a06      	ldr	r2, [pc, #24]	; (8004438 <strtoul+0x20>)
 800441e:	0005      	movs	r5, r0
 8004420:	6810      	ldr	r0, [r2, #0]
 8004422:	6a04      	ldr	r4, [r0, #32]
 8004424:	2c00      	cmp	r4, #0
 8004426:	d100      	bne.n	800442a <strtoul+0x12>
 8004428:	4c04      	ldr	r4, [pc, #16]	; (800443c <strtoul+0x24>)
 800442a:	000a      	movs	r2, r1
 800442c:	9400      	str	r4, [sp, #0]
 800442e:	0029      	movs	r1, r5
 8004430:	f7ff ff5f 	bl	80042f2 <_strtoul_l.isra.0>
 8004434:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	2000000c 	.word	0x2000000c
 800443c:	200000d0 	.word	0x200000d0

08004440 <__ascii_wctomb>:
 8004440:	1e0b      	subs	r3, r1, #0
 8004442:	d004      	beq.n	800444e <__ascii_wctomb+0xe>
 8004444:	2aff      	cmp	r2, #255	; 0xff
 8004446:	d904      	bls.n	8004452 <__ascii_wctomb+0x12>
 8004448:	238a      	movs	r3, #138	; 0x8a
 800444a:	6003      	str	r3, [r0, #0]
 800444c:	3b8b      	subs	r3, #139	; 0x8b
 800444e:	0018      	movs	r0, r3
 8004450:	4770      	bx	lr
 8004452:	700a      	strb	r2, [r1, #0]
 8004454:	2301      	movs	r3, #1
 8004456:	e7fa      	b.n	800444e <__ascii_wctomb+0xe>

08004458 <__env_lock>:
 8004458:	4770      	bx	lr

0800445a <__env_unlock>:
 800445a:	4770      	bx	lr

0800445c <_sungetc_r>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	0014      	movs	r4, r2
 8004460:	1c4b      	adds	r3, r1, #1
 8004462:	d103      	bne.n	800446c <_sungetc_r+0x10>
 8004464:	2501      	movs	r5, #1
 8004466:	426d      	negs	r5, r5
 8004468:	0028      	movs	r0, r5
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	8993      	ldrh	r3, [r2, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	4393      	bics	r3, r2
 8004472:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004474:	81a3      	strh	r3, [r4, #12]
 8004476:	b2ce      	uxtb	r6, r1
 8004478:	b2cd      	uxtb	r5, r1
 800447a:	6863      	ldr	r3, [r4, #4]
 800447c:	2a00      	cmp	r2, #0
 800447e:	d010      	beq.n	80044a2 <_sungetc_r+0x46>
 8004480:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004482:	429a      	cmp	r2, r3
 8004484:	dd07      	ble.n	8004496 <_sungetc_r+0x3a>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	3b01      	subs	r3, #1
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	701e      	strb	r6, [r3, #0]
 800448e:	6863      	ldr	r3, [r4, #4]
 8004490:	3301      	adds	r3, #1
 8004492:	6063      	str	r3, [r4, #4]
 8004494:	e7e8      	b.n	8004468 <_sungetc_r+0xc>
 8004496:	0021      	movs	r1, r4
 8004498:	f000 fb42 	bl	8004b20 <__submore>
 800449c:	2800      	cmp	r0, #0
 800449e:	d0f2      	beq.n	8004486 <_sungetc_r+0x2a>
 80044a0:	e7e0      	b.n	8004464 <_sungetc_r+0x8>
 80044a2:	6921      	ldr	r1, [r4, #16]
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	2900      	cmp	r1, #0
 80044a8:	d007      	beq.n	80044ba <_sungetc_r+0x5e>
 80044aa:	4291      	cmp	r1, r2
 80044ac:	d205      	bcs.n	80044ba <_sungetc_r+0x5e>
 80044ae:	1e51      	subs	r1, r2, #1
 80044b0:	7808      	ldrb	r0, [r1, #0]
 80044b2:	42a8      	cmp	r0, r5
 80044b4:	d101      	bne.n	80044ba <_sungetc_r+0x5e>
 80044b6:	6021      	str	r1, [r4, #0]
 80044b8:	e7ea      	b.n	8004490 <_sungetc_r+0x34>
 80044ba:	6423      	str	r3, [r4, #64]	; 0x40
 80044bc:	0023      	movs	r3, r4
 80044be:	3344      	adds	r3, #68	; 0x44
 80044c0:	6363      	str	r3, [r4, #52]	; 0x34
 80044c2:	2303      	movs	r3, #3
 80044c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80044c6:	0023      	movs	r3, r4
 80044c8:	3346      	adds	r3, #70	; 0x46
 80044ca:	63e2      	str	r2, [r4, #60]	; 0x3c
 80044cc:	701e      	strb	r6, [r3, #0]
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	2301      	movs	r3, #1
 80044d2:	e7de      	b.n	8004492 <_sungetc_r+0x36>

080044d4 <__ssrefill_r>:
 80044d4:	b510      	push	{r4, lr}
 80044d6:	000c      	movs	r4, r1
 80044d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80044da:	2900      	cmp	r1, #0
 80044dc:	d00e      	beq.n	80044fc <__ssrefill_r+0x28>
 80044de:	0023      	movs	r3, r4
 80044e0:	3344      	adds	r3, #68	; 0x44
 80044e2:	4299      	cmp	r1, r3
 80044e4:	d001      	beq.n	80044ea <__ssrefill_r+0x16>
 80044e6:	f7ff f9b3 	bl	8003850 <_free_r>
 80044ea:	2000      	movs	r0, #0
 80044ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044ee:	6360      	str	r0, [r4, #52]	; 0x34
 80044f0:	6063      	str	r3, [r4, #4]
 80044f2:	4283      	cmp	r3, r0
 80044f4:	d002      	beq.n	80044fc <__ssrefill_r+0x28>
 80044f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd10      	pop	{r4, pc}
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	2001      	movs	r0, #1
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	89a2      	ldrh	r2, [r4, #12]
 8004506:	6063      	str	r3, [r4, #4]
 8004508:	3320      	adds	r3, #32
 800450a:	4313      	orrs	r3, r2
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	4240      	negs	r0, r0
 8004510:	e7f3      	b.n	80044fa <__ssrefill_r+0x26>
	...

08004514 <__ssvfiscanf_r>:
 8004514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004516:	0017      	movs	r7, r2
 8004518:	2200      	movs	r2, #0
 800451a:	4cb0      	ldr	r4, [pc, #704]	; (80047dc <__ssvfiscanf_r+0x2c8>)
 800451c:	25c0      	movs	r5, #192	; 0xc0
 800451e:	44a5      	add	sp, r4
 8004520:	9248      	str	r2, [sp, #288]	; 0x120
 8004522:	9249      	str	r2, [sp, #292]	; 0x124
 8004524:	aa05      	add	r2, sp, #20
 8004526:	924a      	str	r2, [sp, #296]	; 0x128
 8004528:	22be      	movs	r2, #190	; 0xbe
 800452a:	000c      	movs	r4, r1
 800452c:	49ac      	ldr	r1, [pc, #688]	; (80047e0 <__ssvfiscanf_r+0x2cc>)
 800452e:	9000      	str	r0, [sp, #0]
 8004530:	0052      	lsls	r2, r2, #1
 8004532:	a845      	add	r0, sp, #276	; 0x114
 8004534:	5081      	str	r1, [r0, r2]
 8004536:	49ab      	ldr	r1, [pc, #684]	; (80047e4 <__ssvfiscanf_r+0x2d0>)
 8004538:	006d      	lsls	r5, r5, #1
 800453a:	5141      	str	r1, [r0, r5]
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	783b      	ldrb	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d100      	bne.n	8004546 <__ssvfiscanf_r+0x32>
 8004544:	e148      	b.n	80047d8 <__ssvfiscanf_r+0x2c4>
 8004546:	f7ff fe6d 	bl	8004224 <__locale_ctype_ptr>
 800454a:	2208      	movs	r2, #8
 800454c:	783b      	ldrb	r3, [r7, #0]
 800454e:	1c7e      	adds	r6, r7, #1
 8004550:	18c0      	adds	r0, r0, r3
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	7843      	ldrb	r3, [r0, #1]
 8004556:	4013      	ands	r3, r2
 8004558:	d020      	beq.n	800459c <__ssvfiscanf_r+0x88>
 800455a:	6863      	ldr	r3, [r4, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	dd14      	ble.n	800458a <__ssvfiscanf_r+0x76>
 8004560:	f7ff fe60 	bl	8004224 <__locale_ctype_ptr>
 8004564:	2108      	movs	r1, #8
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	1880      	adds	r0, r0, r2
 800456c:	7842      	ldrb	r2, [r0, #1]
 800456e:	420a      	tst	r2, r1
 8004570:	d101      	bne.n	8004576 <__ssvfiscanf_r+0x62>
 8004572:	0037      	movs	r7, r6
 8004574:	e7e3      	b.n	800453e <__ssvfiscanf_r+0x2a>
 8004576:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004578:	3301      	adds	r3, #1
 800457a:	9201      	str	r2, [sp, #4]
 800457c:	3201      	adds	r2, #1
 800457e:	9249      	str	r2, [sp, #292]	; 0x124
 8004580:	6862      	ldr	r2, [r4, #4]
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	3a01      	subs	r2, #1
 8004586:	6062      	str	r2, [r4, #4]
 8004588:	e7e7      	b.n	800455a <__ssvfiscanf_r+0x46>
 800458a:	ab45      	add	r3, sp, #276	; 0x114
 800458c:	595b      	ldr	r3, [r3, r5]
 800458e:	0021      	movs	r1, r4
 8004590:	9800      	ldr	r0, [sp, #0]
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	4798      	blx	r3
 8004596:	2800      	cmp	r0, #0
 8004598:	d0e2      	beq.n	8004560 <__ssvfiscanf_r+0x4c>
 800459a:	e7ea      	b.n	8004572 <__ssvfiscanf_r+0x5e>
 800459c:	9a01      	ldr	r2, [sp, #4]
 800459e:	2a25      	cmp	r2, #37	; 0x25
 80045a0:	d16d      	bne.n	800467e <__ssvfiscanf_r+0x16a>
 80045a2:	9347      	str	r3, [sp, #284]	; 0x11c
 80045a4:	9345      	str	r3, [sp, #276]	; 0x114
 80045a6:	787b      	ldrb	r3, [r7, #1]
 80045a8:	2b2a      	cmp	r3, #42	; 0x2a
 80045aa:	d102      	bne.n	80045b2 <__ssvfiscanf_r+0x9e>
 80045ac:	3b1a      	subs	r3, #26
 80045ae:	9345      	str	r3, [sp, #276]	; 0x114
 80045b0:	1cbe      	adds	r6, r7, #2
 80045b2:	0037      	movs	r7, r6
 80045b4:	220a      	movs	r2, #10
 80045b6:	7839      	ldrb	r1, [r7, #0]
 80045b8:	1c7b      	adds	r3, r7, #1
 80045ba:	9302      	str	r3, [sp, #8]
 80045bc:	000b      	movs	r3, r1
 80045be:	3b30      	subs	r3, #48	; 0x30
 80045c0:	2b09      	cmp	r3, #9
 80045c2:	d924      	bls.n	800460e <__ssvfiscanf_r+0xfa>
 80045c4:	4e88      	ldr	r6, [pc, #544]	; (80047e8 <__ssvfiscanf_r+0x2d4>)
 80045c6:	2203      	movs	r2, #3
 80045c8:	0030      	movs	r0, r6
 80045ca:	f000 fae7 	bl	8004b9c <memchr>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d007      	beq.n	80045e2 <__ssvfiscanf_r+0xce>
 80045d2:	2301      	movs	r3, #1
 80045d4:	1b80      	subs	r0, r0, r6
 80045d6:	4083      	lsls	r3, r0
 80045d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80045da:	9f02      	ldr	r7, [sp, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	9203      	str	r2, [sp, #12]
 80045e0:	9345      	str	r3, [sp, #276]	; 0x114
 80045e2:	783b      	ldrb	r3, [r7, #0]
 80045e4:	1c7e      	adds	r6, r7, #1
 80045e6:	2b67      	cmp	r3, #103	; 0x67
 80045e8:	d835      	bhi.n	8004656 <__ssvfiscanf_r+0x142>
 80045ea:	2b65      	cmp	r3, #101	; 0x65
 80045ec:	d300      	bcc.n	80045f0 <__ssvfiscanf_r+0xdc>
 80045ee:	e0b8      	b.n	8004762 <__ssvfiscanf_r+0x24e>
 80045f0:	2b47      	cmp	r3, #71	; 0x47
 80045f2:	d814      	bhi.n	800461e <__ssvfiscanf_r+0x10a>
 80045f4:	2b45      	cmp	r3, #69	; 0x45
 80045f6:	d300      	bcc.n	80045fa <__ssvfiscanf_r+0xe6>
 80045f8:	e0b3      	b.n	8004762 <__ssvfiscanf_r+0x24e>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d100      	bne.n	8004600 <__ssvfiscanf_r+0xec>
 80045fe:	e0e8      	b.n	80047d2 <__ssvfiscanf_r+0x2be>
 8004600:	2b25      	cmp	r3, #37	; 0x25
 8004602:	d03c      	beq.n	800467e <__ssvfiscanf_r+0x16a>
 8004604:	2303      	movs	r3, #3
 8004606:	934b      	str	r3, [sp, #300]	; 0x12c
 8004608:	3307      	adds	r3, #7
 800460a:	9346      	str	r3, [sp, #280]	; 0x118
 800460c:	e066      	b.n	80046dc <__ssvfiscanf_r+0x1c8>
 800460e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004610:	9f02      	ldr	r7, [sp, #8]
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	4353      	muls	r3, r2
 8004616:	3b30      	subs	r3, #48	; 0x30
 8004618:	1859      	adds	r1, r3, r1
 800461a:	9147      	str	r1, [sp, #284]	; 0x11c
 800461c:	e7cb      	b.n	80045b6 <__ssvfiscanf_r+0xa2>
 800461e:	2b5b      	cmp	r3, #91	; 0x5b
 8004620:	d100      	bne.n	8004624 <__ssvfiscanf_r+0x110>
 8004622:	e07a      	b.n	800471a <__ssvfiscanf_r+0x206>
 8004624:	d810      	bhi.n	8004648 <__ssvfiscanf_r+0x134>
 8004626:	2b58      	cmp	r3, #88	; 0x58
 8004628:	d1ec      	bne.n	8004604 <__ssvfiscanf_r+0xf0>
 800462a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800462c:	9201      	str	r2, [sp, #4]
 800462e:	2280      	movs	r2, #128	; 0x80
 8004630:	9901      	ldr	r1, [sp, #4]
 8004632:	0092      	lsls	r2, r2, #2
 8004634:	430a      	orrs	r2, r1
 8004636:	9245      	str	r2, [sp, #276]	; 0x114
 8004638:	2210      	movs	r2, #16
 800463a:	9246      	str	r2, [sp, #280]	; 0x118
 800463c:	226e      	movs	r2, #110	; 0x6e
 800463e:	429a      	cmp	r2, r3
 8004640:	419b      	sbcs	r3, r3
 8004642:	425b      	negs	r3, r3
 8004644:	3303      	adds	r3, #3
 8004646:	e048      	b.n	80046da <__ssvfiscanf_r+0x1c6>
 8004648:	2b63      	cmp	r3, #99	; 0x63
 800464a:	d100      	bne.n	800464e <__ssvfiscanf_r+0x13a>
 800464c:	e072      	b.n	8004734 <__ssvfiscanf_r+0x220>
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d1d8      	bne.n	8004604 <__ssvfiscanf_r+0xf0>
 8004652:	220a      	movs	r2, #10
 8004654:	e7f1      	b.n	800463a <__ssvfiscanf_r+0x126>
 8004656:	2b70      	cmp	r3, #112	; 0x70
 8004658:	d035      	beq.n	80046c6 <__ssvfiscanf_r+0x1b2>
 800465a:	d808      	bhi.n	800466e <__ssvfiscanf_r+0x15a>
 800465c:	2b6e      	cmp	r3, #110	; 0x6e
 800465e:	d100      	bne.n	8004662 <__ssvfiscanf_r+0x14e>
 8004660:	e070      	b.n	8004744 <__ssvfiscanf_r+0x230>
 8004662:	d837      	bhi.n	80046d4 <__ssvfiscanf_r+0x1c0>
 8004664:	2b69      	cmp	r3, #105	; 0x69
 8004666:	d1cd      	bne.n	8004604 <__ssvfiscanf_r+0xf0>
 8004668:	2300      	movs	r3, #0
 800466a:	9346      	str	r3, [sp, #280]	; 0x118
 800466c:	e7ea      	b.n	8004644 <__ssvfiscanf_r+0x130>
 800466e:	2b75      	cmp	r3, #117	; 0x75
 8004670:	d0ef      	beq.n	8004652 <__ssvfiscanf_r+0x13e>
 8004672:	2b78      	cmp	r3, #120	; 0x78
 8004674:	d0d9      	beq.n	800462a <__ssvfiscanf_r+0x116>
 8004676:	2b73      	cmp	r3, #115	; 0x73
 8004678:	d1c4      	bne.n	8004604 <__ssvfiscanf_r+0xf0>
 800467a:	2302      	movs	r3, #2
 800467c:	e02d      	b.n	80046da <__ssvfiscanf_r+0x1c6>
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	dd0f      	ble.n	80046a4 <__ssvfiscanf_r+0x190>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	9901      	ldr	r1, [sp, #4]
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	428a      	cmp	r2, r1
 800468c:	d000      	beq.n	8004690 <__ssvfiscanf_r+0x17c>
 800468e:	e0a3      	b.n	80047d8 <__ssvfiscanf_r+0x2c4>
 8004690:	3301      	adds	r3, #1
 8004692:	6862      	ldr	r2, [r4, #4]
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004698:	3a01      	subs	r2, #1
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	3301      	adds	r3, #1
 800469e:	6062      	str	r2, [r4, #4]
 80046a0:	9349      	str	r3, [sp, #292]	; 0x124
 80046a2:	e766      	b.n	8004572 <__ssvfiscanf_r+0x5e>
 80046a4:	ab45      	add	r3, sp, #276	; 0x114
 80046a6:	595b      	ldr	r3, [r3, r5]
 80046a8:	0021      	movs	r1, r4
 80046aa:	9800      	ldr	r0, [sp, #0]
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	4798      	blx	r3
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d0e7      	beq.n	8004684 <__ssvfiscanf_r+0x170>
 80046b4:	9848      	ldr	r0, [sp, #288]	; 0x120
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d000      	beq.n	80046bc <__ssvfiscanf_r+0x1a8>
 80046ba:	e086      	b.n	80047ca <__ssvfiscanf_r+0x2b6>
 80046bc:	3801      	subs	r0, #1
 80046be:	23a7      	movs	r3, #167	; 0xa7
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	449d      	add	sp, r3
 80046c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80046c8:	9201      	str	r2, [sp, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	9901      	ldr	r1, [sp, #4]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	9245      	str	r2, [sp, #276]	; 0x114
 80046d2:	e7aa      	b.n	800462a <__ssvfiscanf_r+0x116>
 80046d4:	2308      	movs	r3, #8
 80046d6:	9346      	str	r3, [sp, #280]	; 0x118
 80046d8:	3b04      	subs	r3, #4
 80046da:	934b      	str	r3, [sp, #300]	; 0x12c
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	dd41      	ble.n	8004766 <__ssvfiscanf_r+0x252>
 80046e2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	065b      	lsls	r3, r3, #25
 80046e8:	d408      	bmi.n	80046fc <__ssvfiscanf_r+0x1e8>
 80046ea:	f7ff fd9b 	bl	8004224 <__locale_ctype_ptr>
 80046ee:	2108      	movs	r1, #8
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	1880      	adds	r0, r0, r2
 80046f6:	7842      	ldrb	r2, [r0, #1]
 80046f8:	420a      	tst	r2, r1
 80046fa:	d13d      	bne.n	8004778 <__ssvfiscanf_r+0x264>
 80046fc:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80046fe:	2b02      	cmp	r3, #2
 8004700:	dc4f      	bgt.n	80047a2 <__ssvfiscanf_r+0x28e>
 8004702:	ab04      	add	r3, sp, #16
 8004704:	0022      	movs	r2, r4
 8004706:	a945      	add	r1, sp, #276	; 0x114
 8004708:	9800      	ldr	r0, [sp, #0]
 800470a:	f000 f871 	bl	80047f0 <_scanf_chars>
 800470e:	2801      	cmp	r0, #1
 8004710:	d062      	beq.n	80047d8 <__ssvfiscanf_r+0x2c4>
 8004712:	2802      	cmp	r0, #2
 8004714:	d000      	beq.n	8004718 <__ssvfiscanf_r+0x204>
 8004716:	e72c      	b.n	8004572 <__ssvfiscanf_r+0x5e>
 8004718:	e7cc      	b.n	80046b4 <__ssvfiscanf_r+0x1a0>
 800471a:	0031      	movs	r1, r6
 800471c:	a805      	add	r0, sp, #20
 800471e:	f000 f9cf 	bl	8004ac0 <__sccl>
 8004722:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004724:	0006      	movs	r6, r0
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	2340      	movs	r3, #64	; 0x40
 800472a:	9a01      	ldr	r2, [sp, #4]
 800472c:	4313      	orrs	r3, r2
 800472e:	9345      	str	r3, [sp, #276]	; 0x114
 8004730:	2301      	movs	r3, #1
 8004732:	e7d2      	b.n	80046da <__ssvfiscanf_r+0x1c6>
 8004734:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	2340      	movs	r3, #64	; 0x40
 800473a:	9a01      	ldr	r2, [sp, #4]
 800473c:	4313      	orrs	r3, r2
 800473e:	9345      	str	r3, [sp, #276]	; 0x114
 8004740:	2300      	movs	r3, #0
 8004742:	e7ca      	b.n	80046da <__ssvfiscanf_r+0x1c6>
 8004744:	9845      	ldr	r0, [sp, #276]	; 0x114
 8004746:	06c3      	lsls	r3, r0, #27
 8004748:	d500      	bpl.n	800474c <__ssvfiscanf_r+0x238>
 800474a:	e712      	b.n	8004572 <__ssvfiscanf_r+0x5e>
 800474c:	9b04      	ldr	r3, [sp, #16]
 800474e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004750:	1d19      	adds	r1, r3, #4
 8004752:	9104      	str	r1, [sp, #16]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	07c7      	lsls	r7, r0, #31
 8004758:	d501      	bpl.n	800475e <__ssvfiscanf_r+0x24a>
 800475a:	801a      	strh	r2, [r3, #0]
 800475c:	e709      	b.n	8004572 <__ssvfiscanf_r+0x5e>
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	e707      	b.n	8004572 <__ssvfiscanf_r+0x5e>
 8004762:	2305      	movs	r3, #5
 8004764:	e7b9      	b.n	80046da <__ssvfiscanf_r+0x1c6>
 8004766:	ab45      	add	r3, sp, #276	; 0x114
 8004768:	595b      	ldr	r3, [r3, r5]
 800476a:	0021      	movs	r1, r4
 800476c:	9800      	ldr	r0, [sp, #0]
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	4798      	blx	r3
 8004772:	2800      	cmp	r0, #0
 8004774:	d0b5      	beq.n	80046e2 <__ssvfiscanf_r+0x1ce>
 8004776:	e79d      	b.n	80046b4 <__ssvfiscanf_r+0x1a0>
 8004778:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800477a:	9201      	str	r2, [sp, #4]
 800477c:	3201      	adds	r2, #1
 800477e:	9249      	str	r2, [sp, #292]	; 0x124
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	3a01      	subs	r2, #1
 8004784:	6062      	str	r2, [r4, #4]
 8004786:	2a00      	cmp	r2, #0
 8004788:	dd02      	ble.n	8004790 <__ssvfiscanf_r+0x27c>
 800478a:	3301      	adds	r3, #1
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	e7ac      	b.n	80046ea <__ssvfiscanf_r+0x1d6>
 8004790:	ab45      	add	r3, sp, #276	; 0x114
 8004792:	595b      	ldr	r3, [r3, r5]
 8004794:	0021      	movs	r1, r4
 8004796:	9800      	ldr	r0, [sp, #0]
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	4798      	blx	r3
 800479c:	2800      	cmp	r0, #0
 800479e:	d0a4      	beq.n	80046ea <__ssvfiscanf_r+0x1d6>
 80047a0:	e788      	b.n	80046b4 <__ssvfiscanf_r+0x1a0>
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	dc06      	bgt.n	80047b4 <__ssvfiscanf_r+0x2a0>
 80047a6:	ab04      	add	r3, sp, #16
 80047a8:	0022      	movs	r2, r4
 80047aa:	a945      	add	r1, sp, #276	; 0x114
 80047ac:	9800      	ldr	r0, [sp, #0]
 80047ae:	f000 f885 	bl	80048bc <_scanf_i>
 80047b2:	e7ac      	b.n	800470e <__ssvfiscanf_r+0x1fa>
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <__ssvfiscanf_r+0x2d8>)
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d100      	bne.n	80047bc <__ssvfiscanf_r+0x2a8>
 80047ba:	e6da      	b.n	8004572 <__ssvfiscanf_r+0x5e>
 80047bc:	ab04      	add	r3, sp, #16
 80047be:	0022      	movs	r2, r4
 80047c0:	a945      	add	r1, sp, #276	; 0x114
 80047c2:	9800      	ldr	r0, [sp, #0]
 80047c4:	e000      	b.n	80047c8 <__ssvfiscanf_r+0x2b4>
 80047c6:	bf00      	nop
 80047c8:	e7a1      	b.n	800470e <__ssvfiscanf_r+0x1fa>
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	065b      	lsls	r3, r3, #25
 80047ce:	d400      	bmi.n	80047d2 <__ssvfiscanf_r+0x2be>
 80047d0:	e775      	b.n	80046be <__ssvfiscanf_r+0x1aa>
 80047d2:	2001      	movs	r0, #1
 80047d4:	4240      	negs	r0, r0
 80047d6:	e772      	b.n	80046be <__ssvfiscanf_r+0x1aa>
 80047d8:	9848      	ldr	r0, [sp, #288]	; 0x120
 80047da:	e770      	b.n	80046be <__ssvfiscanf_r+0x1aa>
 80047dc:	fffffd64 	.word	0xfffffd64
 80047e0:	0800445d 	.word	0x0800445d
 80047e4:	080044d5 	.word	0x080044d5
 80047e8:	08004e4c 	.word	0x08004e4c
 80047ec:	00000000 	.word	0x00000000

080047f0 <_scanf_chars>:
 80047f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f2:	0015      	movs	r5, r2
 80047f4:	688a      	ldr	r2, [r1, #8]
 80047f6:	9001      	str	r0, [sp, #4]
 80047f8:	000c      	movs	r4, r1
 80047fa:	2a00      	cmp	r2, #0
 80047fc:	d104      	bne.n	8004808 <_scanf_chars+0x18>
 80047fe:	698a      	ldr	r2, [r1, #24]
 8004800:	2a00      	cmp	r2, #0
 8004802:	d117      	bne.n	8004834 <_scanf_chars+0x44>
 8004804:	3201      	adds	r2, #1
 8004806:	60a2      	str	r2, [r4, #8]
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	06d2      	lsls	r2, r2, #27
 800480c:	d403      	bmi.n	8004816 <_scanf_chars+0x26>
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	1d11      	adds	r1, r2, #4
 8004812:	6019      	str	r1, [r3, #0]
 8004814:	6817      	ldr	r7, [r2, #0]
 8004816:	2600      	movs	r6, #0
 8004818:	69a3      	ldr	r3, [r4, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01f      	beq.n	800485e <_scanf_chars+0x6e>
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10b      	bne.n	800483a <_scanf_chars+0x4a>
 8004822:	682b      	ldr	r3, [r5, #0]
 8004824:	6962      	ldr	r2, [r4, #20]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	5cd3      	ldrb	r3, [r2, r3]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d117      	bne.n	800485e <_scanf_chars+0x6e>
 800482e:	2e00      	cmp	r6, #0
 8004830:	d133      	bne.n	800489a <_scanf_chars+0xaa>
 8004832:	e009      	b.n	8004848 <_scanf_chars+0x58>
 8004834:	2201      	movs	r2, #1
 8004836:	4252      	negs	r2, r2
 8004838:	e7e5      	b.n	8004806 <_scanf_chars+0x16>
 800483a:	2b02      	cmp	r3, #2
 800483c:	d006      	beq.n	800484c <_scanf_chars+0x5c>
 800483e:	2e00      	cmp	r6, #0
 8004840:	d12b      	bne.n	800489a <_scanf_chars+0xaa>
 8004842:	69a3      	ldr	r3, [r4, #24]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d128      	bne.n	800489a <_scanf_chars+0xaa>
 8004848:	2001      	movs	r0, #1
 800484a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800484c:	f7ff fcea 	bl	8004224 <__locale_ctype_ptr>
 8004850:	2208      	movs	r2, #8
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	18c0      	adds	r0, r0, r3
 8004858:	7843      	ldrb	r3, [r0, #1]
 800485a:	4213      	tst	r3, r2
 800485c:	d1ef      	bne.n	800483e <_scanf_chars+0x4e>
 800485e:	2210      	movs	r2, #16
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	3601      	adds	r6, #1
 8004864:	4213      	tst	r3, r2
 8004866:	d103      	bne.n	8004870 <_scanf_chars+0x80>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	703b      	strb	r3, [r7, #0]
 800486e:	3701      	adds	r7, #1
 8004870:	682a      	ldr	r2, [r5, #0]
 8004872:	686b      	ldr	r3, [r5, #4]
 8004874:	3201      	adds	r2, #1
 8004876:	602a      	str	r2, [r5, #0]
 8004878:	68a2      	ldr	r2, [r4, #8]
 800487a:	3b01      	subs	r3, #1
 800487c:	3a01      	subs	r2, #1
 800487e:	606b      	str	r3, [r5, #4]
 8004880:	60a2      	str	r2, [r4, #8]
 8004882:	2a00      	cmp	r2, #0
 8004884:	d009      	beq.n	800489a <_scanf_chars+0xaa>
 8004886:	2b00      	cmp	r3, #0
 8004888:	dcc6      	bgt.n	8004818 <_scanf_chars+0x28>
 800488a:	23c0      	movs	r3, #192	; 0xc0
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	58e3      	ldr	r3, [r4, r3]
 8004890:	0029      	movs	r1, r5
 8004892:	9801      	ldr	r0, [sp, #4]
 8004894:	4798      	blx	r3
 8004896:	2800      	cmp	r0, #0
 8004898:	d0be      	beq.n	8004818 <_scanf_chars+0x28>
 800489a:	2310      	movs	r3, #16
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	4013      	ands	r3, r2
 80048a0:	d106      	bne.n	80048b0 <_scanf_chars+0xc0>
 80048a2:	68e2      	ldr	r2, [r4, #12]
 80048a4:	3201      	adds	r2, #1
 80048a6:	60e2      	str	r2, [r4, #12]
 80048a8:	69a2      	ldr	r2, [r4, #24]
 80048aa:	2a00      	cmp	r2, #0
 80048ac:	d000      	beq.n	80048b0 <_scanf_chars+0xc0>
 80048ae:	703b      	strb	r3, [r7, #0]
 80048b0:	6923      	ldr	r3, [r4, #16]
 80048b2:	2000      	movs	r0, #0
 80048b4:	199e      	adds	r6, r3, r6
 80048b6:	6126      	str	r6, [r4, #16]
 80048b8:	e7c7      	b.n	800484a <_scanf_chars+0x5a>
	...

080048bc <_scanf_i>:
 80048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048be:	000c      	movs	r4, r1
 80048c0:	b08b      	sub	sp, #44	; 0x2c
 80048c2:	9302      	str	r3, [sp, #8]
 80048c4:	4b78      	ldr	r3, [pc, #480]	; (8004aa8 <_scanf_i+0x1ec>)
 80048c6:	9004      	str	r0, [sp, #16]
 80048c8:	0016      	movs	r6, r2
 80048ca:	aa07      	add	r2, sp, #28
 80048cc:	cb23      	ldmia	r3!, {r0, r1, r5}
 80048ce:	c223      	stmia	r2!, {r0, r1, r5}
 80048d0:	4b76      	ldr	r3, [pc, #472]	; (8004aac <_scanf_i+0x1f0>)
 80048d2:	9305      	str	r3, [sp, #20]
 80048d4:	69a3      	ldr	r3, [r4, #24]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d101      	bne.n	80048de <_scanf_i+0x22>
 80048da:	4b75      	ldr	r3, [pc, #468]	; (8004ab0 <_scanf_i+0x1f4>)
 80048dc:	9305      	str	r3, [sp, #20]
 80048de:	22ae      	movs	r2, #174	; 0xae
 80048e0:	2000      	movs	r0, #0
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	0052      	lsls	r2, r2, #1
 80048e6:	1e59      	subs	r1, r3, #1
 80048e8:	9003      	str	r0, [sp, #12]
 80048ea:	4291      	cmp	r1, r2
 80048ec:	d905      	bls.n	80048fa <_scanf_i+0x3e>
 80048ee:	3b5e      	subs	r3, #94	; 0x5e
 80048f0:	3bff      	subs	r3, #255	; 0xff
 80048f2:	9303      	str	r3, [sp, #12]
 80048f4:	235e      	movs	r3, #94	; 0x5e
 80048f6:	33ff      	adds	r3, #255	; 0xff
 80048f8:	60a3      	str	r3, [r4, #8]
 80048fa:	0023      	movs	r3, r4
 80048fc:	331c      	adds	r3, #28
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	23d0      	movs	r3, #208	; 0xd0
 8004902:	2700      	movs	r7, #0
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	4313      	orrs	r3, r2
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	9b01      	ldr	r3, [sp, #4]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	6833      	ldr	r3, [r6, #0]
 8004912:	a807      	add	r0, sp, #28
 8004914:	7819      	ldrb	r1, [r3, #0]
 8004916:	00bb      	lsls	r3, r7, #2
 8004918:	2202      	movs	r2, #2
 800491a:	5818      	ldr	r0, [r3, r0]
 800491c:	f000 f93e 	bl	8004b9c <memchr>
 8004920:	2800      	cmp	r0, #0
 8004922:	d02b      	beq.n	800497c <_scanf_i+0xc0>
 8004924:	2f01      	cmp	r7, #1
 8004926:	d162      	bne.n	80049ee <_scanf_i+0x132>
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <_scanf_i+0x80>
 800492e:	3308      	adds	r3, #8
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	6063      	str	r3, [r4, #4]
 8004934:	33f9      	adds	r3, #249	; 0xf9
 8004936:	33ff      	adds	r3, #255	; 0xff
 8004938:	4313      	orrs	r3, r2
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	4b5d      	ldr	r3, [pc, #372]	; (8004ab4 <_scanf_i+0x1f8>)
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	4013      	ands	r3, r2
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	1e5a      	subs	r2, r3, #1
 8004948:	60a2      	str	r2, [r4, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <_scanf_i+0xc0>
 800494e:	6833      	ldr	r3, [r6, #0]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	6032      	str	r2, [r6, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	9a00      	ldr	r2, [sp, #0]
 8004958:	7013      	strb	r3, [r2, #0]
 800495a:	6873      	ldr	r3, [r6, #4]
 800495c:	1c55      	adds	r5, r2, #1
 800495e:	3b01      	subs	r3, #1
 8004960:	6073      	str	r3, [r6, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	dc09      	bgt.n	800497a <_scanf_i+0xbe>
 8004966:	23c0      	movs	r3, #192	; 0xc0
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	58e3      	ldr	r3, [r4, r3]
 800496c:	0031      	movs	r1, r6
 800496e:	9804      	ldr	r0, [sp, #16]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4798      	blx	r3
 8004974:	2800      	cmp	r0, #0
 8004976:	d000      	beq.n	800497a <_scanf_i+0xbe>
 8004978:	e080      	b.n	8004a7c <_scanf_i+0x1c0>
 800497a:	9500      	str	r5, [sp, #0]
 800497c:	3701      	adds	r7, #1
 800497e:	2f03      	cmp	r7, #3
 8004980:	d1c6      	bne.n	8004910 <_scanf_i+0x54>
 8004982:	6863      	ldr	r3, [r4, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <_scanf_i+0xd0>
 8004988:	330a      	adds	r3, #10
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	2110      	movs	r1, #16
 800498e:	2700      	movs	r7, #0
 8004990:	6863      	ldr	r3, [r4, #4]
 8004992:	6960      	ldr	r0, [r4, #20]
 8004994:	1ac9      	subs	r1, r1, r3
 8004996:	4b48      	ldr	r3, [pc, #288]	; (8004ab8 <_scanf_i+0x1fc>)
 8004998:	18c9      	adds	r1, r1, r3
 800499a:	f000 f891 	bl	8004ac0 <__sccl>
 800499e:	9d00      	ldr	r5, [sp, #0]
 80049a0:	68a3      	ldr	r3, [r4, #8]
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d041      	beq.n	8004a2e <_scanf_i+0x172>
 80049aa:	6831      	ldr	r1, [r6, #0]
 80049ac:	6963      	ldr	r3, [r4, #20]
 80049ae:	7808      	ldrb	r0, [r1, #0]
 80049b0:	5c1b      	ldrb	r3, [r3, r0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d03b      	beq.n	8004a2e <_scanf_i+0x172>
 80049b6:	2830      	cmp	r0, #48	; 0x30
 80049b8:	d129      	bne.n	8004a0e <_scanf_i+0x152>
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	421a      	tst	r2, r3
 80049c0:	d025      	beq.n	8004a0e <_scanf_i+0x152>
 80049c2:	9b03      	ldr	r3, [sp, #12]
 80049c4:	3701      	adds	r7, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <_scanf_i+0x11a>
 80049ca:	001a      	movs	r2, r3
 80049cc:	9b00      	ldr	r3, [sp, #0]
 80049ce:	3a01      	subs	r2, #1
 80049d0:	3301      	adds	r3, #1
 80049d2:	9203      	str	r2, [sp, #12]
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	6873      	ldr	r3, [r6, #4]
 80049d8:	3b01      	subs	r3, #1
 80049da:	6073      	str	r3, [r6, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dd1d      	ble.n	8004a1c <_scanf_i+0x160>
 80049e0:	6833      	ldr	r3, [r6, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	60a3      	str	r3, [r4, #8]
 80049ec:	e7d8      	b.n	80049a0 <_scanf_i+0xe4>
 80049ee:	2f02      	cmp	r7, #2
 80049f0:	d1a8      	bne.n	8004944 <_scanf_i+0x88>
 80049f2:	21c0      	movs	r1, #192	; 0xc0
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	00c9      	lsls	r1, r1, #3
 80049fa:	4011      	ands	r1, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4299      	cmp	r1, r3
 8004a00:	d1bf      	bne.n	8004982 <_scanf_i+0xc6>
 8004a02:	3bf1      	subs	r3, #241	; 0xf1
 8004a04:	3bff      	subs	r3, #255	; 0xff
 8004a06:	6063      	str	r3, [r4, #4]
 8004a08:	33f0      	adds	r3, #240	; 0xf0
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	e799      	b.n	8004942 <_scanf_i+0x86>
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <_scanf_i+0x200>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	780b      	ldrb	r3, [r1, #0]
 8004a16:	702b      	strb	r3, [r5, #0]
 8004a18:	3501      	adds	r5, #1
 8004a1a:	e7dc      	b.n	80049d6 <_scanf_i+0x11a>
 8004a1c:	23c0      	movs	r3, #192	; 0xc0
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	58e3      	ldr	r3, [r4, r3]
 8004a22:	0031      	movs	r1, r6
 8004a24:	9804      	ldr	r0, [sp, #16]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	4798      	blx	r3
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d0db      	beq.n	80049e6 <_scanf_i+0x12a>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	05db      	lsls	r3, r3, #23
 8004a32:	d50e      	bpl.n	8004a52 <_scanf_i+0x196>
 8004a34:	9b01      	ldr	r3, [sp, #4]
 8004a36:	429d      	cmp	r5, r3
 8004a38:	d907      	bls.n	8004a4a <_scanf_i+0x18e>
 8004a3a:	23be      	movs	r3, #190	; 0xbe
 8004a3c:	3d01      	subs	r5, #1
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	7829      	ldrb	r1, [r5, #0]
 8004a42:	58e3      	ldr	r3, [r4, r3]
 8004a44:	0032      	movs	r2, r6
 8004a46:	9804      	ldr	r0, [sp, #16]
 8004a48:	4798      	blx	r3
 8004a4a:	9b01      	ldr	r3, [sp, #4]
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	429d      	cmp	r5, r3
 8004a50:	d027      	beq.n	8004aa2 <_scanf_i+0x1e6>
 8004a52:	2210      	movs	r2, #16
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	401a      	ands	r2, r3
 8004a58:	d11c      	bne.n	8004a94 <_scanf_i+0x1d8>
 8004a5a:	702a      	strb	r2, [r5, #0]
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	9901      	ldr	r1, [sp, #4]
 8004a60:	9804      	ldr	r0, [sp, #16]
 8004a62:	9e05      	ldr	r6, [sp, #20]
 8004a64:	47b0      	blx	r6
 8004a66:	9b02      	ldr	r3, [sp, #8]
 8004a68:	6821      	ldr	r1, [r4, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	068a      	lsls	r2, r1, #26
 8004a6e:	d507      	bpl.n	8004a80 <_scanf_i+0x1c4>
 8004a70:	1d1a      	adds	r2, r3, #4
 8004a72:	9902      	ldr	r1, [sp, #8]
 8004a74:	600a      	str	r2, [r1, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6018      	str	r0, [r3, #0]
 8004a7a:	e008      	b.n	8004a8e <_scanf_i+0x1d2>
 8004a7c:	2700      	movs	r7, #0
 8004a7e:	e7d6      	b.n	8004a2e <_scanf_i+0x172>
 8004a80:	1d1a      	adds	r2, r3, #4
 8004a82:	07ce      	lsls	r6, r1, #31
 8004a84:	d5f5      	bpl.n	8004a72 <_scanf_i+0x1b6>
 8004a86:	9902      	ldr	r1, [sp, #8]
 8004a88:	600a      	str	r2, [r1, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	8018      	strh	r0, [r3, #0]
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60e3      	str	r3, [r4, #12]
 8004a94:	2000      	movs	r0, #0
 8004a96:	9b01      	ldr	r3, [sp, #4]
 8004a98:	1aed      	subs	r5, r5, r3
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	19ef      	adds	r7, r5, r7
 8004a9e:	19df      	adds	r7, r3, r7
 8004aa0:	6127      	str	r7, [r4, #16]
 8004aa2:	b00b      	add	sp, #44	; 0x2c
 8004aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	08004c28 	.word	0x08004c28
 8004aac:	080043f9 	.word	0x080043f9
 8004ab0:	08003ad9 	.word	0x08003ad9
 8004ab4:	fffffaff 	.word	0xfffffaff
 8004ab8:	08004e50 	.word	0x08004e50
 8004abc:	fffff6ff 	.word	0xfffff6ff

08004ac0 <__sccl>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	780b      	ldrb	r3, [r1, #0]
 8004ac4:	0005      	movs	r5, r0
 8004ac6:	2b5e      	cmp	r3, #94	; 0x5e
 8004ac8:	d018      	beq.n	8004afc <__sccl+0x3c>
 8004aca:	1c4a      	adds	r2, r1, #1
 8004acc:	2100      	movs	r1, #0
 8004ace:	0028      	movs	r0, r5
 8004ad0:	1c6c      	adds	r4, r5, #1
 8004ad2:	34ff      	adds	r4, #255	; 0xff
 8004ad4:	7001      	strb	r1, [r0, #0]
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	42a0      	cmp	r0, r4
 8004ada:	d1fb      	bne.n	8004ad4 <__sccl+0x14>
 8004adc:	1e50      	subs	r0, r2, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <__sccl+0x3a>
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	4041      	eors	r1, r0
 8004ae6:	54e9      	strb	r1, [r5, r3]
 8004ae8:	7814      	ldrb	r4, [r2, #0]
 8004aea:	1c50      	adds	r0, r2, #1
 8004aec:	2c2d      	cmp	r4, #45	; 0x2d
 8004aee:	d00c      	beq.n	8004b0a <__sccl+0x4a>
 8004af0:	2c5d      	cmp	r4, #93	; 0x5d
 8004af2:	d002      	beq.n	8004afa <__sccl+0x3a>
 8004af4:	2c00      	cmp	r4, #0
 8004af6:	d105      	bne.n	8004b04 <__sccl+0x44>
 8004af8:	0010      	movs	r0, r2
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	1c8a      	adds	r2, r1, #2
 8004afe:	784b      	ldrb	r3, [r1, #1]
 8004b00:	2101      	movs	r1, #1
 8004b02:	e7e4      	b.n	8004ace <__sccl+0xe>
 8004b04:	0023      	movs	r3, r4
 8004b06:	0002      	movs	r2, r0
 8004b08:	e7ed      	b.n	8004ae6 <__sccl+0x26>
 8004b0a:	7856      	ldrb	r6, [r2, #1]
 8004b0c:	2e5d      	cmp	r6, #93	; 0x5d
 8004b0e:	d0f9      	beq.n	8004b04 <__sccl+0x44>
 8004b10:	42b3      	cmp	r3, r6
 8004b12:	dcf7      	bgt.n	8004b04 <__sccl+0x44>
 8004b14:	3202      	adds	r2, #2
 8004b16:	3301      	adds	r3, #1
 8004b18:	54e9      	strb	r1, [r5, r3]
 8004b1a:	429e      	cmp	r6, r3
 8004b1c:	dcfb      	bgt.n	8004b16 <__sccl+0x56>
 8004b1e:	e7e3      	b.n	8004ae8 <__sccl+0x28>

08004b20 <__submore>:
 8004b20:	000b      	movs	r3, r1
 8004b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b24:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004b26:	3344      	adds	r3, #68	; 0x44
 8004b28:	000c      	movs	r4, r1
 8004b2a:	429d      	cmp	r5, r3
 8004b2c:	d11c      	bne.n	8004b68 <__submore+0x48>
 8004b2e:	2680      	movs	r6, #128	; 0x80
 8004b30:	00f6      	lsls	r6, r6, #3
 8004b32:	0031      	movs	r1, r6
 8004b34:	f7fe fed6 	bl	80038e4 <_malloc_r>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d102      	bne.n	8004b42 <__submore+0x22>
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	4240      	negs	r0, r0
 8004b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b42:	0023      	movs	r3, r4
 8004b44:	6360      	str	r0, [r4, #52]	; 0x34
 8004b46:	63a6      	str	r6, [r4, #56]	; 0x38
 8004b48:	3346      	adds	r3, #70	; 0x46
 8004b4a:	781a      	ldrb	r2, [r3, #0]
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <__submore+0x70>)
 8004b4e:	54c2      	strb	r2, [r0, r3]
 8004b50:	0023      	movs	r3, r4
 8004b52:	3345      	adds	r3, #69	; 0x45
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <__submore+0x74>)
 8004b58:	54c2      	strb	r2, [r0, r3]
 8004b5a:	782a      	ldrb	r2, [r5, #0]
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <__submore+0x78>)
 8004b5e:	54c2      	strb	r2, [r0, r3]
 8004b60:	18c0      	adds	r0, r0, r3
 8004b62:	6020      	str	r0, [r4, #0]
 8004b64:	2000      	movs	r0, #0
 8004b66:	e7eb      	b.n	8004b40 <__submore+0x20>
 8004b68:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8004b6a:	0029      	movs	r1, r5
 8004b6c:	0073      	lsls	r3, r6, #1
 8004b6e:	001a      	movs	r2, r3
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	f000 f81e 	bl	8004bb2 <_realloc_r>
 8004b76:	1e05      	subs	r5, r0, #0
 8004b78:	d0e0      	beq.n	8004b3c <__submore+0x1c>
 8004b7a:	1987      	adds	r7, r0, r6
 8004b7c:	0001      	movs	r1, r0
 8004b7e:	0032      	movs	r2, r6
 8004b80:	0038      	movs	r0, r7
 8004b82:	f7ff fb6f 	bl	8004264 <memcpy>
 8004b86:	9b01      	ldr	r3, [sp, #4]
 8004b88:	6027      	str	r7, [r4, #0]
 8004b8a:	6365      	str	r5, [r4, #52]	; 0x34
 8004b8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b8e:	e7e9      	b.n	8004b64 <__submore+0x44>
 8004b90:	000003ff 	.word	0x000003ff
 8004b94:	000003fe 	.word	0x000003fe
 8004b98:	000003fd 	.word	0x000003fd

08004b9c <memchr>:
 8004b9c:	b2c9      	uxtb	r1, r1
 8004b9e:	1882      	adds	r2, r0, r2
 8004ba0:	4290      	cmp	r0, r2
 8004ba2:	d101      	bne.n	8004ba8 <memchr+0xc>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	4770      	bx	lr
 8004ba8:	7803      	ldrb	r3, [r0, #0]
 8004baa:	428b      	cmp	r3, r1
 8004bac:	d0fb      	beq.n	8004ba6 <memchr+0xa>
 8004bae:	3001      	adds	r0, #1
 8004bb0:	e7f6      	b.n	8004ba0 <memchr+0x4>

08004bb2 <_realloc_r>:
 8004bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb4:	0007      	movs	r7, r0
 8004bb6:	000d      	movs	r5, r1
 8004bb8:	0016      	movs	r6, r2
 8004bba:	2900      	cmp	r1, #0
 8004bbc:	d105      	bne.n	8004bca <_realloc_r+0x18>
 8004bbe:	0011      	movs	r1, r2
 8004bc0:	f7fe fe90 	bl	80038e4 <_malloc_r>
 8004bc4:	0004      	movs	r4, r0
 8004bc6:	0020      	movs	r0, r4
 8004bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	d103      	bne.n	8004bd6 <_realloc_r+0x24>
 8004bce:	f7fe fe3f 	bl	8003850 <_free_r>
 8004bd2:	0034      	movs	r4, r6
 8004bd4:	e7f7      	b.n	8004bc6 <_realloc_r+0x14>
 8004bd6:	f000 f812 	bl	8004bfe <_malloc_usable_size_r>
 8004bda:	002c      	movs	r4, r5
 8004bdc:	42b0      	cmp	r0, r6
 8004bde:	d2f2      	bcs.n	8004bc6 <_realloc_r+0x14>
 8004be0:	0031      	movs	r1, r6
 8004be2:	0038      	movs	r0, r7
 8004be4:	f7fe fe7e 	bl	80038e4 <_malloc_r>
 8004be8:	1e04      	subs	r4, r0, #0
 8004bea:	d0ec      	beq.n	8004bc6 <_realloc_r+0x14>
 8004bec:	0029      	movs	r1, r5
 8004bee:	0032      	movs	r2, r6
 8004bf0:	f7ff fb38 	bl	8004264 <memcpy>
 8004bf4:	0029      	movs	r1, r5
 8004bf6:	0038      	movs	r0, r7
 8004bf8:	f7fe fe2a 	bl	8003850 <_free_r>
 8004bfc:	e7e3      	b.n	8004bc6 <_realloc_r+0x14>

08004bfe <_malloc_usable_size_r>:
 8004bfe:	1f0b      	subs	r3, r1, #4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	1f18      	subs	r0, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da01      	bge.n	8004c0c <_malloc_usable_size_r+0xe>
 8004c08:	580b      	ldr	r3, [r1, r0]
 8004c0a:	18c0      	adds	r0, r0, r3
 8004c0c:	4770      	bx	lr
	...

08004c10 <_init>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr

08004c1c <_fini>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr
