
STM32L010C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002778  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002838  08002838  00012838  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a4  080028a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028ac  080028ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080028b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000004  080028b8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080028b8  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b98a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020aa  00000000  00000000  0002b9b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004e73  00000000  00000000  0002da60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000910  00000000  00000000  000328d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a90  00000000  00000000  000331e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011a2c  00000000  00000000  00033c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000099df  00000000  00000000  000456a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006cfad  00000000  00000000  0004f083  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000bc030  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a1c  00000000  00000000  000bc0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002820 	.word	0x08002820

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002820 	.word	0x08002820

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	464f      	mov	r7, r9
 8000288:	4646      	mov	r6, r8
 800028a:	46d6      	mov	lr, sl
 800028c:	b5c0      	push	{r6, r7, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	b082      	sub	sp, #8
 8000292:	000d      	movs	r5, r1
 8000294:	4691      	mov	r9, r2
 8000296:	4698      	mov	r8, r3
 8000298:	428b      	cmp	r3, r1
 800029a:	d82f      	bhi.n	80002fc <__udivmoddi4+0x78>
 800029c:	d02c      	beq.n	80002f8 <__udivmoddi4+0x74>
 800029e:	4641      	mov	r1, r8
 80002a0:	4648      	mov	r0, r9
 80002a2:	f000 f8b1 	bl	8000408 <__clzdi2>
 80002a6:	0029      	movs	r1, r5
 80002a8:	0006      	movs	r6, r0
 80002aa:	0020      	movs	r0, r4
 80002ac:	f000 f8ac 	bl	8000408 <__clzdi2>
 80002b0:	1a33      	subs	r3, r6, r0
 80002b2:	469c      	mov	ip, r3
 80002b4:	3b20      	subs	r3, #32
 80002b6:	469a      	mov	sl, r3
 80002b8:	d500      	bpl.n	80002bc <__udivmoddi4+0x38>
 80002ba:	e076      	b.n	80003aa <__udivmoddi4+0x126>
 80002bc:	464b      	mov	r3, r9
 80002be:	4652      	mov	r2, sl
 80002c0:	4093      	lsls	r3, r2
 80002c2:	001f      	movs	r7, r3
 80002c4:	464b      	mov	r3, r9
 80002c6:	4662      	mov	r2, ip
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d828      	bhi.n	8000322 <__udivmoddi4+0x9e>
 80002d0:	d025      	beq.n	800031e <__udivmoddi4+0x9a>
 80002d2:	4653      	mov	r3, sl
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	41bd      	sbcs	r5, r7
 80002d8:	2b00      	cmp	r3, #0
 80002da:	da00      	bge.n	80002de <__udivmoddi4+0x5a>
 80002dc:	e07b      	b.n	80003d6 <__udivmoddi4+0x152>
 80002de:	2200      	movs	r2, #0
 80002e0:	2300      	movs	r3, #0
 80002e2:	9200      	str	r2, [sp, #0]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2301      	movs	r3, #1
 80002e8:	4652      	mov	r2, sl
 80002ea:	4093      	lsls	r3, r2
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2301      	movs	r3, #1
 80002f0:	4662      	mov	r2, ip
 80002f2:	4093      	lsls	r3, r2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	e018      	b.n	800032a <__udivmoddi4+0xa6>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	d9d0      	bls.n	800029e <__udivmoddi4+0x1a>
 80002fc:	2200      	movs	r2, #0
 80002fe:	2300      	movs	r3, #0
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <__udivmoddi4+0x8a>
 800030a:	601c      	str	r4, [r3, #0]
 800030c:	605d      	str	r5, [r3, #4]
 800030e:	9800      	ldr	r0, [sp, #0]
 8000310:	9901      	ldr	r1, [sp, #4]
 8000312:	b002      	add	sp, #8
 8000314:	bc1c      	pop	{r2, r3, r4}
 8000316:	4690      	mov	r8, r2
 8000318:	4699      	mov	r9, r3
 800031a:	46a2      	mov	sl, r4
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	42a3      	cmp	r3, r4
 8000320:	d9d7      	bls.n	80002d2 <__udivmoddi4+0x4e>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	4663      	mov	r3, ip
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0e9      	beq.n	8000304 <__udivmoddi4+0x80>
 8000330:	07fb      	lsls	r3, r7, #31
 8000332:	4698      	mov	r8, r3
 8000334:	4641      	mov	r1, r8
 8000336:	0872      	lsrs	r2, r6, #1
 8000338:	430a      	orrs	r2, r1
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	4666      	mov	r6, ip
 800033e:	e00e      	b.n	800035e <__udivmoddi4+0xda>
 8000340:	42ab      	cmp	r3, r5
 8000342:	d101      	bne.n	8000348 <__udivmoddi4+0xc4>
 8000344:	42a2      	cmp	r2, r4
 8000346:	d80c      	bhi.n	8000362 <__udivmoddi4+0xde>
 8000348:	1aa4      	subs	r4, r4, r2
 800034a:	419d      	sbcs	r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	1924      	adds	r4, r4, r4
 8000350:	416d      	adcs	r5, r5
 8000352:	2100      	movs	r1, #0
 8000354:	3e01      	subs	r6, #1
 8000356:	1824      	adds	r4, r4, r0
 8000358:	414d      	adcs	r5, r1
 800035a:	2e00      	cmp	r6, #0
 800035c:	d006      	beq.n	800036c <__udivmoddi4+0xe8>
 800035e:	42ab      	cmp	r3, r5
 8000360:	d9ee      	bls.n	8000340 <__udivmoddi4+0xbc>
 8000362:	3e01      	subs	r6, #1
 8000364:	1924      	adds	r4, r4, r4
 8000366:	416d      	adcs	r5, r5
 8000368:	2e00      	cmp	r6, #0
 800036a:	d1f8      	bne.n	800035e <__udivmoddi4+0xda>
 800036c:	9800      	ldr	r0, [sp, #0]
 800036e:	9901      	ldr	r1, [sp, #4]
 8000370:	4653      	mov	r3, sl
 8000372:	1900      	adds	r0, r0, r4
 8000374:	4169      	adcs	r1, r5
 8000376:	2b00      	cmp	r3, #0
 8000378:	db23      	blt.n	80003c2 <__udivmoddi4+0x13e>
 800037a:	002b      	movs	r3, r5
 800037c:	4652      	mov	r2, sl
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	4664      	mov	r4, ip
 8000384:	40e2      	lsrs	r2, r4
 8000386:	001c      	movs	r4, r3
 8000388:	4653      	mov	r3, sl
 800038a:	0015      	movs	r5, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	db2d      	blt.n	80003ec <__udivmoddi4+0x168>
 8000390:	0026      	movs	r6, r4
 8000392:	4657      	mov	r7, sl
 8000394:	40be      	lsls	r6, r7
 8000396:	0033      	movs	r3, r6
 8000398:	0026      	movs	r6, r4
 800039a:	4667      	mov	r7, ip
 800039c:	40be      	lsls	r6, r7
 800039e:	0032      	movs	r2, r6
 80003a0:	1a80      	subs	r0, r0, r2
 80003a2:	4199      	sbcs	r1, r3
 80003a4:	9000      	str	r0, [sp, #0]
 80003a6:	9101      	str	r1, [sp, #4]
 80003a8:	e7ac      	b.n	8000304 <__udivmoddi4+0x80>
 80003aa:	4662      	mov	r2, ip
 80003ac:	2320      	movs	r3, #32
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	464a      	mov	r2, r9
 80003b2:	40da      	lsrs	r2, r3
 80003b4:	4661      	mov	r1, ip
 80003b6:	0013      	movs	r3, r2
 80003b8:	4642      	mov	r2, r8
 80003ba:	408a      	lsls	r2, r1
 80003bc:	0017      	movs	r7, r2
 80003be:	431f      	orrs	r7, r3
 80003c0:	e780      	b.n	80002c4 <__udivmoddi4+0x40>
 80003c2:	4662      	mov	r2, ip
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4666      	mov	r6, ip
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4313      	orrs	r3, r2
 80003d4:	e7d4      	b.n	8000380 <__udivmoddi4+0xfc>
 80003d6:	4662      	mov	r2, ip
 80003d8:	2320      	movs	r3, #32
 80003da:	2100      	movs	r1, #0
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	2200      	movs	r2, #0
 80003e0:	9100      	str	r1, [sp, #0]
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	2201      	movs	r2, #1
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	9201      	str	r2, [sp, #4]
 80003ea:	e780      	b.n	80002ee <__udivmoddi4+0x6a>
 80003ec:	2320      	movs	r3, #32
 80003ee:	4662      	mov	r2, ip
 80003f0:	0026      	movs	r6, r4
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	40de      	lsrs	r6, r3
 80003f6:	002f      	movs	r7, r5
 80003f8:	46b0      	mov	r8, r6
 80003fa:	4666      	mov	r6, ip
 80003fc:	40b7      	lsls	r7, r6
 80003fe:	4646      	mov	r6, r8
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c8      	b.n	8000398 <__udivmoddi4+0x114>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <MX_LPUART1_UART_Init+0x28>)
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <MX_LPUART1_UART_Init+0x2c>)
{
 8000460:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8000462:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000464:	2396      	movs	r3, #150	; 0x96
 8000466:	019b      	lsls	r3, r3, #6
 8000468:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800046a:	220c      	movs	r2, #12
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046c:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800046e:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000470:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000472:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000474:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000478:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800047a:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800047c:	f002 f912 	bl	80026a4 <HAL_UART_Init>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	20000024 	.word	0x20000024
 8000488:	40004800 	.word	0x40004800

0800048c <stm32l_lowPowerSetup>:
	__HAL_RCC_PWR_CLK_ENABLE(); // Enable Power Control clock
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <stm32l_lowPowerSetup+0x34>)
 8000490:	055b      	lsls	r3, r3, #21
 8000492:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8000494:	b510      	push	{r4, lr}
	__HAL_RCC_PWR_CLK_ENABLE(); // Enable Power Control clock
 8000496:	430b      	orrs	r3, r1
 8000498:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_PWR_EnableBkUpAccess (); //Enable access to the backup domain (RTC registers, RTC backup data registers).
 800049a:	f000 ffb7 	bl	800140c <HAL_PWR_EnableBkUpAccess>
	HAL_PWREx_EnableUltraLowPower(); // Ultra low power mode
 800049e:	f000 ffe5 	bl	800146c <HAL_PWREx_EnableUltraLowPower>
	HAL_PWREx_EnableFastWakeUp(); // Fast wake-up for ultra low power mode
 80004a2:	f000 ffd9 	bl	8001458 <HAL_PWREx_EnableFastWakeUp>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80004a6:	2304      	movs	r3, #4
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <stm32l_lowPowerSetup+0x38>)
 80004aa:	6811      	ldr	r1, [r2, #0]
 80004ac:	430b      	orrs	r3, r1
 80004ae:	6013      	str	r3, [r2, #0]
	HAL_SuspendTick();
 80004b0:	f000 fc22 	bl	8000cf8 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80004b4:	2101      	movs	r1, #1
 80004b6:	0008      	movs	r0, r1
 80004b8:	f000 ffb2 	bl	8001420 <HAL_PWR_EnterSTOPMode>
}
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40007000 	.word	0x40007000

080004c8 <HAL_RTC_AlarmAEventCallback>:
  if (SUM_HOUR == HOUR_EVERY_MSG - 1){
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80004ca:	7813      	ldrb	r3, [r2, #0]
 80004cc:	2b05      	cmp	r3, #5
 80004ce:	d105      	bne.n	80004dc <HAL_RTC_AlarmAEventCallback+0x14>
	 time_flag = TRUE;
 80004d0:	2101      	movs	r1, #1
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_RTC_AlarmAEventCallback+0x20>)
 80004d4:	7019      	strb	r1, [r3, #0]
	 SUM_HOUR = 0;
 80004d6:	2300      	movs	r3, #0
	 SUM_HOUR++;
 80004d8:	7013      	strb	r3, [r2, #0]
}
 80004da:	4770      	bx	lr
	 SUM_HOUR++;
 80004dc:	7813      	ldrb	r3, [r2, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	e7f9      	b.n	80004d8 <HAL_RTC_AlarmAEventCallback+0x10>
 80004e4:	200000a5 	.word	0x200000a5
 80004e8:	200000a4 	.word	0x200000a4

080004ec <COUNTER_CONSUMER>:
	SUM_DEC++;
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <COUNTER_CONSUMER+0x18>)
 80004ee:	7813      	ldrb	r3, [r2, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	7013      	strb	r3, [r2, #0]
	SUM_COUNTER--;
 80004f6:	4a04      	ldr	r2, [pc, #16]	; (8000508 <COUNTER_CONSUMER+0x1c>)
 80004f8:	7813      	ldrb	r3, [r2, #0]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	7013      	strb	r3, [r2, #0]
}
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000020 	.word	0x20000020
 8000508:	20000021 	.word	0x20000021

0800050c <TRANSMIT_WSSFM10R2AT>:
void TRANSMIT_WSSFM10R2AT(char * buff, int ArrayLength){
 800050c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800050e:	0006      	movs	r6, r0
 8000510:	000d      	movs	r5, r1
	sprintf(AT_COMANDO,"AT$RC\r\n");
 8000512:	a801      	add	r0, sp, #4
 8000514:	4918      	ldr	r1, [pc, #96]	; (8000578 <TRANSMIT_WSSFM10R2AT+0x6c>)
 8000516:	f002 f93f 	bl	8002798 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 800051a:	a801      	add	r0, sp, #4
 800051c:	f7ff fdf4 	bl	8000108 <strlen>
 8000520:	4c16      	ldr	r4, [pc, #88]	; (800057c <TRANSMIT_WSSFM10R2AT+0x70>)
 8000522:	b282      	uxth	r2, r0
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	a901      	add	r1, sp, #4
 8000528:	0020      	movs	r0, r4
 800052a:	f002 f821 	bl	8002570 <HAL_UART_Transmit>
	HAL_Delay(100);
 800052e:	2064      	movs	r0, #100	; 0x64
 8000530:	f000 fbd2 	bl	8000cd8 <HAL_Delay>
	sprintf(AT_COMANDO,"AT$SF=");
 8000534:	4912      	ldr	r1, [pc, #72]	; (8000580 <TRANSMIT_WSSFM10R2AT+0x74>)
 8000536:	a801      	add	r0, sp, #4
 8000538:	f002 f92e 	bl	8002798 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 800053c:	a801      	add	r0, sp, #4
 800053e:	f7ff fde3 	bl	8000108 <strlen>
 8000542:	a901      	add	r1, sp, #4
 8000544:	b282      	uxth	r2, r0
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	0020      	movs	r0, r4
 800054a:	f002 f811 	bl	8002570 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)buff,(uint16_t)ArrayLength,(uint32_t)100);
 800054e:	b2aa      	uxth	r2, r5
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	0031      	movs	r1, r6
 8000554:	0020      	movs	r0, r4
 8000556:	f002 f80b 	bl	8002570 <HAL_UART_Transmit>
    sprintf(AT_COMANDO,"\r\n");
 800055a:	490a      	ldr	r1, [pc, #40]	; (8000584 <TRANSMIT_WSSFM10R2AT+0x78>)
 800055c:	a801      	add	r0, sp, #4
 800055e:	f002 f91b 	bl	8002798 <strcpy>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 8000562:	a801      	add	r0, sp, #4
 8000564:	f7ff fdd0 	bl	8000108 <strlen>
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	b282      	uxth	r2, r0
 800056c:	a901      	add	r1, sp, #4
 800056e:	0020      	movs	r0, r4
 8000570:	f001 fffe 	bl	8002570 <HAL_UART_Transmit>
}
 8000574:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	08002841 	.word	0x08002841
 800057c:	20000024 	.word	0x20000024
 8000580:	08002849 	.word	0x08002849
 8000584:	0800283e 	.word	0x0800283e

08000588 <CONFIG_CHANNEL_ADC>:
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000588:	2380      	movs	r3, #128	; 0x80
uint32_t CONFIG_CHANNEL_ADC(uint32_t channel){
 800058a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800058c:	4c0e      	ldr	r4, [pc, #56]	; (80005c8 <CONFIG_CHANNEL_ADC+0x40>)
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800058e:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000590:	4669      	mov	r1, sp
	sConfig.Channel = channel;
 8000592:	9000      	str	r0, [sp, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000594:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000596:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000598:	f000 fde8 	bl	800116c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 800059c:	0020      	movs	r0, r4
 800059e:	f000 fd39 	bl	8001014 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 80005a2:	2164      	movs	r1, #100	; 0x64
 80005a4:	0020      	movs	r0, r4
 80005a6:	f000 fd7f 	bl	80010a8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc);
 80005aa:	0020      	movs	r0, r4
 80005ac:	f000 fdda 	bl	8001164 <HAL_ADC_GetValue>
 80005b0:	0005      	movs	r5, r0
	HAL_ADC_Stop(&hadc);
 80005b2:	0020      	movs	r0, r4
 80005b4:	f000 fd5a 	bl	800106c <HAL_ADC_Stop>
	sConfig.Rank = ADC_RANK_NONE;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <CONFIG_CHANNEL_ADC+0x44>)
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80005ba:	4669      	mov	r1, sp
 80005bc:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 80005be:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80005c0:	f000 fdd4 	bl	800116c <HAL_ADC_ConfigChannel>
}
 80005c4:	0028      	movs	r0, r5
 80005c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80005c8:	200000cc 	.word	0x200000cc
 80005cc:	00001001 	.word	0x00001001

080005d0 <GET_MEAS_BAT>:
uint32_t GET_MEAS_BAT(void){
 80005d0:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin, GPIO_PIN_SET);
 80005d2:	24a0      	movs	r4, #160	; 0xa0
 80005d4:	05e4      	lsls	r4, r4, #23
 80005d6:	2201      	movs	r2, #1
 80005d8:	2110      	movs	r1, #16
 80005da:	0020      	movs	r0, r4
 80005dc:	f000 fefe 	bl	80013dc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005e0:	2032      	movs	r0, #50	; 0x32
 80005e2:	f000 fb79 	bl	8000cd8 <HAL_Delay>
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6600/4095;
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <GET_MEAS_BAT+0x34>)
 80005e8:	f7ff ffce 	bl	8000588 <CONFIG_CHANNEL_ADC>
 80005ec:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	0020      	movs	r0, r4
 80005f2:	2110      	movs	r1, #16
 80005f4:	f000 fef2 	bl	80013dc <HAL_GPIO_WritePin>
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6600/4095;
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <GET_MEAS_BAT+0x38>)
 80005fa:	4904      	ldr	r1, [pc, #16]	; (800060c <GET_MEAS_BAT+0x3c>)
 80005fc:	4368      	muls	r0, r5
 80005fe:	f7ff fd95 	bl	800012c <__udivsi3>
}
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	04000002 	.word	0x04000002
 8000608:	000019c8 	.word	0x000019c8
 800060c:	00000fff 	.word	0x00000fff

08000610 <WAKE_WSSFM10R2AT>:
{
 8000610:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_RESET);
 8000612:	24a0      	movs	r4, #160	; 0xa0
 8000614:	05e4      	lsls	r4, r4, #23
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	0020      	movs	r0, r4
 800061c:	f000 fede 	bl	80013dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f000 fb59 	bl	8000cd8 <HAL_Delay>
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2120      	movs	r1, #32
 800062a:	0020      	movs	r0, r4
 800062c:	f000 fed6 	bl	80013dc <HAL_GPIO_WritePin>
	HAL_Delay(500);  // Wait for the wisol to be prepared
 8000630:	20fa      	movs	r0, #250	; 0xfa
 8000632:	0040      	lsls	r0, r0, #1
 8000634:	f000 fb50 	bl	8000cd8 <HAL_Delay>
}
 8000638:	bd10      	pop	{r4, pc}
	...

0800063c <DEEP_SLEEP_WSSFM10R2AT>:
{
 800063c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sprintf(AT,"AT$P=2\r\n");
 800063e:	4909      	ldr	r1, [pc, #36]	; (8000664 <DEEP_SLEEP_WSSFM10R2AT+0x28>)
 8000640:	a801      	add	r0, sp, #4
 8000642:	f002 f8a9 	bl	8002798 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT,(uint16_t)strlen(AT),(uint32_t)100);
 8000646:	a801      	add	r0, sp, #4
 8000648:	f7ff fd5e 	bl	8000108 <strlen>
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	b282      	uxth	r2, r0
 8000650:	a901      	add	r1, sp, #4
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <DEEP_SLEEP_WSSFM10R2AT+0x2c>)
 8000654:	f001 ff8c 	bl	8002570 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000658:	2064      	movs	r0, #100	; 0x64
 800065a:	f000 fb3d 	bl	8000cd8 <HAL_Delay>
}
 800065e:	b005      	add	sp, #20
 8000660:	bd00      	pop	{pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	08002838 	.word	0x08002838
 8000668:	20000024 	.word	0x20000024

0800066c <DATA_ASSIGMENT>:
{
 800066c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800066e:	001f      	movs	r7, r3
 8000670:	000e      	movs	r6, r1
 8000672:	0005      	movs	r5, r0
	memset(conversion_buff,'\0',5);
 8000674:	2100      	movs	r1, #0
{
 8000676:	0014      	movs	r4, r2
	memset(conversion_buff,'\0',5);
 8000678:	4668      	mov	r0, sp
 800067a:	2205      	movs	r2, #5
 800067c:	f002 f884 	bl	8002788 <memset>
	itoa(s,conversion_buff,t);//Convert int S to String in HEX
 8000680:	003a      	movs	r2, r7
 8000682:	4669      	mov	r1, sp
 8000684:	0030      	movs	r0, r6
 8000686:	f002 f87b 	bl	8002780 <itoa>
	uint8_t dig_count=0;//Digit Counter
 800068a:	2300      	movs	r3, #0
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 800068c:	466a      	mov	r2, sp
 800068e:	5cd2      	ldrb	r2, [r2, r3]
 8000690:	2a00      	cmp	r2, #0
 8000692:	d108      	bne.n	80006a6 <DATA_ASSIGMENT+0x3a>
	for (i = (loc-dig_count)+1; j < dig_count; ++i)//Data arrangement in output buffer
 8000694:	3401      	adds	r4, #1
 8000696:	1ae4      	subs	r4, r4, r3
 8000698:	b2e4      	uxtb	r4, r4
 800069a:	b2d0      	uxtb	r0, r2
 800069c:	1821      	adds	r1, r4, r0
 800069e:	b2c9      	uxtb	r1, r1
 80006a0:	4283      	cmp	r3, r0
 80006a2:	d803      	bhi.n	80006ac <DATA_ASSIGMENT+0x40>
}
 80006a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 80006a6:	3301      	adds	r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	e7ef      	b.n	800068c <DATA_ASSIGMENT+0x20>
		 buff[i] = conversion_buff[j];
 80006ac:	4668      	mov	r0, sp
 80006ae:	5c80      	ldrb	r0, [r0, r2]
 80006b0:	3201      	adds	r2, #1
 80006b2:	5468      	strb	r0, [r5, r1]
 80006b4:	e7f1      	b.n	800069a <DATA_ASSIGMENT+0x2e>
	...

080006b8 <BUILD_DATA_TO_SEND>:
{
 80006b8:	b510      	push	{r4, lr}
	memset(buff,'0',10); //Clear memory variable
 80006ba:	220a      	movs	r2, #10
 80006bc:	2130      	movs	r1, #48	; 0x30
{
 80006be:	0004      	movs	r4, r0
	memset(buff,'0',10); //Clear memory variable
 80006c0:	f002 f862 	bl	8002788 <memset>
	DATA_ASSIGMENT(buff,GET_MEAS_BAT(),VOLT_LOCA,16);
 80006c4:	f7ff ff84 	bl	80005d0 <GET_MEAS_BAT>
 80006c8:	2310      	movs	r3, #16
 80006ca:	b281      	uxth	r1, r0
 80006cc:	2209      	movs	r2, #9
 80006ce:	0020      	movs	r0, r4
 80006d0:	f7ff ffcc 	bl	800066c <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,SUM_DEC,DATA_LOCA,16);
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <BUILD_DATA_TO_SEND+0x38>)
 80006d6:	0020      	movs	r0, r4
 80006d8:	7819      	ldrb	r1, [r3, #0]
 80006da:	2203      	movs	r2, #3
 80006dc:	2310      	movs	r3, #16
 80006de:	f7ff ffc5 	bl	800066c <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,version,VERSION_LOCA,16);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2310      	movs	r3, #16
 80006e6:	0011      	movs	r1, r2
 80006e8:	0020      	movs	r0, r4
 80006ea:	f7ff ffbf 	bl	800066c <DATA_ASSIGMENT>
}
 80006ee:	bd10      	pop	{r4, pc}
 80006f0:	20000020 	.word	0x20000020

080006f4 <CASES_CHOICE>:
{
 80006f4:	b570      	push	{r4, r5, r6, lr}
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 80006f6:	4c15      	ldr	r4, [pc, #84]	; (800074c <CASES_CHOICE+0x58>)
{
 80006f8:	0005      	movs	r5, r0
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 80006fa:	7823      	ldrb	r3, [r4, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <CASES_CHOICE+0x1a>
 8000700:	7823      	ldrb	r3, [r4, #0]
 8000702:	2b0a      	cmp	r3, #10
 8000704:	d803      	bhi.n	800070e <CASES_CHOICE+0x1a>
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <CASES_CHOICE+0x5c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d118      	bne.n	8000740 <CASES_CHOICE+0x4c>
			HAL_Delay(30);
 800070e:	201e      	movs	r0, #30
 8000710:	f000 fae2 	bl	8000cd8 <HAL_Delay>
			if ((SUM_COUNTER==0) || (SUM_COUNTER > SUM_THRD)){
 8000714:	7823      	ldrb	r3, [r4, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <CASES_CHOICE+0x2c>
 800071a:	7823      	ldrb	r3, [r4, #0]
 800071c:	2b0a      	cmp	r3, #10
 800071e:	d910      	bls.n	8000742 <CASES_CHOICE+0x4e>
			   SUM_COUNTER = SUM_THRD;
 8000720:	230a      	movs	r3, #10
 8000722:	7023      	strb	r3, [r4, #0]
			BUILD_DATA_TO_SEND(buff);
 8000724:	0028      	movs	r0, r5
 8000726:	f7ff ffc7 	bl	80006b8 <BUILD_DATA_TO_SEND>
			WAKE_WSSFM10R2AT();
 800072a:	f7ff ff71 	bl	8000610 <WAKE_WSSFM10R2AT>
			TRANSMIT_WSSFM10R2AT(buff,10);
 800072e:	210a      	movs	r1, #10
 8000730:	0028      	movs	r0, r5
 8000732:	f7ff feeb 	bl	800050c <TRANSMIT_WSSFM10R2AT>
			DEEP_SLEEP_WSSFM10R2AT();
 8000736:	f7ff ff81 	bl	800063c <DEEP_SLEEP_WSSFM10R2AT>
			SUM_DEC=0;
 800073a:	2200      	movs	r2, #0
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <CASES_CHOICE+0x60>)
 800073e:	701a      	strb	r2, [r3, #0]
}
 8000740:	bd70      	pop	{r4, r5, r6, pc}
			   time_flag = FALSE;
 8000742:	2200      	movs	r2, #0
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <CASES_CHOICE+0x5c>)
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	e7ec      	b.n	8000724 <CASES_CHOICE+0x30>
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000021 	.word	0x20000021
 8000750:	200000a4 	.word	0x200000a4
 8000754:	20000020 	.word	0x20000020

08000758 <SystemClock_Config>:
{
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075c:	2230      	movs	r2, #48	; 0x30
 800075e:	2100      	movs	r1, #0
 8000760:	a80c      	add	r0, sp, #48	; 0x30
 8000762:	f002 f811 	bl	8002788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	2214      	movs	r2, #20
 8000768:	2100      	movs	r1, #0
 800076a:	4668      	mov	r0, sp
 800076c:	f002 f80c 	bl	8002788 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000770:	2218      	movs	r2, #24
 8000772:	2100      	movs	r1, #0
 8000774:	a805      	add	r0, sp, #20
 8000776:	f002 f807 	bl	8002788 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077a:	4915      	ldr	r1, [pc, #84]	; (80007d0 <SystemClock_Config+0x78>)
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <SystemClock_Config+0x7c>)
 800077e:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	401a      	ands	r2, r3
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	4313      	orrs	r3, r2
 800078a:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800078c:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000790:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	3306      	adds	r3, #6
 8000796:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800079a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f000 feaf 	bl	8001500 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a4:	0021      	movs	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007aa:	3371      	adds	r3, #113	; 0x71
 80007ac:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ae:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b4:	f001 f8f6 	bl	80019a4 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC;
 80007b8:	2324      	movs	r3, #36	; 0x24
 80007ba:	9305      	str	r3, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007bc:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007be:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007c0:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007c2:	9408      	str	r4, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007c4:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c6:	f001 f9c5 	bl	8001b54 <HAL_RCCEx_PeriphCLKConfig>
}
 80007ca:	b019      	add	sp, #100	; 0x64
 80007cc:	bd30      	pop	{r4, r5, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	40007000 	.word	0x40007000
 80007d4:	ffffe7ff 	.word	0xffffe7ff

080007d8 <stm32l_lowPowerResume>:
void stm32l_lowPowerResume(void){
 80007d8:	b510      	push	{r4, lr}
	HAL_ResumeTick();
 80007da:	f000 fa95 	bl	8000d08 <HAL_ResumeTick>
	SystemClock_Config();
 80007de:	f7ff ffbb 	bl	8000758 <SystemClock_Config>
	MX_LPUART1_UART_Init();
 80007e2:	f7ff fe3b 	bl	800045c <MX_LPUART1_UART_Init>
}
 80007e6:	bd10      	pop	{r4, pc}

080007e8 <main>:
{
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	SUM_DEC=0;
 80007ea:	2400      	movs	r4, #0
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	2704      	movs	r7, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2601      	movs	r6, #1
	SUM_DEC=0;
 80007f0:	4b71      	ldr	r3, [pc, #452]	; (80009b8 <main+0x1d0>)
{
 80007f2:	b095      	sub	sp, #84	; 0x54
	SUM_DEC=0;
 80007f4:	701c      	strb	r4, [r3, #0]
	SUM_HOUR=0;
 80007f6:	4b71      	ldr	r3, [pc, #452]	; (80009bc <main+0x1d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	ad0a      	add	r5, sp, #40	; 0x28
	SUM_HOUR=0;
 80007fa:	701c      	strb	r4, [r3, #0]
  HAL_Init();
 80007fc:	f000 fa4a 	bl	8000c94 <HAL_Init>
  SystemClock_Config();
 8000800:	f7ff ffaa 	bl	8000758 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	2214      	movs	r2, #20
 8000806:	0021      	movs	r1, r4
 8000808:	0028      	movs	r0, r5
 800080a:	f001 ffbd 	bl	8002788 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000810:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b6b      	ldr	r3, [pc, #428]	; (80009c0 <main+0x1d8>)
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000814:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000818:	433a      	orrs	r2, r7
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
 800081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081e:	403a      	ands	r2, r7
 8000820:	9202      	str	r2, [sp, #8]
 8000822:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000826:	4332      	orrs	r2, r6
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082c:	4032      	ands	r2, r6
 800082e:	9203      	str	r2, [sp, #12]
 8000830:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000834:	430a      	orrs	r2, r1
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 800083a:	0022      	movs	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	400b      	ands	r3, r1
 800083e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000840:	318e      	adds	r1, #142	; 0x8e
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000844:	f000 fdca 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WAKE_DS_WISOL_Pin|RST_WISOL_Pin, GPIO_PIN_SET);
 8000848:	20a0      	movs	r0, #160	; 0xa0
 800084a:	0032      	movs	r2, r6
 800084c:	2160      	movs	r1, #96	; 0x60
 800084e:	05c0      	lsls	r0, r0, #23
 8000850:	f000 fdc4 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HALL_SENS_IRQ_Pin */
  GPIO_InitStruct.Pin = HALL_SENS_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000854:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000856:	4b5b      	ldr	r3, [pc, #364]	; (80009c4 <main+0x1dc>)
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000858:	0029      	movs	r1, r5
 800085a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = HALL_SENS_IRQ_Pin;
 800085c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085e:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000860:	60ae      	str	r6, [r5, #8]
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000862:	f000 fd0f 	bl	8001284 <HAL_GPIO_Init>
  /*Configure GPIO pins : EN_BAT_MEAS_Pin EN_VCC3V3s_Pin */
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
 8000868:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	0029      	movs	r1, r5
 800086c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
 800086e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	606e      	str	r6, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	60ae      	str	r6, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f000 fd05 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_DS_WISOL_Pin RST_WISOL_Pin */
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 800087a:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 800087e:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	0029      	movs	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000882:	3b4f      	subs	r3, #79	; 0x4f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000886:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f000 fcfa 	bl	8001284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000890:	0022      	movs	r2, r4
 8000892:	0021      	movs	r1, r4
 8000894:	2005      	movs	r0, #5
 8000896:	f000 fca7 	bl	80011e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800089a:	2005      	movs	r0, #5
 800089c:	f000 fcce 	bl	800123c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a0:	2208      	movs	r2, #8
 80008a2:	0021      	movs	r1, r4
 80008a4:	0028      	movs	r0, r5
 80008a6:	f001 ff6f 	bl	8002788 <memset>
  hadc.Instance = ADC1;
 80008aa:	4e47      	ldr	r6, [pc, #284]	; (80009c8 <main+0x1e0>)
 80008ac:	4b47      	ldr	r3, [pc, #284]	; (80009cc <main+0x1e4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008ae:	0030      	movs	r0, r6
  hadc.Instance = ADC1;
 80008b0:	6033      	str	r3, [r6, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	6073      	str	r3, [r6, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008b8:	2301      	movs	r3, #1
 80008ba:	6133      	str	r3, [r6, #16]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008bc:	18f3      	adds	r3, r6, r3
 80008be:	77dc      	strb	r4, [r3, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008c0:	1cb3      	adds	r3, r6, #2
 80008c2:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	23c2      	movs	r3, #194	; 0xc2
 80008c6:	33ff      	adds	r3, #255	; 0xff
 80008c8:	6273      	str	r3, [r6, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008ca:	0033      	movs	r3, r6
 80008cc:	332c      	adds	r3, #44	; 0x2c
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ce:	6177      	str	r7, [r6, #20]
  hadc.Init.OversamplingMode = DISABLE;
 80008d0:	63f4      	str	r4, [r6, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008d2:	60b4      	str	r4, [r6, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008d4:	63b4      	str	r4, [r6, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d6:	60f4      	str	r4, [r6, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d8:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008da:	701c      	strb	r4, [r3, #0]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008dc:	6334      	str	r4, [r6, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008de:	61b4      	str	r4, [r6, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80008e0:	6374      	str	r4, [r6, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008e2:	61f4      	str	r4, [r6, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008e4:	f000 fabe 	bl	8000e64 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_1;
 80008e8:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <main+0x1e8>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ea:	0029      	movs	r1, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80008ec:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008ee:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008f0:	0030      	movs	r0, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008f2:	015b      	lsls	r3, r3, #5
 80008f4:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008f6:	f000 fc39 	bl	800116c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 80008fa:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <main+0x1ec>)
  RTC_TimeTypeDef sTime = {0};
 80008fc:	af05      	add	r7, sp, #20
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008fe:	0029      	movs	r1, r5
 8000900:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_3;
 8000902:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000904:	f000 fc32 	bl	800116c <HAL_ADC_ConfigChannel>
  MX_LPUART1_UART_Init();
 8000908:	f7ff fda8 	bl	800045c <MX_LPUART1_UART_Init>
  RTC_TimeTypeDef sTime = {0};
 800090c:	2214      	movs	r2, #20
 800090e:	0021      	movs	r1, r4
 8000910:	0038      	movs	r0, r7
 8000912:	f001 ff39 	bl	8002788 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8000916:	2228      	movs	r2, #40	; 0x28
 8000918:	0021      	movs	r1, r4
 800091a:	0028      	movs	r0, r5
  RTC_DateTypeDef sDate = {0};
 800091c:	9401      	str	r4, [sp, #4]
  RTC_AlarmTypeDef sAlarm = {0};
 800091e:	f001 ff33 	bl	8002788 <memset>
  hrtc.Instance = RTC;
 8000922:	4e2d      	ldr	r6, [pc, #180]	; (80009d8 <main+0x1f0>)
 8000924:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <main+0x1f4>)
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000926:	2102      	movs	r1, #2
  hrtc.Instance = RTC;
 8000928:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 124;
 800092a:	237c      	movs	r3, #124	; 0x7c
 800092c:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 295;
 800092e:	2328      	movs	r3, #40	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000930:	0030      	movs	r0, r6
  hrtc.Init.SynchPrediv = 295;
 8000932:	33ff      	adds	r3, #255	; 0xff
 8000934:	60f3      	str	r3, [r6, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000936:	6171      	str	r1, [r6, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000938:	6074      	str	r4, [r6, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800093a:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800093c:	61b4      	str	r4, [r6, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800093e:	61f4      	str	r4, [r6, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000940:	f001 fa28 	bl	8001d94 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000944:	2201      	movs	r2, #1
 8000946:	0039      	movs	r1, r7
  sTime.Hours = 0x0;
 8000948:	803c      	strh	r4, [r7, #0]
  sTime.Minutes = 0x0;
 800094a:	70bc      	strb	r4, [r7, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800094c:	0030      	movs	r0, r6
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800094e:	60fc      	str	r4, [r7, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000950:	613c      	str	r4, [r7, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000952:	f001 fa87 	bl	8001e64 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x1f8>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000958:	2201      	movs	r2, #1
 800095a:	a901      	add	r1, sp, #4
 800095c:	0030      	movs	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800095e:	9301      	str	r3, [sp, #4]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000960:	f001 fb00 	bl	8001f64 <HAL_RTC_SetDate>
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	041b      	lsls	r3, r3, #16
 8000968:	616b      	str	r3, [r5, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 800096a:	2329      	movs	r3, #41	; 0x29
 800096c:	2201      	movs	r2, #1
 800096e:	446b      	add	r3, sp
  sAlarm.AlarmTime.Hours = 0x0;
 8000970:	802c      	strh	r4, [r5, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000972:	70ac      	strb	r4, [r5, #2]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000974:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8000976:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000978:	2201      	movs	r2, #1
  sAlarm.Alarm = RTC_ALARM_A;
 800097a:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800097c:	0029      	movs	r1, r5
 800097e:	0030      	movs	r0, r6
  sAlarm.Alarm = RTC_ALARM_A;
 8000980:	626b      	str	r3, [r5, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000982:	606c      	str	r4, [r5, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000984:	60ec      	str	r4, [r5, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000986:	612c      	str	r4, [r5, #16]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000988:	61ac      	str	r4, [r5, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800098a:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800098c:	f001 fb56 	bl	800203c <HAL_RTC_SetAlarm_IT>
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0030      	movs	r0, r6
 8000994:	0309      	lsls	r1, r1, #12
 8000996:	f001 fc19 	bl	80021cc <HAL_RTCEx_SetCalibrationOutPut>
  HAL_Delay(2000);
 800099a:	20fa      	movs	r0, #250	; 0xfa
  SUM_COUNTER=0;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <main+0x1fc>)
  HAL_Delay(2000);
 800099e:	00c0      	lsls	r0, r0, #3
  SUM_COUNTER=0;
 80009a0:	701c      	strb	r4, [r3, #0]
  HAL_Delay(2000);
 80009a2:	f000 f999 	bl	8000cd8 <HAL_Delay>
	  CASES_CHOICE(data_buff);
 80009a6:	0028      	movs	r0, r5
 80009a8:	f7ff fea4 	bl	80006f4 <CASES_CHOICE>
	  stm32l_lowPowerSetup();
 80009ac:	f7ff fd6e 	bl	800048c <stm32l_lowPowerSetup>
	  stm32l_lowPowerResume();
 80009b0:	f7ff ff12 	bl	80007d8 <stm32l_lowPowerResume>
 80009b4:	e7f7      	b.n	80009a6 <main+0x1be>
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	20000020 	.word	0x20000020
 80009bc:	200000a5 	.word	0x200000a5
 80009c0:	40021000 	.word	0x40021000
 80009c4:	10210000 	.word	0x10210000
 80009c8:	200000cc 	.word	0x200000cc
 80009cc:	40012400 	.word	0x40012400
 80009d0:	04000002 	.word	0x04000002
 80009d4:	0c000008 	.word	0x0c000008
 80009d8:	200000a8 	.word	0x200000a8
 80009dc:	40002800 	.word	0x40002800
 80009e0:	00010101 	.word	0x00010101
 80009e4:	20000021 	.word	0x20000021

080009e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e8:	2201      	movs	r2, #1
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_MspInit+0x18>)
 80009ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80009f6:	0552      	lsls	r2, r2, #21
 80009f8:	430a      	orrs	r2, r1
 80009fa:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fc:	4770      	bx	lr
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a04:	b510      	push	{r4, lr}
 8000a06:	0004      	movs	r4, r0
 8000a08:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	2214      	movs	r2, #20
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	a801      	add	r0, sp, #4
 8000a10:	f001 feba 	bl	8002788 <memset>
  if(hadc->Instance==ADC1)
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_ADC_MspInit+0x4c>)
 8000a16:	6822      	ldr	r2, [r4, #0]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d116      	bne.n	8000a4a <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_ADC_MspInit+0x50>)
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a26:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a2a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	430a      	orrs	r2, r1
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a36:	400b      	ands	r3, r1
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8000a3c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8000a40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a42:	3b07      	subs	r3, #7
 8000a44:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f000 fc1d 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a4a:	b006      	add	sp, #24
 8000a4c:	bd10      	pop	{r4, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40012400 	.word	0x40012400
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	2214      	movs	r2, #20
 8000a60:	2100      	movs	r1, #0
 8000a62:	a803      	add	r0, sp, #12
 8000a64:	f001 fe90 	bl	8002788 <memset>
  if(huart->Instance==LPUART1)
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x74>)
 8000a6a:	6822      	ldr	r2, [r4, #0]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d12b      	bne.n	8000ac8 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a70:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2404      	movs	r4, #4
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_UART_MspInit+0x78>)
 8000a76:	02d2      	lsls	r2, r2, #11
 8000a78:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2702      	movs	r7, #2
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2603      	movs	r6, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	4322      	orrs	r2, r4
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000a8a:	2506      	movs	r5, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8c:	4022      	ands	r2, r4
 8000a8e:	9201      	str	r2, [sp, #4]
 8000a90:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2201      	movs	r2, #1
 8000a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	9302      	str	r3, [sp, #8]
 8000aa4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000aac:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f000 fbe9 	bl	8001284 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	a903      	add	r1, sp, #12
 8000ab8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aba:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000ac2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f000 fbde 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ac8:	b009      	add	sp, #36	; 0x24
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000acc:	40004800 	.word	0x40004800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	50000800 	.word	0x50000800

08000ad8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ad8:	b510      	push	{r4, lr}
 8000ada:	0004      	movs	r4, r0
 8000adc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	2214      	movs	r2, #20
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	a801      	add	r0, sp, #4
 8000ae4:	f001 fe50 	bl	8002788 <memset>
  if(hrtc->Instance==RTC)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_RTC_MspInit+0x5c>)
 8000aea:	6822      	ldr	r2, [r4, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d11e      	bne.n	8000b2e <HAL_RTC_MspInit+0x56>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000af0:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2402      	movs	r4, #2
    __HAL_RCC_RTC_ENABLE();
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_RTC_MspInit+0x60>)
 8000af6:	02d2      	lsls	r2, r2, #11
 8000af8:	6d19      	ldr	r1, [r3, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_RTC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <HAL_RTC_MspInit+0x64>)
    __HAL_RCC_RTC_ENABLE();
 8000afc:	430a      	orrs	r2, r1
 8000afe:	651a      	str	r2, [r3, #80]	; 0x50
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4322      	orrs	r2, r4
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	4023      	ands	r3, r4
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	01db      	lsls	r3, r3, #7
 8000b16:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_RTC;
 8000b18:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f000 fbb3 	bl	8001284 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	0020      	movs	r0, r4
 8000b22:	0011      	movs	r1, r2
 8000b24:	f000 fb60 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000b28:	0020      	movs	r0, r4
 8000b2a:	f000 fb87 	bl	800123c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b2e:	b006      	add	sp, #24
 8000b30:	bd10      	pop	{r4, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40002800 	.word	0x40002800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	50000400 	.word	0x50000400

08000b40 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b40:	4770      	bx	lr

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler>

08000b44 <SVC_Handler>:
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 f8b7 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4e:	bd10      	pop	{r4, pc}

08000b50 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000b50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b52:	4802      	ldr	r0, [pc, #8]	; (8000b5c <RTC_IRQHandler+0xc>)
 8000b54:	f001 f8b8 	bl	8001cc8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000b58:	bd10      	pop	{r4, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	200000a8 	.word	0x200000a8

08000b60 <EXTI0_1_IRQHandler>:
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
   if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <EXTI0_1_IRQHandler+0x20>)
{
 8000b62:	b510      	push	{r4, lr}
   if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	07db      	lsls	r3, r3, #31
 8000b68:	d506      	bpl.n	8000b78 <EXTI0_1_IRQHandler+0x18>
	  HAL_GPIO_TogglePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin);
 8000b6a:	20a0      	movs	r0, #160	; 0xa0
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	05c0      	lsls	r0, r0, #23
 8000b70:	f000 fc3a 	bl	80013e8 <HAL_GPIO_TogglePin>
	  COUNTER_CONSUMER();
 8000b74:	f7ff fcba 	bl	80004ec <COUNTER_CONSUMER>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 fc3b 	bl	80013f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b7e:	bd10      	pop	{r4, pc}
 8000b80:	40010400 	.word	0x40010400

08000b84 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <SystemInit+0x44>)
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <SystemInit+0x48>)
 8000b94:	400a      	ands	r2, r1
 8000b96:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <SystemInit+0x4c>)
 8000b9c:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b9e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000ba0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	438a      	bics	r2, r1
 8000ba6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	490a      	ldr	r1, [pc, #40]	; (8000bd4 <SystemInit+0x50>)
 8000bac:	400a      	ands	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	4909      	ldr	r1, [pc, #36]	; (8000bd8 <SystemInit+0x54>)
 8000bb4:	400a      	ands	r2, r1
 8000bb6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <SystemInit+0x58>)
 8000bc0:	0512      	lsls	r2, r2, #20
 8000bc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bc4:	4770      	bx	lr
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	88ff400c 	.word	0x88ff400c
 8000bd0:	fef6fff6 	.word	0xfef6fff6
 8000bd4:	fffbffff 	.word	0xfffbffff
 8000bd8:	ff02ffff 	.word	0xff02ffff
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <LoopForever+0x6>)
    LDR R1, [R0]
 8000be6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000be8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000bea:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <LoopForever+0xa>)
    CMP R1, R2
 8000bec:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000bee:	d105      	bne.n	8000bfc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000bf0:	4812      	ldr	r0, [pc, #72]	; (8000c3c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000bf2:	4913      	ldr	r1, [pc, #76]	; (8000c40 <LoopForever+0x12>)
    STR R1, [R0]
 8000bf4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000bf6:	4813      	ldr	r0, [pc, #76]	; (8000c44 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000bf8:	4913      	ldr	r1, [pc, #76]	; (8000c48 <LoopForever+0x1a>)
    STR R1, [R0]
 8000bfa:	6001      	str	r1, [r0, #0]

08000bfc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000bfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bfe:	e003      	b.n	8000c08 <LoopCopyDataInit>

08000c00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000c02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c06:	3104      	adds	r1, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <LoopForever+0x22>)
  ldr  r3, =_edata
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000c0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c10:	d3f6      	bcc.n	8000c00 <CopyDataInit>
  ldr  r2, =_sbss
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000c14:	e002      	b.n	8000c1c <LoopFillZerobss>

08000c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c16:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1a:	3204      	adds	r2, #4

08000c1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <LoopForever+0x2e>)
  cmp  r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c20:	d3f9      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c22:	f7ff ffaf 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f001 fd6f 	bl	8002708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fddd 	bl	80007e8 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
   ldr   r0, =_estack
 8000c30:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000c34:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c38:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c3c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c40:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c44:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c48:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000c4c:	080028b4 	.word	0x080028b4
  ldr  r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c54:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000c58:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000c5c:	2000012c 	.word	0x2000012c

08000c60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_IRQHandler>
	...

08000c64 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c64:	21fa      	movs	r1, #250	; 0xfa
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_InitTick+0x2c>)
{
 8000c68:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c6a:	0089      	lsls	r1, r1, #2
{
 8000c6c:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	f7ff fa5c 	bl	800012c <__udivsi3>
 8000c74:	f000 faec 	bl	8001250 <HAL_SYSTICK_Config>
 8000c78:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000c7a:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d105      	bne.n	8000c8c <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000c80:	3802      	subs	r0, #2
 8000c82:	0022      	movs	r2, r4
 8000c84:	0029      	movs	r1, r5
 8000c86:	f000 faaf 	bl	80011e8 <HAL_NVIC_SetPriority>
 8000c8a:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000000 	.word	0x20000000

08000c94 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_Init+0x24>)
{
 8000c98:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c9a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca2:	f7ff ffdf 	bl	8000c64 <HAL_InitTick>
 8000ca6:	1e04      	subs	r4, r0, #0
 8000ca8:	d103      	bne.n	8000cb2 <HAL_Init+0x1e>
    HAL_MspInit();
 8000caa:	f7ff fe9d 	bl	80009e8 <HAL_MspInit>
}
 8000cae:	0020      	movs	r0, r4
 8000cb0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000cb2:	2401      	movs	r4, #1
 8000cb4:	e7fb      	b.n	8000cae <HAL_Init+0x1a>
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40022000 	.word	0x40022000

08000cbc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000cbc:	4a02      	ldr	r2, [pc, #8]	; (8000cc8 <HAL_IncTick+0xc>)
 8000cbe:	6813      	ldr	r3, [r2, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000128 	.word	0x20000128

08000ccc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ccc:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <HAL_GetTick+0x8>)
 8000cce:	6818      	ldr	r0, [r3, #0]
}
 8000cd0:	4770      	bx	lr
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000128 	.word	0x20000128

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff fff6 	bl	8000ccc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000ce0:	1c63      	adds	r3, r4, #1
 8000ce2:	1e5a      	subs	r2, r3, #1
 8000ce4:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8000ce6:	0005      	movs	r5, r0
    wait++;
 8000ce8:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	f7ff ffef 	bl	8000ccc <HAL_GetTick>
 8000cee:	1b40      	subs	r0, r0, r5
 8000cf0:	42a0      	cmp	r0, r4
 8000cf2:	d3fa      	bcc.n	8000cea <HAL_Delay+0x12>
  {
  }
}
 8000cf4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cf8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4a02      	ldr	r2, [pc, #8]	; (8000d04 <HAL_SuspendTick+0xc>)
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	438b      	bics	r3, r1
 8000d00:	6013      	str	r3, [r2, #0]
}
 8000d02:	4770      	bx	lr
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	4a02      	ldr	r2, [pc, #8]	; (8000d14 <HAL_ResumeTick+0xc>)
 8000d0c:	6811      	ldr	r1, [r2, #0]
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	4770      	bx	lr
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d18:	2103      	movs	r1, #3
 8000d1a:	6803      	ldr	r3, [r0, #0]
{
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d20:	6898      	ldr	r0, [r3, #8]
 8000d22:	4008      	ands	r0, r1
 8000d24:	2801      	cmp	r0, #1
 8000d26:	d001      	beq.n	8000d2c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d28:	2000      	movs	r0, #0
}
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4202      	tst	r2, r0
 8000d30:	d0fa      	beq.n	8000d28 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000d32:	2205      	movs	r2, #5
 8000d34:	689d      	ldr	r5, [r3, #8]
 8000d36:	4015      	ands	r5, r2
 8000d38:	2d01      	cmp	r5, #1
 8000d3a:	d119      	bne.n	8000d70 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8000d3c:	6898      	ldr	r0, [r3, #8]
 8000d3e:	3a03      	subs	r2, #3
 8000d40:	4302      	orrs	r2, r0
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8000d46:	f7ff ffc1 	bl	8000ccc <HAL_GetTick>
 8000d4a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	422b      	tst	r3, r5
 8000d52:	d0e9      	beq.n	8000d28 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d54:	f7ff ffba 	bl	8000ccc <HAL_GetTick>
 8000d58:	1b80      	subs	r0, r0, r6
 8000d5a:	280a      	cmp	r0, #10
 8000d5c:	d9f6      	bls.n	8000d4c <ADC_Disable+0x34>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d5e:	2310      	movs	r3, #16
 8000d60:	6d62      	ldr	r2, [r4, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d62:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d64:	4313      	orrs	r3, r2
 8000d66:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d6a:	431d      	orrs	r5, r3
 8000d6c:	65a5      	str	r5, [r4, #88]	; 0x58
 8000d6e:	e7dc      	b.n	8000d2a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d70:	2310      	movs	r3, #16
 8000d72:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d74:	4313      	orrs	r3, r2
 8000d76:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000d7e:	e7d4      	b.n	8000d2a <ADC_Disable+0x12>

08000d80 <ADC_Enable>:
{
 8000d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d82:	2103      	movs	r1, #3
 8000d84:	6803      	ldr	r3, [r0, #0]
{
 8000d86:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	2a01      	cmp	r2, #1
 8000d8e:	d104      	bne.n	8000d9a <ADC_Enable+0x1a>
 8000d90:	6819      	ldr	r1, [r3, #0]
 8000d92:	4211      	tst	r1, r2
 8000d94:	d001      	beq.n	8000d9a <ADC_Enable+0x1a>
  return HAL_OK;
 8000d96:	2000      	movs	r0, #0
}
 8000d98:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000d9a:	6899      	ldr	r1, [r3, #8]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <ADC_Enable+0x84>)
 8000d9e:	4211      	tst	r1, r2
 8000da0:	d008      	beq.n	8000db4 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da2:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000da8:	4313      	orrs	r3, r2
 8000daa:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dae:	4303      	orrs	r3, r0
 8000db0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000db2:	e7f1      	b.n	8000d98 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8000db4:	2201      	movs	r2, #1
 8000db6:	6899      	ldr	r1, [r3, #8]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	609a      	str	r2, [r3, #8]
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <ADC_Enable+0x88>)
 8000dbe:	4913      	ldr	r1, [pc, #76]	; (8000e0c <ADC_Enable+0x8c>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	f7ff f9b3 	bl	800012c <__udivsi3>
 8000dc6:	9001      	str	r0, [sp, #4]

  while(waitLoopIndex != 0U)
 8000dc8:	9b01      	ldr	r3, [sp, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d115      	bne.n	8000dfa <ADC_Enable+0x7a>
    tickstart = HAL_GetTick();
 8000dce:	f7ff ff7d 	bl	8000ccc <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000dd2:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000dd4:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	422b      	tst	r3, r5
 8000ddc:	d1db      	bne.n	8000d96 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000dde:	f7ff ff75 	bl	8000ccc <HAL_GetTick>
 8000de2:	1b80      	subs	r0, r0, r6
 8000de4:	280a      	cmp	r0, #10
 8000de6:	d9f6      	bls.n	8000dd6 <ADC_Enable+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	2310      	movs	r3, #16
 8000dea:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8000dec:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dee:	4313      	orrs	r3, r2
 8000df0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000df4:	432b      	orrs	r3, r5
 8000df6:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000df8:	e7ce      	b.n	8000d98 <ADC_Enable+0x18>
  {
    waitLoopIndex--;
 8000dfa:	9b01      	ldr	r3, [sp, #4]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	e7e2      	b.n	8000dc8 <ADC_Enable+0x48>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	80000017 	.word	0x80000017
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	000f4240 	.word	0x000f4240

08000e10 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000e10:	2204      	movs	r2, #4
 8000e12:	6803      	ldr	r3, [r0, #0]
{
 8000e14:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000e16:	6899      	ldr	r1, [r3, #8]
{
 8000e18:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000e1a:	4211      	tst	r1, r2
 8000e1c:	d101      	bne.n	8000e22 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8000e1e:	2000      	movs	r0, #0
}
 8000e20:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000e22:	6899      	ldr	r1, [r3, #8]
 8000e24:	4211      	tst	r1, r2
 8000e26:	d006      	beq.n	8000e36 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000e28:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000e2a:	0792      	lsls	r2, r2, #30
 8000e2c:	d403      	bmi.n	8000e36 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000e2e:	2210      	movs	r2, #16
 8000e30:	6899      	ldr	r1, [r3, #8]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000e36:	f7ff ff49 	bl	8000ccc <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000e3a:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8000e3c:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	422b      	tst	r3, r5
 8000e44:	d0eb      	beq.n	8000e1e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000e46:	f7ff ff41 	bl	8000ccc <HAL_GetTick>
 8000e4a:	1b80      	subs	r0, r0, r6
 8000e4c:	280a      	cmp	r0, #10
 8000e4e:	d9f6      	bls.n	8000e3e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e50:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e52:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e54:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e56:	4313      	orrs	r3, r2
 8000e58:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e5c:	4303      	orrs	r3, r0
 8000e5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e60:	e7de      	b.n	8000e20 <ADC_ConversionStop+0x10>
	...

08000e64 <HAL_ADC_Init>:
{
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000e68:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000e6a:	2c00      	cmp	r4, #0
 8000e6c:	d019      	beq.n	8000ea2 <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d106      	bne.n	8000e82 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000e74:	0022      	movs	r2, r4
 8000e76:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000e78:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8000e7a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000e7c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000e7e:	f7ff fdc1 	bl	8000a04 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e84:	06db      	lsls	r3, r3, #27
 8000e86:	d404      	bmi.n	8000e92 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000e88:	2204      	movs	r2, #4
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	6898      	ldr	r0, [r3, #8]
 8000e8e:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e90:	d008      	beq.n	8000ea4 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e92:	2310      	movs	r3, #16
 8000e94:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	3450      	adds	r4, #80	; 0x50
 8000ea0:	7023      	strb	r3, [r4, #0]
}
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ea6:	4955      	ldr	r1, [pc, #340]	; (8000ffc <HAL_ADC_Init+0x198>)
 8000ea8:	4011      	ands	r1, r2
 8000eaa:	2202      	movs	r2, #2
 8000eac:	430a      	orrs	r2, r1
 8000eae:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	6899      	ldr	r1, [r3, #8]
 8000eb4:	4011      	ands	r1, r2
 8000eb6:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_ADC_Init+0x19c>)
 8000eb8:	2901      	cmp	r1, #1
 8000eba:	d102      	bne.n	8000ec2 <HAL_ADC_Init+0x5e>
 8000ebc:	681d      	ldr	r5, [r3, #0]
 8000ebe:	420d      	tst	r5, r1
 8000ec0:	d119      	bne.n	8000ef6 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000ec2:	2680      	movs	r6, #128	; 0x80
 8000ec4:	6861      	ldr	r1, [r4, #4]
 8000ec6:	05f6      	lsls	r6, r6, #23
 8000ec8:	004d      	lsls	r5, r1, #1
 8000eca:	086d      	lsrs	r5, r5, #1
 8000ecc:	42b5      	cmp	r5, r6
 8000ece:	d003      	beq.n	8000ed8 <HAL_ADC_Init+0x74>
 8000ed0:	2580      	movs	r5, #128	; 0x80
 8000ed2:	062d      	lsls	r5, r5, #24
 8000ed4:	42a9      	cmp	r1, r5
 8000ed6:	d176      	bne.n	8000fc6 <HAL_ADC_Init+0x162>
 8000ed8:	691d      	ldr	r5, [r3, #16]
 8000eda:	00ad      	lsls	r5, r5, #2
 8000edc:	08ad      	lsrs	r5, r5, #2
 8000ede:	611d      	str	r5, [r3, #16]
 8000ee0:	691d      	ldr	r5, [r3, #16]
 8000ee2:	4329      	orrs	r1, r5
 8000ee4:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000ee6:	2518      	movs	r5, #24
 8000ee8:	68d9      	ldr	r1, [r3, #12]
 8000eea:	43a9      	bics	r1, r5
 8000eec:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000eee:	68d9      	ldr	r1, [r3, #12]
 8000ef0:	68a5      	ldr	r5, [r4, #8]
 8000ef2:	4329      	orrs	r1, r5
 8000ef4:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000ef6:	6811      	ldr	r1, [r2, #0]
 8000ef8:	4d42      	ldr	r5, [pc, #264]	; (8001004 <HAL_ADC_Init+0x1a0>)
 8000efa:	4029      	ands	r1, r5
 8000efc:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f00:	6815      	ldr	r5, [r2, #0]
 8000f02:	0649      	lsls	r1, r1, #25
 8000f04:	4329      	orrs	r1, r5
 8000f06:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	6899      	ldr	r1, [r3, #8]
 8000f0c:	0552      	lsls	r2, r2, #21
 8000f0e:	4211      	tst	r1, r2
 8000f10:	d102      	bne.n	8000f18 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f12:	6899      	ldr	r1, [r3, #8]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	493b      	ldr	r1, [pc, #236]	; (8001008 <HAL_ADC_Init+0x1a4>)
 8000f1c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f1e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f20:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f22:	68dd      	ldr	r5, [r3, #12]
 8000f24:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f26:	2902      	cmp	r1, #2
 8000f28:	d100      	bne.n	8000f2c <HAL_ADC_Init+0xc8>
 8000f2a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f2c:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f2e:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f30:	4332      	orrs	r2, r6
 8000f32:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f34:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f36:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f38:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f3a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f3c:	69e5      	ldr	r5, [r4, #28]
 8000f3e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f40:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f42:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f44:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f46:	0025      	movs	r5, r4
 8000f48:	352c      	adds	r5, #44	; 0x2c
 8000f4a:	782d      	ldrb	r5, [r5, #0]
 8000f4c:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f4e:	432a      	orrs	r2, r5
 8000f50:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f52:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f54:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f58:	30ff      	adds	r0, #255	; 0xff
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	d004      	beq.n	8000f68 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f5e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000f60:	68d8      	ldr	r0, [r3, #12]
 8000f62:	432a      	orrs	r2, r5
 8000f64:	4302      	orrs	r2, r0
 8000f66:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f68:	1ca2      	adds	r2, r4, #2
 8000f6a:	7fd2      	ldrb	r2, [r2, #31]
 8000f6c:	2a01      	cmp	r2, #1
 8000f6e:	d106      	bne.n	8000f7e <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f70:	2900      	cmp	r1, #0
 8000f72:	d134      	bne.n	8000fde <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	68d9      	ldr	r1, [r3, #12]
 8000f78:	0252      	lsls	r2, r2, #9
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f7e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f80:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f82:	2901      	cmp	r1, #1
 8000f84:	d133      	bne.n	8000fee <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f88:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f8a:	4002      	ands	r2, r0
 8000f8c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f90:	6918      	ldr	r0, [r3, #16]
 8000f92:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8000f94:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000f96:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	4311      	orrs	r1, r2
 8000fa0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000fa2:	2107      	movs	r1, #7
 8000fa4:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000fa6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000fa8:	438a      	bics	r2, r1
 8000faa:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8000fb4:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000fb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fba:	4393      	bics	r3, r2
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000fc4:	e76d      	b.n	8000ea2 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000fc6:	691d      	ldr	r5, [r3, #16]
 8000fc8:	4e11      	ldr	r6, [pc, #68]	; (8001010 <HAL_ADC_Init+0x1ac>)
 8000fca:	00ad      	lsls	r5, r5, #2
 8000fcc:	08ad      	lsrs	r5, r5, #2
 8000fce:	611d      	str	r5, [r3, #16]
 8000fd0:	6815      	ldr	r5, [r2, #0]
 8000fd2:	4035      	ands	r5, r6
 8000fd4:	6015      	str	r5, [r2, #0]
 8000fd6:	6815      	ldr	r5, [r2, #0]
 8000fd8:	4329      	orrs	r1, r5
 8000fda:	6011      	str	r1, [r2, #0]
 8000fdc:	e783      	b.n	8000ee6 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fde:	2120      	movs	r1, #32
 8000fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000fe2:	4301      	orrs	r1, r0
 8000fe4:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	65a2      	str	r2, [r4, #88]	; 0x58
 8000fec:	e7c7      	b.n	8000f7e <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000fee:	2101      	movs	r1, #1
 8000ff0:	420a      	tst	r2, r1
 8000ff2:	d0d6      	beq.n	8000fa2 <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	438a      	bics	r2, r1
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	e7d2      	b.n	8000fa2 <HAL_ADC_Init+0x13e>
 8000ffc:	fffffefd 	.word	0xfffffefd
 8001000:	40012708 	.word	0x40012708
 8001004:	fdffffff 	.word	0xfdffffff
 8001008:	fffe0219 	.word	0xfffe0219
 800100c:	fffffc03 	.word	0xfffffc03
 8001010:	ffc3ffff 	.word	0xffc3ffff

08001014 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001014:	6803      	ldr	r3, [r0, #0]
{
 8001016:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001018:	689b      	ldr	r3, [r3, #8]
{
 800101a:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 800101c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800101e:	075b      	lsls	r3, r3, #29
 8001020:	d41a      	bmi.n	8001058 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001022:	0025      	movs	r5, r4
 8001024:	3550      	adds	r5, #80	; 0x50
 8001026:	782b      	ldrb	r3, [r5, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d015      	beq.n	8001058 <HAL_ADC_Start+0x44>
 800102c:	2301      	movs	r3, #1
 800102e:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001030:	69e3      	ldr	r3, [r4, #28]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d111      	bne.n	800105a <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001036:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800103a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800103c:	401a      	ands	r2, r3
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001044:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001046:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001048:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800104a:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800104c:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800104e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001050:	6899      	ldr	r1, [r3, #8]
 8001052:	3a18      	subs	r2, #24
 8001054:	430a      	orrs	r2, r1
 8001056:	609a      	str	r2, [r3, #8]
}
 8001058:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800105a:	0020      	movs	r0, r4
 800105c:	f7ff fe90 	bl	8000d80 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001060:	2800      	cmp	r0, #0
 8001062:	d0e8      	beq.n	8001036 <HAL_ADC_Start+0x22>
 8001064:	e7f8      	b.n	8001058 <HAL_ADC_Start+0x44>
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	fffff0fe 	.word	0xfffff0fe

0800106c <HAL_ADC_Stop>:
{
 800106c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800106e:	0006      	movs	r6, r0
 8001070:	3650      	adds	r6, #80	; 0x50
 8001072:	7833      	ldrb	r3, [r6, #0]
{
 8001074:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001076:	2002      	movs	r0, #2
 8001078:	2b01      	cmp	r3, #1
 800107a:	d012      	beq.n	80010a2 <HAL_ADC_Stop+0x36>
 800107c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800107e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8001080:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001082:	f7ff fec5 	bl	8000e10 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001086:	2800      	cmp	r0, #0
 8001088:	d109      	bne.n	800109e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800108a:	0020      	movs	r0, r4
 800108c:	f7ff fe44 	bl	8000d18 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001090:	2800      	cmp	r0, #0
 8001092:	d104      	bne.n	800109e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001094:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001096:	4a03      	ldr	r2, [pc, #12]	; (80010a4 <HAL_ADC_Stop+0x38>)
 8001098:	4013      	ands	r3, r2
 800109a:	431d      	orrs	r5, r3
 800109c:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800109e:	2300      	movs	r3, #0
 80010a0:	7033      	strb	r3, [r6, #0]
}
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
 80010a4:	fffffefe 	.word	0xfffffefe

080010a8 <HAL_ADC_PollForConversion>:
{
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010aa:	6945      	ldr	r5, [r0, #20]
{
 80010ac:	0004      	movs	r4, r0
 80010ae:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010b0:	2d08      	cmp	r5, #8
 80010b2:	d00d      	beq.n	80010d0 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80010b4:	6803      	ldr	r3, [r0, #0]
 80010b6:	2001      	movs	r0, #1
 80010b8:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010ba:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80010bc:	4203      	tst	r3, r0
 80010be:	d007      	beq.n	80010d0 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c0:	2320      	movs	r3, #32
 80010c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 80010c4:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c6:	4313      	orrs	r3, r2
 80010c8:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 80010ca:	2300      	movs	r3, #0
 80010cc:	7023      	strb	r3, [r4, #0]
}
 80010ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80010d0:	f7ff fdfc 	bl	8000ccc <HAL_GetTick>
 80010d4:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4215      	tst	r5, r2
 80010dc:	d024      	beq.n	8001128 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	430a      	orrs	r2, r1
 80010e6:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e8:	22c0      	movs	r2, #192	; 0xc0
 80010ea:	68d9      	ldr	r1, [r3, #12]
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	4211      	tst	r1, r2
 80010f0:	d113      	bne.n	800111a <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010f2:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010f4:	7fd2      	ldrb	r2, [r2, #31]
 80010f6:	2a00      	cmp	r2, #0
 80010f8:	d10f      	bne.n	800111a <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	0712      	lsls	r2, r2, #28
 80010fe:	d50c      	bpl.n	800111a <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	0752      	lsls	r2, r2, #29
 8001104:	d423      	bmi.n	800114e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001106:	210c      	movs	r1, #12
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	438a      	bics	r2, r1
 800110c:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800110e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001110:	4913      	ldr	r1, [pc, #76]	; (8001160 <HAL_ADC_PollForConversion+0xb8>)
 8001112:	4011      	ands	r1, r2
 8001114:	2201      	movs	r2, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800111a:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800111c:	69a2      	ldr	r2, [r4, #24]
 800111e:	4282      	cmp	r2, r0
 8001120:	d1d5      	bne.n	80010ce <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e7d2      	b.n	80010ce <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001128:	1c72      	adds	r2, r6, #1
 800112a:	d0d5      	beq.n	80010d8 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800112c:	2e00      	cmp	r6, #0
 800112e:	d108      	bne.n	8001142 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001130:	2304      	movs	r3, #4
 8001132:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8001134:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001136:	4313      	orrs	r3, r2
 8001138:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800113a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800113c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800113e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001140:	e7c5      	b.n	80010ce <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001142:	f7ff fdc3 	bl	8000ccc <HAL_GetTick>
 8001146:	1bc0      	subs	r0, r0, r7
 8001148:	42b0      	cmp	r0, r6
 800114a:	d9c4      	bls.n	80010d6 <HAL_ADC_PollForConversion+0x2e>
 800114c:	e7f0      	b.n	8001130 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114e:	2220      	movs	r2, #32
 8001150:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001152:	430a      	orrs	r2, r1
 8001154:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	2201      	movs	r2, #1
 8001158:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800115a:	430a      	orrs	r2, r1
 800115c:	65a2      	str	r2, [r4, #88]	; 0x58
 800115e:	e7dc      	b.n	800111a <HAL_ADC_PollForConversion+0x72>
 8001160:	fffffefe 	.word	0xfffffefe

08001164 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001164:	6803      	ldr	r3, [r0, #0]
 8001166:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001168:	4770      	bx	lr
	...

0800116c <HAL_ADC_ConfigChannel>:
{
 800116c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800116e:	0004      	movs	r4, r0
 8001170:	3450      	adds	r4, #80	; 0x50
 8001172:	7823      	ldrb	r3, [r4, #0]
{
 8001174:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8001176:	2002      	movs	r0, #2
 8001178:	2b01      	cmp	r3, #1
 800117a:	d00c      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x2a>
 800117c:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800117e:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 8001180:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001182:	6890      	ldr	r0, [r2, #8]
 8001184:	0740      	lsls	r0, r0, #29
 8001186:	d507      	bpl.n	8001198 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001188:	2220      	movs	r2, #32
 800118a:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_ERROR;
 800118c:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800118e:	430a      	orrs	r2, r1
 8001190:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001192:	2200      	movs	r2, #0
 8001194:	7022      	strb	r2, [r4, #0]
}
 8001196:	bd30      	pop	{r4, r5, pc}
 8001198:	2580      	movs	r5, #128	; 0x80
 800119a:	6808      	ldr	r0, [r1, #0]
 800119c:	02ad      	lsls	r5, r5, #10
 800119e:	0343      	lsls	r3, r0, #13
  if (sConfig->Rank != ADC_RANK_NONE)
 80011a0:	6849      	ldr	r1, [r1, #4]
 80011a2:	4028      	ands	r0, r5
 80011a4:	4d0d      	ldr	r5, [pc, #52]	; (80011dc <HAL_ADC_ConfigChannel+0x70>)
 80011a6:	0b5b      	lsrs	r3, r3, #13
 80011a8:	42a9      	cmp	r1, r5
 80011aa:	d00d      	beq.n	80011c8 <HAL_ADC_ConfigChannel+0x5c>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80011ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80011ae:	430b      	orrs	r3, r1
 80011b0:	6293      	str	r3, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0x56>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_ADC_ConfigChannel+0x74>)
 80011ba:	03db      	lsls	r3, r3, #15
 80011bc:	6811      	ldr	r1, [r2, #0]
 80011be:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011c0:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80011c2:	2000      	movs	r0, #0
 80011c4:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80011c6:	e7e6      	b.n	8001196 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80011ca:	4399      	bics	r1, r3
 80011cc:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d0f7      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0x56>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011d2:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <HAL_ADC_ConfigChannel+0x74>)
 80011d4:	4903      	ldr	r1, [pc, #12]	; (80011e4 <HAL_ADC_ConfigChannel+0x78>)
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	400b      	ands	r3, r1
 80011da:	e7f1      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x54>
 80011dc:	00001001 	.word	0x00001001
 80011e0:	40012708 	.word	0x40012708
 80011e4:	ffbfffff 	.word	0xffbfffff

080011e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e8:	b530      	push	{r4, r5, lr}
 80011ea:	25ff      	movs	r5, #255	; 0xff
 80011ec:	2403      	movs	r4, #3
 80011ee:	002a      	movs	r2, r5
 80011f0:	b2c3      	uxtb	r3, r0
 80011f2:	401c      	ands	r4, r3
 80011f4:	00e4      	lsls	r4, r4, #3
 80011f6:	40a2      	lsls	r2, r4
 80011f8:	0189      	lsls	r1, r1, #6
 80011fa:	4029      	ands	r1, r5
 80011fc:	43d2      	mvns	r2, r2
 80011fe:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001200:	2800      	cmp	r0, #0
 8001202:	da0b      	bge.n	800121c <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001204:	200f      	movs	r0, #15
 8001206:	4003      	ands	r3, r0
 8001208:	3b08      	subs	r3, #8
 800120a:	480a      	ldr	r0, [pc, #40]	; (8001234 <HAL_NVIC_SetPriority+0x4c>)
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	181b      	adds	r3, r3, r0
 8001212:	69d8      	ldr	r0, [r3, #28]
 8001214:	4002      	ands	r2, r0
 8001216:	4311      	orrs	r1, r2
 8001218:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800121a:	bd30      	pop	{r4, r5, pc}
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800121e:	0880      	lsrs	r0, r0, #2
 8001220:	0080      	lsls	r0, r0, #2
 8001222:	18c0      	adds	r0, r0, r3
 8001224:	23c0      	movs	r3, #192	; 0xc0
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	58c4      	ldr	r4, [r0, r3]
 800122a:	4022      	ands	r2, r4
 800122c:	4311      	orrs	r1, r2
 800122e:	50c1      	str	r1, [r0, r3]
 8001230:	e7f3      	b.n	800121a <HAL_NVIC_SetPriority+0x32>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	e000e100 	.word	0xe000e100

0800123c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800123c:	231f      	movs	r3, #31
 800123e:	4018      	ands	r0, r3
 8001240:	3b1e      	subs	r3, #30
 8001242:	4083      	lsls	r3, r0
 8001244:	4a01      	ldr	r2, [pc, #4]	; (800124c <HAL_NVIC_EnableIRQ+0x10>)
 8001246:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001248:	4770      	bx	lr
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	e000e100 	.word	0xe000e100

08001250 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_SYSTICK_Config+0x28>)
 8001252:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001254:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001256:	4293      	cmp	r3, r2
 8001258:	d80d      	bhi.n	8001276 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125e:	4808      	ldr	r0, [pc, #32]	; (8001280 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001260:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001262:	6a03      	ldr	r3, [r0, #32]
 8001264:	0609      	lsls	r1, r1, #24
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	430b      	orrs	r3, r1
 800126c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001270:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001272:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001274:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001276:	4770      	bx	lr
 8001278:	00ffffff 	.word	0x00ffffff
 800127c:	e000e010 	.word	0xe000e010
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001286:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_Init+0x140>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001288:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800128a:	1882      	adds	r2, r0, r2
 800128c:	1e54      	subs	r4, r2, #1
 800128e:	41a2      	sbcs	r2, r4
{
 8001290:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8001292:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8001294:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001296:	3205      	adds	r2, #5
 8001298:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800129a:	9a03      	ldr	r2, [sp, #12]
 800129c:	40da      	lsrs	r2, r3
 800129e:	d101      	bne.n	80012a4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80012a0:	b007      	add	sp, #28
 80012a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012a4:	2501      	movs	r5, #1
 80012a6:	409d      	lsls	r5, r3
 80012a8:	9a03      	ldr	r2, [sp, #12]
 80012aa:	402a      	ands	r2, r5
 80012ac:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 80012ae:	d100      	bne.n	80012b2 <HAL_GPIO_Init+0x2e>
 80012b0:	e086      	b.n	80013c0 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80012b2:	684a      	ldr	r2, [r1, #4]
 80012b4:	9201      	str	r2, [sp, #4]
 80012b6:	2210      	movs	r2, #16
 80012b8:	9e01      	ldr	r6, [sp, #4]
 80012ba:	4396      	bics	r6, r2
 80012bc:	2e02      	cmp	r6, #2
 80012be:	d10f      	bne.n	80012e0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012c4:	2407      	movs	r4, #7
 80012c6:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 80012c8:	6a17      	ldr	r7, [r2, #32]
 80012ca:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012cc:	220f      	movs	r2, #15
 80012ce:	401c      	ands	r4, r3
 80012d0:	00a4      	lsls	r4, r4, #2
 80012d2:	40a2      	lsls	r2, r4
 80012d4:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80012d6:	690a      	ldr	r2, [r1, #16]
 80012d8:	40a2      	lsls	r2, r4
 80012da:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 80012dc:	9a04      	ldr	r2, [sp, #16]
 80012de:	6217      	str	r7, [r2, #32]
 80012e0:	2203      	movs	r2, #3
 80012e2:	005f      	lsls	r7, r3, #1
 80012e4:	40ba      	lsls	r2, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e6:	3e01      	subs	r6, #1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	2e01      	cmp	r6, #1
 80012ec:	d80e      	bhi.n	800130c <HAL_GPIO_Init+0x88>
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	68cc      	ldr	r4, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80012f0:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f2:	40bc      	lsls	r4, r7
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012f4:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80012f8:	6084      	str	r4, [r0, #8]
        temp= GPIOx->OTYPER;
 80012fa:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fc:	43ac      	bics	r4, r5
 80012fe:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001300:	9c01      	ldr	r4, [sp, #4]
 8001302:	06e4      	lsls	r4, r4, #27
 8001304:	0fe4      	lsrs	r4, r4, #31
 8001306:	409c      	lsls	r4, r3
 8001308:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800130a:	6044      	str	r4, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130c:	2403      	movs	r4, #3
 800130e:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8001310:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001312:	4025      	ands	r5, r4
 8001314:	40bd      	lsls	r5, r7
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001316:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 800131a:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 800131c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800131e:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001320:	688d      	ldr	r5, [r1, #8]
 8001322:	40bd      	lsls	r5, r7
 8001324:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8001326:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001328:	9a01      	ldr	r2, [sp, #4]
 800132a:	00d2      	lsls	r2, r2, #3
 800132c:	d548      	bpl.n	80013c0 <HAL_GPIO_Init+0x13c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2701      	movs	r7, #1
 8001330:	4d25      	ldr	r5, [pc, #148]	; (80013c8 <HAL_GPIO_Init+0x144>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001332:	401c      	ands	r4, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001334:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001336:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001338:	433a      	orrs	r2, r7
 800133a:	636a      	str	r2, [r5, #52]	; 0x34
 800133c:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x148>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	089d      	lsrs	r5, r3, #2
 8001340:	00ad      	lsls	r5, r5, #2
 8001342:	18ad      	adds	r5, r5, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001344:	220f      	movs	r2, #15
 8001346:	40a2      	lsls	r2, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 8001348:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800134a:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800134c:	22a0      	movs	r2, #160	; 0xa0
 800134e:	05d2      	lsls	r2, r2, #23
 8001350:	4694      	mov	ip, r2
 8001352:	2200      	movs	r2, #0
 8001354:	4560      	cmp	r0, ip
 8001356:	d009      	beq.n	800136c <HAL_GPIO_Init+0xe8>
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_GPIO_Init+0x14c>)
 800135a:	4694      	mov	ip, r2
 800135c:	003a      	movs	r2, r7
 800135e:	4560      	cmp	r0, ip
 8001360:	d004      	beq.n	800136c <HAL_GPIO_Init+0xe8>
 8001362:	4f1c      	ldr	r7, [pc, #112]	; (80013d4 <HAL_GPIO_Init+0x150>)
 8001364:	1892      	adds	r2, r2, r2
 8001366:	42b8      	cmp	r0, r7
 8001368:	d000      	beq.n	800136c <HAL_GPIO_Init+0xe8>
 800136a:	9a05      	ldr	r2, [sp, #20]
 800136c:	40a2      	lsls	r2, r4
 800136e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	60aa      	str	r2, [r5, #8]
        temp = EXTI->IMR;
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_GPIO_Init+0x154>)
        temp &= ~((uint32_t)iocurrent);
 8001374:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8001376:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001378:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137a:	9f01      	ldr	r7, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 800137c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800137e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001380:	03ff      	lsls	r7, r7, #15
 8001382:	d401      	bmi.n	8001388 <HAL_GPIO_Init+0x104>
        temp &= ~((uint32_t)iocurrent);
 8001384:	0035      	movs	r5, r6
 8001386:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8001388:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800138a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800138c:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138e:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001390:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001392:	03bf      	lsls	r7, r7, #14
 8001394:	d401      	bmi.n	800139a <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 8001396:	0035      	movs	r5, r6
 8001398:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800139a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800139c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800139e:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a0:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80013a2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a4:	02ff      	lsls	r7, r7, #11
 80013a6:	d401      	bmi.n	80013ac <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 80013a8:	0035      	movs	r5, r6
 80013aa:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80013ac:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80013ae:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80013b0:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b2:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80013b4:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b6:	02bf      	lsls	r7, r7, #10
 80013b8:	d401      	bmi.n	80013be <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 80013ba:	4025      	ands	r5, r4
 80013bc:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80013be:	60d6      	str	r6, [r2, #12]
    position++;
 80013c0:	3301      	adds	r3, #1
 80013c2:	e76a      	b.n	800129a <HAL_GPIO_Init+0x16>
 80013c4:	afffe400 	.word	0xafffe400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	50000400 	.word	0x50000400
 80013d4:	50000800 	.word	0x50000800
 80013d8:	40010400 	.word	0x40010400

080013dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d001      	beq.n	80013e4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013e2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80013e4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80013e6:	e7fc      	b.n	80013e2 <HAL_GPIO_WritePin+0x6>

080013e8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80013e8:	6943      	ldr	r3, [r0, #20]
 80013ea:	4059      	eors	r1, r3
 80013ec:	6141      	str	r1, [r0, #20]
}
 80013ee:	4770      	bx	lr

080013f0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80013f6:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	4210      	tst	r0, r2
 80013fc:	d002      	beq.n	8001404 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	f7ff fff6 	bl	80013f0 <HAL_GPIO_EXTI_Callback>
}
 8001404:	bd10      	pop	{r4, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_PWR_EnableBkUpAccess+0x10>)
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	6811      	ldr	r1, [r2, #0]
 8001414:	430b      	orrs	r3, r1
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	4770      	bx	lr
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001420:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001422:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_PWR_EnterSTOPMode+0x30>)
 8001426:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001428:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800142a:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 800142c:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800142e:	2204      	movs	r2, #4
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_PWR_EnterSTOPMode+0x34>)
 8001432:	6918      	ldr	r0, [r3, #16]
 8001434:	4302      	orrs	r2, r0
 8001436:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001438:	2901      	cmp	r1, #1
 800143a:	d105      	bne.n	8001448 <HAL_PWR_EnterSTOPMode+0x28>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800143c:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800143e:	2104      	movs	r1, #4
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	438a      	bics	r2, r1
 8001444:	611a      	str	r2, [r3, #16]

}
 8001446:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8001448:	bf40      	sev
  __ASM volatile ("wfe");
 800144a:	bf20      	wfe
 800144c:	bf20      	wfe
 800144e:	e7f6      	b.n	800143e <HAL_PWR_EnterSTOPMode+0x1e>
 8001450:	40007000 	.word	0x40007000
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_PWREx_EnableFastWakeUp+0x10>)
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	6811      	ldr	r1, [r2, #0]
 8001460:	430b      	orrs	r3, r1
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	4770      	bx	lr
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	40007000 	.word	0x40007000

0800146c <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	4a03      	ldr	r2, [pc, #12]	; (800147c <HAL_PWREx_EnableUltraLowPower+0x10>)
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	6811      	ldr	r1, [r2, #0]
 8001474:	430b      	orrs	r3, r1
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	4770      	bx	lr
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	40007000 	.word	0x40007000

08001480 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001480:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001484:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001486:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001488:	400a      	ands	r2, r1
 800148a:	2a08      	cmp	r2, #8
 800148c:	d029      	beq.n	80014e2 <HAL_RCC_GetSysClockFreq+0x62>
 800148e:	2a0c      	cmp	r2, #12
 8001490:	d009      	beq.n	80014a6 <HAL_RCC_GetSysClockFreq+0x26>
 8001492:	2a04      	cmp	r2, #4
 8001494:	d11d      	bne.n	80014d2 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001496:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800149a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800149c:	17c0      	asrs	r0, r0, #31
 800149e:	4018      	ands	r0, r3
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_RCC_GetSysClockFreq+0x70>)
 80014a2:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80014a4:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80014a6:	028a      	lsls	r2, r1, #10
 80014a8:	4812      	ldr	r0, [pc, #72]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x74>)
 80014aa:	0f12      	lsrs	r2, r2, #28
 80014ac:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80014ae:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b0:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80014b2:	0f89      	lsrs	r1, r1, #30
 80014b4:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b6:	03c0      	lsls	r0, r0, #15
 80014b8:	d504      	bpl.n	80014c4 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 80014ba:	480f      	ldr	r0, [pc, #60]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 80014bc:	4350      	muls	r0, r2
 80014be:	f7fe fe35 	bl	800012c <__udivsi3>
 80014c2:	e7ef      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	06db      	lsls	r3, r3, #27
 80014c8:	d501      	bpl.n	80014ce <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <HAL_RCC_GetSysClockFreq+0x7c>)
 80014cc:	e7f6      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 80014ce:	4808      	ldr	r0, [pc, #32]	; (80014f0 <HAL_RCC_GetSysClockFreq+0x70>)
 80014d0:	e7f4      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80014d2:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80014d4:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80014d6:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80014dc:	3301      	adds	r3, #1
 80014de:	4098      	lsls	r0, r3
 80014e0:	e7e0      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80014e4:	e7de      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x24>
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40021000 	.word	0x40021000
 80014ec:	ff48e500 	.word	0xff48e500
 80014f0:	00f42400 	.word	0x00f42400
 80014f4:	08002868 	.word	0x08002868
 80014f8:	007a1200 	.word	0x007a1200
 80014fc:	003d0900 	.word	0x003d0900

08001500 <HAL_RCC_OscConfig>:
{
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	0005      	movs	r5, r0
 8001504:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8001506:	2800      	cmp	r0, #0
 8001508:	d102      	bne.n	8001510 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800150a:	2001      	movs	r0, #1
}
 800150c:	b007      	add	sp, #28
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001510:	230c      	movs	r3, #12
 8001512:	4cc0      	ldr	r4, [pc, #768]	; (8001814 <HAL_RCC_OscConfig+0x314>)
 8001514:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001516:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001518:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	401a      	ands	r2, r3
 8001520:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	6802      	ldr	r2, [r0, #0]
 8001524:	07d2      	lsls	r2, r2, #31
 8001526:	d43d      	bmi.n	80015a4 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	079b      	lsls	r3, r3, #30
 800152c:	d500      	bpl.n	8001530 <HAL_RCC_OscConfig+0x30>
 800152e:	e083      	b.n	8001638 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	06db      	lsls	r3, r3, #27
 8001534:	d528      	bpl.n	8001588 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001536:	2e00      	cmp	r6, #0
 8001538:	d000      	beq.n	800153c <HAL_RCC_OscConfig+0x3c>
 800153a:	e0dd      	b.n	80016f8 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	059b      	lsls	r3, r3, #22
 8001540:	d502      	bpl.n	8001548 <HAL_RCC_OscConfig+0x48>
 8001542:	69ab      	ldr	r3, [r5, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0e0      	beq.n	800150a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001548:	6862      	ldr	r2, [r4, #4]
 800154a:	49b3      	ldr	r1, [pc, #716]	; (8001818 <HAL_RCC_OscConfig+0x318>)
 800154c:	6a2b      	ldr	r3, [r5, #32]
 800154e:	400a      	ands	r2, r1
 8001550:	431a      	orrs	r2, r3
 8001552:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	6861      	ldr	r1, [r4, #4]
 8001556:	69ea      	ldr	r2, [r5, #28]
 8001558:	0209      	lsls	r1, r1, #8
 800155a:	0a09      	lsrs	r1, r1, #8
 800155c:	0612      	lsls	r2, r2, #24
 800155e:	430a      	orrs	r2, r1
 8001560:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0b5b      	lsrs	r3, r3, #13
 8001566:	3301      	adds	r3, #1
 8001568:	0212      	lsls	r2, r2, #8
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800156e:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001570:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001572:	060a      	lsls	r2, r1, #24
 8001574:	49a9      	ldr	r1, [pc, #676]	; (800181c <HAL_RCC_OscConfig+0x31c>)
 8001576:	0f12      	lsrs	r2, r2, #28
 8001578:	5c8a      	ldrb	r2, [r1, r2]
 800157a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800157c:	4aa8      	ldr	r2, [pc, #672]	; (8001820 <HAL_RCC_OscConfig+0x320>)
 800157e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001580:	f7ff fb70 	bl	8000c64 <HAL_InitTick>
        if(status != HAL_OK)
 8001584:	2800      	cmp	r0, #0
 8001586:	d1c1      	bne.n	800150c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	071b      	lsls	r3, r3, #28
 800158c:	d500      	bpl.n	8001590 <HAL_RCC_OscConfig+0x90>
 800158e:	e0ea      	b.n	8001766 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	075b      	lsls	r3, r3, #29
 8001594:	d500      	bpl.n	8001598 <HAL_RCC_OscConfig+0x98>
 8001596:	e10c      	b.n	80017b2 <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001598:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800159a:	2b00      	cmp	r3, #0
 800159c:	d000      	beq.n	80015a0 <HAL_RCC_OscConfig+0xa0>
 800159e:	e191      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 80015a0:	2000      	movs	r0, #0
 80015a2:	e7b3      	b.n	800150c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a4:	2e08      	cmp	r6, #8
 80015a6:	d004      	beq.n	80015b2 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015a8:	2e0c      	cmp	r6, #12
 80015aa:	d109      	bne.n	80015c0 <HAL_RCC_OscConfig+0xc0>
 80015ac:	9a01      	ldr	r2, [sp, #4]
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	d006      	beq.n	80015c0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	039b      	lsls	r3, r3, #14
 80015b6:	d5b7      	bpl.n	8001528 <HAL_RCC_OscConfig+0x28>
 80015b8:	686b      	ldr	r3, [r5, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1b4      	bne.n	8001528 <HAL_RCC_OscConfig+0x28>
 80015be:	e7a4      	b.n	800150a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c0:	686a      	ldr	r2, [r5, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d111      	bne.n	80015ea <HAL_RCC_OscConfig+0xea>
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb7e 	bl	8000ccc <HAL_GetTick>
 80015d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	0292      	lsls	r2, r2, #10
 80015d8:	4213      	tst	r3, r2
 80015da:	d1a5      	bne.n	8001528 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb76 	bl	8000ccc <HAL_GetTick>
 80015e0:	1bc0      	subs	r0, r0, r7
 80015e2:	2864      	cmp	r0, #100	; 0x64
 80015e4:	d9f5      	bls.n	80015d2 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80015e6:	2003      	movs	r0, #3
 80015e8:	e790      	b.n	800150c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	21a0      	movs	r1, #160	; 0xa0
 80015ec:	02c9      	lsls	r1, r1, #11
 80015ee:	428a      	cmp	r2, r1
 80015f0:	d105      	bne.n	80015fe <HAL_RCC_OscConfig+0xfe>
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	6821      	ldr	r1, [r4, #0]
 80015f6:	02d2      	lsls	r2, r2, #11
 80015f8:	430a      	orrs	r2, r1
 80015fa:	6022      	str	r2, [r4, #0]
 80015fc:	e7e3      	b.n	80015c6 <HAL_RCC_OscConfig+0xc6>
 80015fe:	6821      	ldr	r1, [r4, #0]
 8001600:	4888      	ldr	r0, [pc, #544]	; (8001824 <HAL_RCC_OscConfig+0x324>)
 8001602:	4001      	ands	r1, r0
 8001604:	6021      	str	r1, [r4, #0]
 8001606:	6821      	ldr	r1, [r4, #0]
 8001608:	400b      	ands	r3, r1
 800160a:	9305      	str	r3, [sp, #20]
 800160c:	9b05      	ldr	r3, [sp, #20]
 800160e:	4986      	ldr	r1, [pc, #536]	; (8001828 <HAL_RCC_OscConfig+0x328>)
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	400b      	ands	r3, r1
 8001614:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001616:	2a00      	cmp	r2, #0
 8001618:	d1d8      	bne.n	80015cc <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 800161a:	f7ff fb57 	bl	8000ccc <HAL_GetTick>
 800161e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	0292      	lsls	r2, r2, #10
 8001626:	4213      	tst	r3, r2
 8001628:	d100      	bne.n	800162c <HAL_RCC_OscConfig+0x12c>
 800162a:	e77d      	b.n	8001528 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fb4e 	bl	8000ccc <HAL_GetTick>
 8001630:	1bc0      	subs	r0, r0, r7
 8001632:	2864      	cmp	r0, #100	; 0x64
 8001634:	d9f4      	bls.n	8001620 <HAL_RCC_OscConfig+0x120>
 8001636:	e7d6      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001638:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800163a:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800163c:	4213      	tst	r3, r2
 800163e:	d003      	beq.n	8001648 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001640:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001642:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001644:	4311      	orrs	r1, r2
 8001646:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001648:	2e04      	cmp	r6, #4
 800164a:	d004      	beq.n	8001656 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800164c:	2e0c      	cmp	r6, #12
 800164e:	d125      	bne.n	800169c <HAL_RCC_OscConfig+0x19c>
 8001650:	9a01      	ldr	r2, [sp, #4]
 8001652:	2a00      	cmp	r2, #0
 8001654:	d122      	bne.n	800169c <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	0752      	lsls	r2, r2, #29
 800165a:	d502      	bpl.n	8001662 <HAL_RCC_OscConfig+0x162>
 800165c:	2b00      	cmp	r3, #0
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x162>
 8001660:	e753      	b.n	800150a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	6861      	ldr	r1, [r4, #4]
 8001664:	692a      	ldr	r2, [r5, #16]
 8001666:	4871      	ldr	r0, [pc, #452]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001668:	0212      	lsls	r2, r2, #8
 800166a:	4001      	ands	r1, r0
 800166c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800166e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	438a      	bics	r2, r1
 8001676:	4313      	orrs	r3, r2
 8001678:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167a:	f7ff ff01 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 800167e:	68e3      	ldr	r3, [r4, #12]
 8001680:	4a66      	ldr	r2, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x31c>)
 8001682:	061b      	lsls	r3, r3, #24
 8001684:	0f1b      	lsrs	r3, r3, #28
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	40d8      	lsrs	r0, r3
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x320>)
 800168c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fae8 	bl	8000c64 <HAL_InitTick>
      if(status != HAL_OK)
 8001694:	2800      	cmp	r0, #0
 8001696:	d100      	bne.n	800169a <HAL_RCC_OscConfig+0x19a>
 8001698:	e74a      	b.n	8001530 <HAL_RCC_OscConfig+0x30>
 800169a:	e737      	b.n	800150c <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 800169c:	2b00      	cmp	r3, #0
 800169e:	d019      	beq.n	80016d4 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016a0:	2109      	movs	r1, #9
 80016a2:	6822      	ldr	r2, [r4, #0]
 80016a4:	438a      	bics	r2, r1
 80016a6:	4313      	orrs	r3, r2
 80016a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016aa:	f7ff fb0f 	bl	8000ccc <HAL_GetTick>
 80016ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b0:	2204      	movs	r2, #4
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	4213      	tst	r3, r2
 80016b6:	d007      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	6862      	ldr	r2, [r4, #4]
 80016ba:	692b      	ldr	r3, [r5, #16]
 80016bc:	495b      	ldr	r1, [pc, #364]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	400a      	ands	r2, r1
 80016c2:	4313      	orrs	r3, r2
 80016c4:	6063      	str	r3, [r4, #4]
 80016c6:	e733      	b.n	8001530 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fb00 	bl	8000ccc <HAL_GetTick>
 80016cc:	1bc0      	subs	r0, r0, r7
 80016ce:	2802      	cmp	r0, #2
 80016d0:	d9ee      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1b0>
 80016d2:	e788      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 80016d4:	2201      	movs	r2, #1
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	4393      	bics	r3, r2
 80016da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016dc:	f7ff faf6 	bl	8000ccc <HAL_GetTick>
 80016e0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016e2:	2204      	movs	r2, #4
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	4213      	tst	r3, r2
 80016e8:	d100      	bne.n	80016ec <HAL_RCC_OscConfig+0x1ec>
 80016ea:	e721      	b.n	8001530 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff faee 	bl	8000ccc <HAL_GetTick>
 80016f0:	1bc0      	subs	r0, r0, r7
 80016f2:	2802      	cmp	r0, #2
 80016f4:	d9f5      	bls.n	80016e2 <HAL_RCC_OscConfig+0x1e2>
 80016f6:	e776      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016f8:	69ab      	ldr	r3, [r5, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d020      	beq.n	8001740 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	6822      	ldr	r2, [r4, #0]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4313      	orrs	r3, r2
 8001706:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001708:	f7ff fae0 	bl	8000ccc <HAL_GetTick>
 800170c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	4213      	tst	r3, r2
 8001716:	d00d      	beq.n	8001734 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	4a3f      	ldr	r2, [pc, #252]	; (8001818 <HAL_RCC_OscConfig+0x318>)
 800171c:	4013      	ands	r3, r2
 800171e:	6a2a      	ldr	r2, [r5, #32]
 8001720:	4313      	orrs	r3, r2
 8001722:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001724:	6862      	ldr	r2, [r4, #4]
 8001726:	69eb      	ldr	r3, [r5, #28]
 8001728:	0212      	lsls	r2, r2, #8
 800172a:	061b      	lsls	r3, r3, #24
 800172c:	0a12      	lsrs	r2, r2, #8
 800172e:	4313      	orrs	r3, r2
 8001730:	6063      	str	r3, [r4, #4]
 8001732:	e729      	b.n	8001588 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7ff faca 	bl	8000ccc <HAL_GetTick>
 8001738:	1bc0      	subs	r0, r0, r7
 800173a:	2802      	cmp	r0, #2
 800173c:	d9e7      	bls.n	800170e <HAL_RCC_OscConfig+0x20e>
 800173e:	e752      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	4a3b      	ldr	r2, [pc, #236]	; (8001830 <HAL_RCC_OscConfig+0x330>)
 8001744:	4013      	ands	r3, r2
 8001746:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001748:	f7ff fac0 	bl	8000ccc <HAL_GetTick>
 800174c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4213      	tst	r3, r2
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x25a>
 8001758:	e716      	b.n	8001588 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800175a:	f7ff fab7 	bl	8000ccc <HAL_GetTick>
 800175e:	1bc0      	subs	r0, r0, r7
 8001760:	2802      	cmp	r0, #2
 8001762:	d9f4      	bls.n	800174e <HAL_RCC_OscConfig+0x24e>
 8001764:	e73f      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001766:	696a      	ldr	r2, [r5, #20]
 8001768:	2301      	movs	r3, #1
 800176a:	2a00      	cmp	r2, #0
 800176c:	d010      	beq.n	8001790 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 800176e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001770:	4313      	orrs	r3, r2
 8001772:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001774:	f7ff faaa 	bl	8000ccc <HAL_GetTick>
 8001778:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800177a:	2202      	movs	r2, #2
 800177c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800177e:	4213      	tst	r3, r2
 8001780:	d000      	beq.n	8001784 <HAL_RCC_OscConfig+0x284>
 8001782:	e705      	b.n	8001590 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff faa2 	bl	8000ccc <HAL_GetTick>
 8001788:	1bc0      	subs	r0, r0, r7
 800178a:	2802      	cmp	r0, #2
 800178c:	d9f5      	bls.n	800177a <HAL_RCC_OscConfig+0x27a>
 800178e:	e72a      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 8001790:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001792:	439a      	bics	r2, r3
 8001794:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001796:	f7ff fa99 	bl	8000ccc <HAL_GetTick>
 800179a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800179c:	2202      	movs	r2, #2
 800179e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017a0:	4213      	tst	r3, r2
 80017a2:	d100      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2a6>
 80017a4:	e6f4      	b.n	8001590 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fa91 	bl	8000ccc <HAL_GetTick>
 80017aa:	1bc0      	subs	r0, r0, r7
 80017ac:	2802      	cmp	r0, #2
 80017ae:	d9f5      	bls.n	800179c <HAL_RCC_OscConfig+0x29c>
 80017b0:	e719      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80017b4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80017b8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017bc:	421a      	tst	r2, r3
 80017be:	d104      	bne.n	80017ca <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80017c2:	4313      	orrs	r3, r2
 80017c4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80017c6:	2301      	movs	r3, #1
 80017c8:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	4f19      	ldr	r7, [pc, #100]	; (8001834 <HAL_RCC_OscConfig+0x334>)
 80017ce:	0052      	lsls	r2, r2, #1
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4213      	tst	r3, r2
 80017d4:	d008      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	68ab      	ldr	r3, [r5, #8]
 80017da:	0052      	lsls	r2, r2, #1
 80017dc:	4293      	cmp	r3, r2
 80017de:	d12b      	bne.n	8001838 <HAL_RCC_OscConfig+0x338>
 80017e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80017e2:	4313      	orrs	r3, r2
 80017e4:	6523      	str	r3, [r4, #80]	; 0x50
 80017e6:	e04c      	b.n	8001882 <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	0052      	lsls	r2, r2, #1
 80017ee:	4313      	orrs	r3, r2
 80017f0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80017f2:	f7ff fa6b 	bl	8000ccc <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80017fa:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	9303      	str	r3, [sp, #12]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	9a03      	ldr	r2, [sp, #12]
 8001802:	4213      	tst	r3, r2
 8001804:	d1e7      	bne.n	80017d6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7ff fa61 	bl	8000ccc <HAL_GetTick>
 800180a:	9b02      	ldr	r3, [sp, #8]
 800180c:	1ac0      	subs	r0, r0, r3
 800180e:	2864      	cmp	r0, #100	; 0x64
 8001810:	d9f5      	bls.n	80017fe <HAL_RCC_OscConfig+0x2fe>
 8001812:	e6e8      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
 8001814:	40021000 	.word	0x40021000
 8001818:	ffff1fff 	.word	0xffff1fff
 800181c:	08002850 	.word	0x08002850
 8001820:	20000000 	.word	0x20000000
 8001824:	fffeffff 	.word	0xfffeffff
 8001828:	fffbffff 	.word	0xfffbffff
 800182c:	ffffe0ff 	.word	0xffffe0ff
 8001830:	fffffeff 	.word	0xfffffeff
 8001834:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	2b00      	cmp	r3, #0
 800183a:	d116      	bne.n	800186a <HAL_RCC_OscConfig+0x36a>
 800183c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800183e:	4a53      	ldr	r2, [pc, #332]	; (800198c <HAL_RCC_OscConfig+0x48c>)
 8001840:	4013      	ands	r3, r2
 8001842:	6523      	str	r3, [r4, #80]	; 0x50
 8001844:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001846:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_RCC_OscConfig+0x490>)
 8001848:	4013      	ands	r3, r2
 800184a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800184c:	f7ff fa3e 	bl	8000ccc <HAL_GetTick>
 8001850:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4213      	tst	r3, r2
 800185a:	d02a      	beq.n	80018b2 <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff fa36 	bl	8000ccc <HAL_GetTick>
 8001860:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <HAL_RCC_OscConfig+0x494>)
 8001862:	1bc0      	subs	r0, r0, r7
 8001864:	4298      	cmp	r0, r3
 8001866:	d9f4      	bls.n	8001852 <HAL_RCC_OscConfig+0x352>
 8001868:	e6bd      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	21a0      	movs	r1, #160	; 0xa0
 800186c:	00c9      	lsls	r1, r1, #3
 800186e:	428b      	cmp	r3, r1
 8001870:	d10b      	bne.n	800188a <HAL_RCC_OscConfig+0x38a>
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	430b      	orrs	r3, r1
 800187a:	6523      	str	r3, [r4, #80]	; 0x50
 800187c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800187e:	431a      	orrs	r2, r3
 8001880:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001882:	f7ff fa23 	bl	8000ccc <HAL_GetTick>
 8001886:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001888:	e00e      	b.n	80018a8 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800188c:	4a3f      	ldr	r2, [pc, #252]	; (800198c <HAL_RCC_OscConfig+0x48c>)
 800188e:	4013      	ands	r3, r2
 8001890:	6523      	str	r3, [r4, #80]	; 0x50
 8001892:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001894:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <HAL_RCC_OscConfig+0x490>)
 8001896:	4013      	ands	r3, r2
 8001898:	e7a4      	b.n	80017e4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fa17 	bl	8000ccc <HAL_GetTick>
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_OscConfig+0x494>)
 80018a0:	1bc0      	subs	r0, r0, r7
 80018a2:	4298      	cmp	r0, r3
 80018a4:	d900      	bls.n	80018a8 <HAL_RCC_OscConfig+0x3a8>
 80018a6:	e69e      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018a8:	2280      	movs	r2, #128	; 0x80
 80018aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4213      	tst	r3, r2
 80018b0:	d0f3      	beq.n	800189a <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d000      	beq.n	80018ba <HAL_RCC_OscConfig+0x3ba>
 80018b8:	e66e      	b.n	8001598 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018bc:	4a36      	ldr	r2, [pc, #216]	; (8001998 <HAL_RCC_OscConfig+0x498>)
 80018be:	4013      	ands	r3, r2
 80018c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80018c2:	e669      	b.n	8001598 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c4:	2e0c      	cmp	r6, #12
 80018c6:	d043      	beq.n	8001950 <HAL_RCC_OscConfig+0x450>
 80018c8:	4a34      	ldr	r2, [pc, #208]	; (800199c <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d12e      	bne.n	800192c <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 80018ce:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018d0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4013      	ands	r3, r2
 80018d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018d6:	f7ff f9f9 	bl	8000ccc <HAL_GetTick>
 80018da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018dc:	04b6      	lsls	r6, r6, #18
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	4233      	tst	r3, r6
 80018e2:	d11d      	bne.n	8001920 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80018e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80018e8:	68e2      	ldr	r2, [r4, #12]
 80018ea:	430b      	orrs	r3, r1
 80018ec:	492c      	ldr	r1, [pc, #176]	; (80019a0 <HAL_RCC_OscConfig+0x4a0>)
 80018ee:	400a      	ands	r2, r1
 80018f0:	4313      	orrs	r3, r2
 80018f2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018f4:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	045b      	lsls	r3, r3, #17
 8001900:	4313      	orrs	r3, r2
 8001902:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001904:	f7ff f9e2 	bl	8000ccc <HAL_GetTick>
 8001908:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800190a:	04ad      	lsls	r5, r5, #18
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	422b      	tst	r3, r5
 8001910:	d000      	beq.n	8001914 <HAL_RCC_OscConfig+0x414>
 8001912:	e645      	b.n	80015a0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f9da 	bl	8000ccc <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	2802      	cmp	r0, #2
 800191c:	d9f6      	bls.n	800190c <HAL_RCC_OscConfig+0x40c>
 800191e:	e662      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f9d4 	bl	8000ccc <HAL_GetTick>
 8001924:	1bc0      	subs	r0, r0, r7
 8001926:	2802      	cmp	r0, #2
 8001928:	d9d9      	bls.n	80018de <HAL_RCC_OscConfig+0x3de>
 800192a:	e65c      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 800192c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800192e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001930:	4013      	ands	r3, r2
 8001932:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001934:	f7ff f9ca 	bl	8000ccc <HAL_GetTick>
 8001938:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800193a:	04ad      	lsls	r5, r5, #18
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	422b      	tst	r3, r5
 8001940:	d100      	bne.n	8001944 <HAL_RCC_OscConfig+0x444>
 8001942:	e62d      	b.n	80015a0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f9c2 	bl	8000ccc <HAL_GetTick>
 8001948:	1b80      	subs	r0, r0, r6
 800194a:	2802      	cmp	r0, #2
 800194c:	d9f6      	bls.n	800193c <HAL_RCC_OscConfig+0x43c>
 800194e:	e64a      	b.n	80015e6 <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 8001950:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001952:	2b01      	cmp	r3, #1
 8001954:	d100      	bne.n	8001958 <HAL_RCC_OscConfig+0x458>
 8001956:	e5d9      	b.n	800150c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001958:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800195a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800195e:	0252      	lsls	r2, r2, #9
 8001960:	401a      	ands	r2, r3
        return HAL_ERROR;
 8001962:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001964:	428a      	cmp	r2, r1
 8001966:	d000      	beq.n	800196a <HAL_RCC_OscConfig+0x46a>
 8001968:	e5d0      	b.n	800150c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800196a:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800196e:	0392      	lsls	r2, r2, #14
 8001970:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	428a      	cmp	r2, r1
 8001974:	d000      	beq.n	8001978 <HAL_RCC_OscConfig+0x478>
 8001976:	e5c9      	b.n	800150c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001978:	20c0      	movs	r0, #192	; 0xc0
 800197a:	0400      	lsls	r0, r0, #16
 800197c:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800197e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001980:	1a18      	subs	r0, r3, r0
 8001982:	1e43      	subs	r3, r0, #1
 8001984:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001986:	b2c0      	uxtb	r0, r0
 8001988:	e5c0      	b.n	800150c <HAL_RCC_OscConfig+0xc>
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	fffffeff 	.word	0xfffffeff
 8001990:	fffffbff 	.word	0xfffffbff
 8001994:	00001388 	.word	0x00001388
 8001998:	efffffff 	.word	0xefffffff
 800199c:	feffffff 	.word	0xfeffffff
 80019a0:	ff02ffff 	.word	0xff02ffff

080019a4 <HAL_RCC_ClockConfig>:
{
 80019a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019a6:	1e06      	subs	r6, r0, #0
 80019a8:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80019ac:	2001      	movs	r0, #1
}
 80019ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	2201      	movs	r2, #1
 80019b2:	4c51      	ldr	r4, [pc, #324]	; (8001af8 <HAL_RCC_ClockConfig+0x154>)
 80019b4:	9901      	ldr	r1, [sp, #4]
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	4013      	ands	r3, r2
 80019ba:	428b      	cmp	r3, r1
 80019bc:	d327      	bcc.n	8001a0e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019be:	6832      	ldr	r2, [r6, #0]
 80019c0:	0793      	lsls	r3, r2, #30
 80019c2:	d42f      	bmi.n	8001a24 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c4:	07d3      	lsls	r3, r2, #31
 80019c6:	d435      	bmi.n	8001a34 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c8:	2301      	movs	r3, #1
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	401a      	ands	r2, r3
 80019d0:	428a      	cmp	r2, r1
 80019d2:	d900      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x32>
 80019d4:	e081      	b.n	8001ada <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d6:	6832      	ldr	r2, [r6, #0]
 80019d8:	4c48      	ldr	r4, [pc, #288]	; (8001afc <HAL_RCC_ClockConfig+0x158>)
 80019da:	0753      	lsls	r3, r2, #29
 80019dc:	d500      	bpl.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
 80019de:	e084      	b.n	8001aea <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	0713      	lsls	r3, r2, #28
 80019e2:	d506      	bpl.n	80019f2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019e4:	68e2      	ldr	r2, [r4, #12]
 80019e6:	6933      	ldr	r3, [r6, #16]
 80019e8:	4945      	ldr	r1, [pc, #276]	; (8001b00 <HAL_RCC_ClockConfig+0x15c>)
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	400a      	ands	r2, r1
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f2:	f7ff fd45 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 80019f6:	68e3      	ldr	r3, [r4, #12]
 80019f8:	4a42      	ldr	r2, [pc, #264]	; (8001b04 <HAL_RCC_ClockConfig+0x160>)
 80019fa:	061b      	lsls	r3, r3, #24
 80019fc:	0f1b      	lsrs	r3, r3, #28
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	40d8      	lsrs	r0, r3
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_ClockConfig+0x164>)
 8001a04:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff f92c 	bl	8000c64 <HAL_InitTick>
 8001a0c:	e7cf      	b.n	80019ae <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	9901      	ldr	r1, [sp, #4]
 8001a12:	4393      	bics	r3, r2
 8001a14:	430b      	orrs	r3, r1
 8001a16:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	9a01      	ldr	r2, [sp, #4]
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d1c4      	bne.n	80019ac <HAL_RCC_ClockConfig+0x8>
 8001a22:	e7cc      	b.n	80019be <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	20f0      	movs	r0, #240	; 0xf0
 8001a26:	4935      	ldr	r1, [pc, #212]	; (8001afc <HAL_RCC_ClockConfig+0x158>)
 8001a28:	68cb      	ldr	r3, [r1, #12]
 8001a2a:	4383      	bics	r3, r0
 8001a2c:	68b0      	ldr	r0, [r6, #8]
 8001a2e:	4303      	orrs	r3, r0
 8001a30:	60cb      	str	r3, [r1, #12]
 8001a32:	e7c7      	b.n	80019c4 <HAL_RCC_ClockConfig+0x20>
 8001a34:	4d31      	ldr	r5, [pc, #196]	; (8001afc <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a38:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	2a02      	cmp	r2, #2
 8001a3c:	d119      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a3e:	039b      	lsls	r3, r3, #14
 8001a40:	d5b4      	bpl.n	80019ac <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	2103      	movs	r1, #3
 8001a44:	68eb      	ldr	r3, [r5, #12]
 8001a46:	438b      	bics	r3, r1
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f93e 	bl	8000ccc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a50:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a52:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d119      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a58:	220c      	movs	r2, #12
 8001a5a:	68eb      	ldr	r3, [r5, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d0b2      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a62:	f7ff f933 	bl	8000ccc <HAL_GetTick>
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_RCC_ClockConfig+0x168>)
 8001a68:	1bc0      	subs	r0, r0, r7
 8001a6a:	4298      	cmp	r0, r3
 8001a6c:	d9f4      	bls.n	8001a58 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001a6e:	2003      	movs	r0, #3
 8001a70:	e79d      	b.n	80019ae <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a72:	2a03      	cmp	r2, #3
 8001a74:	d102      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a76:	019b      	lsls	r3, r3, #6
 8001a78:	d4e3      	bmi.n	8001a42 <HAL_RCC_ClockConfig+0x9e>
 8001a7a:	e797      	b.n	80019ac <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a7c:	2a01      	cmp	r2, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a80:	075b      	lsls	r3, r3, #29
 8001a82:	d4de      	bmi.n	8001a42 <HAL_RCC_ClockConfig+0x9e>
 8001a84:	e792      	b.n	80019ac <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a86:	059b      	lsls	r3, r3, #22
 8001a88:	d4db      	bmi.n	8001a42 <HAL_RCC_ClockConfig+0x9e>
 8001a8a:	e78f      	b.n	80019ac <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a90:	220c      	movs	r2, #12
 8001a92:	68eb      	ldr	r3, [r5, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d096      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9a:	f7ff f917 	bl	8000ccc <HAL_GetTick>
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_RCC_ClockConfig+0x168>)
 8001aa0:	1bc0      	subs	r0, r0, r7
 8001aa2:	4298      	cmp	r0, r3
 8001aa4:	d9f4      	bls.n	8001a90 <HAL_RCC_ClockConfig+0xec>
 8001aa6:	e7e2      	b.n	8001a6e <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d010      	beq.n	8001ace <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001aac:	220c      	movs	r2, #12
 8001aae:	68eb      	ldr	r3, [r5, #12]
 8001ab0:	4213      	tst	r3, r2
 8001ab2:	d089      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff f90a 	bl	8000ccc <HAL_GetTick>
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_RCC_ClockConfig+0x168>)
 8001aba:	1bc0      	subs	r0, r0, r7
 8001abc:	4298      	cmp	r0, r3
 8001abe:	d9f5      	bls.n	8001aac <HAL_RCC_ClockConfig+0x108>
 8001ac0:	e7d5      	b.n	8001a6e <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac2:	f7ff f903 	bl	8000ccc <HAL_GetTick>
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_RCC_ClockConfig+0x168>)
 8001ac8:	1bc0      	subs	r0, r0, r7
 8001aca:	4298      	cmp	r0, r3
 8001acc:	d8cf      	bhi.n	8001a6e <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	68eb      	ldr	r3, [r5, #12]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d1f4      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x11e>
 8001ad8:	e776      	b.n	80019c8 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	439a      	bics	r2, r3
 8001ade:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae0:	6822      	ldr	r2, [r4, #0]
 8001ae2:	421a      	tst	r2, r3
 8001ae4:	d100      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x144>
 8001ae6:	e776      	b.n	80019d6 <HAL_RCC_ClockConfig+0x32>
 8001ae8:	e760      	b.n	80019ac <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aea:	68e3      	ldr	r3, [r4, #12]
 8001aec:	4908      	ldr	r1, [pc, #32]	; (8001b10 <HAL_RCC_ClockConfig+0x16c>)
 8001aee:	400b      	ands	r3, r1
 8001af0:	68f1      	ldr	r1, [r6, #12]
 8001af2:	430b      	orrs	r3, r1
 8001af4:	60e3      	str	r3, [r4, #12]
 8001af6:	e773      	b.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
 8001af8:	40022000 	.word	0x40022000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	ffffc7ff 	.word	0xffffc7ff
 8001b04:	08002850 	.word	0x08002850
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	00001388 	.word	0x00001388
 8001b10:	fffff8ff 	.word	0xfffff8ff

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	055b      	lsls	r3, r3, #21
 8001b1c:	0f5b      	lsrs	r3, r3, #29
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b22:	6810      	ldr	r0, [r2, #0]
 8001b24:	40d8      	lsrs	r0, r3
}
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08002860 	.word	0x08002860
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	049b      	lsls	r3, r3, #18
 8001b3c:	0f5b      	lsrs	r3, r3, #29
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b42:	6810      	ldr	r0, [r2, #0]
 8001b44:	40d8      	lsrs	r0, r3
}
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08002860 	.word	0x08002860
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b54:	6803      	ldr	r3, [r0, #0]
{
 8001b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b58:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b5a:	069b      	lsls	r3, r3, #26
 8001b5c:	d53b      	bpl.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001b60:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4c4f      	ldr	r4, [pc, #316]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b64:	055b      	lsls	r3, r3, #21
 8001b66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001b68:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	421a      	tst	r2, r3
 8001b6c:	d104      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b70:	4313      	orrs	r3, r2
 8001b72:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	2780      	movs	r7, #128	; 0x80
 8001b7a:	4e4a      	ldr	r6, [pc, #296]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b7c:	007f      	lsls	r7, r7, #1
 8001b7e:	6833      	ldr	r3, [r6, #0]
 8001b80:	423b      	tst	r3, r7
 8001b82:	d04f      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b84:	6868      	ldr	r0, [r5, #4]
 8001b86:	23c0      	movs	r3, #192	; 0xc0
 8001b88:	26c0      	movs	r6, #192	; 0xc0
 8001b8a:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b8c:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b8e:	03b6      	lsls	r6, r6, #14
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b94:	4032      	ands	r2, r6
 8001b96:	4019      	ands	r1, r3
 8001b98:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b9a:	4290      	cmp	r0, r2
 8001b9c:	d153      	bne.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ba0:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ba2:	d157      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ba4:	6869      	ldr	r1, [r5, #4]
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	000a      	movs	r2, r1
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	401a      	ands	r2, r3
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	483c      	ldr	r0, [pc, #240]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001bb6:	4003      	ands	r3, r0
 8001bb8:	20c0      	movs	r0, #192	; 0xc0
 8001bba:	0380      	lsls	r0, r0, #14
 8001bbc:	4001      	ands	r1, r0
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	6023      	str	r3, [r4, #0]
 8001bc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001bc4:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc8:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d103      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bd0:	4a36      	ldr	r2, [pc, #216]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bd6:	682a      	ldr	r2, [r5, #0]
 8001bd8:	0793      	lsls	r3, r2, #30
 8001bda:	d506      	bpl.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bdc:	200c      	movs	r0, #12
 8001bde:	4930      	ldr	r1, [pc, #192]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001be0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001be2:	4383      	bics	r3, r0
 8001be4:	68a8      	ldr	r0, [r5, #8]
 8001be6:	4303      	orrs	r3, r0
 8001be8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bea:	0753      	lsls	r3, r2, #29
 8001bec:	d506      	bpl.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001bee:	492c      	ldr	r1, [pc, #176]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bf0:	482f      	ldr	r0, [pc, #188]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001bf2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001bf4:	4003      	ands	r3, r0
 8001bf6:	68e8      	ldr	r0, [r5, #12]
 8001bf8:	4303      	orrs	r3, r0
 8001bfa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bfc:	0713      	lsls	r3, r2, #28
 8001bfe:	d506      	bpl.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c00:	4927      	ldr	r1, [pc, #156]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c02:	482c      	ldr	r0, [pc, #176]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c04:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001c06:	4003      	ands	r3, r0
 8001c08:	6928      	ldr	r0, [r5, #16]
 8001c0a:	4303      	orrs	r3, r0
 8001c0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c10:	0613      	lsls	r3, r2, #24
 8001c12:	d517      	bpl.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c14:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c16:	4928      	ldr	r1, [pc, #160]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c18:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	6969      	ldr	r1, [r5, #20]
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	e00f      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c24:	6833      	ldr	r3, [r6, #0]
 8001c26:	433b      	orrs	r3, r7
 8001c28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f84f 	bl	8000ccc <HAL_GetTick>
 8001c2e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	6833      	ldr	r3, [r6, #0]
 8001c32:	423b      	tst	r3, r7
 8001c34:	d1a6      	bne.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f849 	bl	8000ccc <HAL_GetTick>
 8001c3a:	9b01      	ldr	r3, [sp, #4]
 8001c3c:	1ac0      	subs	r0, r0, r3
 8001c3e:	2864      	cmp	r0, #100	; 0x64
 8001c40:	d9f6      	bls.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 8001c42:	2003      	movs	r0, #3
}
 8001c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c46:	4299      	cmp	r1, r3
 8001c48:	d1a9      	bne.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c4a:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8001c4c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c4e:	039b      	lsls	r3, r3, #14
 8001c50:	d5a5      	bpl.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8001c52:	e7f7      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c54:	428b      	cmp	r3, r1
 8001c56:	d0a5      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	069b      	lsls	r3, r3, #26
 8001c5c:	d5a2      	bpl.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c5e:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c60:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c62:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001c64:	0312      	lsls	r2, r2, #12
 8001c66:	4302      	orrs	r2, r0
 8001c68:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c70:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c72:	4002      	ands	r2, r0
 8001c74:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001c76:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001c78:	05cb      	lsls	r3, r1, #23
 8001c7a:	d400      	bmi.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8001c7c:	e792      	b.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f825 	bl	8000ccc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c82:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001c84:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c86:	00bf      	lsls	r7, r7, #2
 8001c88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001c8a:	423b      	tst	r3, r7
 8001c8c:	d000      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001c8e:	e789      	b.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff f81c 	bl	8000ccc <HAL_GetTick>
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001c96:	1b80      	subs	r0, r0, r6
 8001c98:	4298      	cmp	r0, r3
 8001c9a:	d9f5      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001c9c:	e7d1      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	ffcfffff 	.word	0xffcfffff
 8001cac:	efffffff 	.word	0xefffffff
 8001cb0:	fffff3ff 	.word	0xfffff3ff
 8001cb4:	ffffcfff 	.word	0xffffcfff
 8001cb8:	fff3ffff 	.word	0xfff3ffff
 8001cbc:	fffcffff 	.word	0xfffcffff
 8001cc0:	fff7ffff 	.word	0xfff7ffff
 8001cc4:	00001388 	.word	0x00001388

08001cc8 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001cc8:	6803      	ldr	r3, [r0, #0]
{
 8001cca:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001ccc:	689a      	ldr	r2, [r3, #8]
{
 8001cce:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001cd0:	04d2      	lsls	r2, r2, #19
 8001cd2:	d50a      	bpl.n	8001cea <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	05db      	lsls	r3, r3, #23
 8001cd8:	d507      	bpl.n	8001cea <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001cda:	f7fe fbf5 	bl	80004c8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001cde:	6821      	ldr	r1, [r4, #0]
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_RTC_AlarmIRQHandler+0x54>)
 8001ce2:	68ca      	ldr	r2, [r1, #12]
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	0492      	lsls	r2, r2, #18
 8001cf0:	d50b      	bpl.n	8001d0a <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	059b      	lsls	r3, r3, #22
 8001cf6:	d508      	bpl.n	8001d0a <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001cf8:	0020      	movs	r0, r4
 8001cfa:	f000 fa8b 	bl	8002214 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001cfe:	6821      	ldr	r1, [r4, #0]
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_RTC_AlarmIRQHandler+0x58>)
 8001d02:	68ca      	ldr	r2, [r1, #12]
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8001d0e:	0292      	lsls	r2, r2, #10
 8001d10:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001d12:	2301      	movs	r3, #1
 8001d14:	3402      	adds	r4, #2
 8001d16:	77e3      	strb	r3, [r4, #31]
}
 8001d18:	bd10      	pop	{r4, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	fffffe7f 	.word	0xfffffe7f
 8001d20:	fffffd7f 	.word	0xfffffd7f
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d28:	21a0      	movs	r1, #160	; 0xa0
 8001d2a:	6802      	ldr	r2, [r0, #0]
{
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d2e:	68d3      	ldr	r3, [r2, #12]
{
 8001d30:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d32:	438b      	bics	r3, r1
 8001d34:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001d36:	f7fe ffc9 	bl	8000ccc <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d3a:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001d3c:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d3e:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d40:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	422b      	tst	r3, r5
 8001d48:	d001      	beq.n	8001d4e <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001d4a:	2000      	movs	r0, #0
}
 8001d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d4e:	f7fe ffbd 	bl	8000ccc <HAL_GetTick>
 8001d52:	1b80      	subs	r0, r0, r6
 8001d54:	42b8      	cmp	r0, r7
 8001d56:	d9f4      	bls.n	8001d42 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001d58:	2003      	movs	r0, #3
 8001d5a:	e7f7      	b.n	8001d4c <HAL_RTC_WaitForSynchro+0x24>

08001d5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d5e:	2440      	movs	r4, #64	; 0x40
 8001d60:	6803      	ldr	r3, [r0, #0]
{
 8001d62:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4222      	tst	r2, r4
 8001d68:	d001      	beq.n	8001d6e <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001d6a:	2000      	movs	r0, #0
}
 8001d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4252      	negs	r2, r2
 8001d72:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001d74:	f7fe ffaa 	bl	8000ccc <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001d78:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001d7a:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001d7c:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	4223      	tst	r3, r4
 8001d84:	d1f1      	bne.n	8001d6a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001d86:	f7fe ffa1 	bl	8000ccc <HAL_GetTick>
 8001d8a:	1b80      	subs	r0, r0, r6
 8001d8c:	42b8      	cmp	r0, r7
 8001d8e:	d9f6      	bls.n	8001d7e <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8001d90:	2003      	movs	r0, #3
 8001d92:	e7eb      	b.n	8001d6c <RTC_EnterInitMode+0x10>

08001d94 <HAL_RTC_Init>:
{
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001d98:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d01a      	beq.n	8001dd4 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d9e:	1c86      	adds	r6, r0, #2
 8001da0:	7ff3      	ldrb	r3, [r6, #31]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d103      	bne.n	8001db0 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8001da8:	1942      	adds	r2, r0, r5
 8001daa:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8001dac:	f7fe fe94 	bl	8000ad8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001db0:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001db2:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001db4:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001db6:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001db8:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
 8001dbc:	3a77      	subs	r2, #119	; 0x77
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001dc0:	f7ff ffcc 	bl	8001d5c <RTC_EnterInitMode>
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	1e05      	subs	r5, r0, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dca:	22ff      	movs	r2, #255	; 0xff
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8001dd2:	2501      	movs	r5, #1
}
 8001dd4:	0028      	movs	r0, r5
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	491b      	ldr	r1, [pc, #108]	; (8001e48 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ddc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001dde:	400a      	ands	r2, r1
 8001de0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001de2:	6862      	ldr	r2, [r4, #4]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	4302      	orrs	r2, r0
 8001de8:	69a0      	ldr	r0, [r4, #24]
 8001dea:	4302      	orrs	r2, r0
 8001dec:	430a      	orrs	r2, r1
 8001dee:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001df0:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001df2:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001df4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001df6:	68a2      	ldr	r2, [r4, #8]
 8001df8:	6919      	ldr	r1, [r3, #16]
 8001dfa:	0412      	lsls	r2, r2, #16
 8001dfc:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001dfe:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001e00:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	438a      	bics	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e0a:	397d      	subs	r1, #125	; 0x7d
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001e10:	69e2      	ldr	r2, [r4, #28]
 8001e12:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001e14:	4302      	orrs	r2, r0
 8001e16:	430a      	orrs	r2, r1
 8001e18:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	069b      	lsls	r3, r3, #26
 8001e1e:	d40c      	bmi.n	8001e3a <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e20:	0020      	movs	r0, r4
 8001e22:	f7ff ff81 	bl	8001d28 <HAL_RTC_WaitForSynchro>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e2a:	22ff      	movs	r2, #255	; 0xff
 8001e2c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8001e2e:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e32:	2304      	movs	r3, #4
 8001e34:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8001e36:	77e5      	strb	r5, [r4, #31]
 8001e38:	e7cb      	b.n	8001dd2 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e3a:	22ff      	movs	r2, #255	; 0xff
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001e40:	2301      	movs	r3, #1
 8001e42:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8001e44:	e7c6      	b.n	8001dd4 <HAL_RTC_Init+0x40>
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	ff8fffbf 	.word	0xff8fffbf

08001e4c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001e4c:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8001e4e:	2809      	cmp	r0, #9
 8001e50:	d803      	bhi.n	8001e5a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4318      	orrs	r0, r3
 8001e56:	b2c0      	uxtb	r0, r0
}
 8001e58:	4770      	bx	lr
    Param -= 10U;
 8001e5a:	380a      	subs	r0, #10
    bcdhigh++;
 8001e5c:	3301      	adds	r3, #1
    Param -= 10U;
 8001e5e:	b2c0      	uxtb	r0, r0
 8001e60:	e7f5      	b.n	8001e4e <RTC_ByteToBcd2+0x2>
	...

08001e64 <HAL_RTC_SetTime>:
{
 8001e64:	2302      	movs	r3, #2
 8001e66:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001e68:	1c47      	adds	r7, r0, #1
{
 8001e6a:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001e6c:	7ff9      	ldrb	r1, [r7, #31]
{
 8001e6e:	b085      	sub	sp, #20
 8001e70:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8001e72:	001e      	movs	r6, r3
 8001e74:	2901      	cmp	r1, #1
 8001e76:	d037      	beq.n	8001ee8 <HAL_RTC_SetTime+0x84>
 8001e78:	2101      	movs	r1, #1
 8001e7a:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e7c:	18c1      	adds	r1, r0, r3
 8001e7e:	77cb      	strb	r3, [r1, #31]
 8001e80:	9101      	str	r1, [sp, #4]
 8001e82:	2140      	movs	r1, #64	; 0x40
 8001e84:	6806      	ldr	r6, [r0, #0]
 8001e86:	7863      	ldrb	r3, [r4, #1]
 8001e88:	7820      	ldrb	r0, [r4, #0]
 8001e8a:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e8c:	68b3      	ldr	r3, [r6, #8]
 8001e8e:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d12c      	bne.n	8001eee <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d100      	bne.n	8001e9a <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 8001e98:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001e9a:	f7ff ffd7 	bl	8001e4c <RTC_ByteToBcd2>
 8001e9e:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001ea0:	9802      	ldr	r0, [sp, #8]
 8001ea2:	f7ff ffd3 	bl	8001e4c <RTC_ByteToBcd2>
 8001ea6:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001ea8:	78a0      	ldrb	r0, [r4, #2]
 8001eaa:	f7ff ffcf 	bl	8001e4c <RTC_ByteToBcd2>
 8001eae:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001eb0:	78e0      	ldrb	r0, [r4, #3]
 8001eb2:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001eb4:	4318      	orrs	r0, r3
 8001eb6:	9b03      	ldr	r3, [sp, #12]
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001ebc:	9b02      	ldr	r3, [sp, #8]
 8001ebe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ec0:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ec2:	23ca      	movs	r3, #202	; 0xca
 8001ec4:	6273      	str	r3, [r6, #36]	; 0x24
 8001ec6:	3b77      	subs	r3, #119	; 0x77
 8001ec8:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001eca:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ecc:	0028      	movs	r0, r5
 8001ece:	f7ff ff45 	bl	8001d5c <RTC_EnterInitMode>
 8001ed2:	682b      	ldr	r3, [r5, #0]
 8001ed4:	1e06      	subs	r6, r0, #0
 8001ed6:	d016      	beq.n	8001f06 <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ed8:	22ff      	movs	r2, #255	; 0xff
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001edc:	2304      	movs	r3, #4
 8001ede:	9a01      	ldr	r2, [sp, #4]
 8001ee0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8001ee6:	2601      	movs	r6, #1
}
 8001ee8:	0030      	movs	r0, r6
 8001eea:	b005      	add	sp, #20
 8001eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d100      	bne.n	8001ef4 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 8001ef2:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001ef4:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ef6:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001ef8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001efa:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 8001efc:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001efe:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001f00:	78e3      	ldrb	r3, [r4, #3]
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	e7dc      	b.n	8001ec0 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f06:	4815      	ldr	r0, [pc, #84]	; (8001f5c <HAL_RTC_SetTime+0xf8>)
 8001f08:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001f0a:	4915      	ldr	r1, [pc, #84]	; (8001f60 <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f0c:	4002      	ands	r2, r0
 8001f0e:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001f10:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f12:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001f14:	400a      	ands	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f18:	68e2      	ldr	r2, [r4, #12]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	4302      	orrs	r2, r0
 8001f1e:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001f20:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f22:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	438a      	bics	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	069b      	lsls	r3, r3, #26
 8001f2e:	d40c      	bmi.n	8001f4a <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f30:	0028      	movs	r0, r5
 8001f32:	f7ff fef9 	bl	8001d28 <HAL_RTC_WaitForSynchro>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	682b      	ldr	r3, [r5, #0]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f40:	2304      	movs	r3, #4
 8001f42:	9a01      	ldr	r2, [sp, #4]
 8001f44:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8001f46:	77fe      	strb	r6, [r7, #31]
 8001f48:	e7cd      	b.n	8001ee6 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f4a:	22ff      	movs	r2, #255	; 0xff
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001f50:	2301      	movs	r3, #1
 8001f52:	9a01      	ldr	r2, [sp, #4]
 8001f54:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001f56:	2300      	movs	r3, #0
 8001f58:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001f5a:	e7c5      	b.n	8001ee8 <HAL_RTC_SetTime+0x84>
 8001f5c:	007f7f7f 	.word	0x007f7f7f
 8001f60:	fffbffff 	.word	0xfffbffff

08001f64 <HAL_RTC_SetDate>:
{
 8001f64:	2302      	movs	r3, #2
 8001f66:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001f68:	1c47      	adds	r7, r0, #1
{
 8001f6a:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001f6c:	7ff9      	ldrb	r1, [r7, #31]
{
 8001f6e:	b085      	sub	sp, #20
 8001f70:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8001f72:	001d      	movs	r5, r3
 8001f74:	2901      	cmp	r1, #1
 8001f76:	d036      	beq.n	8001fe6 <HAL_RTC_SetDate+0x82>
 8001f78:	2101      	movs	r1, #1
 8001f7a:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f7c:	18c1      	adds	r1, r0, r3
 8001f7e:	9101      	str	r1, [sp, #4]
 8001f80:	77cb      	strb	r3, [r1, #31]
 8001f82:	7831      	ldrb	r1, [r6, #0]
 8001f84:	78f0      	ldrb	r0, [r6, #3]
 8001f86:	0349      	lsls	r1, r1, #13
 8001f88:	7873      	ldrb	r3, [r6, #1]
 8001f8a:	78b5      	ldrb	r5, [r6, #2]
 8001f8c:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	d14c      	bne.n	800202c <HAL_RTC_SetDate+0xc8>
 8001f92:	3210      	adds	r2, #16
 8001f94:	4213      	tst	r3, r2
 8001f96:	d002      	beq.n	8001f9e <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001f98:	4393      	bics	r3, r2
 8001f9a:	330a      	adds	r3, #10
 8001f9c:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001f9e:	f7ff ff55 	bl	8001e4c <RTC_ByteToBcd2>
 8001fa2:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001fa4:	7870      	ldrb	r0, [r6, #1]
 8001fa6:	f7ff ff51 	bl	8001e4c <RTC_ByteToBcd2>
 8001faa:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001fac:	0028      	movs	r0, r5
 8001fae:	f7ff ff4d 	bl	8001e4c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001fb2:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001fb4:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001fb6:	041d      	lsls	r5, r3, #16
 8001fb8:	9b02      	ldr	r3, [sp, #8]
 8001fba:	4318      	orrs	r0, r3
 8001fbc:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fbe:	22ca      	movs	r2, #202	; 0xca
 8001fc0:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fc2:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8001fc6:	3a77      	subs	r2, #119	; 0x77
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fca:	f7ff fec7 	bl	8001d5c <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001fce:	432e      	orrs	r6, r5
 8001fd0:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fd2:	1e05      	subs	r5, r0, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	9a01      	ldr	r2, [sp, #4]
 8001fde:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8001fe4:	2501      	movs	r5, #1
}
 8001fe6:	0028      	movs	r0, r5
 8001fe8:	b005      	add	sp, #20
 8001fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001fec:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001fee:	4812      	ldr	r0, [pc, #72]	; (8002038 <HAL_RTC_SetDate+0xd4>)
 8001ff0:	4006      	ands	r6, r0
 8001ff2:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	438a      	bics	r2, r1
 8001ff8:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	069b      	lsls	r3, r3, #26
 8001ffe:	d40c      	bmi.n	800201a <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002000:	0020      	movs	r0, r4
 8002002:	f7ff fe91 	bl	8001d28 <HAL_RTC_WaitForSynchro>
 8002006:	2800      	cmp	r0, #0
 8002008:	d007      	beq.n	800201a <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002010:	2304      	movs	r3, #4
 8002012:	9a01      	ldr	r2, [sp, #4]
 8002014:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8002016:	77fd      	strb	r5, [r7, #31]
 8002018:	e7e4      	b.n	8001fe4 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002020:	2301      	movs	r3, #1
 8002022:	9a01      	ldr	r2, [sp, #4]
 8002024:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002026:	2300      	movs	r3, #0
 8002028:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800202a:	e7dc      	b.n	8001fe6 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800202c:	9a02      	ldr	r2, [sp, #8]
 800202e:	0400      	lsls	r0, r0, #16
 8002030:	4310      	orrs	r0, r2
 8002032:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8002034:	021e      	lsls	r6, r3, #8
 8002036:	e7c2      	b.n	8001fbe <HAL_RTC_SetDate+0x5a>
 8002038:	00ffff3f 	.word	0x00ffff3f

0800203c <HAL_RTC_SetAlarm_IT>:
{
 800203c:	2302      	movs	r3, #2
 800203e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002040:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8002042:	1c41      	adds	r1, r0, #1
 8002044:	7fce      	ldrb	r6, [r1, #31]
{
 8002046:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002048:	0018      	movs	r0, r3
 800204a:	2e01      	cmp	r6, #1
 800204c:	d100      	bne.n	8002050 <HAL_RTC_SetAlarm_IT+0x14>
 800204e:	e08c      	b.n	800216a <HAL_RTC_SetAlarm_IT+0x12e>
 8002050:	3801      	subs	r0, #1
 8002052:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002054:	18e1      	adds	r1, r4, r3
 8002056:	77cb      	strb	r3, [r1, #31]
 8002058:	2140      	movs	r1, #64	; 0x40
 800205a:	786b      	ldrb	r3, [r5, #1]
 800205c:	6826      	ldr	r6, [r4, #0]
 800205e:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002060:	68b3      	ldr	r3, [r6, #8]
 8002062:	7828      	ldrb	r0, [r5, #0]
 8002064:	78af      	ldrb	r7, [r5, #2]
 8002066:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8002068:	2a00      	cmp	r2, #0
 800206a:	d15d      	bne.n	8002128 <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800206c:	2b00      	cmp	r3, #0
 800206e:	d100      	bne.n	8002072 <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002070:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002072:	f7ff feeb 	bl	8001e4c <RTC_ByteToBcd2>
 8002076:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002078:	9800      	ldr	r0, [sp, #0]
 800207a:	f7ff fee7 	bl	8001e4c <RTC_ByteToBcd2>
 800207e:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002080:	0038      	movs	r0, r7
 8002082:	f7ff fee3 	bl	8001e4c <RTC_ByteToBcd2>
 8002086:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002088:	1c6b      	adds	r3, r5, #1
 800208a:	7fd8      	ldrb	r0, [r3, #31]
 800208c:	f7ff fede 	bl	8001e4c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002090:	696a      	ldr	r2, [r5, #20]
 8002092:	69eb      	ldr	r3, [r5, #28]
 8002094:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002096:	78ea      	ldrb	r2, [r5, #3]
 8002098:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800209a:	4313      	orrs	r3, r2
 800209c:	431f      	orrs	r7, r3
 800209e:	9b01      	ldr	r3, [sp, #4]
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80020a4:	9b00      	ldr	r3, [sp, #0]
 80020a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80020a8:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80020aa:	69aa      	ldr	r2, [r5, #24]
 80020ac:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80020ae:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80020b0:	4313      	orrs	r3, r2
 80020b2:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020b4:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 80020b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020b8:	6273      	str	r3, [r6, #36]	; 0x24
 80020ba:	3b77      	subs	r3, #119	; 0x77
 80020bc:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80020be:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80020c0:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d152      	bne.n	800216c <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80020c6:	68b3      	ldr	r3, [r6, #8]
 80020c8:	4a3b      	ldr	r2, [pc, #236]	; (80021b8 <HAL_RTC_SetAlarm_IT+0x17c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80020ce:	68f2      	ldr	r2, [r6, #12]
 80020d0:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RTC_SetAlarm_IT+0x180>)
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80020d8:	f7fe fdf8 	bl	8000ccc <HAL_GetTick>
 80020dc:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80020de:	2201      	movs	r2, #1
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	68dd      	ldr	r5, [r3, #12]
 80020e4:	4015      	ands	r5, r2
 80020e6:	d031      	beq.n	800214c <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80020e8:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80020ea:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <HAL_RTC_SetAlarm_IT+0x184>)
 8002106:	0292      	lsls	r2, r2, #10
 8002108:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800210a:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800210c:	4311      	orrs	r1, r2
 800210e:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	430a      	orrs	r2, r1
 8002114:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800211c:	3afe      	subs	r2, #254	; 0xfe
 800211e:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8002120:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8002122:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8002124:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8002126:	e020      	b.n	800216a <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002128:	2b00      	cmp	r3, #0
 800212a:	d100      	bne.n	800212e <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800212c:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800212e:	69eb      	ldr	r3, [r5, #28]
 8002130:	696a      	ldr	r2, [r5, #20]
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	4313      	orrs	r3, r2
 8002136:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002138:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800213a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800213c:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800213e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002140:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002142:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002144:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002146:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002148:	7fd8      	ldrb	r0, [r3, #31]
 800214a:	e7ae      	b.n	80020aa <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800214c:	f7fe fdbe 	bl	8000ccc <HAL_GetTick>
 8002150:	23fa      	movs	r3, #250	; 0xfa
 8002152:	1b80      	subs	r0, r0, r6
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4298      	cmp	r0, r3
 8002158:	d9c1      	bls.n	80020de <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800215a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800215c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002162:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 8002164:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002166:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8002168:	77e5      	strb	r5, [r4, #31]
}
 800216a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800216c:	68b3      	ldr	r3, [r6, #8]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <HAL_RTC_SetAlarm_IT+0x188>)
 8002170:	4013      	ands	r3, r2
 8002172:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002174:	68f2      	ldr	r2, [r6, #12]
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_RTC_SetAlarm_IT+0x18c>)
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	4313      	orrs	r3, r2
 800217c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800217e:	f7fe fda5 	bl	8000ccc <HAL_GetTick>
 8002182:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002184:	2202      	movs	r2, #2
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	68dd      	ldr	r5, [r3, #12]
 800218a:	4015      	ands	r5, r2
 800218c:	d00b      	beq.n	80021a6 <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800218e:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002190:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002192:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	0092      	lsls	r2, r2, #2
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	0192      	lsls	r2, r2, #6
 80021a4:	e7ab      	b.n	80020fe <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021a6:	f7fe fd91 	bl	8000ccc <HAL_GetTick>
 80021aa:	23fa      	movs	r3, #250	; 0xfa
 80021ac:	1b80      	subs	r0, r0, r6
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4298      	cmp	r0, r3
 80021b2:	d9e7      	bls.n	8002184 <HAL_RTC_SetAlarm_IT+0x148>
 80021b4:	e7d1      	b.n	800215a <HAL_RTC_SetAlarm_IT+0x11e>
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	fffffeff 	.word	0xfffffeff
 80021bc:	fffffe7f 	.word	0xfffffe7f
 80021c0:	40010400 	.word	0x40010400
 80021c4:	fffffdff 	.word	0xfffffdff
 80021c8:	fffffd7f 	.word	0xfffffd7f

080021cc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80021cc:	2202      	movs	r2, #2
 80021ce:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021d0:	1c44      	adds	r4, r0, #1
 80021d2:	7fe5      	ldrb	r5, [r4, #31]
{
 80021d4:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 80021d6:	0010      	movs	r0, r2
 80021d8:	2d01      	cmp	r5, #1
 80021da:	d018      	beq.n	800220e <HAL_RTCEx_SetCalibrationOutPut+0x42>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021dc:	189d      	adds	r5, r3, r2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021de:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021e0:	77ea      	strb	r2, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021e2:	32c8      	adds	r2, #200	; 0xc8
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
 80021e6:	3a77      	subs	r2, #119	; 0x77
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	4808      	ldr	r0, [pc, #32]	; (8002210 <HAL_RTCEx_SetCalibrationOutPut+0x44>)
 80021ee:	4002      	ands	r2, r0
 80021f0:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80021f2:	689a      	ldr	r2, [r3, #8]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021f4:	2000      	movs	r0, #0
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80021f6:	4311      	orrs	r1, r2
  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80021f8:	2280      	movs	r2, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80021fa:	6099      	str	r1, [r3, #8]
  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	0412      	lsls	r2, r2, #16
 8002200:	430a      	orrs	r2, r1
 8002202:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002208:	2301      	movs	r3, #1
 800220a:	77eb      	strb	r3, [r5, #31]
  __HAL_UNLOCK(hrtc);
 800220c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800220e:	bd30      	pop	{r4, r5, pc}
 8002210:	fff7ffff 	.word	0xfff7ffff

08002214 <HAL_RTCEx_AlarmBEventCallback>:
 8002214:	4770      	bx	lr
	...

08002218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800221c:	6925      	ldr	r5, [r4, #16]
 800221e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002220:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002222:	432a      	orrs	r2, r5
 8002224:	6965      	ldr	r5, [r4, #20]
 8002226:	69c1      	ldr	r1, [r0, #28]
 8002228:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	4d76      	ldr	r5, [pc, #472]	; (8002408 <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800222e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002230:	4028      	ands	r0, r5
 8002232:	4302      	orrs	r2, r0
 8002234:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4874      	ldr	r0, [pc, #464]	; (800240c <UART_SetConfig+0x1f4>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800223a:	4d75      	ldr	r5, [pc, #468]	; (8002410 <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800223c:	4002      	ands	r2, r0
 800223e:	68e0      	ldr	r0, [r4, #12]
 8002240:	4302      	orrs	r2, r0
 8002242:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002244:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002246:	42ab      	cmp	r3, r5
 8002248:	d001      	beq.n	800224e <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800224a:	6a22      	ldr	r2, [r4, #32]
 800224c:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4e70      	ldr	r6, [pc, #448]	; (8002414 <UART_SetConfig+0x1fc>)
 8002252:	4032      	ands	r2, r6
 8002254:	4302      	orrs	r2, r0
 8002256:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002258:	4a6f      	ldr	r2, [pc, #444]	; (8002418 <UART_SetConfig+0x200>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d114      	bne.n	8002288 <UART_SetConfig+0x70>
 800225e:	200c      	movs	r0, #12
 8002260:	4b6e      	ldr	r3, [pc, #440]	; (800241c <UART_SetConfig+0x204>)
 8002262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002264:	4002      	ands	r2, r0
 8002266:	486e      	ldr	r0, [pc, #440]	; (8002420 <UART_SetConfig+0x208>)
 8002268:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	0212      	lsls	r2, r2, #8
 800226e:	4291      	cmp	r1, r2
 8002270:	d000      	beq.n	8002274 <UART_SetConfig+0x5c>
 8002272:	e08b      	b.n	800238c <UART_SetConfig+0x174>
  {
    switch (clocksource)
 8002274:	2808      	cmp	r0, #8
 8002276:	d900      	bls.n	800227a <UART_SetConfig+0x62>
 8002278:	e085      	b.n	8002386 <UART_SetConfig+0x16e>
 800227a:	f7fd ff4d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800227e:	5850      	.short	0x5850
 8002280:	847c845b 	.word	0x847c845b
 8002284:	8484      	.short	0x8484
 8002286:	7f          	.byte	0x7f
 8002287:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002288:	42ab      	cmp	r3, r5
 800228a:	d000      	beq.n	800228e <UART_SetConfig+0x76>
 800228c:	e0b4      	b.n	80023f8 <UART_SetConfig+0x1e0>
 800228e:	21c0      	movs	r1, #192	; 0xc0
 8002290:	2080      	movs	r0, #128	; 0x80
 8002292:	4a62      	ldr	r2, [pc, #392]	; (800241c <UART_SetConfig+0x204>)
 8002294:	0109      	lsls	r1, r1, #4
 8002296:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002298:	00c0      	lsls	r0, r0, #3
 800229a:	400b      	ands	r3, r1
 800229c:	4283      	cmp	r3, r0
 800229e:	d03b      	beq.n	8002318 <UART_SetConfig+0x100>
 80022a0:	d803      	bhi.n	80022aa <UART_SetConfig+0x92>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <UART_SetConfig+0xa4>
        ret = HAL_ERROR;
 80022a6:	2501      	movs	r5, #1
 80022a8:	e00d      	b.n	80022c6 <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022aa:	2080      	movs	r0, #128	; 0x80
 80022ac:	0100      	lsls	r0, r0, #4
 80022ae:	4283      	cmp	r3, r0
 80022b0:	d00e      	beq.n	80022d0 <UART_SetConfig+0xb8>
 80022b2:	428b      	cmp	r3, r1
 80022b4:	d1f7      	bne.n	80022a6 <UART_SetConfig+0x8e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80022b6:	2080      	movs	r0, #128	; 0x80
 80022b8:	0200      	lsls	r0, r0, #8
 80022ba:	e010      	b.n	80022de <UART_SetConfig+0xc6>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80022bc:	f7ff fc2a 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 80022c0:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 80022c2:	42a8      	cmp	r0, r5
 80022c4:	d10b      	bne.n	80022de <UART_SetConfig+0xc6>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022c6:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 80022c8:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 80022ca:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80022cc:	6663      	str	r3, [r4, #100]	; 0x64
}
 80022ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d0:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80022d2:	4b54      	ldr	r3, [pc, #336]	; (8002424 <UART_SetConfig+0x20c>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d4:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80022d6:	17c0      	asrs	r0, r0, #31
 80022d8:	4018      	ands	r0, r3
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <UART_SetConfig+0x210>)
 80022dc:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022de:	2203      	movs	r2, #3
 80022e0:	6863      	ldr	r3, [r4, #4]
 80022e2:	435a      	muls	r2, r3
 80022e4:	4282      	cmp	r2, r0
 80022e6:	d8de      	bhi.n	80022a6 <UART_SetConfig+0x8e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80022e8:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022ea:	4282      	cmp	r2, r0
 80022ec:	d3db      	bcc.n	80022a6 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80022ee:	2700      	movs	r7, #0
 80022f0:	0e02      	lsrs	r2, r0, #24
 80022f2:	0201      	lsls	r1, r0, #8
 80022f4:	085e      	lsrs	r6, r3, #1
 80022f6:	1989      	adds	r1, r1, r6
 80022f8:	417a      	adcs	r2, r7
 80022fa:	0008      	movs	r0, r1
 80022fc:	0011      	movs	r1, r2
 80022fe:	001a      	movs	r2, r3
 8002300:	003b      	movs	r3, r7
 8002302:	f7fd ff9f 	bl	8000244 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <UART_SetConfig+0x214>)
 8002308:	18c2      	adds	r2, r0, r3
 800230a:	4b49      	ldr	r3, [pc, #292]	; (8002430 <UART_SetConfig+0x218>)
 800230c:	429a      	cmp	r2, r3
 800230e:	d8ca      	bhi.n	80022a6 <UART_SetConfig+0x8e>
          huart->Instance->BRR = usartdiv;
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	003d      	movs	r5, r7
 8002314:	60d8      	str	r0, [r3, #12]
 8002316:	e7d6      	b.n	80022c6 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002318:	f7ff f8b2 	bl	8001480 <HAL_RCC_GetSysClockFreq>
        break;
 800231c:	e7d0      	b.n	80022c0 <UART_SetConfig+0xa8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800231e:	f7ff fbf9 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	0040      	lsls	r0, r0, #1
 8002326:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002328:	18c0      	adds	r0, r0, r3
 800232a:	6861      	ldr	r1, [r4, #4]
 800232c:	e00b      	b.n	8002346 <UART_SetConfig+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800232e:	f7ff fc01 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8002332:	e7f6      	b.n	8002322 <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002334:	2510      	movs	r5, #16
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	6861      	ldr	r1, [r4, #4]
 800233a:	4015      	ands	r5, r2
 800233c:	0848      	lsrs	r0, r1, #1
 800233e:	2d00      	cmp	r5, #0
 8002340:	d006      	beq.n	8002350 <UART_SetConfig+0x138>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002342:	4b3c      	ldr	r3, [pc, #240]	; (8002434 <UART_SetConfig+0x21c>)
 8002344:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002346:	f7fd fef1 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800234a:	2500      	movs	r5, #0
 800234c:	b283      	uxth	r3, r0
        break;
 800234e:	e004      	b.n	800235a <UART_SetConfig+0x142>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002350:	4b39      	ldr	r3, [pc, #228]	; (8002438 <UART_SetConfig+0x220>)
 8002352:	18c0      	adds	r0, r0, r3
 8002354:	f7fd feea 	bl	800012c <__udivsi3>
 8002358:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800235a:	0019      	movs	r1, r3
 800235c:	4837      	ldr	r0, [pc, #220]	; (800243c <UART_SetConfig+0x224>)
 800235e:	3910      	subs	r1, #16
 8002360:	4281      	cmp	r1, r0
 8002362:	d8a0      	bhi.n	80022a6 <UART_SetConfig+0x8e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002364:	210f      	movs	r1, #15
 8002366:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002368:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800236a:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800236c:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800236e:	6821      	ldr	r1, [r4, #0]
 8002370:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8002372:	60cb      	str	r3, [r1, #12]
 8002374:	e7a7      	b.n	80022c6 <UART_SetConfig+0xae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002376:	f7ff f883 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 800237a:	e7d2      	b.n	8002322 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800237c:	6863      	ldr	r3, [r4, #4]
 800237e:	0858      	lsrs	r0, r3, #1
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	025b      	lsls	r3, r3, #9
 8002384:	e7d0      	b.n	8002328 <UART_SetConfig+0x110>
        ret = HAL_ERROR;
 8002386:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002388:	2300      	movs	r3, #0
 800238a:	e7e6      	b.n	800235a <UART_SetConfig+0x142>
    switch (clocksource)
 800238c:	2808      	cmp	r0, #8
 800238e:	d837      	bhi.n	8002400 <UART_SetConfig+0x1e8>
 8002390:	f7fd fec2 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002394:	360f0c05 	.word	0x360f0c05
 8002398:	3636362a 	.word	0x3636362a
 800239c:	2d          	.byte	0x2d
 800239d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800239e:	f7ff fbb9 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023a2:	6863      	ldr	r3, [r4, #4]
 80023a4:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023a6:	18c0      	adds	r0, r0, r3
 80023a8:	6861      	ldr	r1, [r4, #4]
 80023aa:	e00b      	b.n	80023c4 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023ac:	f7ff fbc2 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 80023b0:	e7f7      	b.n	80023a2 <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023b2:	2510      	movs	r5, #16
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	6861      	ldr	r1, [r4, #4]
 80023b8:	4015      	ands	r5, r2
 80023ba:	0848      	lsrs	r0, r1, #1
 80023bc:	2d00      	cmp	r5, #0
 80023be:	d00d      	beq.n	80023dc <UART_SetConfig+0x1c4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <UART_SetConfig+0x228>)
 80023c2:	18c0      	adds	r0, r0, r3
 80023c4:	f7fd feb2 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80023c8:	2500      	movs	r5, #0
 80023ca:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023cc:	0019      	movs	r1, r3
 80023ce:	481b      	ldr	r0, [pc, #108]	; (800243c <UART_SetConfig+0x224>)
 80023d0:	3910      	subs	r1, #16
 80023d2:	4281      	cmp	r1, r0
 80023d4:	d900      	bls.n	80023d8 <UART_SetConfig+0x1c0>
 80023d6:	e766      	b.n	80022a6 <UART_SetConfig+0x8e>
      huart->Instance->BRR = usartdiv;
 80023d8:	6821      	ldr	r1, [r4, #0]
 80023da:	e7ca      	b.n	8002372 <UART_SetConfig+0x15a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <UART_SetConfig+0x210>)
 80023de:	18c0      	adds	r0, r0, r3
 80023e0:	f7fd fea4 	bl	800012c <__udivsi3>
 80023e4:	b283      	uxth	r3, r0
 80023e6:	e7f1      	b.n	80023cc <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023e8:	f7ff f84a 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 80023ec:	e7d9      	b.n	80023a2 <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023ee:	6863      	ldr	r3, [r4, #4]
 80023f0:	0858      	lsrs	r0, r3, #1
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	e7d6      	b.n	80023a6 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	4299      	cmp	r1, r3
 80023fe:	d0c2      	beq.n	8002386 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8002400:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002402:	2300      	movs	r3, #0
 8002404:	e7e2      	b.n	80023cc <UART_SetConfig+0x1b4>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	efff69f3 	.word	0xefff69f3
 800240c:	ffffcfff 	.word	0xffffcfff
 8002410:	40004800 	.word	0x40004800
 8002414:	fffff4ff 	.word	0xfffff4ff
 8002418:	40004400 	.word	0x40004400
 800241c:	40021000 	.word	0x40021000
 8002420:	08002871 	.word	0x08002871
 8002424:	ff48e500 	.word	0xff48e500
 8002428:	00f42400 	.word	0x00f42400
 800242c:	fffffd00 	.word	0xfffffd00
 8002430:	000ffcff 	.word	0x000ffcff
 8002434:	007a1200 	.word	0x007a1200
 8002438:	01e84800 	.word	0x01e84800
 800243c:	0000ffef 	.word	0x0000ffef
 8002440:	003d0900 	.word	0x003d0900

08002444 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002444:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002446:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002448:	07da      	lsls	r2, r3, #31
 800244a:	d506      	bpl.n	800245a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800244c:	6801      	ldr	r1, [r0, #0]
 800244e:	4c28      	ldr	r4, [pc, #160]	; (80024f0 <UART_AdvFeatureConfig+0xac>)
 8002450:	684a      	ldr	r2, [r1, #4]
 8002452:	4022      	ands	r2, r4
 8002454:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002456:	4322      	orrs	r2, r4
 8002458:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800245a:	079a      	lsls	r2, r3, #30
 800245c:	d506      	bpl.n	800246c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800245e:	6801      	ldr	r1, [r0, #0]
 8002460:	4c24      	ldr	r4, [pc, #144]	; (80024f4 <UART_AdvFeatureConfig+0xb0>)
 8002462:	684a      	ldr	r2, [r1, #4]
 8002464:	4022      	ands	r2, r4
 8002466:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002468:	4322      	orrs	r2, r4
 800246a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800246c:	075a      	lsls	r2, r3, #29
 800246e:	d506      	bpl.n	800247e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002470:	6801      	ldr	r1, [r0, #0]
 8002472:	4c21      	ldr	r4, [pc, #132]	; (80024f8 <UART_AdvFeatureConfig+0xb4>)
 8002474:	684a      	ldr	r2, [r1, #4]
 8002476:	4022      	ands	r2, r4
 8002478:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800247a:	4322      	orrs	r2, r4
 800247c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800247e:	071a      	lsls	r2, r3, #28
 8002480:	d506      	bpl.n	8002490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002482:	6801      	ldr	r1, [r0, #0]
 8002484:	4c1d      	ldr	r4, [pc, #116]	; (80024fc <UART_AdvFeatureConfig+0xb8>)
 8002486:	684a      	ldr	r2, [r1, #4]
 8002488:	4022      	ands	r2, r4
 800248a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800248c:	4322      	orrs	r2, r4
 800248e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002490:	06da      	lsls	r2, r3, #27
 8002492:	d506      	bpl.n	80024a2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002494:	6801      	ldr	r1, [r0, #0]
 8002496:	4c1a      	ldr	r4, [pc, #104]	; (8002500 <UART_AdvFeatureConfig+0xbc>)
 8002498:	688a      	ldr	r2, [r1, #8]
 800249a:	4022      	ands	r2, r4
 800249c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800249e:	4322      	orrs	r2, r4
 80024a0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024a2:	069a      	lsls	r2, r3, #26
 80024a4:	d506      	bpl.n	80024b4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024a6:	6801      	ldr	r1, [r0, #0]
 80024a8:	4c16      	ldr	r4, [pc, #88]	; (8002504 <UART_AdvFeatureConfig+0xc0>)
 80024aa:	688a      	ldr	r2, [r1, #8]
 80024ac:	4022      	ands	r2, r4
 80024ae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80024b0:	4322      	orrs	r2, r4
 80024b2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024b4:	065a      	lsls	r2, r3, #25
 80024b6:	d510      	bpl.n	80024da <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024b8:	6801      	ldr	r1, [r0, #0]
 80024ba:	4d13      	ldr	r5, [pc, #76]	; (8002508 <UART_AdvFeatureConfig+0xc4>)
 80024bc:	684a      	ldr	r2, [r1, #4]
 80024be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024c0:	402a      	ands	r2, r5
 80024c2:	4322      	orrs	r2, r4
 80024c4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	0352      	lsls	r2, r2, #13
 80024ca:	4294      	cmp	r4, r2
 80024cc:	d105      	bne.n	80024da <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024ce:	684a      	ldr	r2, [r1, #4]
 80024d0:	4c0e      	ldr	r4, [pc, #56]	; (800250c <UART_AdvFeatureConfig+0xc8>)
 80024d2:	4022      	ands	r2, r4
 80024d4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024d6:	4322      	orrs	r2, r4
 80024d8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	d506      	bpl.n	80024ec <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024de:	6802      	ldr	r2, [r0, #0]
 80024e0:	490b      	ldr	r1, [pc, #44]	; (8002510 <UART_AdvFeatureConfig+0xcc>)
 80024e2:	6853      	ldr	r3, [r2, #4]
 80024e4:	400b      	ands	r3, r1
 80024e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6053      	str	r3, [r2, #4]
  }
}
 80024ec:	bd30      	pop	{r4, r5, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	fffdffff 	.word	0xfffdffff
 80024f4:	fffeffff 	.word	0xfffeffff
 80024f8:	fffbffff 	.word	0xfffbffff
 80024fc:	ffff7fff 	.word	0xffff7fff
 8002500:	ffffefff 	.word	0xffffefff
 8002504:	ffffdfff 	.word	0xffffdfff
 8002508:	ffefffff 	.word	0xffefffff
 800250c:	ff9fffff 	.word	0xff9fffff
 8002510:	fff7ffff 	.word	0xfff7ffff

08002514 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002516:	0004      	movs	r4, r0
 8002518:	000e      	movs	r6, r1
 800251a:	0015      	movs	r5, r2
 800251c:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800251e:	6822      	ldr	r2, [r4, #0]
 8002520:	69d3      	ldr	r3, [r2, #28]
 8002522:	4033      	ands	r3, r6
 8002524:	1b9b      	subs	r3, r3, r6
 8002526:	4259      	negs	r1, r3
 8002528:	414b      	adcs	r3, r1
 800252a:	42ab      	cmp	r3, r5
 800252c:	d001      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800252e:	2000      	movs	r0, #0
 8002530:	e01b      	b.n	800256a <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8002532:	9b06      	ldr	r3, [sp, #24]
 8002534:	3301      	adds	r3, #1
 8002536:	d0f3      	beq.n	8002520 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7fe fbc8 	bl	8000ccc <HAL_GetTick>
 800253c:	9b06      	ldr	r3, [sp, #24]
 800253e:	1bc0      	subs	r0, r0, r7
 8002540:	4298      	cmp	r0, r3
 8002542:	d801      	bhi.n	8002548 <UART_WaitOnFlagUntilTimeout+0x34>
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ea      	bne.n	800251e <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	4908      	ldr	r1, [pc, #32]	; (800256c <UART_WaitOnFlagUntilTimeout+0x58>)
 800254c:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800254e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002550:	400a      	ands	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	31a3      	adds	r1, #163	; 0xa3
 8002558:	31ff      	adds	r1, #255	; 0xff
 800255a:	438a      	bics	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800255e:	2320      	movs	r3, #32
 8002560:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002562:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002564:	2300      	movs	r3, #0
 8002566:	3470      	adds	r4, #112	; 0x70
 8002568:	7023      	strb	r3, [r4, #0]
}
 800256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800256c:	fffffe5f 	.word	0xfffffe5f

08002570 <HAL_UART_Transmit>:
{
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	b087      	sub	sp, #28
 8002574:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002576:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002578:	0004      	movs	r4, r0
 800257a:	000d      	movs	r5, r1
 800257c:	0017      	movs	r7, r2
    return HAL_BUSY;
 800257e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002580:	2b20      	cmp	r3, #32
 8002582:	d149      	bne.n	8002618 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002584:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002586:	2900      	cmp	r1, #0
 8002588:	d046      	beq.n	8002618 <HAL_UART_Transmit+0xa8>
 800258a:	2a00      	cmp	r2, #0
 800258c:	d044      	beq.n	8002618 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	68a2      	ldr	r2, [r4, #8]
 8002592:	015b      	lsls	r3, r3, #5
 8002594:	429a      	cmp	r2, r3
 8002596:	d104      	bne.n	80025a2 <HAL_UART_Transmit+0x32>
 8002598:	6923      	ldr	r3, [r4, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 800259e:	4201      	tst	r1, r0
 80025a0:	d13a      	bne.n	8002618 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80025a2:	0023      	movs	r3, r4
 80025a4:	3370      	adds	r3, #112	; 0x70
 80025a6:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80025a8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80025aa:	2a01      	cmp	r2, #1
 80025ac:	d034      	beq.n	8002618 <HAL_UART_Transmit+0xa8>
 80025ae:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80025b2:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b6:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b8:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80025ba:	f7fe fb87 	bl	8000ccc <HAL_GetTick>
    huart->TxXferSize  = Size;
 80025be:	0023      	movs	r3, r4
 80025c0:	3350      	adds	r3, #80	; 0x50
 80025c2:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80025c4:	3302      	adds	r3, #2
 80025c6:	9303      	str	r3, [sp, #12]
 80025c8:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80025ce:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	015b      	lsls	r3, r3, #5
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d104      	bne.n	80025e0 <HAL_UART_Transmit+0x70>
 80025d6:	6923      	ldr	r3, [r4, #16]
 80025d8:	42b3      	cmp	r3, r6
 80025da:	d101      	bne.n	80025e0 <HAL_UART_Transmit+0x70>
 80025dc:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80025de:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80025e0:	0023      	movs	r3, r4
 80025e2:	3352      	adds	r3, #82	; 0x52
 80025e4:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025e6:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80025e8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d10a      	bne.n	8002608 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f2:	2140      	movs	r1, #64	; 0x40
 80025f4:	0020      	movs	r0, r4
 80025f6:	f7ff ff8d 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80025fe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002600:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8002602:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8002604:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002606:	e007      	b.n	8002618 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002608:	2200      	movs	r2, #0
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	0020      	movs	r0, r4
 800260e:	f7ff ff81 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 8002612:	2800      	cmp	r0, #0
 8002614:	d002      	beq.n	800261c <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8002616:	2003      	movs	r0, #3
}
 8002618:	b007      	add	sp, #28
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800261c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800261e:	2d00      	cmp	r5, #0
 8002620:	d10b      	bne.n	800263a <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002622:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002624:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002626:	05db      	lsls	r3, r3, #23
 8002628:	0ddb      	lsrs	r3, r3, #23
 800262a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	9a03      	ldr	r2, [sp, #12]
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	3b01      	subs	r3, #1
 8002634:	b29b      	uxth	r3, r3
 8002636:	8013      	strh	r3, [r2, #0]
 8002638:	e7d2      	b.n	80025e0 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800263a:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800263c:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800263e:	6293      	str	r3, [r2, #40]	; 0x28
 8002640:	e7f4      	b.n	800262c <HAL_UART_Transmit+0xbc>
	...

08002644 <UART_CheckIdleState>:
{
 8002644:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002646:	2600      	movs	r6, #0
{
 8002648:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800264c:	f7fe fb3e 	bl	8000ccc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002650:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002652:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	071b      	lsls	r3, r3, #28
 8002658:	d415      	bmi.n	8002686 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	075b      	lsls	r3, r3, #29
 8002660:	d50a      	bpl.n	8002678 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <UART_CheckIdleState+0x5c>)
 8002666:	2200      	movs	r2, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	03c9      	lsls	r1, r1, #15
 800266c:	002b      	movs	r3, r5
 800266e:	0020      	movs	r0, r4
 8002670:	f7ff ff50 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 8002674:	2800      	cmp	r0, #0
 8002676:	d111      	bne.n	800269c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002678:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800267a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800267c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800267e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002680:	3470      	adds	r4, #112	; 0x70
 8002682:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002684:	e00b      	b.n	800269e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <UART_CheckIdleState+0x5c>)
 800268a:	0032      	movs	r2, r6
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	0389      	lsls	r1, r1, #14
 8002690:	0003      	movs	r3, r0
 8002692:	0020      	movs	r0, r4
 8002694:	f7ff ff3e 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 8002698:	2800      	cmp	r0, #0
 800269a:	d0de      	beq.n	800265a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800269c:	2003      	movs	r0, #3
}
 800269e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80026a0:	01ffffff 	.word	0x01ffffff

080026a4 <HAL_UART_Init>:
{
 80026a4:	b510      	push	{r4, lr}
 80026a6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
}
 80026ac:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80026ae:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80026b4:	0002      	movs	r2, r0
 80026b6:	3270      	adds	r2, #112	; 0x70
 80026b8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80026ba:	f7fe f9cd 	bl	8000a58 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80026be:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80026c0:	2101      	movs	r1, #1
 80026c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026c4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80026c6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026c8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80026ca:	438b      	bics	r3, r1
 80026cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ce:	f7ff fda3 	bl	8002218 <UART_SetConfig>
 80026d2:	2801      	cmp	r0, #1
 80026d4:	d0e9      	beq.n	80026aa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80026dc:	0020      	movs	r0, r4
 80026de:	f7ff feb1 	bl	8002444 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <HAL_UART_Init+0x60>)
 80026e6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80026e8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ea:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ec:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	438a      	bics	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026f6:	2201      	movs	r2, #1
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80026fe:	f7ff ffa1 	bl	8002644 <UART_CheckIdleState>
 8002702:	e7d3      	b.n	80026ac <HAL_UART_Init+0x8>
 8002704:	ffffb7ff 	.word	0xffffb7ff

08002708 <__libc_init_array>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	2600      	movs	r6, #0
 800270c:	4d0c      	ldr	r5, [pc, #48]	; (8002740 <__libc_init_array+0x38>)
 800270e:	4c0d      	ldr	r4, [pc, #52]	; (8002744 <__libc_init_array+0x3c>)
 8002710:	1b64      	subs	r4, r4, r5
 8002712:	10a4      	asrs	r4, r4, #2
 8002714:	42a6      	cmp	r6, r4
 8002716:	d109      	bne.n	800272c <__libc_init_array+0x24>
 8002718:	2600      	movs	r6, #0
 800271a:	f000 f881 	bl	8002820 <_init>
 800271e:	4d0a      	ldr	r5, [pc, #40]	; (8002748 <__libc_init_array+0x40>)
 8002720:	4c0a      	ldr	r4, [pc, #40]	; (800274c <__libc_init_array+0x44>)
 8002722:	1b64      	subs	r4, r4, r5
 8002724:	10a4      	asrs	r4, r4, #2
 8002726:	42a6      	cmp	r6, r4
 8002728:	d105      	bne.n	8002736 <__libc_init_array+0x2e>
 800272a:	bd70      	pop	{r4, r5, r6, pc}
 800272c:	00b3      	lsls	r3, r6, #2
 800272e:	58eb      	ldr	r3, [r5, r3]
 8002730:	4798      	blx	r3
 8002732:	3601      	adds	r6, #1
 8002734:	e7ee      	b.n	8002714 <__libc_init_array+0xc>
 8002736:	00b3      	lsls	r3, r6, #2
 8002738:	58eb      	ldr	r3, [r5, r3]
 800273a:	4798      	blx	r3
 800273c:	3601      	adds	r6, #1
 800273e:	e7f2      	b.n	8002726 <__libc_init_array+0x1e>
 8002740:	080028ac 	.word	0x080028ac
 8002744:	080028ac 	.word	0x080028ac
 8002748:	080028ac 	.word	0x080028ac
 800274c:	080028b0 	.word	0x080028b0

08002750 <__itoa>:
 8002750:	1e93      	subs	r3, r2, #2
 8002752:	b510      	push	{r4, lr}
 8002754:	000c      	movs	r4, r1
 8002756:	2b22      	cmp	r3, #34	; 0x22
 8002758:	d904      	bls.n	8002764 <__itoa+0x14>
 800275a:	2300      	movs	r3, #0
 800275c:	001c      	movs	r4, r3
 800275e:	700b      	strb	r3, [r1, #0]
 8002760:	0020      	movs	r0, r4
 8002762:	bd10      	pop	{r4, pc}
 8002764:	2a0a      	cmp	r2, #10
 8002766:	d109      	bne.n	800277c <__itoa+0x2c>
 8002768:	2800      	cmp	r0, #0
 800276a:	da07      	bge.n	800277c <__itoa+0x2c>
 800276c:	232d      	movs	r3, #45	; 0x2d
 800276e:	700b      	strb	r3, [r1, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	4240      	negs	r0, r0
 8002774:	1861      	adds	r1, r4, r1
 8002776:	f000 f817 	bl	80027a8 <__utoa>
 800277a:	e7f1      	b.n	8002760 <__itoa+0x10>
 800277c:	2100      	movs	r1, #0
 800277e:	e7f9      	b.n	8002774 <__itoa+0x24>

08002780 <itoa>:
 8002780:	b510      	push	{r4, lr}
 8002782:	f7ff ffe5 	bl	8002750 <__itoa>
 8002786:	bd10      	pop	{r4, pc}

08002788 <memset>:
 8002788:	0003      	movs	r3, r0
 800278a:	1812      	adds	r2, r2, r0
 800278c:	4293      	cmp	r3, r2
 800278e:	d100      	bne.n	8002792 <memset+0xa>
 8002790:	4770      	bx	lr
 8002792:	7019      	strb	r1, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	e7f9      	b.n	800278c <memset+0x4>

08002798 <strcpy>:
 8002798:	0003      	movs	r3, r0
 800279a:	780a      	ldrb	r2, [r1, #0]
 800279c:	3101      	adds	r1, #1
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d1f9      	bne.n	800279a <strcpy+0x2>
 80027a6:	4770      	bx	lr

080027a8 <__utoa>:
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	0017      	movs	r7, r2
 80027ac:	b08d      	sub	sp, #52	; 0x34
 80027ae:	2225      	movs	r2, #37	; 0x25
 80027b0:	0006      	movs	r6, r0
 80027b2:	000d      	movs	r5, r1
 80027b4:	a802      	add	r0, sp, #8
 80027b6:	4914      	ldr	r1, [pc, #80]	; (8002808 <__utoa+0x60>)
 80027b8:	f000 f828 	bl	800280c <memcpy>
 80027bc:	aa02      	add	r2, sp, #8
 80027be:	1ebb      	subs	r3, r7, #2
 80027c0:	2400      	movs	r4, #0
 80027c2:	9201      	str	r2, [sp, #4]
 80027c4:	2b22      	cmp	r3, #34	; 0x22
 80027c6:	d905      	bls.n	80027d4 <__utoa+0x2c>
 80027c8:	702c      	strb	r4, [r5, #0]
 80027ca:	0025      	movs	r5, r4
 80027cc:	0028      	movs	r0, r5
 80027ce:	b00d      	add	sp, #52	; 0x34
 80027d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d2:	0014      	movs	r4, r2
 80027d4:	0030      	movs	r0, r6
 80027d6:	0039      	movs	r1, r7
 80027d8:	f7fd fd2e 	bl	8000238 <__aeabi_uidivmod>
 80027dc:	4684      	mov	ip, r0
 80027de:	9801      	ldr	r0, [sp, #4]
 80027e0:	1c62      	adds	r2, r4, #1
 80027e2:	18ab      	adds	r3, r5, r2
 80027e4:	5c41      	ldrb	r1, [r0, r1]
 80027e6:	1e5e      	subs	r6, r3, #1
 80027e8:	7031      	strb	r1, [r6, #0]
 80027ea:	4666      	mov	r6, ip
 80027ec:	2e00      	cmp	r6, #0
 80027ee:	d1f0      	bne.n	80027d2 <__utoa+0x2a>
 80027f0:	701e      	strb	r6, [r3, #0]
 80027f2:	002b      	movs	r3, r5
 80027f4:	1b5a      	subs	r2, r3, r5
 80027f6:	4294      	cmp	r4, r2
 80027f8:	dde8      	ble.n	80027cc <__utoa+0x24>
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	5d29      	ldrb	r1, [r5, r4]
 80027fe:	7019      	strb	r1, [r3, #0]
 8002800:	552a      	strb	r2, [r5, r4]
 8002802:	3301      	adds	r3, #1
 8002804:	3c01      	subs	r4, #1
 8002806:	e7f5      	b.n	80027f4 <__utoa+0x4c>
 8002808:	0800287e 	.word	0x0800287e

0800280c <memcpy>:
 800280c:	2300      	movs	r3, #0
 800280e:	b510      	push	{r4, lr}
 8002810:	429a      	cmp	r2, r3
 8002812:	d100      	bne.n	8002816 <memcpy+0xa>
 8002814:	bd10      	pop	{r4, pc}
 8002816:	5ccc      	ldrb	r4, [r1, r3]
 8002818:	54c4      	strb	r4, [r0, r3]
 800281a:	3301      	adds	r3, #1
 800281c:	e7f8      	b.n	8002810 <memcpy+0x4>
	...

08002820 <_init>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr

0800282c <_fini>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr
