
STM32L010C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002970  08002970  00012970  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029dc  080029dc  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029e4  080029e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080029ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000004  080029f0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080029f0  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe69  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025ab  00000000  00000000  0002fe95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000087cf  00000000  00000000  00032440  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b90  00000000  00000000  0003ac10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ce8  00000000  00000000  0003b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011e91  00000000  00000000  0003c488  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c19a  00000000  00000000  0004e319  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006df66  00000000  00000000  0005a4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c8419  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002328  00000000  00000000  000c8494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002958 	.word	0x08002958

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002958 	.word	0x08002958

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	464f      	mov	r7, r9
 8000288:	4646      	mov	r6, r8
 800028a:	46d6      	mov	lr, sl
 800028c:	b5c0      	push	{r6, r7, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	b082      	sub	sp, #8
 8000292:	000d      	movs	r5, r1
 8000294:	4691      	mov	r9, r2
 8000296:	4698      	mov	r8, r3
 8000298:	428b      	cmp	r3, r1
 800029a:	d82f      	bhi.n	80002fc <__udivmoddi4+0x78>
 800029c:	d02c      	beq.n	80002f8 <__udivmoddi4+0x74>
 800029e:	4641      	mov	r1, r8
 80002a0:	4648      	mov	r0, r9
 80002a2:	f000 f8b1 	bl	8000408 <__clzdi2>
 80002a6:	0029      	movs	r1, r5
 80002a8:	0006      	movs	r6, r0
 80002aa:	0020      	movs	r0, r4
 80002ac:	f000 f8ac 	bl	8000408 <__clzdi2>
 80002b0:	1a33      	subs	r3, r6, r0
 80002b2:	469c      	mov	ip, r3
 80002b4:	3b20      	subs	r3, #32
 80002b6:	469a      	mov	sl, r3
 80002b8:	d500      	bpl.n	80002bc <__udivmoddi4+0x38>
 80002ba:	e076      	b.n	80003aa <__udivmoddi4+0x126>
 80002bc:	464b      	mov	r3, r9
 80002be:	4652      	mov	r2, sl
 80002c0:	4093      	lsls	r3, r2
 80002c2:	001f      	movs	r7, r3
 80002c4:	464b      	mov	r3, r9
 80002c6:	4662      	mov	r2, ip
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d828      	bhi.n	8000322 <__udivmoddi4+0x9e>
 80002d0:	d025      	beq.n	800031e <__udivmoddi4+0x9a>
 80002d2:	4653      	mov	r3, sl
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	41bd      	sbcs	r5, r7
 80002d8:	2b00      	cmp	r3, #0
 80002da:	da00      	bge.n	80002de <__udivmoddi4+0x5a>
 80002dc:	e07b      	b.n	80003d6 <__udivmoddi4+0x152>
 80002de:	2200      	movs	r2, #0
 80002e0:	2300      	movs	r3, #0
 80002e2:	9200      	str	r2, [sp, #0]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2301      	movs	r3, #1
 80002e8:	4652      	mov	r2, sl
 80002ea:	4093      	lsls	r3, r2
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2301      	movs	r3, #1
 80002f0:	4662      	mov	r2, ip
 80002f2:	4093      	lsls	r3, r2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	e018      	b.n	800032a <__udivmoddi4+0xa6>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	d9d0      	bls.n	800029e <__udivmoddi4+0x1a>
 80002fc:	2200      	movs	r2, #0
 80002fe:	2300      	movs	r3, #0
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <__udivmoddi4+0x8a>
 800030a:	601c      	str	r4, [r3, #0]
 800030c:	605d      	str	r5, [r3, #4]
 800030e:	9800      	ldr	r0, [sp, #0]
 8000310:	9901      	ldr	r1, [sp, #4]
 8000312:	b002      	add	sp, #8
 8000314:	bc1c      	pop	{r2, r3, r4}
 8000316:	4690      	mov	r8, r2
 8000318:	4699      	mov	r9, r3
 800031a:	46a2      	mov	sl, r4
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	42a3      	cmp	r3, r4
 8000320:	d9d7      	bls.n	80002d2 <__udivmoddi4+0x4e>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	4663      	mov	r3, ip
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0e9      	beq.n	8000304 <__udivmoddi4+0x80>
 8000330:	07fb      	lsls	r3, r7, #31
 8000332:	4698      	mov	r8, r3
 8000334:	4641      	mov	r1, r8
 8000336:	0872      	lsrs	r2, r6, #1
 8000338:	430a      	orrs	r2, r1
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	4666      	mov	r6, ip
 800033e:	e00e      	b.n	800035e <__udivmoddi4+0xda>
 8000340:	42ab      	cmp	r3, r5
 8000342:	d101      	bne.n	8000348 <__udivmoddi4+0xc4>
 8000344:	42a2      	cmp	r2, r4
 8000346:	d80c      	bhi.n	8000362 <__udivmoddi4+0xde>
 8000348:	1aa4      	subs	r4, r4, r2
 800034a:	419d      	sbcs	r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	1924      	adds	r4, r4, r4
 8000350:	416d      	adcs	r5, r5
 8000352:	2100      	movs	r1, #0
 8000354:	3e01      	subs	r6, #1
 8000356:	1824      	adds	r4, r4, r0
 8000358:	414d      	adcs	r5, r1
 800035a:	2e00      	cmp	r6, #0
 800035c:	d006      	beq.n	800036c <__udivmoddi4+0xe8>
 800035e:	42ab      	cmp	r3, r5
 8000360:	d9ee      	bls.n	8000340 <__udivmoddi4+0xbc>
 8000362:	3e01      	subs	r6, #1
 8000364:	1924      	adds	r4, r4, r4
 8000366:	416d      	adcs	r5, r5
 8000368:	2e00      	cmp	r6, #0
 800036a:	d1f8      	bne.n	800035e <__udivmoddi4+0xda>
 800036c:	9800      	ldr	r0, [sp, #0]
 800036e:	9901      	ldr	r1, [sp, #4]
 8000370:	4653      	mov	r3, sl
 8000372:	1900      	adds	r0, r0, r4
 8000374:	4169      	adcs	r1, r5
 8000376:	2b00      	cmp	r3, #0
 8000378:	db23      	blt.n	80003c2 <__udivmoddi4+0x13e>
 800037a:	002b      	movs	r3, r5
 800037c:	4652      	mov	r2, sl
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	4664      	mov	r4, ip
 8000384:	40e2      	lsrs	r2, r4
 8000386:	001c      	movs	r4, r3
 8000388:	4653      	mov	r3, sl
 800038a:	0015      	movs	r5, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	db2d      	blt.n	80003ec <__udivmoddi4+0x168>
 8000390:	0026      	movs	r6, r4
 8000392:	4657      	mov	r7, sl
 8000394:	40be      	lsls	r6, r7
 8000396:	0033      	movs	r3, r6
 8000398:	0026      	movs	r6, r4
 800039a:	4667      	mov	r7, ip
 800039c:	40be      	lsls	r6, r7
 800039e:	0032      	movs	r2, r6
 80003a0:	1a80      	subs	r0, r0, r2
 80003a2:	4199      	sbcs	r1, r3
 80003a4:	9000      	str	r0, [sp, #0]
 80003a6:	9101      	str	r1, [sp, #4]
 80003a8:	e7ac      	b.n	8000304 <__udivmoddi4+0x80>
 80003aa:	4662      	mov	r2, ip
 80003ac:	2320      	movs	r3, #32
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	464a      	mov	r2, r9
 80003b2:	40da      	lsrs	r2, r3
 80003b4:	4661      	mov	r1, ip
 80003b6:	0013      	movs	r3, r2
 80003b8:	4642      	mov	r2, r8
 80003ba:	408a      	lsls	r2, r1
 80003bc:	0017      	movs	r7, r2
 80003be:	431f      	orrs	r7, r3
 80003c0:	e780      	b.n	80002c4 <__udivmoddi4+0x40>
 80003c2:	4662      	mov	r2, ip
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4666      	mov	r6, ip
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4313      	orrs	r3, r2
 80003d4:	e7d4      	b.n	8000380 <__udivmoddi4+0xfc>
 80003d6:	4662      	mov	r2, ip
 80003d8:	2320      	movs	r3, #32
 80003da:	2100      	movs	r1, #0
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	2200      	movs	r2, #0
 80003e0:	9100      	str	r1, [sp, #0]
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	2201      	movs	r2, #1
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	9201      	str	r2, [sp, #4]
 80003ea:	e780      	b.n	80002ee <__udivmoddi4+0x6a>
 80003ec:	2320      	movs	r3, #32
 80003ee:	4662      	mov	r2, ip
 80003f0:	0026      	movs	r6, r4
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	40de      	lsrs	r6, r3
 80003f6:	002f      	movs	r7, r5
 80003f8:	46b0      	mov	r8, r6
 80003fa:	4666      	mov	r6, ip
 80003fc:	40b7      	lsls	r7, r6
 80003fe:	4646      	mov	r6, r8
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c8      	b.n	8000398 <__udivmoddi4+0x114>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <MX_LPUART1_UART_Init+0x28>)
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <MX_LPUART1_UART_Init+0x2c>)
{
 8000460:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8000462:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000464:	2396      	movs	r3, #150	; 0x96
 8000466:	019b      	lsls	r3, r3, #6
 8000468:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800046a:	220c      	movs	r2, #12
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046c:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800046e:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000470:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000472:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000474:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000478:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800047a:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800047c:	f002 f9ae 	bl	80027dc <HAL_UART_Init>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	20000074 	.word	0x20000074
 8000488:	40004800 	.word	0x40004800

0800048c <stm32l_lowPowerSetup>:
	__HAL_RCC_PWR_CLK_ENABLE(); // Enable Power Control clock
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <stm32l_lowPowerSetup+0x34>)
 8000490:	055b      	lsls	r3, r3, #21
 8000492:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8000494:	b510      	push	{r4, lr}
	__HAL_RCC_PWR_CLK_ENABLE(); // Enable Power Control clock
 8000496:	430b      	orrs	r3, r1
 8000498:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_PWR_EnableBkUpAccess (); //Enable access to the backup domain (RTC registers, RTC backup data registers).
 800049a:	f001 f877 	bl	800158c <HAL_PWR_EnableBkUpAccess>
	HAL_PWREx_EnableUltraLowPower(); // Ultra low power mode
 800049e:	f001 f8a5 	bl	80015ec <HAL_PWREx_EnableUltraLowPower>
	HAL_PWREx_EnableFastWakeUp(); // Fast wake-up for ultra low power mode
 80004a2:	f001 f899 	bl	80015d8 <HAL_PWREx_EnableFastWakeUp>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80004a6:	2304      	movs	r3, #4
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <stm32l_lowPowerSetup+0x38>)
 80004aa:	6811      	ldr	r1, [r2, #0]
 80004ac:	430b      	orrs	r3, r1
 80004ae:	6013      	str	r3, [r2, #0]
	HAL_SuspendTick();
 80004b0:	f000 fc42 	bl	8000d38 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80004b4:	2101      	movs	r1, #1
 80004b6:	0008      	movs	r0, r1
 80004b8:	f001 f872 	bl	80015a0 <HAL_PWR_EnterSTOPMode>
}
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40007000 	.word	0x40007000

080004c8 <HAL_RTC_AlarmAEventCallback>:
  if (SUM_HOUR == HOUR_EVERY_MSG - 1){
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80004ca:	7813      	ldrb	r3, [r2, #0]
 80004cc:	2b05      	cmp	r3, #5
 80004ce:	d105      	bne.n	80004dc <HAL_RTC_AlarmAEventCallback+0x14>
	 time_flag = TRUE;
 80004d0:	2101      	movs	r1, #1
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_RTC_AlarmAEventCallback+0x20>)
 80004d4:	7019      	strb	r1, [r3, #0]
	 SUM_HOUR = 0;
 80004d6:	2300      	movs	r3, #0
	 SUM_HOUR++;
 80004d8:	7013      	strb	r3, [r2, #0]
}
 80004da:	4770      	bx	lr
	 SUM_HOUR++;
 80004dc:	7813      	ldrb	r3, [r2, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	e7f9      	b.n	80004d8 <HAL_RTC_AlarmAEventCallback+0x10>
 80004e4:	200000f5 	.word	0x200000f5
 80004e8:	200000f4 	.word	0x200000f4

080004ec <COUNTER_CONSUMER>:
	SUM_DEC++;
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <COUNTER_CONSUMER+0x18>)
 80004ee:	7813      	ldrb	r3, [r2, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	7013      	strb	r3, [r2, #0]
	SUM_COUNTER--;
 80004f6:	4a04      	ldr	r2, [pc, #16]	; (8000508 <COUNTER_CONSUMER+0x1c>)
 80004f8:	7813      	ldrb	r3, [r2, #0]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	7013      	strb	r3, [r2, #0]
}
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000020 	.word	0x20000020
 8000508:	20000070 	.word	0x20000070

0800050c <TRANSMIT_WSSFM10R2AT>:
void TRANSMIT_WSSFM10R2AT(char * buff, int ArrayLength){
 800050c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800050e:	0006      	movs	r6, r0
 8000510:	000d      	movs	r5, r1
	sprintf(AT_COMANDO,"AT$RC\r\n");
 8000512:	a801      	add	r0, sp, #4
 8000514:	4918      	ldr	r1, [pc, #96]	; (8000578 <TRANSMIT_WSSFM10R2AT+0x6c>)
 8000516:	f002 f9db 	bl	80028d0 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 800051a:	a801      	add	r0, sp, #4
 800051c:	f7ff fdf4 	bl	8000108 <strlen>
 8000520:	4c16      	ldr	r4, [pc, #88]	; (800057c <TRANSMIT_WSSFM10R2AT+0x70>)
 8000522:	b282      	uxth	r2, r0
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	a901      	add	r1, sp, #4
 8000528:	0020      	movs	r0, r4
 800052a:	f002 f8bd 	bl	80026a8 <HAL_UART_Transmit>
	HAL_Delay(100);
 800052e:	2064      	movs	r0, #100	; 0x64
 8000530:	f000 fbf2 	bl	8000d18 <HAL_Delay>
	sprintf(AT_COMANDO,"AT$SF=");
 8000534:	4912      	ldr	r1, [pc, #72]	; (8000580 <TRANSMIT_WSSFM10R2AT+0x74>)
 8000536:	a801      	add	r0, sp, #4
 8000538:	f002 f9ca 	bl	80028d0 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 800053c:	a801      	add	r0, sp, #4
 800053e:	f7ff fde3 	bl	8000108 <strlen>
 8000542:	a901      	add	r1, sp, #4
 8000544:	b282      	uxth	r2, r0
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	0020      	movs	r0, r4
 800054a:	f002 f8ad 	bl	80026a8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)buff,(uint16_t)ArrayLength,(uint32_t)100);
 800054e:	b2aa      	uxth	r2, r5
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	0031      	movs	r1, r6
 8000554:	0020      	movs	r0, r4
 8000556:	f002 f8a7 	bl	80026a8 <HAL_UART_Transmit>
    sprintf(AT_COMANDO,"\r\n");
 800055a:	490a      	ldr	r1, [pc, #40]	; (8000584 <TRANSMIT_WSSFM10R2AT+0x78>)
 800055c:	a801      	add	r0, sp, #4
 800055e:	f002 f9b7 	bl	80028d0 <strcpy>
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT_COMANDO,(uint16_t)strlen(AT_COMANDO),(uint32_t)100);
 8000562:	a801      	add	r0, sp, #4
 8000564:	f7ff fdd0 	bl	8000108 <strlen>
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	b282      	uxth	r2, r0
 800056c:	a901      	add	r1, sp, #4
 800056e:	0020      	movs	r0, r4
 8000570:	f002 f89a 	bl	80026a8 <HAL_UART_Transmit>
}
 8000574:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	08002979 	.word	0x08002979
 800057c:	20000074 	.word	0x20000074
 8000580:	08002981 	.word	0x08002981
 8000584:	08002976 	.word	0x08002976

08000588 <CONFIG_CHANNEL_ADC>:
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000588:	2380      	movs	r3, #128	; 0x80
uint32_t CONFIG_CHANNEL_ADC(uint32_t channel){
 800058a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800058c:	4c0e      	ldr	r4, [pc, #56]	; (80005c8 <CONFIG_CHANNEL_ADC+0x40>)
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800058e:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000590:	4669      	mov	r1, sp
	sConfig.Channel = channel;
 8000592:	9000      	str	r0, [sp, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000594:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000596:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000598:	f000 fe08 	bl	80011ac <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 800059c:	0020      	movs	r0, r4
 800059e:	f000 fd59 	bl	8001054 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 80005a2:	2164      	movs	r1, #100	; 0x64
 80005a4:	0020      	movs	r0, r4
 80005a6:	f000 fd9f 	bl	80010e8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc);
 80005aa:	0020      	movs	r0, r4
 80005ac:	f000 fdfa 	bl	80011a4 <HAL_ADC_GetValue>
 80005b0:	0005      	movs	r5, r0
	HAL_ADC_Stop(&hadc);
 80005b2:	0020      	movs	r0, r4
 80005b4:	f000 fd7a 	bl	80010ac <HAL_ADC_Stop>
	sConfig.Rank = ADC_RANK_NONE;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <CONFIG_CHANNEL_ADC+0x44>)
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80005ba:	4669      	mov	r1, sp
 80005bc:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 80005be:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80005c0:	f000 fdf4 	bl	80011ac <HAL_ADC_ConfigChannel>
}
 80005c4:	0028      	movs	r0, r5
 80005c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80005c8:	2000011c 	.word	0x2000011c
 80005cc:	00001001 	.word	0x00001001

080005d0 <GET_MEAS_BAT>:
uint32_t GET_MEAS_BAT(void){
 80005d0:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin, GPIO_PIN_SET);
 80005d2:	24a0      	movs	r4, #160	; 0xa0
 80005d4:	05e4      	lsls	r4, r4, #23
 80005d6:	2201      	movs	r2, #1
 80005d8:	2110      	movs	r1, #16
 80005da:	0020      	movs	r0, r4
 80005dc:	f000 ff1e 	bl	800141c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005e0:	2032      	movs	r0, #50	; 0x32
 80005e2:	f000 fb99 	bl	8000d18 <HAL_Delay>
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6600/4095;
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <GET_MEAS_BAT+0x34>)
 80005e8:	f7ff ffce 	bl	8000588 <CONFIG_CHANNEL_ADC>
 80005ec:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	0020      	movs	r0, r4
 80005f2:	2110      	movs	r1, #16
 80005f4:	f000 ff12 	bl	800141c <HAL_GPIO_WritePin>
	bat = CONFIG_CHANNEL_ADC(ADC_CHANNEL_1)*6600/4095;
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <GET_MEAS_BAT+0x38>)
 80005fa:	4904      	ldr	r1, [pc, #16]	; (800060c <GET_MEAS_BAT+0x3c>)
 80005fc:	4368      	muls	r0, r5
 80005fe:	f7ff fd95 	bl	800012c <__udivsi3>
}
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	04000002 	.word	0x04000002
 8000608:	000019c8 	.word	0x000019c8
 800060c:	00000fff 	.word	0x00000fff

08000610 <WAKE_WSSFM10R2AT>:
{
 8000610:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_RESET);
 8000612:	24a0      	movs	r4, #160	; 0xa0
 8000614:	05e4      	lsls	r4, r4, #23
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	0020      	movs	r0, r4
 800061c:	f000 fefe 	bl	800141c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f000 fb79 	bl	8000d18 <HAL_Delay>
	HAL_GPIO_WritePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2120      	movs	r1, #32
 800062a:	0020      	movs	r0, r4
 800062c:	f000 fef6 	bl	800141c <HAL_GPIO_WritePin>
	HAL_Delay(500);  // Wait for the wisol to be prepared
 8000630:	20fa      	movs	r0, #250	; 0xfa
 8000632:	0040      	lsls	r0, r0, #1
 8000634:	f000 fb70 	bl	8000d18 <HAL_Delay>
}
 8000638:	bd10      	pop	{r4, pc}
	...

0800063c <DEEP_SLEEP_WSSFM10R2AT>:
{
 800063c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sprintf(AT,"AT$P=2\r\n");
 800063e:	4909      	ldr	r1, [pc, #36]	; (8000664 <DEEP_SLEEP_WSSFM10R2AT+0x28>)
 8000640:	a801      	add	r0, sp, #4
 8000642:	f002 f945 	bl	80028d0 <strcpy>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)AT,(uint16_t)strlen(AT),(uint32_t)100);
 8000646:	a801      	add	r0, sp, #4
 8000648:	f7ff fd5e 	bl	8000108 <strlen>
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	b282      	uxth	r2, r0
 8000650:	a901      	add	r1, sp, #4
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <DEEP_SLEEP_WSSFM10R2AT+0x2c>)
 8000654:	f002 f828 	bl	80026a8 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000658:	2064      	movs	r0, #100	; 0x64
 800065a:	f000 fb5d 	bl	8000d18 <HAL_Delay>
}
 800065e:	b005      	add	sp, #20
 8000660:	bd00      	pop	{pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	08002970 	.word	0x08002970
 8000668:	20000074 	.word	0x20000074

0800066c <DATA_ASSIGMENT>:
{
 800066c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800066e:	001f      	movs	r7, r3
 8000670:	000e      	movs	r6, r1
 8000672:	0005      	movs	r5, r0
	memset(conversion_buff,'\0',5);
 8000674:	2100      	movs	r1, #0
{
 8000676:	0014      	movs	r4, r2
	memset(conversion_buff,'\0',5);
 8000678:	4668      	mov	r0, sp
 800067a:	2205      	movs	r2, #5
 800067c:	f002 f920 	bl	80028c0 <memset>
	itoa(s,conversion_buff,t);//Convert int S to String in HEX
 8000680:	003a      	movs	r2, r7
 8000682:	4669      	mov	r1, sp
 8000684:	0030      	movs	r0, r6
 8000686:	f002 f917 	bl	80028b8 <itoa>
	uint8_t dig_count=0;//Digit Counter
 800068a:	2300      	movs	r3, #0
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 800068c:	466a      	mov	r2, sp
 800068e:	5cd2      	ldrb	r2, [r2, r3]
 8000690:	2a00      	cmp	r2, #0
 8000692:	d108      	bne.n	80006a6 <DATA_ASSIGMENT+0x3a>
	for (i = (loc-dig_count)+1; j < dig_count; ++i)//Data arrangement in output buffer
 8000694:	3401      	adds	r4, #1
 8000696:	1ae4      	subs	r4, r4, r3
 8000698:	b2e4      	uxtb	r4, r4
 800069a:	b2d0      	uxtb	r0, r2
 800069c:	1821      	adds	r1, r4, r0
 800069e:	b2c9      	uxtb	r1, r1
 80006a0:	4283      	cmp	r3, r0
 80006a2:	d803      	bhi.n	80006ac <DATA_ASSIGMENT+0x40>
}
 80006a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	while(conversion_buff[dig_count] != '\0') ++dig_count;//Converted data digit counter function
 80006a6:	3301      	adds	r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	e7ef      	b.n	800068c <DATA_ASSIGMENT+0x20>
		 buff[i] = conversion_buff[j];
 80006ac:	4668      	mov	r0, sp
 80006ae:	5c80      	ldrb	r0, [r0, r2]
 80006b0:	3201      	adds	r2, #1
 80006b2:	5468      	strb	r0, [r5, r1]
 80006b4:	e7f1      	b.n	800069a <DATA_ASSIGMENT+0x2e>
	...

080006b8 <BUILD_DATA_TO_SEND>:
{
 80006b8:	b510      	push	{r4, lr}
	memset(buff,'0',10); //Clear memory variable
 80006ba:	220a      	movs	r2, #10
 80006bc:	2130      	movs	r1, #48	; 0x30
{
 80006be:	0004      	movs	r4, r0
	memset(buff,'0',10); //Clear memory variable
 80006c0:	f002 f8fe 	bl	80028c0 <memset>
	DATA_ASSIGMENT(buff,GET_MEAS_BAT(),VOLT_LOCA,16);
 80006c4:	f7ff ff84 	bl	80005d0 <GET_MEAS_BAT>
 80006c8:	2310      	movs	r3, #16
 80006ca:	b281      	uxth	r1, r0
 80006cc:	2209      	movs	r2, #9
 80006ce:	0020      	movs	r0, r4
 80006d0:	f7ff ffcc 	bl	800066c <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,SUM_DEC,DATA_LOCA,16);
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <BUILD_DATA_TO_SEND+0x38>)
 80006d6:	0020      	movs	r0, r4
 80006d8:	7819      	ldrb	r1, [r3, #0]
 80006da:	2203      	movs	r2, #3
 80006dc:	2310      	movs	r3, #16
 80006de:	f7ff ffc5 	bl	800066c <DATA_ASSIGMENT>
	DATA_ASSIGMENT(buff,version,VERSION_LOCA,16);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2310      	movs	r3, #16
 80006e6:	0011      	movs	r1, r2
 80006e8:	0020      	movs	r0, r4
 80006ea:	f7ff ffbf 	bl	800066c <DATA_ASSIGMENT>
}
 80006ee:	bd10      	pop	{r4, pc}
 80006f0:	20000020 	.word	0x20000020

080006f4 <CASES_CHOICE>:
{
 80006f4:	b570      	push	{r4, r5, r6, lr}
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 80006f6:	4c15      	ldr	r4, [pc, #84]	; (800074c <CASES_CHOICE+0x58>)
{
 80006f8:	0005      	movs	r5, r0
	if ((SUM_COUNTER == 0) || (SUM_COUNTER > SUM_THRD) || (time_flag == TRUE)) instruction = 1;
 80006fa:	7823      	ldrb	r3, [r4, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <CASES_CHOICE+0x1a>
 8000700:	7823      	ldrb	r3, [r4, #0]
 8000702:	2b0a      	cmp	r3, #10
 8000704:	d803      	bhi.n	800070e <CASES_CHOICE+0x1a>
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <CASES_CHOICE+0x5c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d118      	bne.n	8000740 <CASES_CHOICE+0x4c>
			HAL_Delay(30);
 800070e:	201e      	movs	r0, #30
 8000710:	f000 fb02 	bl	8000d18 <HAL_Delay>
			if ((SUM_COUNTER==0) || (SUM_COUNTER > SUM_THRD)){
 8000714:	7823      	ldrb	r3, [r4, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <CASES_CHOICE+0x2c>
 800071a:	7823      	ldrb	r3, [r4, #0]
 800071c:	2b0a      	cmp	r3, #10
 800071e:	d910      	bls.n	8000742 <CASES_CHOICE+0x4e>
			   SUM_COUNTER = SUM_THRD;
 8000720:	230a      	movs	r3, #10
 8000722:	7023      	strb	r3, [r4, #0]
			BUILD_DATA_TO_SEND(buff);
 8000724:	0028      	movs	r0, r5
 8000726:	f7ff ffc7 	bl	80006b8 <BUILD_DATA_TO_SEND>
			WAKE_WSSFM10R2AT();
 800072a:	f7ff ff71 	bl	8000610 <WAKE_WSSFM10R2AT>
			TRANSMIT_WSSFM10R2AT(buff,10);
 800072e:	210a      	movs	r1, #10
 8000730:	0028      	movs	r0, r5
 8000732:	f7ff feeb 	bl	800050c <TRANSMIT_WSSFM10R2AT>
			DEEP_SLEEP_WSSFM10R2AT();
 8000736:	f7ff ff81 	bl	800063c <DEEP_SLEEP_WSSFM10R2AT>
			SUM_DEC=0;
 800073a:	2200      	movs	r2, #0
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <CASES_CHOICE+0x60>)
 800073e:	701a      	strb	r2, [r3, #0]
}
 8000740:	bd70      	pop	{r4, r5, r6, pc}
			   time_flag = FALSE;
 8000742:	2200      	movs	r2, #0
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <CASES_CHOICE+0x5c>)
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	e7ec      	b.n	8000724 <CASES_CHOICE+0x30>
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000070 	.word	0x20000070
 8000750:	200000f4 	.word	0x200000f4
 8000754:	20000020 	.word	0x20000020

08000758 <SystemClock_Config>:
{
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075c:	2230      	movs	r2, #48	; 0x30
 800075e:	2100      	movs	r1, #0
 8000760:	a80c      	add	r0, sp, #48	; 0x30
 8000762:	f002 f8ad 	bl	80028c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	2214      	movs	r2, #20
 8000768:	2100      	movs	r1, #0
 800076a:	4668      	mov	r0, sp
 800076c:	f002 f8a8 	bl	80028c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000770:	2218      	movs	r2, #24
 8000772:	2100      	movs	r1, #0
 8000774:	a805      	add	r0, sp, #20
 8000776:	f002 f8a3 	bl	80028c0 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077a:	4915      	ldr	r1, [pc, #84]	; (80007d0 <SystemClock_Config+0x78>)
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <SystemClock_Config+0x7c>)
 800077e:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	401a      	ands	r2, r3
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	4313      	orrs	r3, r2
 800078a:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800078c:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000790:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	3306      	adds	r3, #6
 8000796:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800079a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f000 ff6f 	bl	8001680 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a4:	0021      	movs	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007aa:	3371      	adds	r3, #113	; 0x71
 80007ac:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ae:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b4:	f001 f9b6 	bl	8001b24 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 80007b8:	232c      	movs	r3, #44	; 0x2c
 80007ba:	9305      	str	r3, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007bc:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007be:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007c0:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007c2:	9408      	str	r4, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007c4:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007c6:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c8:	f001 fa84 	bl	8001cd4 <HAL_RCCEx_PeriphCLKConfig>
}
 80007cc:	b019      	add	sp, #100	; 0x64
 80007ce:	bd30      	pop	{r4, r5, pc}
 80007d0:	40007000 	.word	0x40007000
 80007d4:	ffffe7ff 	.word	0xffffe7ff

080007d8 <stm32l_lowPowerResume>:
void stm32l_lowPowerResume(void){
 80007d8:	b510      	push	{r4, lr}
	HAL_ResumeTick();
 80007da:	f000 fab5 	bl	8000d48 <HAL_ResumeTick>
	SystemClock_Config();
 80007de:	f7ff ffbb 	bl	8000758 <SystemClock_Config>
	MX_LPUART1_UART_Init();
 80007e2:	f7ff fe3b 	bl	800045c <MX_LPUART1_UART_Init>
}
 80007e6:	bd10      	pop	{r4, pc}

080007e8 <main>:
{
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	SUM_DEC=0;
 80007ea:	2400      	movs	r4, #0
 80007ec:	4b76      	ldr	r3, [pc, #472]	; (80009c8 <main+0x1e0>)
{
 80007ee:	b093      	sub	sp, #76	; 0x4c
	SUM_DEC=0;
 80007f0:	701c      	strb	r4, [r3, #0]
	SUM_HOUR=0;
 80007f2:	4b76      	ldr	r3, [pc, #472]	; (80009cc <main+0x1e4>)
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	ad08      	add	r5, sp, #32
	SUM_HOUR=0;
 80007f6:	701c      	strb	r4, [r3, #0]
  HAL_Init();
 80007f8:	f000 fa6c 	bl	8000cd4 <HAL_Init>
  SystemClock_Config();
 80007fc:	f7ff ffac 	bl	8000758 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	2214      	movs	r2, #20
 8000802:	0021      	movs	r1, r4
 8000804:	0028      	movs	r0, r5
 8000806:	f002 f85b 	bl	80028c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	2701      	movs	r7, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 800080e:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b6f      	ldr	r3, [pc, #444]	; (80009d0 <main+0x1e8>)
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000812:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000816:	430a      	orrs	r2, r1
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
 800081a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081c:	400a      	ands	r2, r1
 800081e:	9201      	str	r2, [sp, #4]
 8000820:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000824:	318c      	adds	r1, #140	; 0x8c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	433a      	orrs	r2, r7
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 800082c:	0022      	movs	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	403b      	ands	r3, r7
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin, GPIO_PIN_RESET);
 8000834:	f000 fdf2 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WAKE_DS_WISOL_Pin|RST_WISOL_Pin, GPIO_PIN_SET);
 8000838:	20a0      	movs	r0, #160	; 0xa0
 800083a:	003a      	movs	r2, r7
 800083c:	2160      	movs	r1, #96	; 0x60
 800083e:	05c0      	lsls	r0, r0, #23
 8000840:	f000 fdec 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HALL_SENS_IRQ_Pin */
  GPIO_InitStruct.Pin = HALL_SENS_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000844:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000846:	4b63      	ldr	r3, [pc, #396]	; (80009d4 <main+0x1ec>)
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000848:	0029      	movs	r1, r5
 800084a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084c:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pin = HALL_SENS_IRQ_Pin;
 800084e:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000850:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(HALL_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000852:	f000 fd37 	bl	80012c4 <HAL_GPIO_Init>
  /*Configure GPIO pins : EN_BAT_MEAS_Pin EN_VCC3V3s_Pin */
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
 8000858:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	0029      	movs	r1, r5
 800085c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = EN_BAT_MEAS_Pin|EN_VCC3V3s_Pin;
 800085e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000862:	60af      	str	r7, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f000 fd2d 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_DS_WISOL_Pin RST_WISOL_Pin */
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 800086a:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = WAKE_DS_WISOL_Pin|RST_WISOL_Pin;
 800086e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	0029      	movs	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000872:	3b4f      	subs	r3, #79	; 0x4f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000876:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f000 fd22 	bl	80012c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000880:	0022      	movs	r2, r4
 8000882:	0021      	movs	r1, r4
 8000884:	2005      	movs	r0, #5
 8000886:	f000 fccf 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800088a:	2005      	movs	r0, #5
 800088c:	f000 fcf6 	bl	800127c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000890:	2208      	movs	r2, #8
 8000892:	0021      	movs	r1, r4
 8000894:	0028      	movs	r0, r5
 8000896:	f002 f813 	bl	80028c0 <memset>
  hadc.Instance = ADC1;
 800089a:	4e4f      	ldr	r6, [pc, #316]	; (80009d8 <main+0x1f0>)
 800089c:	4b4f      	ldr	r3, [pc, #316]	; (80009dc <main+0x1f4>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 80008a0:	6033      	str	r3, [r6, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	6073      	str	r3, [r6, #4]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008a8:	19f3      	adds	r3, r6, r7
 80008aa:	77dc      	strb	r4, [r3, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008ac:	1cb3      	adds	r3, r6, #2
 80008ae:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	23c2      	movs	r3, #194	; 0xc2
 80008b2:	33ff      	adds	r3, #255	; 0xff
 80008b4:	6273      	str	r3, [r6, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008b6:	0033      	movs	r3, r6
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008b8:	0030      	movs	r0, r6
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008ba:	332c      	adds	r3, #44	; 0x2c
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008bc:	6171      	str	r1, [r6, #20]
  hadc.Init.OversamplingMode = DISABLE;
 80008be:	63f4      	str	r4, [r6, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008c0:	60b4      	str	r4, [r6, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008c2:	63b4      	str	r4, [r6, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008c4:	6137      	str	r7, [r6, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c6:	60f4      	str	r4, [r6, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c8:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008ca:	701c      	strb	r4, [r3, #0]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008cc:	6334      	str	r4, [r6, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008ce:	61b4      	str	r4, [r6, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80008d0:	6374      	str	r4, [r6, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008d2:	61f4      	str	r4, [r6, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008d4:	f000 fae6 	bl	8000ea4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_1;
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <main+0x1f8>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008da:	0029      	movs	r1, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80008dc:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008de:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008e0:	0030      	movs	r0, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008e2:	015b      	lsls	r3, r3, #5
 80008e4:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008e6:	f000 fc61 	bl	80011ac <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <main+0x1fc>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ec:	0029      	movs	r1, r5
 80008ee:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_3;
 80008f0:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008f2:	f000 fc5b 	bl	80011ac <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 80008f6:	4e3c      	ldr	r6, [pc, #240]	; (80009e8 <main+0x200>)
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <main+0x204>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fa:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80008fc:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008fe:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <main+0x208>)
  hi2c1.Init.OwnAddress1 = 0;
 8000900:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x2000090E;
 8000902:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000904:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000906:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000908:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800090a:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090c:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090e:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000910:	f000 fd9c 	bl	800144c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000914:	0021      	movs	r1, r4
 8000916:	0030      	movs	r0, r6
 8000918:	f000 fdee 	bl	80014f8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800091c:	0021      	movs	r1, r4
 800091e:	0030      	movs	r0, r6
 8000920:	f000 fe10 	bl	8001544 <HAL_I2CEx_ConfigDigitalFilter>
  MX_LPUART1_UART_Init();
 8000924:	f7ff fd9a 	bl	800045c <MX_LPUART1_UART_Init>
  RTC_TimeTypeDef sTime = {0};
 8000928:	2214      	movs	r2, #20
 800092a:	0021      	movs	r1, r4
 800092c:	a803      	add	r0, sp, #12
 800092e:	f001 ffc7 	bl	80028c0 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8000932:	2228      	movs	r2, #40	; 0x28
 8000934:	0021      	movs	r1, r4
 8000936:	0028      	movs	r0, r5
  RTC_DateTypeDef sDate = {0};
 8000938:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800093a:	f001 ffc1 	bl	80028c0 <memset>
  hrtc.Instance = RTC;
 800093e:	4e2d      	ldr	r6, [pc, #180]	; (80009f4 <main+0x20c>)
 8000940:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <main+0x210>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000942:	0030      	movs	r0, r6
  hrtc.Instance = RTC;
 8000944:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 124;
 8000946:	237c      	movs	r3, #124	; 0x7c
 8000948:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 295;
 800094a:	2328      	movs	r3, #40	; 0x28
 800094c:	33ff      	adds	r3, #255	; 0xff
 800094e:	60f3      	str	r3, [r6, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000950:	6074      	str	r4, [r6, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000952:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000954:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000956:	61b4      	str	r4, [r6, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000958:	61f4      	str	r4, [r6, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800095a:	f001 fadb 	bl	8001f14 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 800095e:	466b      	mov	r3, sp
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000960:	003a      	movs	r2, r7
  sTime.Hours = 0x0;
 8000962:	819c      	strh	r4, [r3, #12]
  sTime.Minutes = 0x0;
 8000964:	739c      	strb	r4, [r3, #14]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000966:	a903      	add	r1, sp, #12
 8000968:	0030      	movs	r0, r6
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800096a:	9406      	str	r4, [sp, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800096c:	9407      	str	r4, [sp, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800096e:	f001 fb39 	bl	8001fe4 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <main+0x214>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000974:	003a      	movs	r2, r7
 8000976:	4669      	mov	r1, sp
 8000978:	0030      	movs	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800097a:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800097c:	f001 fbb2 	bl	80020e4 <HAL_RTC_SetDate>
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS;
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	616b      	str	r3, [r5, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000986:	2321      	movs	r3, #33	; 0x21
 8000988:	446b      	add	r3, sp
  sAlarm.AlarmTime.Hours = 0x0;
 800098a:	802c      	strh	r4, [r5, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800098c:	70ac      	strb	r4, [r5, #2]
  sAlarm.AlarmDateWeekDay = 0x1;
 800098e:	77df      	strb	r7, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8000990:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000992:	003a      	movs	r2, r7
  sAlarm.Alarm = RTC_ALARM_A;
 8000994:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000996:	0029      	movs	r1, r5
 8000998:	0030      	movs	r0, r6
  sAlarm.Alarm = RTC_ALARM_A;
 800099a:	626b      	str	r3, [r5, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800099c:	606c      	str	r4, [r5, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800099e:	60ec      	str	r4, [r5, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009a0:	612c      	str	r4, [r5, #16]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009a2:	61ac      	str	r4, [r5, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009a4:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009a6:	f001 fc09 	bl	80021bc <HAL_RTC_SetAlarm_IT>
  HAL_Delay(2000);
 80009aa:	20fa      	movs	r0, #250	; 0xfa
  SUM_COUNTER=0;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <main+0x218>)
  HAL_Delay(2000);
 80009ae:	00c0      	lsls	r0, r0, #3
  SUM_COUNTER=0;
 80009b0:	701c      	strb	r4, [r3, #0]
  HAL_Delay(2000);
 80009b2:	f000 f9b1 	bl	8000d18 <HAL_Delay>
	  CASES_CHOICE(data_buff);
 80009b6:	0028      	movs	r0, r5
 80009b8:	f7ff fe9c 	bl	80006f4 <CASES_CHOICE>
	  stm32l_lowPowerSetup();
 80009bc:	f7ff fd66 	bl	800048c <stm32l_lowPowerSetup>
	  stm32l_lowPowerResume();
 80009c0:	f7ff ff0a 	bl	80007d8 <stm32l_lowPowerResume>
 80009c4:	e7f7      	b.n	80009b6 <main+0x1ce>
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000020 	.word	0x20000020
 80009cc:	200000f5 	.word	0x200000f5
 80009d0:	40021000 	.word	0x40021000
 80009d4:	10210000 	.word	0x10210000
 80009d8:	2000011c 	.word	0x2000011c
 80009dc:	40012400 	.word	0x40012400
 80009e0:	04000002 	.word	0x04000002
 80009e4:	0c000008 	.word	0x0c000008
 80009e8:	20000024 	.word	0x20000024
 80009ec:	40005400 	.word	0x40005400
 80009f0:	2000090e 	.word	0x2000090e
 80009f4:	200000f8 	.word	0x200000f8
 80009f8:	40002800 	.word	0x40002800
 80009fc:	00010101 	.word	0x00010101
 8000a00:	20000070 	.word	0x20000070

08000a04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a04:	2201      	movs	r2, #1
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_MspInit+0x18>)
 8000a08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a12:	0552      	lsls	r2, r2, #21
 8000a14:	430a      	orrs	r2, r1
 8000a16:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	4770      	bx	lr
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a20:	b510      	push	{r4, lr}
 8000a22:	0004      	movs	r4, r0
 8000a24:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	2214      	movs	r2, #20
 8000a28:	2100      	movs	r1, #0
 8000a2a:	a801      	add	r0, sp, #4
 8000a2c:	f001 ff48 	bl	80028c0 <memset>
  if(hadc->Instance==ADC1)
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_ADC_MspInit+0x4c>)
 8000a32:	6822      	ldr	r2, [r4, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d116      	bne.n	8000a66 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_ADC_MspInit+0x50>)
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a42:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	400b      	ands	r3, r1
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8000a58:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = BAT_MEAS_AN_Pin|HALL_SENS_AN_Pin;
 8000a5c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5e:	3b07      	subs	r3, #7
 8000a60:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f000 fc2f 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a66:	b006      	add	sp, #24
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40012400 	.word	0x40012400
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a74:	b510      	push	{r4, lr}
 8000a76:	0004      	movs	r4, r0
 8000a78:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	2214      	movs	r2, #20
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	a801      	add	r0, sp, #4
 8000a80:	f001 ff1e 	bl	80028c0 <memset>
  if(hi2c->Instance==I2C1)
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_I2C_MspInit+0x54>)
 8000a86:	6822      	ldr	r2, [r4, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d11b      	bne.n	8000ac4 <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	4c0f      	ldr	r4, [pc, #60]	; (8000acc <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	431a      	orrs	r2, r3
 8000a98:	62e2      	str	r2, [r4, #44]	; 0x2c
 8000a9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	9200      	str	r2, [sp, #0]
 8000aa2:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa4:	22c0      	movs	r2, #192	; 0xc0
 8000aa6:	00d2      	lsls	r2, r2, #3
 8000aa8:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2212      	movs	r2, #18
 8000aac:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	3a0f      	subs	r2, #15
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ab4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f000 fc05 	bl	80012c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000abe:	039b      	lsls	r3, r3, #14
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac4:	b006      	add	sp, #24
 8000ac6:	bd10      	pop	{r4, pc}
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	0004      	movs	r4, r0
 8000ad4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	2214      	movs	r2, #20
 8000ad8:	2100      	movs	r1, #0
 8000ada:	a803      	add	r0, sp, #12
 8000adc:	f001 fef0 	bl	80028c0 <memset>
  if(huart->Instance==LPUART1)
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_MspInit+0x74>)
 8000ae2:	6822      	ldr	r2, [r4, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d12b      	bne.n	8000b40 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ae8:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2404      	movs	r4, #4
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_UART_MspInit+0x78>)
 8000aee:	02d2      	lsls	r2, r2, #11
 8000af0:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2702      	movs	r7, #2
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000af4:	430a      	orrs	r2, r1
 8000af6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2603      	movs	r6, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	4322      	orrs	r2, r4
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000b02:	2506      	movs	r5, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b04:	4022      	ands	r2, r4
 8000b06:	9201      	str	r2, [sp, #4]
 8000b08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4311      	orrs	r1, r2
 8000b12:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4013      	ands	r3, r2
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000b24:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	f000 fbcd 	bl	80012c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	a903      	add	r1, sp, #12
 8000b30:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b32:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000b3a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f000 fbc2 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b40:	b009      	add	sp, #36	; 0x24
 8000b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b44:	40004800 	.word	0x40004800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	50000800 	.word	0x50000800

08000b50 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_RTC_MspInit+0x28>)
 8000b52:	6802      	ldr	r2, [r0, #0]
{
 8000b54:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d10d      	bne.n	8000b76 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_RTC_MspInit+0x2c>)
 8000b5e:	02db      	lsls	r3, r3, #11
 8000b60:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000b62:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	f000 fb5c 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f000 fb83 	bl	800127c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b76:	bd10      	pop	{r4, pc}
 8000b78:	40002800 	.word	0x40002800
 8000b7c:	40021000 	.word	0x40021000

08000b80 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b80:	4770      	bx	lr

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler>

08000b84 <SVC_Handler>:
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 f8b7 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bd10      	pop	{r4, pc}

08000b90 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000b90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b92:	4802      	ldr	r0, [pc, #8]	; (8000b9c <RTC_IRQHandler+0xc>)
 8000b94:	f001 f958 	bl	8001e48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	200000f8 	.word	0x200000f8

08000ba0 <EXTI0_1_IRQHandler>:
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
   if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <EXTI0_1_IRQHandler+0x20>)
{
 8000ba2:	b510      	push	{r4, lr}
   if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	07db      	lsls	r3, r3, #31
 8000ba8:	d506      	bpl.n	8000bb8 <EXTI0_1_IRQHandler+0x18>
	  HAL_GPIO_TogglePin(WAKE_DS_WISOL_GPIO_Port, WAKE_DS_WISOL_Pin);
 8000baa:	20a0      	movs	r0, #160	; 0xa0
 8000bac:	2120      	movs	r1, #32
 8000bae:	05c0      	lsls	r0, r0, #23
 8000bb0:	f000 fc3a 	bl	8001428 <HAL_GPIO_TogglePin>
	  COUNTER_CONSUMER();
 8000bb4:	f7ff fc9a 	bl	80004ec <COUNTER_CONSUMER>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 fc3b 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000bbe:	bd10      	pop	{r4, pc}
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <SystemInit+0x44>)
 8000bc8:	0052      	lsls	r2, r2, #1
 8000bca:	6819      	ldr	r1, [r3, #0]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <SystemInit+0x48>)
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <SystemInit+0x4c>)
 8000bdc:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000bde:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000be0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	438a      	bics	r2, r1
 8000be6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	490a      	ldr	r1, [pc, #40]	; (8000c14 <SystemInit+0x50>)
 8000bec:	400a      	ands	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	4909      	ldr	r1, [pc, #36]	; (8000c18 <SystemInit+0x54>)
 8000bf4:	400a      	ands	r2, r1
 8000bf6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <SystemInit+0x58>)
 8000c00:	0512      	lsls	r2, r2, #20
 8000c02:	609a      	str	r2, [r3, #8]
#endif
}
 8000c04:	4770      	bx	lr
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	88ff400c 	.word	0x88ff400c
 8000c10:	fef6fff6 	.word	0xfef6fff6
 8000c14:	fffbffff 	.word	0xfffbffff
 8000c18:	ff02ffff 	.word	0xff02ffff
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c22:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000c24:	4813      	ldr	r0, [pc, #76]	; (8000c74 <LoopForever+0x6>)
    LDR R1, [R0]
 8000c26:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c28:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <LoopForever+0xa>)
    CMP R1, R2
 8000c2c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c2e:	d105      	bne.n	8000c3c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c30:	4812      	ldr	r0, [pc, #72]	; (8000c7c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c32:	4913      	ldr	r1, [pc, #76]	; (8000c80 <LoopForever+0x12>)
    STR R1, [R0]
 8000c34:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c36:	4813      	ldr	r0, [pc, #76]	; (8000c84 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c38:	4913      	ldr	r1, [pc, #76]	; (8000c88 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c3a:	6001      	str	r1, [r0, #0]

08000c3c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c48:	4811      	ldr	r0, [pc, #68]	; (8000c90 <LoopForever+0x22>)
  ldr  r3, =_edata
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
  ldr  r2, =_sbss
 8000c52:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c56:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c58:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5a:	3204      	adds	r2, #4

08000c5c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <LoopForever+0x2e>)
  cmp  r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c62:	f7ff ffaf 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f001 fdeb 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fdbd 	bl	80007e8 <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
   ldr   r0, =_estack
 8000c70:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000c74:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c78:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c7c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c80:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c84:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c88:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000c8c:	080029ec 	.word	0x080029ec
  ldr  r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c94:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000c98:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000c9c:	2000017c 	.word	0x2000017c

08000ca0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_IRQHandler>
	...

08000ca4 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000ca4:	21fa      	movs	r1, #250	; 0xfa
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_InitTick+0x2c>)
{
 8000ca8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000caa:	0089      	lsls	r1, r1, #2
{
 8000cac:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	f7ff fa3c 	bl	800012c <__udivsi3>
 8000cb4:	f000 faec 	bl	8001290 <HAL_SYSTICK_Config>
 8000cb8:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000cba:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d105      	bne.n	8000ccc <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	0022      	movs	r2, r4
 8000cc4:	0029      	movs	r1, r5
 8000cc6:	f000 faaf 	bl	8001228 <HAL_NVIC_SetPriority>
 8000cca:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_Init+0x24>)
{
 8000cd8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cda:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cdc:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce2:	f7ff ffdf 	bl	8000ca4 <HAL_InitTick>
 8000ce6:	1e04      	subs	r4, r0, #0
 8000ce8:	d103      	bne.n	8000cf2 <HAL_Init+0x1e>
    HAL_MspInit();
 8000cea:	f7ff fe8b 	bl	8000a04 <HAL_MspInit>
}
 8000cee:	0020      	movs	r0, r4
 8000cf0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000cf2:	2401      	movs	r4, #1
 8000cf4:	e7fb      	b.n	8000cee <HAL_Init+0x1a>
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000cfc:	4a02      	ldr	r2, [pc, #8]	; (8000d08 <HAL_IncTick+0xc>)
 8000cfe:	6813      	ldr	r3, [r2, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	4770      	bx	lr
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000178 	.word	0x20000178

08000d0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d0c:	4b01      	ldr	r3, [pc, #4]	; (8000d14 <HAL_GetTick+0x8>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
}
 8000d10:	4770      	bx	lr
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000178 	.word	0x20000178

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff fff6 	bl	8000d0c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000d20:	1c63      	adds	r3, r4, #1
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8000d26:	0005      	movs	r5, r0
    wait++;
 8000d28:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	f7ff ffef 	bl	8000d0c <HAL_GetTick>
 8000d2e:	1b40      	subs	r0, r0, r5
 8000d30:	42a0      	cmp	r0, r4
 8000d32:	d3fa      	bcc.n	8000d2a <HAL_Delay+0x12>
  {
  }
}
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d38 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4a02      	ldr	r2, [pc, #8]	; (8000d44 <HAL_SuspendTick+0xc>)
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	438b      	bics	r3, r1
 8000d40:	6013      	str	r3, [r2, #0]
}
 8000d42:	4770      	bx	lr
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	4a02      	ldr	r2, [pc, #8]	; (8000d54 <HAL_ResumeTick+0xc>)
 8000d4c:	6811      	ldr	r1, [r2, #0]
 8000d4e:	430b      	orrs	r3, r1
 8000d50:	6013      	str	r3, [r2, #0]
}
 8000d52:	4770      	bx	lr
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d58:	2103      	movs	r1, #3
 8000d5a:	6803      	ldr	r3, [r0, #0]
{
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d60:	6898      	ldr	r0, [r3, #8]
 8000d62:	4008      	ands	r0, r1
 8000d64:	2801      	cmp	r0, #1
 8000d66:	d001      	beq.n	8000d6c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d68:	2000      	movs	r0, #0
}
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4202      	tst	r2, r0
 8000d70:	d0fa      	beq.n	8000d68 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000d72:	2205      	movs	r2, #5
 8000d74:	689d      	ldr	r5, [r3, #8]
 8000d76:	4015      	ands	r5, r2
 8000d78:	2d01      	cmp	r5, #1
 8000d7a:	d119      	bne.n	8000db0 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8000d7c:	6898      	ldr	r0, [r3, #8]
 8000d7e:	3a03      	subs	r2, #3
 8000d80:	4302      	orrs	r2, r0
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8000d86:	f7ff ffc1 	bl	8000d0c <HAL_GetTick>
 8000d8a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	422b      	tst	r3, r5
 8000d92:	d0e9      	beq.n	8000d68 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d94:	f7ff ffba 	bl	8000d0c <HAL_GetTick>
 8000d98:	1b80      	subs	r0, r0, r6
 8000d9a:	280a      	cmp	r0, #10
 8000d9c:	d9f6      	bls.n	8000d8c <ADC_Disable+0x34>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d9e:	2310      	movs	r3, #16
 8000da0:	6d62      	ldr	r2, [r4, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da4:	4313      	orrs	r3, r2
 8000da6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000daa:	431d      	orrs	r5, r3
 8000dac:	65a5      	str	r5, [r4, #88]	; 0x58
 8000dae:	e7dc      	b.n	8000d6a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000db0:	2310      	movs	r3, #16
 8000db2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000db4:	4313      	orrs	r3, r2
 8000db6:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dba:	4303      	orrs	r3, r0
 8000dbc:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000dbe:	e7d4      	b.n	8000d6a <ADC_Disable+0x12>

08000dc0 <ADC_Enable>:
{
 8000dc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	6803      	ldr	r3, [r0, #0]
{
 8000dc6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	400a      	ands	r2, r1
 8000dcc:	2a01      	cmp	r2, #1
 8000dce:	d104      	bne.n	8000dda <ADC_Enable+0x1a>
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	4211      	tst	r1, r2
 8000dd4:	d001      	beq.n	8000dda <ADC_Enable+0x1a>
  return HAL_OK;
 8000dd6:	2000      	movs	r0, #0
}
 8000dd8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000dda:	6899      	ldr	r1, [r3, #8]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <ADC_Enable+0x84>)
 8000dde:	4211      	tst	r1, r2
 8000de0:	d008      	beq.n	8000df4 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de2:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000de8:	4313      	orrs	r3, r2
 8000dea:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dee:	4303      	orrs	r3, r0
 8000df0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000df2:	e7f1      	b.n	8000dd8 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8000df4:	2201      	movs	r2, #1
 8000df6:	6899      	ldr	r1, [r3, #8]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	609a      	str	r2, [r3, #8]
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <ADC_Enable+0x88>)
 8000dfe:	4913      	ldr	r1, [pc, #76]	; (8000e4c <ADC_Enable+0x8c>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f7ff f993 	bl	800012c <__udivsi3>
 8000e06:	9001      	str	r0, [sp, #4]

  while(waitLoopIndex != 0U)
 8000e08:	9b01      	ldr	r3, [sp, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d115      	bne.n	8000e3a <ADC_Enable+0x7a>
    tickstart = HAL_GetTick();
 8000e0e:	f7ff ff7d 	bl	8000d0c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e12:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000e14:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	422b      	tst	r3, r5
 8000e1c:	d1db      	bne.n	8000dd6 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e1e:	f7ff ff75 	bl	8000d0c <HAL_GetTick>
 8000e22:	1b80      	subs	r0, r0, r6
 8000e24:	280a      	cmp	r0, #10
 8000e26:	d9f6      	bls.n	8000e16 <ADC_Enable+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e28:	2310      	movs	r3, #16
 8000e2a:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8000e2c:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e34:	432b      	orrs	r3, r5
 8000e36:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000e38:	e7ce      	b.n	8000dd8 <ADC_Enable+0x18>
  {
    waitLoopIndex--;
 8000e3a:	9b01      	ldr	r3, [sp, #4]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	e7e2      	b.n	8000e08 <ADC_Enable+0x48>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	80000017 	.word	0x80000017
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	000f4240 	.word	0x000f4240

08000e50 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000e50:	2204      	movs	r2, #4
 8000e52:	6803      	ldr	r3, [r0, #0]
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000e56:	6899      	ldr	r1, [r3, #8]
{
 8000e58:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000e5a:	4211      	tst	r1, r2
 8000e5c:	d101      	bne.n	8000e62 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8000e5e:	2000      	movs	r0, #0
}
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000e62:	6899      	ldr	r1, [r3, #8]
 8000e64:	4211      	tst	r1, r2
 8000e66:	d006      	beq.n	8000e76 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000e68:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000e6a:	0792      	lsls	r2, r2, #30
 8000e6c:	d403      	bmi.n	8000e76 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000e6e:	2210      	movs	r2, #16
 8000e70:	6899      	ldr	r1, [r3, #8]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000e76:	f7ff ff49 	bl	8000d0c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000e7a:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8000e7c:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	422b      	tst	r3, r5
 8000e84:	d0eb      	beq.n	8000e5e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000e86:	f7ff ff41 	bl	8000d0c <HAL_GetTick>
 8000e8a:	1b80      	subs	r0, r0, r6
 8000e8c:	280a      	cmp	r0, #10
 8000e8e:	d9f6      	bls.n	8000e7e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e90:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e92:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e94:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e96:	4313      	orrs	r3, r2
 8000e98:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e9c:	4303      	orrs	r3, r0
 8000e9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ea0:	e7de      	b.n	8000e60 <ADC_ConversionStop+0x10>
	...

08000ea4 <HAL_ADC_Init>:
{
 8000ea4:	b570      	push	{r4, r5, r6, lr}
 8000ea6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000ea8:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000eaa:	2c00      	cmp	r4, #0
 8000eac:	d019      	beq.n	8000ee2 <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d106      	bne.n	8000ec2 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000eb4:	0022      	movs	r2, r4
 8000eb6:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb8:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8000eba:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000ebc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000ebe:	f7ff fdaf 	bl	8000a20 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ec2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ec4:	06db      	lsls	r3, r3, #27
 8000ec6:	d404      	bmi.n	8000ed2 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000ec8:	2204      	movs	r2, #4
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	6898      	ldr	r0, [r3, #8]
 8000ece:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ed0:	d008      	beq.n	8000ee4 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000edc:	2300      	movs	r3, #0
 8000ede:	3450      	adds	r4, #80	; 0x50
 8000ee0:	7023      	strb	r3, [r4, #0]
}
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ee6:	4955      	ldr	r1, [pc, #340]	; (800103c <HAL_ADC_Init+0x198>)
 8000ee8:	4011      	ands	r1, r2
 8000eea:	2202      	movs	r2, #2
 8000eec:	430a      	orrs	r2, r1
 8000eee:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	6899      	ldr	r1, [r3, #8]
 8000ef4:	4011      	ands	r1, r2
 8000ef6:	4a52      	ldr	r2, [pc, #328]	; (8001040 <HAL_ADC_Init+0x19c>)
 8000ef8:	2901      	cmp	r1, #1
 8000efa:	d102      	bne.n	8000f02 <HAL_ADC_Init+0x5e>
 8000efc:	681d      	ldr	r5, [r3, #0]
 8000efe:	420d      	tst	r5, r1
 8000f00:	d119      	bne.n	8000f36 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000f02:	2680      	movs	r6, #128	; 0x80
 8000f04:	6861      	ldr	r1, [r4, #4]
 8000f06:	05f6      	lsls	r6, r6, #23
 8000f08:	004d      	lsls	r5, r1, #1
 8000f0a:	086d      	lsrs	r5, r5, #1
 8000f0c:	42b5      	cmp	r5, r6
 8000f0e:	d003      	beq.n	8000f18 <HAL_ADC_Init+0x74>
 8000f10:	2580      	movs	r5, #128	; 0x80
 8000f12:	062d      	lsls	r5, r5, #24
 8000f14:	42a9      	cmp	r1, r5
 8000f16:	d176      	bne.n	8001006 <HAL_ADC_Init+0x162>
 8000f18:	691d      	ldr	r5, [r3, #16]
 8000f1a:	00ad      	lsls	r5, r5, #2
 8000f1c:	08ad      	lsrs	r5, r5, #2
 8000f1e:	611d      	str	r5, [r3, #16]
 8000f20:	691d      	ldr	r5, [r3, #16]
 8000f22:	4329      	orrs	r1, r5
 8000f24:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000f26:	2518      	movs	r5, #24
 8000f28:	68d9      	ldr	r1, [r3, #12]
 8000f2a:	43a9      	bics	r1, r5
 8000f2c:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000f2e:	68d9      	ldr	r1, [r3, #12]
 8000f30:	68a5      	ldr	r5, [r4, #8]
 8000f32:	4329      	orrs	r1, r5
 8000f34:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000f36:	6811      	ldr	r1, [r2, #0]
 8000f38:	4d42      	ldr	r5, [pc, #264]	; (8001044 <HAL_ADC_Init+0x1a0>)
 8000f3a:	4029      	ands	r1, r5
 8000f3c:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f40:	6815      	ldr	r5, [r2, #0]
 8000f42:	0649      	lsls	r1, r1, #25
 8000f44:	4329      	orrs	r1, r5
 8000f46:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	6899      	ldr	r1, [r3, #8]
 8000f4c:	0552      	lsls	r2, r2, #21
 8000f4e:	4211      	tst	r1, r2
 8000f50:	d102      	bne.n	8000f58 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f52:	6899      	ldr	r1, [r3, #8]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	493b      	ldr	r1, [pc, #236]	; (8001048 <HAL_ADC_Init+0x1a4>)
 8000f5c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f5e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f60:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f62:	68dd      	ldr	r5, [r3, #12]
 8000f64:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f66:	2902      	cmp	r1, #2
 8000f68:	d100      	bne.n	8000f6c <HAL_ADC_Init+0xc8>
 8000f6a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f6c:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f6e:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f70:	4332      	orrs	r2, r6
 8000f72:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f74:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f76:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f78:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f7a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f7c:	69e5      	ldr	r5, [r4, #28]
 8000f7e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f80:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f82:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f84:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f86:	0025      	movs	r5, r4
 8000f88:	352c      	adds	r5, #44	; 0x2c
 8000f8a:	782d      	ldrb	r5, [r5, #0]
 8000f8c:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f8e:	432a      	orrs	r2, r5
 8000f90:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f92:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f94:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f98:	30ff      	adds	r0, #255	; 0xff
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	d004      	beq.n	8000fa8 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f9e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000fa0:	68d8      	ldr	r0, [r3, #12]
 8000fa2:	432a      	orrs	r2, r5
 8000fa4:	4302      	orrs	r2, r0
 8000fa6:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa8:	1ca2      	adds	r2, r4, #2
 8000faa:	7fd2      	ldrb	r2, [r2, #31]
 8000fac:	2a01      	cmp	r2, #1
 8000fae:	d106      	bne.n	8000fbe <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	d134      	bne.n	800101e <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	68d9      	ldr	r1, [r3, #12]
 8000fb8:	0252      	lsls	r2, r2, #9
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000fbe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000fc0:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000fc2:	2901      	cmp	r1, #1
 8000fc4:	d133      	bne.n	800102e <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000fc6:	4821      	ldr	r0, [pc, #132]	; (800104c <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000fc8:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000fca:	4002      	ands	r2, r0
 8000fcc:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000fce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fd0:	6918      	ldr	r0, [r3, #16]
 8000fd2:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8000fd4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000fd6:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000fd8:	4302      	orrs	r2, r0
 8000fda:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	4311      	orrs	r1, r2
 8000fe0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000fe2:	2107      	movs	r1, #7
 8000fe4:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000fe6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000fe8:	438a      	bics	r2, r1
 8000fea:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000ff6:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ffa:	4393      	bics	r3, r2
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	2301      	movs	r3, #1
 8001000:	4313      	orrs	r3, r2
 8001002:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8001004:	e76d      	b.n	8000ee2 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001006:	691d      	ldr	r5, [r3, #16]
 8001008:	4e11      	ldr	r6, [pc, #68]	; (8001050 <HAL_ADC_Init+0x1ac>)
 800100a:	00ad      	lsls	r5, r5, #2
 800100c:	08ad      	lsrs	r5, r5, #2
 800100e:	611d      	str	r5, [r3, #16]
 8001010:	6815      	ldr	r5, [r2, #0]
 8001012:	4035      	ands	r5, r6
 8001014:	6015      	str	r5, [r2, #0]
 8001016:	6815      	ldr	r5, [r2, #0]
 8001018:	4329      	orrs	r1, r5
 800101a:	6011      	str	r1, [r2, #0]
 800101c:	e783      	b.n	8000f26 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101e:	2120      	movs	r1, #32
 8001020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001022:	4301      	orrs	r1, r0
 8001024:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001026:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001028:	430a      	orrs	r2, r1
 800102a:	65a2      	str	r2, [r4, #88]	; 0x58
 800102c:	e7c7      	b.n	8000fbe <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800102e:	2101      	movs	r1, #1
 8001030:	420a      	tst	r2, r1
 8001032:	d0d6      	beq.n	8000fe2 <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001034:	691a      	ldr	r2, [r3, #16]
 8001036:	438a      	bics	r2, r1
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	e7d2      	b.n	8000fe2 <HAL_ADC_Init+0x13e>
 800103c:	fffffefd 	.word	0xfffffefd
 8001040:	40012708 	.word	0x40012708
 8001044:	fdffffff 	.word	0xfdffffff
 8001048:	fffe0219 	.word	0xfffe0219
 800104c:	fffffc03 	.word	0xfffffc03
 8001050:	ffc3ffff 	.word	0xffc3ffff

08001054 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001054:	6803      	ldr	r3, [r0, #0]
{
 8001056:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001058:	689b      	ldr	r3, [r3, #8]
{
 800105a:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 800105c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800105e:	075b      	lsls	r3, r3, #29
 8001060:	d41a      	bmi.n	8001098 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001062:	0025      	movs	r5, r4
 8001064:	3550      	adds	r5, #80	; 0x50
 8001066:	782b      	ldrb	r3, [r5, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d015      	beq.n	8001098 <HAL_ADC_Start+0x44>
 800106c:	2301      	movs	r3, #1
 800106e:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001070:	69e3      	ldr	r3, [r4, #28]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d111      	bne.n	800109a <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001076:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001078:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800107a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800107c:	401a      	ands	r2, r3
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001084:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001086:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001088:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800108a:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800108c:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800108e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001090:	6899      	ldr	r1, [r3, #8]
 8001092:	3a18      	subs	r2, #24
 8001094:	430a      	orrs	r2, r1
 8001096:	609a      	str	r2, [r3, #8]
}
 8001098:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff fe90 	bl	8000dc0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d0e8      	beq.n	8001076 <HAL_ADC_Start+0x22>
 80010a4:	e7f8      	b.n	8001098 <HAL_ADC_Start+0x44>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	fffff0fe 	.word	0xfffff0fe

080010ac <HAL_ADC_Stop>:
{
 80010ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80010ae:	0006      	movs	r6, r0
 80010b0:	3650      	adds	r6, #80	; 0x50
 80010b2:	7833      	ldrb	r3, [r6, #0]
{
 80010b4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80010b6:	2002      	movs	r0, #2
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d012      	beq.n	80010e2 <HAL_ADC_Stop+0x36>
 80010bc:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80010be:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80010c0:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80010c2:	f7ff fec5 	bl	8000e50 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d109      	bne.n	80010de <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80010ca:	0020      	movs	r0, r4
 80010cc:	f7ff fe44 	bl	8000d58 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d104      	bne.n	80010de <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80010d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010d6:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <HAL_ADC_Stop+0x38>)
 80010d8:	4013      	ands	r3, r2
 80010da:	431d      	orrs	r5, r3
 80010dc:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80010de:	2300      	movs	r3, #0
 80010e0:	7033      	strb	r3, [r6, #0]
}
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
 80010e4:	fffffefe 	.word	0xfffffefe

080010e8 <HAL_ADC_PollForConversion>:
{
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010ea:	6945      	ldr	r5, [r0, #20]
{
 80010ec:	0004      	movs	r4, r0
 80010ee:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010f0:	2d08      	cmp	r5, #8
 80010f2:	d00d      	beq.n	8001110 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80010f4:	6803      	ldr	r3, [r0, #0]
 80010f6:	2001      	movs	r0, #1
 80010f8:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010fa:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80010fc:	4203      	tst	r3, r0
 80010fe:	d007      	beq.n	8001110 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001100:	2320      	movs	r3, #32
 8001102:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8001104:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001106:	4313      	orrs	r3, r2
 8001108:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800110a:	2300      	movs	r3, #0
 800110c:	7023      	strb	r3, [r4, #0]
}
 800110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001110:	f7ff fdfc 	bl	8000d0c <HAL_GetTick>
 8001114:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4215      	tst	r5, r2
 800111c:	d024      	beq.n	8001168 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	430a      	orrs	r2, r1
 8001126:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001128:	22c0      	movs	r2, #192	; 0xc0
 800112a:	68d9      	ldr	r1, [r3, #12]
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	4211      	tst	r1, r2
 8001130:	d113      	bne.n	800115a <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001132:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001134:	7fd2      	ldrb	r2, [r2, #31]
 8001136:	2a00      	cmp	r2, #0
 8001138:	d10f      	bne.n	800115a <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	0712      	lsls	r2, r2, #28
 800113e:	d50c      	bpl.n	800115a <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	0752      	lsls	r2, r2, #29
 8001144:	d423      	bmi.n	800118e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001146:	210c      	movs	r1, #12
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	438a      	bics	r2, r1
 800114c:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800114e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001150:	4913      	ldr	r1, [pc, #76]	; (80011a0 <HAL_ADC_PollForConversion+0xb8>)
 8001152:	4011      	ands	r1, r2
 8001154:	2201      	movs	r2, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800115a:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800115c:	69a2      	ldr	r2, [r4, #24]
 800115e:	4282      	cmp	r2, r0
 8001160:	d1d5      	bne.n	800110e <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e7d2      	b.n	800110e <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001168:	1c72      	adds	r2, r6, #1
 800116a:	d0d5      	beq.n	8001118 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800116c:	2e00      	cmp	r6, #0
 800116e:	d108      	bne.n	8001182 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001170:	2304      	movs	r3, #4
 8001172:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8001174:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001176:	4313      	orrs	r3, r2
 8001178:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800117a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800117c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800117e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001180:	e7c5      	b.n	800110e <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001182:	f7ff fdc3 	bl	8000d0c <HAL_GetTick>
 8001186:	1bc0      	subs	r0, r0, r7
 8001188:	42b0      	cmp	r0, r6
 800118a:	d9c4      	bls.n	8001116 <HAL_ADC_PollForConversion+0x2e>
 800118c:	e7f0      	b.n	8001170 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800118e:	2220      	movs	r2, #32
 8001190:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001192:	430a      	orrs	r2, r1
 8001194:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001196:	2201      	movs	r2, #1
 8001198:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800119a:	430a      	orrs	r2, r1
 800119c:	65a2      	str	r2, [r4, #88]	; 0x58
 800119e:	e7dc      	b.n	800115a <HAL_ADC_PollForConversion+0x72>
 80011a0:	fffffefe 	.word	0xfffffefe

080011a4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80011a4:	6803      	ldr	r3, [r0, #0]
 80011a6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_ADC_ConfigChannel>:
{
 80011ac:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 80011ae:	0004      	movs	r4, r0
 80011b0:	3450      	adds	r4, #80	; 0x50
 80011b2:	7823      	ldrb	r3, [r4, #0]
{
 80011b4:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80011b6:	2002      	movs	r0, #2
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d00c      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x2a>
 80011bc:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80011be:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 80011c0:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80011c2:	6890      	ldr	r0, [r2, #8]
 80011c4:	0740      	lsls	r0, r0, #29
 80011c6:	d507      	bpl.n	80011d8 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c8:	2220      	movs	r2, #32
 80011ca:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_ERROR;
 80011cc:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ce:	430a      	orrs	r2, r1
 80011d0:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80011d2:	2200      	movs	r2, #0
 80011d4:	7022      	strb	r2, [r4, #0]
}
 80011d6:	bd30      	pop	{r4, r5, pc}
 80011d8:	2580      	movs	r5, #128	; 0x80
 80011da:	6808      	ldr	r0, [r1, #0]
 80011dc:	02ad      	lsls	r5, r5, #10
 80011de:	0343      	lsls	r3, r0, #13
  if (sConfig->Rank != ADC_RANK_NONE)
 80011e0:	6849      	ldr	r1, [r1, #4]
 80011e2:	4028      	ands	r0, r5
 80011e4:	4d0d      	ldr	r5, [pc, #52]	; (800121c <HAL_ADC_ConfigChannel+0x70>)
 80011e6:	0b5b      	lsrs	r3, r3, #13
 80011e8:	42a9      	cmp	r1, r5
 80011ea:	d00d      	beq.n	8001208 <HAL_ADC_ConfigChannel+0x5c>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80011ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80011ee:	430b      	orrs	r3, r1
 80011f0:	6293      	str	r3, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d005      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x56>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	4a09      	ldr	r2, [pc, #36]	; (8001220 <HAL_ADC_ConfigChannel+0x74>)
 80011fa:	03db      	lsls	r3, r3, #15
 80011fc:	6811      	ldr	r1, [r2, #0]
 80011fe:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001200:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001202:	2000      	movs	r0, #0
 8001204:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001206:	e7e6      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001208:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800120a:	4399      	bics	r1, r3
 800120c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800120e:	2800      	cmp	r0, #0
 8001210:	d0f7      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x56>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001212:	4a03      	ldr	r2, [pc, #12]	; (8001220 <HAL_ADC_ConfigChannel+0x74>)
 8001214:	4903      	ldr	r1, [pc, #12]	; (8001224 <HAL_ADC_ConfigChannel+0x78>)
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	400b      	ands	r3, r1
 800121a:	e7f1      	b.n	8001200 <HAL_ADC_ConfigChannel+0x54>
 800121c:	00001001 	.word	0x00001001
 8001220:	40012708 	.word	0x40012708
 8001224:	ffbfffff 	.word	0xffbfffff

08001228 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001228:	b530      	push	{r4, r5, lr}
 800122a:	25ff      	movs	r5, #255	; 0xff
 800122c:	2403      	movs	r4, #3
 800122e:	002a      	movs	r2, r5
 8001230:	b2c3      	uxtb	r3, r0
 8001232:	401c      	ands	r4, r3
 8001234:	00e4      	lsls	r4, r4, #3
 8001236:	40a2      	lsls	r2, r4
 8001238:	0189      	lsls	r1, r1, #6
 800123a:	4029      	ands	r1, r5
 800123c:	43d2      	mvns	r2, r2
 800123e:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001240:	2800      	cmp	r0, #0
 8001242:	da0b      	bge.n	800125c <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001244:	200f      	movs	r0, #15
 8001246:	4003      	ands	r3, r0
 8001248:	3b08      	subs	r3, #8
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <HAL_NVIC_SetPriority+0x4c>)
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	181b      	adds	r3, r3, r0
 8001252:	69d8      	ldr	r0, [r3, #28]
 8001254:	4002      	ands	r2, r0
 8001256:	4311      	orrs	r1, r2
 8001258:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125e:	0880      	lsrs	r0, r0, #2
 8001260:	0080      	lsls	r0, r0, #2
 8001262:	18c0      	adds	r0, r0, r3
 8001264:	23c0      	movs	r3, #192	; 0xc0
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	58c4      	ldr	r4, [r0, r3]
 800126a:	4022      	ands	r2, r4
 800126c:	4311      	orrs	r1, r2
 800126e:	50c1      	str	r1, [r0, r3]
 8001270:	e7f3      	b.n	800125a <HAL_NVIC_SetPriority+0x32>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	e000ed00 	.word	0xe000ed00
 8001278:	e000e100 	.word	0xe000e100

0800127c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800127c:	231f      	movs	r3, #31
 800127e:	4018      	ands	r0, r3
 8001280:	3b1e      	subs	r3, #30
 8001282:	4083      	lsls	r3, r0
 8001284:	4a01      	ldr	r2, [pc, #4]	; (800128c <HAL_NVIC_EnableIRQ+0x10>)
 8001286:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001288:	4770      	bx	lr
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	e000e100 	.word	0xe000e100

08001290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_SYSTICK_Config+0x28>)
 8001292:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001294:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001296:	4293      	cmp	r3, r2
 8001298:	d80d      	bhi.n	80012b6 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129e:	4808      	ldr	r0, [pc, #32]	; (80012c0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a2:	6a03      	ldr	r3, [r0, #32]
 80012a4:	0609      	lsls	r1, r1, #24
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ae:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b2:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012b6:	4770      	bx	lr
 80012b8:	00ffffff 	.word	0x00ffffff
 80012bc:	e000e010 	.word	0xe000e010
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012c6:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_GPIO_Init+0x140>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80012c8:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012ca:	1882      	adds	r2, r0, r2
 80012cc:	1e54      	subs	r4, r2, #1
 80012ce:	41a2      	sbcs	r2, r4
{
 80012d0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 80012d2:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 80012d4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012d6:	3205      	adds	r2, #5
 80012d8:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012da:	9a03      	ldr	r2, [sp, #12]
 80012dc:	40da      	lsrs	r2, r3
 80012de:	d101      	bne.n	80012e4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80012e0:	b007      	add	sp, #28
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012e4:	2501      	movs	r5, #1
 80012e6:	409d      	lsls	r5, r3
 80012e8:	9a03      	ldr	r2, [sp, #12]
 80012ea:	402a      	ands	r2, r5
 80012ec:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 80012ee:	d100      	bne.n	80012f2 <HAL_GPIO_Init+0x2e>
 80012f0:	e086      	b.n	8001400 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80012f2:	684a      	ldr	r2, [r1, #4]
 80012f4:	9201      	str	r2, [sp, #4]
 80012f6:	2210      	movs	r2, #16
 80012f8:	9e01      	ldr	r6, [sp, #4]
 80012fa:	4396      	bics	r6, r2
 80012fc:	2e02      	cmp	r6, #2
 80012fe:	d10f      	bne.n	8001320 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001304:	2407      	movs	r4, #7
 8001306:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8001308:	6a17      	ldr	r7, [r2, #32]
 800130a:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800130c:	220f      	movs	r2, #15
 800130e:	401c      	ands	r4, r3
 8001310:	00a4      	lsls	r4, r4, #2
 8001312:	40a2      	lsls	r2, r4
 8001314:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001316:	690a      	ldr	r2, [r1, #16]
 8001318:	40a2      	lsls	r2, r4
 800131a:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 800131c:	9a04      	ldr	r2, [sp, #16]
 800131e:	6217      	str	r7, [r2, #32]
 8001320:	2203      	movs	r2, #3
 8001322:	005f      	lsls	r7, r3, #1
 8001324:	40ba      	lsls	r2, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001326:	3e01      	subs	r6, #1
 8001328:	43d2      	mvns	r2, r2
 800132a:	2e01      	cmp	r6, #1
 800132c:	d80e      	bhi.n	800134c <HAL_GPIO_Init+0x88>
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132e:	68cc      	ldr	r4, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8001330:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	40bc      	lsls	r4, r7
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001334:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001338:	6084      	str	r4, [r0, #8]
        temp= GPIOx->OTYPER;
 800133a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133c:	43ac      	bics	r4, r5
 800133e:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001340:	9c01      	ldr	r4, [sp, #4]
 8001342:	06e4      	lsls	r4, r4, #27
 8001344:	0fe4      	lsrs	r4, r4, #31
 8001346:	409c      	lsls	r4, r3
 8001348:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800134a:	6044      	str	r4, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134c:	2403      	movs	r4, #3
 800134e:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8001350:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001352:	4025      	ands	r5, r4
 8001354:	40bd      	lsls	r5, r7
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001356:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001358:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 800135a:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 800135c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800135e:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001360:	688d      	ldr	r5, [r1, #8]
 8001362:	40bd      	lsls	r5, r7
 8001364:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8001366:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001368:	9a01      	ldr	r2, [sp, #4]
 800136a:	00d2      	lsls	r2, r2, #3
 800136c:	d548      	bpl.n	8001400 <HAL_GPIO_Init+0x13c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2701      	movs	r7, #1
 8001370:	4d25      	ldr	r5, [pc, #148]	; (8001408 <HAL_GPIO_Init+0x144>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001372:	401c      	ands	r4, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001376:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001378:	433a      	orrs	r2, r7
 800137a:	636a      	str	r2, [r5, #52]	; 0x34
 800137c:	4a23      	ldr	r2, [pc, #140]	; (800140c <HAL_GPIO_Init+0x148>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	089d      	lsrs	r5, r3, #2
 8001380:	00ad      	lsls	r5, r5, #2
 8001382:	18ad      	adds	r5, r5, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001384:	220f      	movs	r2, #15
 8001386:	40a2      	lsls	r2, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 8001388:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800138a:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800138c:	22a0      	movs	r2, #160	; 0xa0
 800138e:	05d2      	lsls	r2, r2, #23
 8001390:	4694      	mov	ip, r2
 8001392:	2200      	movs	r2, #0
 8001394:	4560      	cmp	r0, ip
 8001396:	d009      	beq.n	80013ac <HAL_GPIO_Init+0xe8>
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x14c>)
 800139a:	4694      	mov	ip, r2
 800139c:	003a      	movs	r2, r7
 800139e:	4560      	cmp	r0, ip
 80013a0:	d004      	beq.n	80013ac <HAL_GPIO_Init+0xe8>
 80013a2:	4f1c      	ldr	r7, [pc, #112]	; (8001414 <HAL_GPIO_Init+0x150>)
 80013a4:	1892      	adds	r2, r2, r2
 80013a6:	42b8      	cmp	r0, r7
 80013a8:	d000      	beq.n	80013ac <HAL_GPIO_Init+0xe8>
 80013aa:	9a05      	ldr	r2, [sp, #20]
 80013ac:	40a2      	lsls	r2, r4
 80013ae:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b0:	60aa      	str	r2, [r5, #8]
        temp = EXTI->IMR;
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x154>)
        temp &= ~((uint32_t)iocurrent);
 80013b4:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80013b6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80013b8:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ba:	9f01      	ldr	r7, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80013be:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c0:	03ff      	lsls	r7, r7, #15
 80013c2:	d401      	bmi.n	80013c8 <HAL_GPIO_Init+0x104>
        temp &= ~((uint32_t)iocurrent);
 80013c4:	0035      	movs	r5, r6
 80013c6:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80013c8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80013ca:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80013cc:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ce:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80013d0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d2:	03bf      	lsls	r7, r7, #14
 80013d4:	d401      	bmi.n	80013da <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 80013d6:	0035      	movs	r5, r6
 80013d8:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80013da:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80013dc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80013de:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e0:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80013e2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e4:	02ff      	lsls	r7, r7, #11
 80013e6:	d401      	bmi.n	80013ec <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 80013e8:	0035      	movs	r5, r6
 80013ea:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80013ec:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80013ee:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80013f0:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f2:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80013f4:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f6:	02bf      	lsls	r7, r7, #10
 80013f8:	d401      	bmi.n	80013fe <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 80013fa:	4025      	ands	r5, r4
 80013fc:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80013fe:	60d6      	str	r6, [r2, #12]
    position++;
 8001400:	3301      	adds	r3, #1
 8001402:	e76a      	b.n	80012da <HAL_GPIO_Init+0x16>
 8001404:	afffe400 	.word	0xafffe400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000
 8001410:	50000400 	.word	0x50000400
 8001414:	50000800 	.word	0x50000800
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800141c:	2a00      	cmp	r2, #0
 800141e:	d001      	beq.n	8001424 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001420:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001422:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001424:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001426:	e7fc      	b.n	8001422 <HAL_GPIO_WritePin+0x6>

08001428 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001428:	6943      	ldr	r3, [r0, #20]
 800142a:	4059      	eors	r1, r3
 800142c:	6141      	str	r1, [r0, #20]
}
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001436:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	4210      	tst	r0, r2
 800143c:	d002      	beq.n	8001444 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001440:	f7ff fff6 	bl	8001430 <HAL_GPIO_EXTI_Callback>
}
 8001444:	bd10      	pop	{r4, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001452:	2c00      	cmp	r4, #0
 8001454:	d03f      	beq.n	80014d6 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001456:	0025      	movs	r5, r4
 8001458:	3541      	adds	r5, #65	; 0x41
 800145a:	782b      	ldrb	r3, [r5, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001462:	0022      	movs	r2, r4
 8001464:	3240      	adds	r2, #64	; 0x40
 8001466:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001468:	0020      	movs	r0, r4
 800146a:	f7ff fb03 	bl	8000a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800146e:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001470:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001472:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001474:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001476:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68a6      	ldr	r6, [r4, #8]
 800147c:	438a      	bics	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001480:	6861      	ldr	r1, [r4, #4]
 8001482:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <HAL_I2C_Init+0xa0>)
 8001484:	400a      	ands	r2, r1
 8001486:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001488:	6899      	ldr	r1, [r3, #8]
 800148a:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_I2C_Init+0xa4>)
 800148c:	4011      	ands	r1, r2
 800148e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001490:	2801      	cmp	r0, #1
 8001492:	d121      	bne.n	80014d8 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0209      	lsls	r1, r1, #8
 8001498:	4331      	orrs	r1, r6
 800149a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800149c:	6858      	ldr	r0, [r3, #4]
 800149e:	4915      	ldr	r1, [pc, #84]	; (80014f4 <HAL_I2C_Init+0xa8>)
 80014a0:	4301      	orrs	r1, r0
 80014a2:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014a4:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a6:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014a8:	400a      	ands	r2, r1
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014ac:	6961      	ldr	r1, [r4, #20]
 80014ae:	6922      	ldr	r2, [r4, #16]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	69a1      	ldr	r1, [r4, #24]
 80014b4:	0209      	lsls	r1, r1, #8
 80014b6:	430a      	orrs	r2, r1
 80014b8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ba:	6a21      	ldr	r1, [r4, #32]
 80014bc:	69e2      	ldr	r2, [r4, #28]
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80014c2:	2201      	movs	r2, #1
 80014c4:	6819      	ldr	r1, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80014ca:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ce:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014d0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d2:	3442      	adds	r4, #66	; 0x42
 80014d4:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014d8:	2184      	movs	r1, #132	; 0x84
 80014da:	0209      	lsls	r1, r1, #8
 80014dc:	4331      	orrs	r1, r6
 80014de:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014e0:	2802      	cmp	r0, #2
 80014e2:	d1db      	bne.n	800149c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0109      	lsls	r1, r1, #4
 80014e8:	6059      	str	r1, [r3, #4]
 80014ea:	e7d7      	b.n	800149c <HAL_I2C_Init+0x50>
 80014ec:	f0ffffff 	.word	0xf0ffffff
 80014f0:	ffff7fff 	.word	0xffff7fff
 80014f4:	02008000 	.word	0x02008000

080014f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fa:	0004      	movs	r4, r0
 80014fc:	3441      	adds	r4, #65	; 0x41
 80014fe:	7822      	ldrb	r2, [r4, #0]
{
 8001500:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001502:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001504:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001506:	2a20      	cmp	r2, #32
 8001508:	d118      	bne.n	800153c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800150a:	001d      	movs	r5, r3
 800150c:	3540      	adds	r5, #64	; 0x40
 800150e:	782e      	ldrb	r6, [r5, #0]
 8001510:	2e01      	cmp	r6, #1
 8001512:	d013      	beq.n	800153c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001514:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001516:	3022      	adds	r0, #34	; 0x22
 8001518:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800151a:	681e      	ldr	r6, [r3, #0]
 800151c:	3823      	subs	r0, #35	; 0x23
 800151e:	4386      	bics	r6, r0
 8001520:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001522:	681e      	ldr	r6, [r3, #0]
 8001524:	4f06      	ldr	r7, [pc, #24]	; (8001540 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8001526:	403e      	ands	r6, r7
 8001528:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800152a:	681e      	ldr	r6, [r3, #0]
 800152c:	4331      	orrs	r1, r6
 800152e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	4308      	orrs	r0, r1
 8001534:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001536:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001538:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800153a:	7028      	strb	r0, [r5, #0]
  }
}
 800153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	ffffefff 	.word	0xffffefff

08001544 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001546:	0005      	movs	r5, r0
 8001548:	3541      	adds	r5, #65	; 0x41
 800154a:	782a      	ldrb	r2, [r5, #0]
{
 800154c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800154e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001550:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001552:	2a20      	cmp	r2, #32
 8001554:	d117      	bne.n	8001586 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001556:	001c      	movs	r4, r3
 8001558:	3440      	adds	r4, #64	; 0x40
 800155a:	7826      	ldrb	r6, [r4, #0]
 800155c:	2e01      	cmp	r6, #1
 800155e:	d012      	beq.n	8001586 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8001560:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001562:	3022      	adds	r0, #34	; 0x22
 8001564:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001566:	681e      	ldr	r6, [r3, #0]
 8001568:	3823      	subs	r0, #35	; 0x23
 800156a:	4386      	bics	r6, r0
 800156c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800156e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001570:	4f05      	ldr	r7, [pc, #20]	; (8001588 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001572:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001574:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001576:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001578:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	4308      	orrs	r0, r1
 800157e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001580:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001582:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001584:	7020      	strb	r0, [r4, #0]
  }
}
 8001586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001588:	fffff0ff 	.word	0xfffff0ff

0800158c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_PWR_EnableBkUpAccess+0x10>)
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	6811      	ldr	r1, [r2, #0]
 8001594:	430b      	orrs	r3, r1
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	4770      	bx	lr
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40007000 	.word	0x40007000

080015a0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80015a0:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80015a2:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_PWR_EnterSTOPMode+0x30>)
 80015a6:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80015a8:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80015aa:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80015ac:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80015ae:	2204      	movs	r2, #4
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_PWR_EnterSTOPMode+0x34>)
 80015b2:	6918      	ldr	r0, [r3, #16]
 80015b4:	4302      	orrs	r2, r0
 80015b6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80015b8:	2901      	cmp	r1, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_PWR_EnterSTOPMode+0x28>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80015bc:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80015be:	2104      	movs	r1, #4
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	438a      	bics	r2, r1
 80015c4:	611a      	str	r2, [r3, #16]

}
 80015c6:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80015c8:	bf40      	sev
  __ASM volatile ("wfe");
 80015ca:	bf20      	wfe
 80015cc:	bf20      	wfe
 80015ce:	e7f6      	b.n	80015be <HAL_PWR_EnterSTOPMode+0x1e>
 80015d0:	40007000 	.word	0x40007000
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_PWREx_EnableFastWakeUp+0x10>)
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	6811      	ldr	r1, [r2, #0]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	4770      	bx	lr
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	40007000 	.word	0x40007000

080015ec <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_PWREx_EnableUltraLowPower+0x10>)
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	6811      	ldr	r1, [r2, #0]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	4770      	bx	lr
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40007000 	.word	0x40007000

08001600 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001600:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001604:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001606:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001608:	400a      	ands	r2, r1
 800160a:	2a08      	cmp	r2, #8
 800160c:	d029      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x62>
 800160e:	2a0c      	cmp	r2, #12
 8001610:	d009      	beq.n	8001626 <HAL_RCC_GetSysClockFreq+0x26>
 8001612:	2a04      	cmp	r2, #4
 8001614:	d11d      	bne.n	8001652 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001616:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800161a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800161c:	17c0      	asrs	r0, r0, #31
 800161e:	4018      	ands	r0, r3
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_RCC_GetSysClockFreq+0x70>)
 8001622:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001624:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001626:	028a      	lsls	r2, r1, #10
 8001628:	4812      	ldr	r0, [pc, #72]	; (8001674 <HAL_RCC_GetSysClockFreq+0x74>)
 800162a:	0f12      	lsrs	r2, r2, #28
 800162c:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800162e:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001630:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001632:	0f89      	lsrs	r1, r1, #30
 8001634:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001636:	03c0      	lsls	r0, r0, #15
 8001638:	d504      	bpl.n	8001644 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 800163c:	4350      	muls	r0, r2
 800163e:	f7fe fd75 	bl	800012c <__udivsi3>
 8001642:	e7ef      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	06db      	lsls	r3, r3, #27
 8001648:	d501      	bpl.n	800164e <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <HAL_RCC_GetSysClockFreq+0x7c>)
 800164c:	e7f6      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 800164e:	4808      	ldr	r0, [pc, #32]	; (8001670 <HAL_RCC_GetSysClockFreq+0x70>)
 8001650:	e7f4      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001652:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001654:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001656:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800165c:	3301      	adds	r3, #1
 800165e:	4098      	lsls	r0, r3
 8001660:	e7e0      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <HAL_RCC_GetSysClockFreq+0x78>)
 8001664:	e7de      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x24>
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	40021000 	.word	0x40021000
 800166c:	ff48e500 	.word	0xff48e500
 8001670:	00f42400 	.word	0x00f42400
 8001674:	080029a0 	.word	0x080029a0
 8001678:	007a1200 	.word	0x007a1200
 800167c:	003d0900 	.word	0x003d0900

08001680 <HAL_RCC_OscConfig>:
{
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	0005      	movs	r5, r0
 8001684:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8001686:	2800      	cmp	r0, #0
 8001688:	d102      	bne.n	8001690 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
}
 800168c:	b007      	add	sp, #28
 800168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001690:	230c      	movs	r3, #12
 8001692:	4cc0      	ldr	r4, [pc, #768]	; (8001994 <HAL_RCC_OscConfig+0x314>)
 8001694:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001696:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001698:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	401a      	ands	r2, r3
 80016a0:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	6802      	ldr	r2, [r0, #0]
 80016a4:	07d2      	lsls	r2, r2, #31
 80016a6:	d43d      	bmi.n	8001724 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	079b      	lsls	r3, r3, #30
 80016ac:	d500      	bpl.n	80016b0 <HAL_RCC_OscConfig+0x30>
 80016ae:	e083      	b.n	80017b8 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	06db      	lsls	r3, r3, #27
 80016b4:	d528      	bpl.n	8001708 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80016b6:	2e00      	cmp	r6, #0
 80016b8:	d000      	beq.n	80016bc <HAL_RCC_OscConfig+0x3c>
 80016ba:	e0dd      	b.n	8001878 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	059b      	lsls	r3, r3, #22
 80016c0:	d502      	bpl.n	80016c8 <HAL_RCC_OscConfig+0x48>
 80016c2:	69ab      	ldr	r3, [r5, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0e0      	beq.n	800168a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c8:	6862      	ldr	r2, [r4, #4]
 80016ca:	49b3      	ldr	r1, [pc, #716]	; (8001998 <HAL_RCC_OscConfig+0x318>)
 80016cc:	6a2b      	ldr	r3, [r5, #32]
 80016ce:	400a      	ands	r2, r1
 80016d0:	431a      	orrs	r2, r3
 80016d2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d4:	6861      	ldr	r1, [r4, #4]
 80016d6:	69ea      	ldr	r2, [r5, #28]
 80016d8:	0209      	lsls	r1, r1, #8
 80016da:	0a09      	lsrs	r1, r1, #8
 80016dc:	0612      	lsls	r2, r2, #24
 80016de:	430a      	orrs	r2, r1
 80016e0:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	0b5b      	lsrs	r3, r3, #13
 80016e6:	3301      	adds	r3, #1
 80016e8:	0212      	lsls	r2, r2, #8
 80016ea:	409a      	lsls	r2, r3
 80016ec:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016ee:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80016f0:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016f2:	060a      	lsls	r2, r1, #24
 80016f4:	49a9      	ldr	r1, [pc, #676]	; (800199c <HAL_RCC_OscConfig+0x31c>)
 80016f6:	0f12      	lsrs	r2, r2, #28
 80016f8:	5c8a      	ldrb	r2, [r1, r2]
 80016fa:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016fc:	4aa8      	ldr	r2, [pc, #672]	; (80019a0 <HAL_RCC_OscConfig+0x320>)
 80016fe:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001700:	f7ff fad0 	bl	8000ca4 <HAL_InitTick>
        if(status != HAL_OK)
 8001704:	2800      	cmp	r0, #0
 8001706:	d1c1      	bne.n	800168c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	071b      	lsls	r3, r3, #28
 800170c:	d500      	bpl.n	8001710 <HAL_RCC_OscConfig+0x90>
 800170e:	e0ea      	b.n	80018e6 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	075b      	lsls	r3, r3, #29
 8001714:	d500      	bpl.n	8001718 <HAL_RCC_OscConfig+0x98>
 8001716:	e10c      	b.n	8001932 <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001718:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800171a:	2b00      	cmp	r3, #0
 800171c:	d000      	beq.n	8001720 <HAL_RCC_OscConfig+0xa0>
 800171e:	e191      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 8001720:	2000      	movs	r0, #0
 8001722:	e7b3      	b.n	800168c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001724:	2e08      	cmp	r6, #8
 8001726:	d004      	beq.n	8001732 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001728:	2e0c      	cmp	r6, #12
 800172a:	d109      	bne.n	8001740 <HAL_RCC_OscConfig+0xc0>
 800172c:	9a01      	ldr	r2, [sp, #4]
 800172e:	2a00      	cmp	r2, #0
 8001730:	d006      	beq.n	8001740 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	039b      	lsls	r3, r3, #14
 8001736:	d5b7      	bpl.n	80016a8 <HAL_RCC_OscConfig+0x28>
 8001738:	686b      	ldr	r3, [r5, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1b4      	bne.n	80016a8 <HAL_RCC_OscConfig+0x28>
 800173e:	e7a4      	b.n	800168a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001740:	686a      	ldr	r2, [r5, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	d111      	bne.n	800176a <HAL_RCC_OscConfig+0xea>
 8001746:	6822      	ldr	r2, [r4, #0]
 8001748:	4313      	orrs	r3, r2
 800174a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800174c:	f7ff fade 	bl	8000d0c <HAL_GetTick>
 8001750:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	0292      	lsls	r2, r2, #10
 8001758:	4213      	tst	r3, r2
 800175a:	d1a5      	bne.n	80016a8 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fad6 	bl	8000d0c <HAL_GetTick>
 8001760:	1bc0      	subs	r0, r0, r7
 8001762:	2864      	cmp	r0, #100	; 0x64
 8001764:	d9f5      	bls.n	8001752 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8001766:	2003      	movs	r0, #3
 8001768:	e790      	b.n	800168c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176a:	21a0      	movs	r1, #160	; 0xa0
 800176c:	02c9      	lsls	r1, r1, #11
 800176e:	428a      	cmp	r2, r1
 8001770:	d105      	bne.n	800177e <HAL_RCC_OscConfig+0xfe>
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	6821      	ldr	r1, [r4, #0]
 8001776:	02d2      	lsls	r2, r2, #11
 8001778:	430a      	orrs	r2, r1
 800177a:	6022      	str	r2, [r4, #0]
 800177c:	e7e3      	b.n	8001746 <HAL_RCC_OscConfig+0xc6>
 800177e:	6821      	ldr	r1, [r4, #0]
 8001780:	4888      	ldr	r0, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x324>)
 8001782:	4001      	ands	r1, r0
 8001784:	6021      	str	r1, [r4, #0]
 8001786:	6821      	ldr	r1, [r4, #0]
 8001788:	400b      	ands	r3, r1
 800178a:	9305      	str	r3, [sp, #20]
 800178c:	9b05      	ldr	r3, [sp, #20]
 800178e:	4986      	ldr	r1, [pc, #536]	; (80019a8 <HAL_RCC_OscConfig+0x328>)
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	400b      	ands	r3, r1
 8001794:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001796:	2a00      	cmp	r2, #0
 8001798:	d1d8      	bne.n	800174c <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 800179a:	f7ff fab7 	bl	8000d0c <HAL_GetTick>
 800179e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	0292      	lsls	r2, r2, #10
 80017a6:	4213      	tst	r3, r2
 80017a8:	d100      	bne.n	80017ac <HAL_RCC_OscConfig+0x12c>
 80017aa:	e77d      	b.n	80016a8 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff faae 	bl	8000d0c <HAL_GetTick>
 80017b0:	1bc0      	subs	r0, r0, r7
 80017b2:	2864      	cmp	r0, #100	; 0x64
 80017b4:	d9f4      	bls.n	80017a0 <HAL_RCC_OscConfig+0x120>
 80017b6:	e7d6      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80017b8:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80017ba:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80017bc:	4213      	tst	r3, r2
 80017be:	d003      	beq.n	80017c8 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80017c0:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80017c2:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80017c4:	4311      	orrs	r1, r2
 80017c6:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c8:	2e04      	cmp	r6, #4
 80017ca:	d004      	beq.n	80017d6 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017cc:	2e0c      	cmp	r6, #12
 80017ce:	d125      	bne.n	800181c <HAL_RCC_OscConfig+0x19c>
 80017d0:	9a01      	ldr	r2, [sp, #4]
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d122      	bne.n	800181c <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017d6:	6822      	ldr	r2, [r4, #0]
 80017d8:	0752      	lsls	r2, r2, #29
 80017da:	d502      	bpl.n	80017e2 <HAL_RCC_OscConfig+0x162>
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d100      	bne.n	80017e2 <HAL_RCC_OscConfig+0x162>
 80017e0:	e753      	b.n	800168a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	6861      	ldr	r1, [r4, #4]
 80017e4:	692a      	ldr	r2, [r5, #16]
 80017e6:	4871      	ldr	r0, [pc, #452]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80017e8:	0212      	lsls	r2, r2, #8
 80017ea:	4001      	ands	r1, r0
 80017ec:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017ee:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017f2:	6822      	ldr	r2, [r4, #0]
 80017f4:	438a      	bics	r2, r1
 80017f6:	4313      	orrs	r3, r2
 80017f8:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fa:	f7ff ff01 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80017fe:	68e3      	ldr	r3, [r4, #12]
 8001800:	4a66      	ldr	r2, [pc, #408]	; (800199c <HAL_RCC_OscConfig+0x31c>)
 8001802:	061b      	lsls	r3, r3, #24
 8001804:	0f1b      	lsrs	r3, r3, #28
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	40d8      	lsrs	r0, r3
 800180a:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_OscConfig+0x320>)
 800180c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fa48 	bl	8000ca4 <HAL_InitTick>
      if(status != HAL_OK)
 8001814:	2800      	cmp	r0, #0
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x19a>
 8001818:	e74a      	b.n	80016b0 <HAL_RCC_OscConfig+0x30>
 800181a:	e737      	b.n	800168c <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 800181c:	2b00      	cmp	r3, #0
 800181e:	d019      	beq.n	8001854 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001820:	2109      	movs	r1, #9
 8001822:	6822      	ldr	r2, [r4, #0]
 8001824:	438a      	bics	r2, r1
 8001826:	4313      	orrs	r3, r2
 8001828:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800182a:	f7ff fa6f 	bl	8000d0c <HAL_GetTick>
 800182e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001830:	2204      	movs	r2, #4
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	4213      	tst	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	6862      	ldr	r2, [r4, #4]
 800183a:	692b      	ldr	r3, [r5, #16]
 800183c:	495b      	ldr	r1, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	400a      	ands	r2, r1
 8001842:	4313      	orrs	r3, r2
 8001844:	6063      	str	r3, [r4, #4]
 8001846:	e733      	b.n	80016b0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001848:	f7ff fa60 	bl	8000d0c <HAL_GetTick>
 800184c:	1bc0      	subs	r0, r0, r7
 800184e:	2802      	cmp	r0, #2
 8001850:	d9ee      	bls.n	8001830 <HAL_RCC_OscConfig+0x1b0>
 8001852:	e788      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 8001854:	2201      	movs	r2, #1
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	4393      	bics	r3, r2
 800185a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800185c:	f7ff fa56 	bl	8000d0c <HAL_GetTick>
 8001860:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001862:	2204      	movs	r2, #4
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	4213      	tst	r3, r2
 8001868:	d100      	bne.n	800186c <HAL_RCC_OscConfig+0x1ec>
 800186a:	e721      	b.n	80016b0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186c:	f7ff fa4e 	bl	8000d0c <HAL_GetTick>
 8001870:	1bc0      	subs	r0, r0, r7
 8001872:	2802      	cmp	r0, #2
 8001874:	d9f5      	bls.n	8001862 <HAL_RCC_OscConfig+0x1e2>
 8001876:	e776      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001878:	69ab      	ldr	r3, [r5, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d020      	beq.n	80018c0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4313      	orrs	r3, r2
 8001886:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001888:	f7ff fa40 	bl	8000d0c <HAL_GetTick>
 800188c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4213      	tst	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	4a3f      	ldr	r2, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x318>)
 800189c:	4013      	ands	r3, r2
 800189e:	6a2a      	ldr	r2, [r5, #32]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a4:	6862      	ldr	r2, [r4, #4]
 80018a6:	69eb      	ldr	r3, [r5, #28]
 80018a8:	0212      	lsls	r2, r2, #8
 80018aa:	061b      	lsls	r3, r3, #24
 80018ac:	0a12      	lsrs	r2, r2, #8
 80018ae:	4313      	orrs	r3, r2
 80018b0:	6063      	str	r3, [r4, #4]
 80018b2:	e729      	b.n	8001708 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b4:	f7ff fa2a 	bl	8000d0c <HAL_GetTick>
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	2802      	cmp	r0, #2
 80018bc:	d9e7      	bls.n	800188e <HAL_RCC_OscConfig+0x20e>
 80018be:	e752      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <HAL_RCC_OscConfig+0x330>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018c8:	f7ff fa20 	bl	8000d0c <HAL_GetTick>
 80018cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4213      	tst	r3, r2
 80018d6:	d100      	bne.n	80018da <HAL_RCC_OscConfig+0x25a>
 80018d8:	e716      	b.n	8001708 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018da:	f7ff fa17 	bl	8000d0c <HAL_GetTick>
 80018de:	1bc0      	subs	r0, r0, r7
 80018e0:	2802      	cmp	r0, #2
 80018e2:	d9f4      	bls.n	80018ce <HAL_RCC_OscConfig+0x24e>
 80018e4:	e73f      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e6:	696a      	ldr	r2, [r5, #20]
 80018e8:	2301      	movs	r3, #1
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d010      	beq.n	8001910 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 80018ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80018f0:	4313      	orrs	r3, r2
 80018f2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa0a 	bl	8000d0c <HAL_GetTick>
 80018f8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018fa:	2202      	movs	r2, #2
 80018fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80018fe:	4213      	tst	r3, r2
 8001900:	d000      	beq.n	8001904 <HAL_RCC_OscConfig+0x284>
 8001902:	e705      	b.n	8001710 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fa02 	bl	8000d0c <HAL_GetTick>
 8001908:	1bc0      	subs	r0, r0, r7
 800190a:	2802      	cmp	r0, #2
 800190c:	d9f5      	bls.n	80018fa <HAL_RCC_OscConfig+0x27a>
 800190e:	e72a      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 8001910:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001912:	439a      	bics	r2, r3
 8001914:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001916:	f7ff f9f9 	bl	8000d0c <HAL_GetTick>
 800191a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800191c:	2202      	movs	r2, #2
 800191e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001920:	4213      	tst	r3, r2
 8001922:	d100      	bne.n	8001926 <HAL_RCC_OscConfig+0x2a6>
 8001924:	e6f4      	b.n	8001710 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff f9f1 	bl	8000d0c <HAL_GetTick>
 800192a:	1bc0      	subs	r0, r0, r7
 800192c:	2802      	cmp	r0, #2
 800192e:	d9f5      	bls.n	800191c <HAL_RCC_OscConfig+0x29c>
 8001930:	e719      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001934:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001938:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800193a:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193c:	421a      	tst	r2, r3
 800193e:	d104      	bne.n	800194a <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001942:	4313      	orrs	r3, r2
 8001944:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001946:	2301      	movs	r3, #1
 8001948:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	4f19      	ldr	r7, [pc, #100]	; (80019b4 <HAL_RCC_OscConfig+0x334>)
 800194e:	0052      	lsls	r2, r2, #1
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4213      	tst	r3, r2
 8001954:	d008      	beq.n	8001968 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	68ab      	ldr	r3, [r5, #8]
 800195a:	0052      	lsls	r2, r2, #1
 800195c:	4293      	cmp	r3, r2
 800195e:	d12b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x338>
 8001960:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001962:	4313      	orrs	r3, r2
 8001964:	6523      	str	r3, [r4, #80]	; 0x50
 8001966:	e04c      	b.n	8001a02 <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	0052      	lsls	r2, r2, #1
 800196e:	4313      	orrs	r3, r2
 8001970:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001972:	f7ff f9cb 	bl	8000d0c <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800197a:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	9303      	str	r3, [sp, #12]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	9a03      	ldr	r2, [sp, #12]
 8001982:	4213      	tst	r3, r2
 8001984:	d1e7      	bne.n	8001956 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001986:	f7ff f9c1 	bl	8000d0c <HAL_GetTick>
 800198a:	9b02      	ldr	r3, [sp, #8]
 800198c:	1ac0      	subs	r0, r0, r3
 800198e:	2864      	cmp	r0, #100	; 0x64
 8001990:	d9f5      	bls.n	800197e <HAL_RCC_OscConfig+0x2fe>
 8001992:	e6e8      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
 8001994:	40021000 	.word	0x40021000
 8001998:	ffff1fff 	.word	0xffff1fff
 800199c:	08002988 	.word	0x08002988
 80019a0:	20000000 	.word	0x20000000
 80019a4:	fffeffff 	.word	0xfffeffff
 80019a8:	fffbffff 	.word	0xfffbffff
 80019ac:	ffffe0ff 	.word	0xffffe0ff
 80019b0:	fffffeff 	.word	0xfffffeff
 80019b4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d116      	bne.n	80019ea <HAL_RCC_OscConfig+0x36a>
 80019bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019be:	4a53      	ldr	r2, [pc, #332]	; (8001b0c <HAL_RCC_OscConfig+0x48c>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	6523      	str	r3, [r4, #80]	; 0x50
 80019c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019c6:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_RCC_OscConfig+0x490>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80019cc:	f7ff f99e 	bl	8000d0c <HAL_GetTick>
 80019d0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4213      	tst	r3, r2
 80019da:	d02a      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f996 	bl	8000d0c <HAL_GetTick>
 80019e0:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <HAL_RCC_OscConfig+0x494>)
 80019e2:	1bc0      	subs	r0, r0, r7
 80019e4:	4298      	cmp	r0, r3
 80019e6:	d9f4      	bls.n	80019d2 <HAL_RCC_OscConfig+0x352>
 80019e8:	e6bd      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ea:	21a0      	movs	r1, #160	; 0xa0
 80019ec:	00c9      	lsls	r1, r1, #3
 80019ee:	428b      	cmp	r3, r1
 80019f0:	d10b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x38a>
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	430b      	orrs	r3, r1
 80019fa:	6523      	str	r3, [r4, #80]	; 0x50
 80019fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019fe:	431a      	orrs	r2, r3
 8001a00:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001a02:	f7ff f983 	bl	8000d0c <HAL_GetTick>
 8001a06:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a08:	e00e      	b.n	8001a28 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a0c:	4a3f      	ldr	r2, [pc, #252]	; (8001b0c <HAL_RCC_OscConfig+0x48c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	6523      	str	r3, [r4, #80]	; 0x50
 8001a12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a14:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <HAL_RCC_OscConfig+0x490>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	e7a4      	b.n	8001964 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f977 	bl	8000d0c <HAL_GetTick>
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_OscConfig+0x494>)
 8001a20:	1bc0      	subs	r0, r0, r7
 8001a22:	4298      	cmp	r0, r3
 8001a24:	d900      	bls.n	8001a28 <HAL_RCC_OscConfig+0x3a8>
 8001a26:	e69e      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4213      	tst	r3, r2
 8001a30:	d0f3      	beq.n	8001a1a <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d000      	beq.n	8001a3a <HAL_RCC_OscConfig+0x3ba>
 8001a38:	e66e      	b.n	8001718 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a3c:	4a36      	ldr	r2, [pc, #216]	; (8001b18 <HAL_RCC_OscConfig+0x498>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	63a3      	str	r3, [r4, #56]	; 0x38
 8001a42:	e669      	b.n	8001718 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	2e0c      	cmp	r6, #12
 8001a46:	d043      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x450>
 8001a48:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d12e      	bne.n	8001aac <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a50:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4013      	ands	r3, r2
 8001a54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a56:	f7ff f959 	bl	8000d0c <HAL_GetTick>
 8001a5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a5c:	04b6      	lsls	r6, r6, #18
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	4233      	tst	r3, r6
 8001a62:	d11d      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001a66:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001a68:	68e2      	ldr	r2, [r4, #12]
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	492c      	ldr	r1, [pc, #176]	; (8001b20 <HAL_RCC_OscConfig+0x4a0>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	4313      	orrs	r3, r2
 8001a72:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a74:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	6822      	ldr	r2, [r4, #0]
 8001a7e:	045b      	lsls	r3, r3, #17
 8001a80:	4313      	orrs	r3, r2
 8001a82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a84:	f7ff f942 	bl	8000d0c <HAL_GetTick>
 8001a88:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a8a:	04ad      	lsls	r5, r5, #18
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	422b      	tst	r3, r5
 8001a90:	d000      	beq.n	8001a94 <HAL_RCC_OscConfig+0x414>
 8001a92:	e645      	b.n	8001720 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f93a 	bl	8000d0c <HAL_GetTick>
 8001a98:	1b80      	subs	r0, r0, r6
 8001a9a:	2802      	cmp	r0, #2
 8001a9c:	d9f6      	bls.n	8001a8c <HAL_RCC_OscConfig+0x40c>
 8001a9e:	e662      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f934 	bl	8000d0c <HAL_GetTick>
 8001aa4:	1bc0      	subs	r0, r0, r7
 8001aa6:	2802      	cmp	r0, #2
 8001aa8:	d9d9      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3de>
 8001aaa:	e65c      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 8001aac:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aae:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f92a 	bl	8000d0c <HAL_GetTick>
 8001ab8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aba:	04ad      	lsls	r5, r5, #18
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	422b      	tst	r3, r5
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
 8001ac2:	e62d      	b.n	8001720 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f922 	bl	8000d0c <HAL_GetTick>
 8001ac8:	1b80      	subs	r0, r0, r6
 8001aca:	2802      	cmp	r0, #2
 8001acc:	d9f6      	bls.n	8001abc <HAL_RCC_OscConfig+0x43c>
 8001ace:	e64a      	b.n	8001766 <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 8001ad0:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d100      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x458>
 8001ad6:	e5d9      	b.n	800168c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad8:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001ada:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001ade:	0252      	lsls	r2, r2, #9
 8001ae0:	401a      	ands	r2, r3
        return HAL_ERROR;
 8001ae2:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	428a      	cmp	r2, r1
 8001ae6:	d000      	beq.n	8001aea <HAL_RCC_OscConfig+0x46a>
 8001ae8:	e5d0      	b.n	800168c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aea:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aec:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aee:	0392      	lsls	r2, r2, #14
 8001af0:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	428a      	cmp	r2, r1
 8001af4:	d000      	beq.n	8001af8 <HAL_RCC_OscConfig+0x478>
 8001af6:	e5c9      	b.n	800168c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001af8:	20c0      	movs	r0, #192	; 0xc0
 8001afa:	0400      	lsls	r0, r0, #16
 8001afc:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001afe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001b00:	1a18      	subs	r0, r3, r0
 8001b02:	1e43      	subs	r3, r0, #1
 8001b04:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001b06:	b2c0      	uxtb	r0, r0
 8001b08:	e5c0      	b.n	800168c <HAL_RCC_OscConfig+0xc>
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	fffffeff 	.word	0xfffffeff
 8001b10:	fffffbff 	.word	0xfffffbff
 8001b14:	00001388 	.word	0x00001388
 8001b18:	efffffff 	.word	0xefffffff
 8001b1c:	feffffff 	.word	0xfeffffff
 8001b20:	ff02ffff 	.word	0xff02ffff

08001b24 <HAL_RCC_ClockConfig>:
{
 8001b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b26:	1e06      	subs	r6, r0, #0
 8001b28:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
}
 8001b2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b30:	2201      	movs	r2, #1
 8001b32:	4c51      	ldr	r4, [pc, #324]	; (8001c78 <HAL_RCC_ClockConfig+0x154>)
 8001b34:	9901      	ldr	r1, [sp, #4]
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	428b      	cmp	r3, r1
 8001b3c:	d327      	bcc.n	8001b8e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3e:	6832      	ldr	r2, [r6, #0]
 8001b40:	0793      	lsls	r3, r2, #30
 8001b42:	d42f      	bmi.n	8001ba4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b44:	07d3      	lsls	r3, r2, #31
 8001b46:	d435      	bmi.n	8001bb4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	2301      	movs	r3, #1
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	9901      	ldr	r1, [sp, #4]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	428a      	cmp	r2, r1
 8001b52:	d900      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x32>
 8001b54:	e081      	b.n	8001c5a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b56:	6832      	ldr	r2, [r6, #0]
 8001b58:	4c48      	ldr	r4, [pc, #288]	; (8001c7c <HAL_RCC_ClockConfig+0x158>)
 8001b5a:	0753      	lsls	r3, r2, #29
 8001b5c:	d500      	bpl.n	8001b60 <HAL_RCC_ClockConfig+0x3c>
 8001b5e:	e084      	b.n	8001c6a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	0713      	lsls	r3, r2, #28
 8001b62:	d506      	bpl.n	8001b72 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b64:	68e2      	ldr	r2, [r4, #12]
 8001b66:	6933      	ldr	r3, [r6, #16]
 8001b68:	4945      	ldr	r1, [pc, #276]	; (8001c80 <HAL_RCC_ClockConfig+0x15c>)
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b72:	f7ff fd45 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 8001b76:	68e3      	ldr	r3, [r4, #12]
 8001b78:	4a42      	ldr	r2, [pc, #264]	; (8001c84 <HAL_RCC_ClockConfig+0x160>)
 8001b7a:	061b      	lsls	r3, r3, #24
 8001b7c:	0f1b      	lsrs	r3, r3, #28
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	40d8      	lsrs	r0, r3
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_ClockConfig+0x164>)
 8001b84:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff f88c 	bl	8000ca4 <HAL_InitTick>
 8001b8c:	e7cf      	b.n	8001b2e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	9901      	ldr	r1, [sp, #4]
 8001b92:	4393      	bics	r3, r2
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	9a01      	ldr	r2, [sp, #4]
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d1c4      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x8>
 8001ba2:	e7cc      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	20f0      	movs	r0, #240	; 0xf0
 8001ba6:	4935      	ldr	r1, [pc, #212]	; (8001c7c <HAL_RCC_ClockConfig+0x158>)
 8001ba8:	68cb      	ldr	r3, [r1, #12]
 8001baa:	4383      	bics	r3, r0
 8001bac:	68b0      	ldr	r0, [r6, #8]
 8001bae:	4303      	orrs	r3, r0
 8001bb0:	60cb      	str	r3, [r1, #12]
 8001bb2:	e7c7      	b.n	8001b44 <HAL_RCC_ClockConfig+0x20>
 8001bb4:	4d31      	ldr	r5, [pc, #196]	; (8001c7c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb6:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bb8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	2a02      	cmp	r2, #2
 8001bbc:	d119      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bbe:	039b      	lsls	r3, r3, #14
 8001bc0:	d5b4      	bpl.n	8001b2c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	68eb      	ldr	r3, [r5, #12]
 8001bc6:	438b      	bics	r3, r1
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f89e 	bl	8000d0c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001bd2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d119      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd8:	220c      	movs	r2, #12
 8001bda:	68eb      	ldr	r3, [r5, #12]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d0b2      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7ff f893 	bl	8000d0c <HAL_GetTick>
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_RCC_ClockConfig+0x168>)
 8001be8:	1bc0      	subs	r0, r0, r7
 8001bea:	4298      	cmp	r0, r3
 8001bec:	d9f4      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001bee:	2003      	movs	r0, #3
 8001bf0:	e79d      	b.n	8001b2e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf2:	2a03      	cmp	r2, #3
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bf6:	019b      	lsls	r3, r3, #6
 8001bf8:	d4e3      	bmi.n	8001bc2 <HAL_RCC_ClockConfig+0x9e>
 8001bfa:	e797      	b.n	8001b2c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bfc:	2a01      	cmp	r2, #1
 8001bfe:	d102      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c00:	075b      	lsls	r3, r3, #29
 8001c02:	d4de      	bmi.n	8001bc2 <HAL_RCC_ClockConfig+0x9e>
 8001c04:	e792      	b.n	8001b2c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c06:	059b      	lsls	r3, r3, #22
 8001c08:	d4db      	bmi.n	8001bc2 <HAL_RCC_ClockConfig+0x9e>
 8001c0a:	e78f      	b.n	8001b2c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	220c      	movs	r2, #12
 8001c12:	68eb      	ldr	r3, [r5, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d096      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7ff f877 	bl	8000d0c <HAL_GetTick>
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_ClockConfig+0x168>)
 8001c20:	1bc0      	subs	r0, r0, r7
 8001c22:	4298      	cmp	r0, r3
 8001c24:	d9f4      	bls.n	8001c10 <HAL_RCC_ClockConfig+0xec>
 8001c26:	e7e2      	b.n	8001bee <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d010      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	68eb      	ldr	r3, [r5, #12]
 8001c30:	4213      	tst	r3, r2
 8001c32:	d089      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff f86a 	bl	8000d0c <HAL_GetTick>
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_RCC_ClockConfig+0x168>)
 8001c3a:	1bc0      	subs	r0, r0, r7
 8001c3c:	4298      	cmp	r0, r3
 8001c3e:	d9f5      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x108>
 8001c40:	e7d5      	b.n	8001bee <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c42:	f7ff f863 	bl	8000d0c <HAL_GetTick>
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_RCC_ClockConfig+0x168>)
 8001c48:	1bc0      	subs	r0, r0, r7
 8001c4a:	4298      	cmp	r0, r3
 8001c4c:	d8cf      	bhi.n	8001bee <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	68eb      	ldr	r3, [r5, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d1f4      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x11e>
 8001c58:	e776      	b.n	8001b48 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	6822      	ldr	r2, [r4, #0]
 8001c5c:	439a      	bics	r2, r3
 8001c5e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c60:	6822      	ldr	r2, [r4, #0]
 8001c62:	421a      	tst	r2, r3
 8001c64:	d100      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x144>
 8001c66:	e776      	b.n	8001b56 <HAL_RCC_ClockConfig+0x32>
 8001c68:	e760      	b.n	8001b2c <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6a:	68e3      	ldr	r3, [r4, #12]
 8001c6c:	4908      	ldr	r1, [pc, #32]	; (8001c90 <HAL_RCC_ClockConfig+0x16c>)
 8001c6e:	400b      	ands	r3, r1
 8001c70:	68f1      	ldr	r1, [r6, #12]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	60e3      	str	r3, [r4, #12]
 8001c76:	e773      	b.n	8001b60 <HAL_RCC_ClockConfig+0x3c>
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	ffffc7ff 	.word	0xffffc7ff
 8001c84:	08002988 	.word	0x08002988
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	00001388 	.word	0x00001388
 8001c90:	fffff8ff 	.word	0xfffff8ff

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	055b      	lsls	r3, r3, #21
 8001c9c:	0f5b      	lsrs	r3, r3, #29
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ca2:	6810      	ldr	r0, [r2, #0]
 8001ca4:	40d8      	lsrs	r0, r3
}
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08002998 	.word	0x08002998
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	049b      	lsls	r3, r3, #18
 8001cbc:	0f5b      	lsrs	r3, r3, #29
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001cc2:	6810      	ldr	r0, [r2, #0]
 8001cc4:	40d8      	lsrs	r0, r3
}
 8001cc6:	4770      	bx	lr
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08002998 	.word	0x08002998
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cd4:	6803      	ldr	r3, [r0, #0]
{
 8001cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cd8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cda:	069b      	lsls	r3, r3, #26
 8001cdc:	d53b      	bpl.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001ce0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4c4f      	ldr	r4, [pc, #316]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ce4:	055b      	lsls	r3, r3, #21
 8001ce6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001ce8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	421a      	tst	r2, r3
 8001cec:	d104      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	2780      	movs	r7, #128	; 0x80
 8001cfa:	4e4a      	ldr	r6, [pc, #296]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cfc:	007f      	lsls	r7, r7, #1
 8001cfe:	6833      	ldr	r3, [r6, #0]
 8001d00:	423b      	tst	r3, r7
 8001d02:	d04f      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d04:	6868      	ldr	r0, [r5, #4]
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	26c0      	movs	r6, #192	; 0xc0
 8001d0a:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d0c:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d0e:	03b6      	lsls	r6, r6, #14
 8001d10:	029b      	lsls	r3, r3, #10
 8001d12:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d14:	4032      	ands	r2, r6
 8001d16:	4019      	ands	r1, r3
 8001d18:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d1a:	4290      	cmp	r0, r2
 8001d1c:	d153      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d20:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d22:	d157      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d24:	6869      	ldr	r1, [r5, #4]
 8001d26:	23c0      	movs	r3, #192	; 0xc0
 8001d28:	000a      	movs	r2, r1
 8001d2a:	029b      	lsls	r3, r3, #10
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d107      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	483c      	ldr	r0, [pc, #240]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d36:	4003      	ands	r3, r0
 8001d38:	20c0      	movs	r0, #192	; 0xc0
 8001d3a:	0380      	lsls	r0, r0, #14
 8001d3c:	4001      	ands	r1, r0
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	6023      	str	r3, [r4, #0]
 8001d42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d44:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d46:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d48:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d103      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d50:	4a36      	ldr	r2, [pc, #216]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d56:	682a      	ldr	r2, [r5, #0]
 8001d58:	0793      	lsls	r3, r2, #30
 8001d5a:	d506      	bpl.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d5c:	200c      	movs	r0, #12
 8001d5e:	4930      	ldr	r1, [pc, #192]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d60:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001d62:	4383      	bics	r3, r0
 8001d64:	68a8      	ldr	r0, [r5, #8]
 8001d66:	4303      	orrs	r3, r0
 8001d68:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d6a:	0753      	lsls	r3, r2, #29
 8001d6c:	d506      	bpl.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d6e:	492c      	ldr	r1, [pc, #176]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d70:	482f      	ldr	r0, [pc, #188]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d72:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001d74:	4003      	ands	r3, r0
 8001d76:	68e8      	ldr	r0, [r5, #12]
 8001d78:	4303      	orrs	r3, r0
 8001d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d7c:	0713      	lsls	r3, r2, #28
 8001d7e:	d506      	bpl.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d80:	4927      	ldr	r1, [pc, #156]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d82:	482c      	ldr	r0, [pc, #176]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d84:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001d86:	4003      	ands	r3, r0
 8001d88:	6928      	ldr	r0, [r5, #16]
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001d8e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d90:	0613      	lsls	r3, r2, #24
 8001d92:	d517      	bpl.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d94:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d96:	4928      	ldr	r1, [pc, #160]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d98:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	6969      	ldr	r1, [r5, #20]
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	e00f      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da4:	6833      	ldr	r3, [r6, #0]
 8001da6:	433b      	orrs	r3, r7
 8001da8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001daa:	f7fe ffaf 	bl	8000d0c <HAL_GetTick>
 8001dae:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	6833      	ldr	r3, [r6, #0]
 8001db2:	423b      	tst	r3, r7
 8001db4:	d1a6      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7fe ffa9 	bl	8000d0c <HAL_GetTick>
 8001dba:	9b01      	ldr	r3, [sp, #4]
 8001dbc:	1ac0      	subs	r0, r0, r3
 8001dbe:	2864      	cmp	r0, #100	; 0x64
 8001dc0:	d9f6      	bls.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 8001dc2:	2003      	movs	r0, #3
}
 8001dc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001dc6:	4299      	cmp	r1, r3
 8001dc8:	d1a9      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dca:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dce:	039b      	lsls	r3, r3, #14
 8001dd0:	d5a5      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8001dd2:	e7f7      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001dd4:	428b      	cmp	r3, r1
 8001dd6:	d0a5      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	069b      	lsls	r3, r3, #26
 8001ddc:	d5a2      	bpl.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dde:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001de0:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001de2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001de4:	0312      	lsls	r2, r2, #12
 8001de6:	4302      	orrs	r2, r0
 8001de8:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dea:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dee:	4814      	ldr	r0, [pc, #80]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001df0:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001df2:	4002      	ands	r2, r0
 8001df4:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001df6:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001df8:	05cb      	lsls	r3, r1, #23
 8001dfa:	d400      	bmi.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8001dfc:	e792      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ff85 	bl	8000d0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e02:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001e04:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e06:	00bf      	lsls	r7, r7, #2
 8001e08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e0a:	423b      	tst	r3, r7
 8001e0c:	d000      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e0e:	e789      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e10:	f7fe ff7c 	bl	8000d0c <HAL_GetTick>
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001e16:	1b80      	subs	r0, r0, r6
 8001e18:	4298      	cmp	r0, r3
 8001e1a:	d9f5      	bls.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001e1c:	e7d1      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
 8001e28:	ffcfffff 	.word	0xffcfffff
 8001e2c:	efffffff 	.word	0xefffffff
 8001e30:	fffff3ff 	.word	0xfffff3ff
 8001e34:	ffffcfff 	.word	0xffffcfff
 8001e38:	fff3ffff 	.word	0xfff3ffff
 8001e3c:	fffcffff 	.word	0xfffcffff
 8001e40:	fff7ffff 	.word	0xfff7ffff
 8001e44:	00001388 	.word	0x00001388

08001e48 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001e48:	6803      	ldr	r3, [r0, #0]
{
 8001e4a:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001e4c:	689a      	ldr	r2, [r3, #8]
{
 8001e4e:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001e50:	04d2      	lsls	r2, r2, #19
 8001e52:	d50a      	bpl.n	8001e6a <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	05db      	lsls	r3, r3, #23
 8001e58:	d507      	bpl.n	8001e6a <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001e5a:	f7fe fb35 	bl	80004c8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001e5e:	6821      	ldr	r1, [r4, #0]
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_RTC_AlarmIRQHandler+0x54>)
 8001e62:	68ca      	ldr	r2, [r1, #12]
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	0492      	lsls	r2, r2, #18
 8001e70:	d50b      	bpl.n	8001e8a <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	059b      	lsls	r3, r3, #22
 8001e76:	d508      	bpl.n	8001e8a <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001e78:	0020      	movs	r0, r4
 8001e7a:	f000 fa67 	bl	800234c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001e7e:	6821      	ldr	r1, [r4, #0]
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_RTC_AlarmIRQHandler+0x58>)
 8001e82:	68ca      	ldr	r2, [r1, #12]
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8001e8e:	0292      	lsls	r2, r2, #10
 8001e90:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001e92:	2301      	movs	r3, #1
 8001e94:	3402      	adds	r4, #2
 8001e96:	77e3      	strb	r3, [r4, #31]
}
 8001e98:	bd10      	pop	{r4, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	fffffe7f 	.word	0xfffffe7f
 8001ea0:	fffffd7f 	.word	0xfffffd7f
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001ea8:	21a0      	movs	r1, #160	; 0xa0
 8001eaa:	6802      	ldr	r2, [r0, #0]
{
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001eae:	68d3      	ldr	r3, [r2, #12]
{
 8001eb0:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001eb2:	438b      	bics	r3, r1
 8001eb4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001eb6:	f7fe ff29 	bl	8000d0c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001eba:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001ebc:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001ebe:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ec0:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	422b      	tst	r3, r5
 8001ec8:	d001      	beq.n	8001ece <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001eca:	2000      	movs	r0, #0
}
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ece:	f7fe ff1d 	bl	8000d0c <HAL_GetTick>
 8001ed2:	1b80      	subs	r0, r0, r6
 8001ed4:	42b8      	cmp	r0, r7
 8001ed6:	d9f4      	bls.n	8001ec2 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001ed8:	2003      	movs	r0, #3
 8001eda:	e7f7      	b.n	8001ecc <HAL_RTC_WaitForSynchro+0x24>

08001edc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001ede:	2440      	movs	r4, #64	; 0x40
 8001ee0:	6803      	ldr	r3, [r0, #0]
{
 8001ee2:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4222      	tst	r2, r4
 8001ee8:	d001      	beq.n	8001eee <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001eea:	2000      	movs	r0, #0
}
 8001eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001ef4:	f7fe ff0a 	bl	8000d0c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001ef8:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001efa:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001efc:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001efe:	682b      	ldr	r3, [r5, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4223      	tst	r3, r4
 8001f04:	d1f1      	bne.n	8001eea <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001f06:	f7fe ff01 	bl	8000d0c <HAL_GetTick>
 8001f0a:	1b80      	subs	r0, r0, r6
 8001f0c:	42b8      	cmp	r0, r7
 8001f0e:	d9f6      	bls.n	8001efe <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8001f10:	2003      	movs	r0, #3
 8001f12:	e7eb      	b.n	8001eec <RTC_EnterInitMode+0x10>

08001f14 <HAL_RTC_Init>:
{
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001f18:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d01a      	beq.n	8001f54 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f1e:	1c86      	adds	r6, r0, #2
 8001f20:	7ff3      	ldrb	r3, [r6, #31]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8001f28:	1942      	adds	r2, r0, r5
 8001f2a:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8001f2c:	f7fe fe10 	bl	8000b50 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f30:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f32:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f34:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f36:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f38:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f3c:	3a77      	subs	r2, #119	; 0x77
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f40:	f7ff ffcc 	bl	8001edc <RTC_EnterInitMode>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	1e05      	subs	r5, r0, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f4a:	22ff      	movs	r2, #255	; 0xff
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8001f52:	2501      	movs	r5, #1
}
 8001f54:	0028      	movs	r0, r5
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	491b      	ldr	r1, [pc, #108]	; (8001fc8 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f5c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f5e:	400a      	ands	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f62:	6862      	ldr	r2, [r4, #4]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	4302      	orrs	r2, r0
 8001f68:	69a0      	ldr	r0, [r4, #24]
 8001f6a:	4302      	orrs	r2, r0
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f70:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001f72:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f74:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001f76:	68a2      	ldr	r2, [r4, #8]
 8001f78:	6919      	ldr	r1, [r3, #16]
 8001f7a:	0412      	lsls	r2, r2, #16
 8001f7c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001f7e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001f80:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	438a      	bics	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f8a:	397d      	subs	r1, #125	; 0x7d
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001f90:	69e2      	ldr	r2, [r4, #28]
 8001f92:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001f94:	4302      	orrs	r2, r0
 8001f96:	430a      	orrs	r2, r1
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	069b      	lsls	r3, r3, #26
 8001f9e:	d40c      	bmi.n	8001fba <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fa0:	0020      	movs	r0, r4
 8001fa2:	f7ff ff81 	bl	8001ea8 <HAL_RTC_WaitForSynchro>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001faa:	22ff      	movs	r2, #255	; 0xff
 8001fac:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8001fae:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8001fb6:	77e5      	strb	r5, [r4, #31]
 8001fb8:	e7cb      	b.n	8001f52 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8001fc4:	e7c6      	b.n	8001f54 <HAL_RTC_Init+0x40>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	ff8fffbf 	.word	0xff8fffbf

08001fcc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001fcc:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8001fce:	2809      	cmp	r0, #9
 8001fd0:	d803      	bhi.n	8001fda <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4318      	orrs	r0, r3
 8001fd6:	b2c0      	uxtb	r0, r0
}
 8001fd8:	4770      	bx	lr
    Param -= 10U;
 8001fda:	380a      	subs	r0, #10
    bcdhigh++;
 8001fdc:	3301      	adds	r3, #1
    Param -= 10U;
 8001fde:	b2c0      	uxtb	r0, r0
 8001fe0:	e7f5      	b.n	8001fce <RTC_ByteToBcd2+0x2>
	...

08001fe4 <HAL_RTC_SetTime>:
{
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001fe8:	1c47      	adds	r7, r0, #1
{
 8001fea:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001fec:	7ff9      	ldrb	r1, [r7, #31]
{
 8001fee:	b085      	sub	sp, #20
 8001ff0:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8001ff2:	001e      	movs	r6, r3
 8001ff4:	2901      	cmp	r1, #1
 8001ff6:	d037      	beq.n	8002068 <HAL_RTC_SetTime+0x84>
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ffc:	18c1      	adds	r1, r0, r3
 8001ffe:	77cb      	strb	r3, [r1, #31]
 8002000:	9101      	str	r1, [sp, #4]
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	6806      	ldr	r6, [r0, #0]
 8002006:	7863      	ldrb	r3, [r4, #1]
 8002008:	7820      	ldrb	r0, [r4, #0]
 800200a:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800200c:	68b3      	ldr	r3, [r6, #8]
 800200e:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8002010:	2a00      	cmp	r2, #0
 8002012:	d12c      	bne.n	800206e <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002014:	2b00      	cmp	r3, #0
 8002016:	d100      	bne.n	800201a <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 8002018:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800201a:	f7ff ffd7 	bl	8001fcc <RTC_ByteToBcd2>
 800201e:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002020:	9802      	ldr	r0, [sp, #8]
 8002022:	f7ff ffd3 	bl	8001fcc <RTC_ByteToBcd2>
 8002026:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002028:	78a0      	ldrb	r0, [r4, #2]
 800202a:	f7ff ffcf 	bl	8001fcc <RTC_ByteToBcd2>
 800202e:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002030:	78e0      	ldrb	r0, [r4, #3]
 8002032:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002034:	4318      	orrs	r0, r3
 8002036:	9b03      	ldr	r3, [sp, #12]
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800203c:	9b02      	ldr	r3, [sp, #8]
 800203e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002040:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002042:	23ca      	movs	r3, #202	; 0xca
 8002044:	6273      	str	r3, [r6, #36]	; 0x24
 8002046:	3b77      	subs	r3, #119	; 0x77
 8002048:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800204a:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800204c:	0028      	movs	r0, r5
 800204e:	f7ff ff45 	bl	8001edc <RTC_EnterInitMode>
 8002052:	682b      	ldr	r3, [r5, #0]
 8002054:	1e06      	subs	r6, r0, #0
 8002056:	d016      	beq.n	8002086 <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800205c:	2304      	movs	r3, #4
 800205e:	9a01      	ldr	r2, [sp, #4]
 8002060:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002062:	2300      	movs	r3, #0
 8002064:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8002066:	2601      	movs	r6, #1
}
 8002068:	0030      	movs	r0, r6
 800206a:	b005      	add	sp, #20
 800206c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800206e:	2b00      	cmp	r3, #0
 8002070:	d100      	bne.n	8002074 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 8002072:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002074:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002076:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002078:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800207a:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 800207c:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800207e:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002080:	78e3      	ldrb	r3, [r4, #3]
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	e7dc      	b.n	8002040 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002086:	4815      	ldr	r0, [pc, #84]	; (80020dc <HAL_RTC_SetTime+0xf8>)
 8002088:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800208a:	4915      	ldr	r1, [pc, #84]	; (80020e0 <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800208c:	4002      	ands	r2, r0
 800208e:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002090:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002092:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002094:	400a      	ands	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002098:	68e2      	ldr	r2, [r4, #12]
 800209a:	6899      	ldr	r1, [r3, #8]
 800209c:	4302      	orrs	r2, r0
 800209e:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80020a0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80020a2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	438a      	bics	r2, r1
 80020a8:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	069b      	lsls	r3, r3, #26
 80020ae:	d40c      	bmi.n	80020ca <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020b0:	0028      	movs	r0, r5
 80020b2:	f7ff fef9 	bl	8001ea8 <HAL_RTC_WaitForSynchro>
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d007      	beq.n	80020ca <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020c0:	2304      	movs	r3, #4
 80020c2:	9a01      	ldr	r2, [sp, #4]
 80020c4:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80020c6:	77fe      	strb	r6, [r7, #31]
 80020c8:	e7cd      	b.n	8002066 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ca:	22ff      	movs	r2, #255	; 0xff
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80020d0:	2301      	movs	r3, #1
 80020d2:	9a01      	ldr	r2, [sp, #4]
 80020d4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80020d6:	2300      	movs	r3, #0
 80020d8:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80020da:	e7c5      	b.n	8002068 <HAL_RTC_SetTime+0x84>
 80020dc:	007f7f7f 	.word	0x007f7f7f
 80020e0:	fffbffff 	.word	0xfffbffff

080020e4 <HAL_RTC_SetDate>:
{
 80020e4:	2302      	movs	r3, #2
 80020e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80020e8:	1c47      	adds	r7, r0, #1
{
 80020ea:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80020ec:	7ff9      	ldrb	r1, [r7, #31]
{
 80020ee:	b085      	sub	sp, #20
 80020f0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80020f2:	001d      	movs	r5, r3
 80020f4:	2901      	cmp	r1, #1
 80020f6:	d036      	beq.n	8002166 <HAL_RTC_SetDate+0x82>
 80020f8:	2101      	movs	r1, #1
 80020fa:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020fc:	18c1      	adds	r1, r0, r3
 80020fe:	9101      	str	r1, [sp, #4]
 8002100:	77cb      	strb	r3, [r1, #31]
 8002102:	7831      	ldrb	r1, [r6, #0]
 8002104:	78f0      	ldrb	r0, [r6, #3]
 8002106:	0349      	lsls	r1, r1, #13
 8002108:	7873      	ldrb	r3, [r6, #1]
 800210a:	78b5      	ldrb	r5, [r6, #2]
 800210c:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800210e:	2a00      	cmp	r2, #0
 8002110:	d14c      	bne.n	80021ac <HAL_RTC_SetDate+0xc8>
 8002112:	3210      	adds	r2, #16
 8002114:	4213      	tst	r3, r2
 8002116:	d002      	beq.n	800211e <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002118:	4393      	bics	r3, r2
 800211a:	330a      	adds	r3, #10
 800211c:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800211e:	f7ff ff55 	bl	8001fcc <RTC_ByteToBcd2>
 8002122:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002124:	7870      	ldrb	r0, [r6, #1]
 8002126:	f7ff ff51 	bl	8001fcc <RTC_ByteToBcd2>
 800212a:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800212c:	0028      	movs	r0, r5
 800212e:	f7ff ff4d 	bl	8001fcc <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002132:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002134:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002136:	041d      	lsls	r5, r3, #16
 8002138:	9b02      	ldr	r3, [sp, #8]
 800213a:	4318      	orrs	r0, r3
 800213c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800213e:	22ca      	movs	r2, #202	; 0xca
 8002140:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002142:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
 8002146:	3a77      	subs	r2, #119	; 0x77
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800214a:	f7ff fec7 	bl	8001edc <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800214e:	432e      	orrs	r6, r5
 8002150:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002152:	1e05      	subs	r5, r0, #0
 8002154:	d00a      	beq.n	800216c <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002156:	22ff      	movs	r2, #255	; 0xff
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800215a:	2304      	movs	r3, #4
 800215c:	9a01      	ldr	r2, [sp, #4]
 800215e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8002164:	2501      	movs	r5, #1
}
 8002166:	0028      	movs	r0, r5
 8002168:	b005      	add	sp, #20
 800216a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800216c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800216e:	4812      	ldr	r0, [pc, #72]	; (80021b8 <HAL_RTC_SetDate+0xd4>)
 8002170:	4006      	ands	r6, r0
 8002172:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	438a      	bics	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	069b      	lsls	r3, r3, #26
 800217e:	d40c      	bmi.n	800219a <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002180:	0020      	movs	r0, r4
 8002182:	f7ff fe91 	bl	8001ea8 <HAL_RTC_WaitForSynchro>
 8002186:	2800      	cmp	r0, #0
 8002188:	d007      	beq.n	800219a <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002190:	2304      	movs	r3, #4
 8002192:	9a01      	ldr	r2, [sp, #4]
 8002194:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8002196:	77fd      	strb	r5, [r7, #31]
 8002198:	e7e4      	b.n	8002164 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800219a:	22ff      	movs	r2, #255	; 0xff
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80021a0:	2301      	movs	r3, #1
 80021a2:	9a01      	ldr	r2, [sp, #4]
 80021a4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80021a6:	2300      	movs	r3, #0
 80021a8:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80021aa:	e7dc      	b.n	8002166 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021ac:	9a02      	ldr	r2, [sp, #8]
 80021ae:	0400      	lsls	r0, r0, #16
 80021b0:	4310      	orrs	r0, r2
 80021b2:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80021b4:	021e      	lsls	r6, r3, #8
 80021b6:	e7c2      	b.n	800213e <HAL_RTC_SetDate+0x5a>
 80021b8:	00ffff3f 	.word	0x00ffff3f

080021bc <HAL_RTC_SetAlarm_IT>:
{
 80021bc:	2302      	movs	r3, #2
 80021be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021c0:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80021c2:	1c41      	adds	r1, r0, #1
 80021c4:	7fce      	ldrb	r6, [r1, #31]
{
 80021c6:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80021c8:	0018      	movs	r0, r3
 80021ca:	2e01      	cmp	r6, #1
 80021cc:	d100      	bne.n	80021d0 <HAL_RTC_SetAlarm_IT+0x14>
 80021ce:	e08c      	b.n	80022ea <HAL_RTC_SetAlarm_IT+0x12e>
 80021d0:	3801      	subs	r0, #1
 80021d2:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021d4:	18e1      	adds	r1, r4, r3
 80021d6:	77cb      	strb	r3, [r1, #31]
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	786b      	ldrb	r3, [r5, #1]
 80021dc:	6826      	ldr	r6, [r4, #0]
 80021de:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021e0:	68b3      	ldr	r3, [r6, #8]
 80021e2:	7828      	ldrb	r0, [r5, #0]
 80021e4:	78af      	ldrb	r7, [r5, #2]
 80021e6:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d15d      	bne.n	80022a8 <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d100      	bne.n	80021f2 <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80021f0:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80021f2:	f7ff feeb 	bl	8001fcc <RTC_ByteToBcd2>
 80021f6:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80021f8:	9800      	ldr	r0, [sp, #0]
 80021fa:	f7ff fee7 	bl	8001fcc <RTC_ByteToBcd2>
 80021fe:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002200:	0038      	movs	r0, r7
 8002202:	f7ff fee3 	bl	8001fcc <RTC_ByteToBcd2>
 8002206:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002208:	1c6b      	adds	r3, r5, #1
 800220a:	7fd8      	ldrb	r0, [r3, #31]
 800220c:	f7ff fede 	bl	8001fcc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002210:	696a      	ldr	r2, [r5, #20]
 8002212:	69eb      	ldr	r3, [r5, #28]
 8002214:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002216:	78ea      	ldrb	r2, [r5, #3]
 8002218:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800221a:	4313      	orrs	r3, r2
 800221c:	431f      	orrs	r7, r3
 800221e:	9b01      	ldr	r3, [sp, #4]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002224:	9b00      	ldr	r3, [sp, #0]
 8002226:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002228:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800222a:	69aa      	ldr	r2, [r5, #24]
 800222c:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800222e:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002230:	4313      	orrs	r3, r2
 8002232:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002234:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002236:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002238:	6273      	str	r3, [r6, #36]	; 0x24
 800223a:	3b77      	subs	r3, #119	; 0x77
 800223c:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800223e:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002240:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002242:	429a      	cmp	r2, r3
 8002244:	d152      	bne.n	80022ec <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002246:	68b3      	ldr	r3, [r6, #8]
 8002248:	4a3b      	ldr	r2, [pc, #236]	; (8002338 <HAL_RTC_SetAlarm_IT+0x17c>)
 800224a:	4013      	ands	r3, r2
 800224c:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800224e:	68f2      	ldr	r2, [r6, #12]
 8002250:	4b3a      	ldr	r3, [pc, #232]	; (800233c <HAL_RTC_SetAlarm_IT+0x180>)
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	4313      	orrs	r3, r2
 8002256:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002258:	f7fe fd58 	bl	8000d0c <HAL_GetTick>
 800225c:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800225e:	2201      	movs	r2, #1
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	68dd      	ldr	r5, [r3, #12]
 8002264:	4015      	ands	r5, r2
 8002266:	d031      	beq.n	80022cc <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002268:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800226a:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800226e:	2280      	movs	r2, #128	; 0x80
 8002270:	6899      	ldr	r1, [r3, #8]
 8002272:	0052      	lsls	r2, r2, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	6899      	ldr	r1, [r3, #8]
 800227c:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <HAL_RTC_SetAlarm_IT+0x184>)
 8002286:	0292      	lsls	r2, r2, #10
 8002288:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800228a:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800228c:	4311      	orrs	r1, r2
 800228e:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002290:	6899      	ldr	r1, [r3, #8]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800229c:	3afe      	subs	r2, #254	; 0xfe
 800229e:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80022a0:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 80022a2:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80022a4:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80022a6:	e020      	b.n	80022ea <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d100      	bne.n	80022ae <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80022ac:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80022ae:	69eb      	ldr	r3, [r5, #28]
 80022b0:	696a      	ldr	r2, [r5, #20]
 80022b2:	0400      	lsls	r0, r0, #16
 80022b4:	4313      	orrs	r3, r2
 80022b6:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022b8:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80022ba:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022bc:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80022be:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022c0:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022c2:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022c4:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80022c6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022c8:	7fd8      	ldrb	r0, [r3, #31]
 80022ca:	e7ae      	b.n	800222a <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022cc:	f7fe fd1e 	bl	8000d0c <HAL_GetTick>
 80022d0:	23fa      	movs	r3, #250	; 0xfa
 80022d2:	1b80      	subs	r0, r0, r6
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4298      	cmp	r0, r3
 80022d8:	d9c1      	bls.n	800225e <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022da:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022dc:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022e2:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 80022e4:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022e6:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80022e8:	77e5      	strb	r5, [r4, #31]
}
 80022ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80022ec:	68b3      	ldr	r3, [r6, #8]
 80022ee:	4a15      	ldr	r2, [pc, #84]	; (8002344 <HAL_RTC_SetAlarm_IT+0x188>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80022f4:	68f2      	ldr	r2, [r6, #12]
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_RTC_SetAlarm_IT+0x18c>)
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80022fe:	f7fe fd05 	bl	8000d0c <HAL_GetTick>
 8002302:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002304:	2202      	movs	r2, #2
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	68dd      	ldr	r5, [r3, #12]
 800230a:	4015      	ands	r5, r2
 800230c:	d00b      	beq.n	8002326 <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800230e:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002310:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002312:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	430a      	orrs	r2, r1
 800231c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	0192      	lsls	r2, r2, #6
 8002324:	e7ab      	b.n	800227e <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002326:	f7fe fcf1 	bl	8000d0c <HAL_GetTick>
 800232a:	23fa      	movs	r3, #250	; 0xfa
 800232c:	1b80      	subs	r0, r0, r6
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4298      	cmp	r0, r3
 8002332:	d9e7      	bls.n	8002304 <HAL_RTC_SetAlarm_IT+0x148>
 8002334:	e7d1      	b.n	80022da <HAL_RTC_SetAlarm_IT+0x11e>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	fffffeff 	.word	0xfffffeff
 800233c:	fffffe7f 	.word	0xfffffe7f
 8002340:	40010400 	.word	0x40010400
 8002344:	fffffdff 	.word	0xfffffdff
 8002348:	fffffd7f 	.word	0xfffffd7f

0800234c <HAL_RTCEx_AlarmBEventCallback>:
 800234c:	4770      	bx	lr
	...

08002350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002354:	6925      	ldr	r5, [r4, #16]
 8002356:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002358:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800235a:	432a      	orrs	r2, r5
 800235c:	6965      	ldr	r5, [r4, #20]
 800235e:	69c1      	ldr	r1, [r0, #28]
 8002360:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	4d76      	ldr	r5, [pc, #472]	; (8002540 <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002366:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002368:	4028      	ands	r0, r5
 800236a:	4302      	orrs	r2, r0
 800236c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4874      	ldr	r0, [pc, #464]	; (8002544 <UART_SetConfig+0x1f4>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002372:	4d75      	ldr	r5, [pc, #468]	; (8002548 <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002374:	4002      	ands	r2, r0
 8002376:	68e0      	ldr	r0, [r4, #12]
 8002378:	4302      	orrs	r2, r0
 800237a:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800237c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800237e:	42ab      	cmp	r3, r5
 8002380:	d001      	beq.n	8002386 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002382:	6a22      	ldr	r2, [r4, #32]
 8002384:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4e70      	ldr	r6, [pc, #448]	; (800254c <UART_SetConfig+0x1fc>)
 800238a:	4032      	ands	r2, r6
 800238c:	4302      	orrs	r2, r0
 800238e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002390:	4a6f      	ldr	r2, [pc, #444]	; (8002550 <UART_SetConfig+0x200>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d114      	bne.n	80023c0 <UART_SetConfig+0x70>
 8002396:	200c      	movs	r0, #12
 8002398:	4b6e      	ldr	r3, [pc, #440]	; (8002554 <UART_SetConfig+0x204>)
 800239a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800239c:	4002      	ands	r2, r0
 800239e:	486e      	ldr	r0, [pc, #440]	; (8002558 <UART_SetConfig+0x208>)
 80023a0:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0212      	lsls	r2, r2, #8
 80023a6:	4291      	cmp	r1, r2
 80023a8:	d000      	beq.n	80023ac <UART_SetConfig+0x5c>
 80023aa:	e08b      	b.n	80024c4 <UART_SetConfig+0x174>
  {
    switch (clocksource)
 80023ac:	2808      	cmp	r0, #8
 80023ae:	d900      	bls.n	80023b2 <UART_SetConfig+0x62>
 80023b0:	e085      	b.n	80024be <UART_SetConfig+0x16e>
 80023b2:	f7fd feb1 	bl	8000118 <__gnu_thumb1_case_uqi>
 80023b6:	5850      	.short	0x5850
 80023b8:	847c845b 	.word	0x847c845b
 80023bc:	8484      	.short	0x8484
 80023be:	7f          	.byte	0x7f
 80023bf:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c0:	42ab      	cmp	r3, r5
 80023c2:	d000      	beq.n	80023c6 <UART_SetConfig+0x76>
 80023c4:	e0b4      	b.n	8002530 <UART_SetConfig+0x1e0>
 80023c6:	21c0      	movs	r1, #192	; 0xc0
 80023c8:	2080      	movs	r0, #128	; 0x80
 80023ca:	4a62      	ldr	r2, [pc, #392]	; (8002554 <UART_SetConfig+0x204>)
 80023cc:	0109      	lsls	r1, r1, #4
 80023ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023d0:	00c0      	lsls	r0, r0, #3
 80023d2:	400b      	ands	r3, r1
 80023d4:	4283      	cmp	r3, r0
 80023d6:	d03b      	beq.n	8002450 <UART_SetConfig+0x100>
 80023d8:	d803      	bhi.n	80023e2 <UART_SetConfig+0x92>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <UART_SetConfig+0xa4>
        ret = HAL_ERROR;
 80023de:	2501      	movs	r5, #1
 80023e0:	e00d      	b.n	80023fe <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023e2:	2080      	movs	r0, #128	; 0x80
 80023e4:	0100      	lsls	r0, r0, #4
 80023e6:	4283      	cmp	r3, r0
 80023e8:	d00e      	beq.n	8002408 <UART_SetConfig+0xb8>
 80023ea:	428b      	cmp	r3, r1
 80023ec:	d1f7      	bne.n	80023de <UART_SetConfig+0x8e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80023ee:	2080      	movs	r0, #128	; 0x80
 80023f0:	0200      	lsls	r0, r0, #8
 80023f2:	e010      	b.n	8002416 <UART_SetConfig+0xc6>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80023f4:	f7ff fc4e 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 80023f8:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 80023fa:	42a8      	cmp	r0, r5
 80023fc:	d10b      	bne.n	8002416 <UART_SetConfig+0xc6>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023fe:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8002400:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8002402:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002404:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002408:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800240a:	4b54      	ldr	r3, [pc, #336]	; (800255c <UART_SetConfig+0x20c>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800240c:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800240e:	17c0      	asrs	r0, r0, #31
 8002410:	4018      	ands	r0, r3
 8002412:	4b53      	ldr	r3, [pc, #332]	; (8002560 <UART_SetConfig+0x210>)
 8002414:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002416:	2203      	movs	r2, #3
 8002418:	6863      	ldr	r3, [r4, #4]
 800241a:	435a      	muls	r2, r3
 800241c:	4282      	cmp	r2, r0
 800241e:	d8de      	bhi.n	80023de <UART_SetConfig+0x8e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002420:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002422:	4282      	cmp	r2, r0
 8002424:	d3db      	bcc.n	80023de <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002426:	2700      	movs	r7, #0
 8002428:	0e02      	lsrs	r2, r0, #24
 800242a:	0201      	lsls	r1, r0, #8
 800242c:	085e      	lsrs	r6, r3, #1
 800242e:	1989      	adds	r1, r1, r6
 8002430:	417a      	adcs	r2, r7
 8002432:	0008      	movs	r0, r1
 8002434:	0011      	movs	r1, r2
 8002436:	001a      	movs	r2, r3
 8002438:	003b      	movs	r3, r7
 800243a:	f7fd ff03 	bl	8000244 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800243e:	4b49      	ldr	r3, [pc, #292]	; (8002564 <UART_SetConfig+0x214>)
 8002440:	18c2      	adds	r2, r0, r3
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <UART_SetConfig+0x218>)
 8002444:	429a      	cmp	r2, r3
 8002446:	d8ca      	bhi.n	80023de <UART_SetConfig+0x8e>
          huart->Instance->BRR = usartdiv;
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	003d      	movs	r5, r7
 800244c:	60d8      	str	r0, [r3, #12]
 800244e:	e7d6      	b.n	80023fe <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002450:	f7ff f8d6 	bl	8001600 <HAL_RCC_GetSysClockFreq>
        break;
 8002454:	e7d0      	b.n	80023f8 <UART_SetConfig+0xa8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002456:	f7ff fc1d 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800245a:	6863      	ldr	r3, [r4, #4]
 800245c:	0040      	lsls	r0, r0, #1
 800245e:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002460:	18c0      	adds	r0, r0, r3
 8002462:	6861      	ldr	r1, [r4, #4]
 8002464:	e00b      	b.n	800247e <UART_SetConfig+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002466:	f7ff fc25 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 800246a:	e7f6      	b.n	800245a <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800246c:	2510      	movs	r5, #16
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	6861      	ldr	r1, [r4, #4]
 8002472:	4015      	ands	r5, r2
 8002474:	0848      	lsrs	r0, r1, #1
 8002476:	2d00      	cmp	r5, #0
 8002478:	d006      	beq.n	8002488 <UART_SetConfig+0x138>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800247a:	4b3c      	ldr	r3, [pc, #240]	; (800256c <UART_SetConfig+0x21c>)
 800247c:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800247e:	f7fd fe55 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002482:	2500      	movs	r5, #0
 8002484:	b283      	uxth	r3, r0
        break;
 8002486:	e004      	b.n	8002492 <UART_SetConfig+0x142>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <UART_SetConfig+0x220>)
 800248a:	18c0      	adds	r0, r0, r3
 800248c:	f7fd fe4e 	bl	800012c <__udivsi3>
 8002490:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002492:	0019      	movs	r1, r3
 8002494:	4837      	ldr	r0, [pc, #220]	; (8002574 <UART_SetConfig+0x224>)
 8002496:	3910      	subs	r1, #16
 8002498:	4281      	cmp	r1, r0
 800249a:	d8a0      	bhi.n	80023de <UART_SetConfig+0x8e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800249c:	210f      	movs	r1, #15
 800249e:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024a0:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024a2:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024a4:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 80024a6:	6821      	ldr	r1, [r4, #0]
 80024a8:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 80024aa:	60cb      	str	r3, [r1, #12]
 80024ac:	e7a7      	b.n	80023fe <UART_SetConfig+0xae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024ae:	f7ff f8a7 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80024b2:	e7d2      	b.n	800245a <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80024b4:	6863      	ldr	r3, [r4, #4]
 80024b6:	0858      	lsrs	r0, r3, #1
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	025b      	lsls	r3, r3, #9
 80024bc:	e7d0      	b.n	8002460 <UART_SetConfig+0x110>
        ret = HAL_ERROR;
 80024be:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e7e6      	b.n	8002492 <UART_SetConfig+0x142>
    switch (clocksource)
 80024c4:	2808      	cmp	r0, #8
 80024c6:	d837      	bhi.n	8002538 <UART_SetConfig+0x1e8>
 80024c8:	f7fd fe26 	bl	8000118 <__gnu_thumb1_case_uqi>
 80024cc:	360f0c05 	.word	0x360f0c05
 80024d0:	3636362a 	.word	0x3636362a
 80024d4:	2d          	.byte	0x2d
 80024d5:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024d6:	f7ff fbdd 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024da:	6863      	ldr	r3, [r4, #4]
 80024dc:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024de:	18c0      	adds	r0, r0, r3
 80024e0:	6861      	ldr	r1, [r4, #4]
 80024e2:	e00b      	b.n	80024fc <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024e4:	f7ff fbe6 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 80024e8:	e7f7      	b.n	80024da <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024ea:	2510      	movs	r5, #16
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	6861      	ldr	r1, [r4, #4]
 80024f0:	4015      	ands	r5, r2
 80024f2:	0848      	lsrs	r0, r1, #1
 80024f4:	2d00      	cmp	r5, #0
 80024f6:	d00d      	beq.n	8002514 <UART_SetConfig+0x1c4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80024f8:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <UART_SetConfig+0x228>)
 80024fa:	18c0      	adds	r0, r0, r3
 80024fc:	f7fd fe16 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002500:	2500      	movs	r5, #0
 8002502:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002504:	0019      	movs	r1, r3
 8002506:	481b      	ldr	r0, [pc, #108]	; (8002574 <UART_SetConfig+0x224>)
 8002508:	3910      	subs	r1, #16
 800250a:	4281      	cmp	r1, r0
 800250c:	d900      	bls.n	8002510 <UART_SetConfig+0x1c0>
 800250e:	e766      	b.n	80023de <UART_SetConfig+0x8e>
      huart->Instance->BRR = usartdiv;
 8002510:	6821      	ldr	r1, [r4, #0]
 8002512:	e7ca      	b.n	80024aa <UART_SetConfig+0x15a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <UART_SetConfig+0x210>)
 8002516:	18c0      	adds	r0, r0, r3
 8002518:	f7fd fe08 	bl	800012c <__udivsi3>
 800251c:	b283      	uxth	r3, r0
 800251e:	e7f1      	b.n	8002504 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002520:	f7ff f86e 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 8002524:	e7d9      	b.n	80024da <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002526:	6863      	ldr	r3, [r4, #4]
 8002528:	0858      	lsrs	r0, r3, #1
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	e7d6      	b.n	80024de <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	4299      	cmp	r1, r3
 8002536:	d0c2      	beq.n	80024be <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8002538:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800253a:	2300      	movs	r3, #0
 800253c:	e7e2      	b.n	8002504 <UART_SetConfig+0x1b4>
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	efff69f3 	.word	0xefff69f3
 8002544:	ffffcfff 	.word	0xffffcfff
 8002548:	40004800 	.word	0x40004800
 800254c:	fffff4ff 	.word	0xfffff4ff
 8002550:	40004400 	.word	0x40004400
 8002554:	40021000 	.word	0x40021000
 8002558:	080029a9 	.word	0x080029a9
 800255c:	ff48e500 	.word	0xff48e500
 8002560:	00f42400 	.word	0x00f42400
 8002564:	fffffd00 	.word	0xfffffd00
 8002568:	000ffcff 	.word	0x000ffcff
 800256c:	007a1200 	.word	0x007a1200
 8002570:	01e84800 	.word	0x01e84800
 8002574:	0000ffef 	.word	0x0000ffef
 8002578:	003d0900 	.word	0x003d0900

0800257c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800257c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800257e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002580:	07da      	lsls	r2, r3, #31
 8002582:	d506      	bpl.n	8002592 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002584:	6801      	ldr	r1, [r0, #0]
 8002586:	4c28      	ldr	r4, [pc, #160]	; (8002628 <UART_AdvFeatureConfig+0xac>)
 8002588:	684a      	ldr	r2, [r1, #4]
 800258a:	4022      	ands	r2, r4
 800258c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800258e:	4322      	orrs	r2, r4
 8002590:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002592:	079a      	lsls	r2, r3, #30
 8002594:	d506      	bpl.n	80025a4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002596:	6801      	ldr	r1, [r0, #0]
 8002598:	4c24      	ldr	r4, [pc, #144]	; (800262c <UART_AdvFeatureConfig+0xb0>)
 800259a:	684a      	ldr	r2, [r1, #4]
 800259c:	4022      	ands	r2, r4
 800259e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80025a0:	4322      	orrs	r2, r4
 80025a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025a4:	075a      	lsls	r2, r3, #29
 80025a6:	d506      	bpl.n	80025b6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025a8:	6801      	ldr	r1, [r0, #0]
 80025aa:	4c21      	ldr	r4, [pc, #132]	; (8002630 <UART_AdvFeatureConfig+0xb4>)
 80025ac:	684a      	ldr	r2, [r1, #4]
 80025ae:	4022      	ands	r2, r4
 80025b0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80025b2:	4322      	orrs	r2, r4
 80025b4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025b6:	071a      	lsls	r2, r3, #28
 80025b8:	d506      	bpl.n	80025c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025ba:	6801      	ldr	r1, [r0, #0]
 80025bc:	4c1d      	ldr	r4, [pc, #116]	; (8002634 <UART_AdvFeatureConfig+0xb8>)
 80025be:	684a      	ldr	r2, [r1, #4]
 80025c0:	4022      	ands	r2, r4
 80025c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80025c4:	4322      	orrs	r2, r4
 80025c6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025c8:	06da      	lsls	r2, r3, #27
 80025ca:	d506      	bpl.n	80025da <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025cc:	6801      	ldr	r1, [r0, #0]
 80025ce:	4c1a      	ldr	r4, [pc, #104]	; (8002638 <UART_AdvFeatureConfig+0xbc>)
 80025d0:	688a      	ldr	r2, [r1, #8]
 80025d2:	4022      	ands	r2, r4
 80025d4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80025d6:	4322      	orrs	r2, r4
 80025d8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025da:	069a      	lsls	r2, r3, #26
 80025dc:	d506      	bpl.n	80025ec <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025de:	6801      	ldr	r1, [r0, #0]
 80025e0:	4c16      	ldr	r4, [pc, #88]	; (800263c <UART_AdvFeatureConfig+0xc0>)
 80025e2:	688a      	ldr	r2, [r1, #8]
 80025e4:	4022      	ands	r2, r4
 80025e6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80025e8:	4322      	orrs	r2, r4
 80025ea:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025ec:	065a      	lsls	r2, r3, #25
 80025ee:	d510      	bpl.n	8002612 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025f0:	6801      	ldr	r1, [r0, #0]
 80025f2:	4d13      	ldr	r5, [pc, #76]	; (8002640 <UART_AdvFeatureConfig+0xc4>)
 80025f4:	684a      	ldr	r2, [r1, #4]
 80025f6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80025f8:	402a      	ands	r2, r5
 80025fa:	4322      	orrs	r2, r4
 80025fc:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	0352      	lsls	r2, r2, #13
 8002602:	4294      	cmp	r4, r2
 8002604:	d105      	bne.n	8002612 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002606:	684a      	ldr	r2, [r1, #4]
 8002608:	4c0e      	ldr	r4, [pc, #56]	; (8002644 <UART_AdvFeatureConfig+0xc8>)
 800260a:	4022      	ands	r2, r4
 800260c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800260e:	4322      	orrs	r2, r4
 8002610:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002612:	061b      	lsls	r3, r3, #24
 8002614:	d506      	bpl.n	8002624 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002616:	6802      	ldr	r2, [r0, #0]
 8002618:	490b      	ldr	r1, [pc, #44]	; (8002648 <UART_AdvFeatureConfig+0xcc>)
 800261a:	6853      	ldr	r3, [r2, #4]
 800261c:	400b      	ands	r3, r1
 800261e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002620:	430b      	orrs	r3, r1
 8002622:	6053      	str	r3, [r2, #4]
  }
}
 8002624:	bd30      	pop	{r4, r5, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	fffdffff 	.word	0xfffdffff
 800262c:	fffeffff 	.word	0xfffeffff
 8002630:	fffbffff 	.word	0xfffbffff
 8002634:	ffff7fff 	.word	0xffff7fff
 8002638:	ffffefff 	.word	0xffffefff
 800263c:	ffffdfff 	.word	0xffffdfff
 8002640:	ffefffff 	.word	0xffefffff
 8002644:	ff9fffff 	.word	0xff9fffff
 8002648:	fff7ffff 	.word	0xfff7ffff

0800264c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	0004      	movs	r4, r0
 8002650:	000e      	movs	r6, r1
 8002652:	0015      	movs	r5, r2
 8002654:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002656:	6822      	ldr	r2, [r4, #0]
 8002658:	69d3      	ldr	r3, [r2, #28]
 800265a:	4033      	ands	r3, r6
 800265c:	1b9b      	subs	r3, r3, r6
 800265e:	4259      	negs	r1, r3
 8002660:	414b      	adcs	r3, r1
 8002662:	42ab      	cmp	r3, r5
 8002664:	d001      	beq.n	800266a <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002666:	2000      	movs	r0, #0
 8002668:	e01b      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800266a:	9b06      	ldr	r3, [sp, #24]
 800266c:	3301      	adds	r3, #1
 800266e:	d0f3      	beq.n	8002658 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002670:	f7fe fb4c 	bl	8000d0c <HAL_GetTick>
 8002674:	9b06      	ldr	r3, [sp, #24]
 8002676:	1bc0      	subs	r0, r0, r7
 8002678:	4298      	cmp	r0, r3
 800267a:	d801      	bhi.n	8002680 <UART_WaitOnFlagUntilTimeout+0x34>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ea      	bne.n	8002656 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <UART_WaitOnFlagUntilTimeout+0x58>)
 8002684:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8002686:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002688:	400a      	ands	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	31a3      	adds	r1, #163	; 0xa3
 8002690:	31ff      	adds	r1, #255	; 0xff
 8002692:	438a      	bics	r2, r1
 8002694:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002696:	2320      	movs	r3, #32
 8002698:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800269a:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800269c:	2300      	movs	r3, #0
 800269e:	3470      	adds	r4, #112	; 0x70
 80026a0:	7023      	strb	r3, [r4, #0]
}
 80026a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026a4:	fffffe5f 	.word	0xfffffe5f

080026a8 <HAL_UART_Transmit>:
{
 80026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026aa:	b087      	sub	sp, #28
 80026ac:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80026ae:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80026b0:	0004      	movs	r4, r0
 80026b2:	000d      	movs	r5, r1
 80026b4:	0017      	movs	r7, r2
    return HAL_BUSY;
 80026b6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d149      	bne.n	8002750 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 80026bc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80026be:	2900      	cmp	r1, #0
 80026c0:	d046      	beq.n	8002750 <HAL_UART_Transmit+0xa8>
 80026c2:	2a00      	cmp	r2, #0
 80026c4:	d044      	beq.n	8002750 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	68a2      	ldr	r2, [r4, #8]
 80026ca:	015b      	lsls	r3, r3, #5
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d104      	bne.n	80026da <HAL_UART_Transmit+0x32>
 80026d0:	6923      	ldr	r3, [r4, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 80026d6:	4201      	tst	r1, r0
 80026d8:	d13a      	bne.n	8002750 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80026da:	0023      	movs	r3, r4
 80026dc:	3370      	adds	r3, #112	; 0x70
 80026de:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80026e0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80026e2:	2a01      	cmp	r2, #1
 80026e4:	d034      	beq.n	8002750 <HAL_UART_Transmit+0xa8>
 80026e6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80026ea:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ec:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ee:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026f0:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80026f2:	f7fe fb0b 	bl	8000d0c <HAL_GetTick>
    huart->TxXferSize  = Size;
 80026f6:	0023      	movs	r3, r4
 80026f8:	3350      	adds	r3, #80	; 0x50
 80026fa:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80026fc:	3302      	adds	r3, #2
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002706:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	429a      	cmp	r2, r3
 800270c:	d104      	bne.n	8002718 <HAL_UART_Transmit+0x70>
 800270e:	6923      	ldr	r3, [r4, #16]
 8002710:	42b3      	cmp	r3, r6
 8002712:	d101      	bne.n	8002718 <HAL_UART_Transmit+0x70>
 8002714:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002716:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002718:	0023      	movs	r3, r4
 800271a:	3352      	adds	r3, #82	; 0x52
 800271c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800271e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002720:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8002726:	2a00      	cmp	r2, #0
 8002728:	d10a      	bne.n	8002740 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	2140      	movs	r1, #64	; 0x40
 800272c:	0020      	movs	r0, r4
 800272e:	f7ff ff8d 	bl	800264c <UART_WaitOnFlagUntilTimeout>
 8002732:	2800      	cmp	r0, #0
 8002734:	d10b      	bne.n	800274e <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8002736:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002738:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800273a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 800273c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800273e:	e007      	b.n	8002750 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002740:	2200      	movs	r2, #0
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	0020      	movs	r0, r4
 8002746:	f7ff ff81 	bl	800264c <UART_WaitOnFlagUntilTimeout>
 800274a:	2800      	cmp	r0, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
}
 8002750:	b007      	add	sp, #28
 8002752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002754:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002756:	2d00      	cmp	r5, #0
 8002758:	d10b      	bne.n	8002772 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800275a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800275c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800275e:	05db      	lsls	r3, r3, #23
 8002760:	0ddb      	lsrs	r3, r3, #23
 8002762:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002764:	9b03      	ldr	r3, [sp, #12]
 8002766:	9a03      	ldr	r2, [sp, #12]
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	3b01      	subs	r3, #1
 800276c:	b29b      	uxth	r3, r3
 800276e:	8013      	strh	r3, [r2, #0]
 8002770:	e7d2      	b.n	8002718 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002772:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002774:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002776:	6293      	str	r3, [r2, #40]	; 0x28
 8002778:	e7f4      	b.n	8002764 <HAL_UART_Transmit+0xbc>
	...

0800277c <UART_CheckIdleState>:
{
 800277c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277e:	2600      	movs	r6, #0
{
 8002780:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002782:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002784:	f7fe fac2 	bl	8000d0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002788:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800278a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	071b      	lsls	r3, r3, #28
 8002790:	d415      	bmi.n	80027be <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	075b      	lsls	r3, r3, #29
 8002798:	d50a      	bpl.n	80027b0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <UART_CheckIdleState+0x5c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	03c9      	lsls	r1, r1, #15
 80027a4:	002b      	movs	r3, r5
 80027a6:	0020      	movs	r0, r4
 80027a8:	f7ff ff50 	bl	800264c <UART_WaitOnFlagUntilTimeout>
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d111      	bne.n	80027d4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80027b2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80027b4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80027b6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80027b8:	3470      	adds	r4, #112	; 0x70
 80027ba:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80027bc:	e00b      	b.n	80027d6 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <UART_CheckIdleState+0x5c>)
 80027c2:	0032      	movs	r2, r6
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	0389      	lsls	r1, r1, #14
 80027c8:	0003      	movs	r3, r0
 80027ca:	0020      	movs	r0, r4
 80027cc:	f7ff ff3e 	bl	800264c <UART_WaitOnFlagUntilTimeout>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d0de      	beq.n	8002792 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80027d4:	2003      	movs	r0, #3
}
 80027d6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80027d8:	01ffffff 	.word	0x01ffffff

080027dc <HAL_UART_Init>:
{
 80027dc:	b510      	push	{r4, lr}
 80027de:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80027e2:	2001      	movs	r0, #1
}
 80027e4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80027ec:	0002      	movs	r2, r0
 80027ee:	3270      	adds	r2, #112	; 0x70
 80027f0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80027f2:	f7fe f96d 	bl	8000ad0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80027f6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80027f8:	2101      	movs	r1, #1
 80027fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80027fe:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002800:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002802:	438b      	bics	r3, r1
 8002804:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002806:	f7ff fda3 	bl	8002350 <UART_SetConfig>
 800280a:	2801      	cmp	r0, #1
 800280c:	d0e9      	beq.n	80027e2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002814:	0020      	movs	r0, r4
 8002816:	f7ff feb1 	bl	800257c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <HAL_UART_Init+0x60>)
 800281e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002820:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002824:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	438a      	bics	r2, r1
 800282c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800282e:	2201      	movs	r2, #1
 8002830:	6819      	ldr	r1, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002836:	f7ff ffa1 	bl	800277c <UART_CheckIdleState>
 800283a:	e7d3      	b.n	80027e4 <HAL_UART_Init+0x8>
 800283c:	ffffb7ff 	.word	0xffffb7ff

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	2600      	movs	r6, #0
 8002844:	4d0c      	ldr	r5, [pc, #48]	; (8002878 <__libc_init_array+0x38>)
 8002846:	4c0d      	ldr	r4, [pc, #52]	; (800287c <__libc_init_array+0x3c>)
 8002848:	1b64      	subs	r4, r4, r5
 800284a:	10a4      	asrs	r4, r4, #2
 800284c:	42a6      	cmp	r6, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	2600      	movs	r6, #0
 8002852:	f000 f881 	bl	8002958 <_init>
 8002856:	4d0a      	ldr	r5, [pc, #40]	; (8002880 <__libc_init_array+0x40>)
 8002858:	4c0a      	ldr	r4, [pc, #40]	; (8002884 <__libc_init_array+0x44>)
 800285a:	1b64      	subs	r4, r4, r5
 800285c:	10a4      	asrs	r4, r4, #2
 800285e:	42a6      	cmp	r6, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	00b3      	lsls	r3, r6, #2
 8002866:	58eb      	ldr	r3, [r5, r3]
 8002868:	4798      	blx	r3
 800286a:	3601      	adds	r6, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	00b3      	lsls	r3, r6, #2
 8002870:	58eb      	ldr	r3, [r5, r3]
 8002872:	4798      	blx	r3
 8002874:	3601      	adds	r6, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	080029e4 	.word	0x080029e4
 800287c:	080029e4 	.word	0x080029e4
 8002880:	080029e4 	.word	0x080029e4
 8002884:	080029e8 	.word	0x080029e8

08002888 <__itoa>:
 8002888:	1e93      	subs	r3, r2, #2
 800288a:	b510      	push	{r4, lr}
 800288c:	000c      	movs	r4, r1
 800288e:	2b22      	cmp	r3, #34	; 0x22
 8002890:	d904      	bls.n	800289c <__itoa+0x14>
 8002892:	2300      	movs	r3, #0
 8002894:	001c      	movs	r4, r3
 8002896:	700b      	strb	r3, [r1, #0]
 8002898:	0020      	movs	r0, r4
 800289a:	bd10      	pop	{r4, pc}
 800289c:	2a0a      	cmp	r2, #10
 800289e:	d109      	bne.n	80028b4 <__itoa+0x2c>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	da07      	bge.n	80028b4 <__itoa+0x2c>
 80028a4:	232d      	movs	r3, #45	; 0x2d
 80028a6:	700b      	strb	r3, [r1, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	4240      	negs	r0, r0
 80028ac:	1861      	adds	r1, r4, r1
 80028ae:	f000 f817 	bl	80028e0 <__utoa>
 80028b2:	e7f1      	b.n	8002898 <__itoa+0x10>
 80028b4:	2100      	movs	r1, #0
 80028b6:	e7f9      	b.n	80028ac <__itoa+0x24>

080028b8 <itoa>:
 80028b8:	b510      	push	{r4, lr}
 80028ba:	f7ff ffe5 	bl	8002888 <__itoa>
 80028be:	bd10      	pop	{r4, pc}

080028c0 <memset>:
 80028c0:	0003      	movs	r3, r0
 80028c2:	1812      	adds	r2, r2, r0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d100      	bne.n	80028ca <memset+0xa>
 80028c8:	4770      	bx	lr
 80028ca:	7019      	strb	r1, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	e7f9      	b.n	80028c4 <memset+0x4>

080028d0 <strcpy>:
 80028d0:	0003      	movs	r3, r0
 80028d2:	780a      	ldrb	r2, [r1, #0]
 80028d4:	3101      	adds	r1, #1
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d1f9      	bne.n	80028d2 <strcpy+0x2>
 80028de:	4770      	bx	lr

080028e0 <__utoa>:
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	0017      	movs	r7, r2
 80028e4:	b08d      	sub	sp, #52	; 0x34
 80028e6:	2225      	movs	r2, #37	; 0x25
 80028e8:	0006      	movs	r6, r0
 80028ea:	000d      	movs	r5, r1
 80028ec:	a802      	add	r0, sp, #8
 80028ee:	4914      	ldr	r1, [pc, #80]	; (8002940 <__utoa+0x60>)
 80028f0:	f000 f828 	bl	8002944 <memcpy>
 80028f4:	aa02      	add	r2, sp, #8
 80028f6:	1ebb      	subs	r3, r7, #2
 80028f8:	2400      	movs	r4, #0
 80028fa:	9201      	str	r2, [sp, #4]
 80028fc:	2b22      	cmp	r3, #34	; 0x22
 80028fe:	d905      	bls.n	800290c <__utoa+0x2c>
 8002900:	702c      	strb	r4, [r5, #0]
 8002902:	0025      	movs	r5, r4
 8002904:	0028      	movs	r0, r5
 8002906:	b00d      	add	sp, #52	; 0x34
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290a:	0014      	movs	r4, r2
 800290c:	0030      	movs	r0, r6
 800290e:	0039      	movs	r1, r7
 8002910:	f7fd fc92 	bl	8000238 <__aeabi_uidivmod>
 8002914:	4684      	mov	ip, r0
 8002916:	9801      	ldr	r0, [sp, #4]
 8002918:	1c62      	adds	r2, r4, #1
 800291a:	18ab      	adds	r3, r5, r2
 800291c:	5c41      	ldrb	r1, [r0, r1]
 800291e:	1e5e      	subs	r6, r3, #1
 8002920:	7031      	strb	r1, [r6, #0]
 8002922:	4666      	mov	r6, ip
 8002924:	2e00      	cmp	r6, #0
 8002926:	d1f0      	bne.n	800290a <__utoa+0x2a>
 8002928:	701e      	strb	r6, [r3, #0]
 800292a:	002b      	movs	r3, r5
 800292c:	1b5a      	subs	r2, r3, r5
 800292e:	4294      	cmp	r4, r2
 8002930:	dde8      	ble.n	8002904 <__utoa+0x24>
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	5d29      	ldrb	r1, [r5, r4]
 8002936:	7019      	strb	r1, [r3, #0]
 8002938:	552a      	strb	r2, [r5, r4]
 800293a:	3301      	adds	r3, #1
 800293c:	3c01      	subs	r4, #1
 800293e:	e7f5      	b.n	800292c <__utoa+0x4c>
 8002940:	080029b6 	.word	0x080029b6

08002944 <memcpy>:
 8002944:	2300      	movs	r3, #0
 8002946:	b510      	push	{r4, lr}
 8002948:	429a      	cmp	r2, r3
 800294a:	d100      	bne.n	800294e <memcpy+0xa>
 800294c:	bd10      	pop	{r4, pc}
 800294e:	5ccc      	ldrb	r4, [r1, r3]
 8002950:	54c4      	strb	r4, [r0, r3]
 8002952:	3301      	adds	r3, #1
 8002954:	e7f8      	b.n	8002948 <memcpy+0x4>
	...

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
